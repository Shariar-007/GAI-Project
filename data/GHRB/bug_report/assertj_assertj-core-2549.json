{
  "issue_id": 2547,
  "issue_url": "https://github.com/assertj/assertj/issues/2547",
  "title": "Regression in `AbstractMapAssert#containsOnlyKeys` with Spring's `MultiValueMapAdapter`",
  "description": "<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">We saw this when updating from AssertJ 3.19.0 to 3.20.0. It appears that <code class=\"notranslate\">AbstractMapAssert#containsOnlyKeys</code> is mutating the map that we're asserting on, which leads to test failures in our case. This is happening on an instance of <code class=\"notranslate\">org.springframework.util.MultiValueMapAdapter</code></p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var underlyingMap = new HashMap<String, List<String>>();\nunderlyingMap.put(\"Hello\", List.of(\"World\"));\n\nvar multiValueMap = CollectionUtils.toMultiValueMap(underlyingMap);\n// This assertion passes\nassertThat(multiValueMap).containsOnlyKeys(\"Hello\");\n// This assertion fails, as `multiValueMap` and `underlyingMap` are now empty\nassertThat(multiValueMap).containsOnlyKeys(\"Hello\");\"><pre><span class=\"pl-smi\">var</span> <span class=\"pl-s1\">underlyingMap</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span><<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">String</span>>>();\n<span class=\"pl-s1\">underlyingMap</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s\">\"Hello\"</span>, <span class=\"pl-s1\">List</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"World\"</span>));\n\n<span class=\"pl-smi\">var</span> <span class=\"pl-s1\">multiValueMap</span> = <span class=\"pl-s1\">CollectionUtils</span>.<span class=\"pl-en\">toMultiValueMap</span>(<span class=\"pl-s1\">underlyingMap</span>);\n<span class=\"pl-c\">// This assertion passes</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">multiValueMap</span>).<span class=\"pl-en\">containsOnlyKeys</span>(<span class=\"pl-s\">\"Hello\"</span>);\n<span class=\"pl-c\">// This assertion fails, as `multiValueMap` and `underlyingMap` are now empty</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">multiValueMap</span>).<span class=\"pl-en\">containsOnlyKeys</span>(<span class=\"pl-s\">\"Hello\"</span>);</pre></div>\n<p dir=\"auto\">The issue seems to have been introduced in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"855276721\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2167\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/assertj/assertj/pull/2167/hovercard\" href=\"https://github.com/assertj/assertj/pull/2167\">#2167</a>, and is caused by <a href=\"https://github.com/assertj/assertj-core/pull/2167/files#diff-abf21eb7e9d518345dcc39f1097da30169084ee0a538e0b174fba36807cf7386R397\">this</a> use of <code class=\"notranslate\">Map#remove</code> on a \"clone\" of the <code class=\"notranslate\">Map</code> being asserted on. In our case that <code class=\"notranslate\">Map</code> is a Spring <code class=\"notranslate\">MultiValueMapAdapter</code>, which delegates operations to the underlying <code class=\"notranslate\">Map</code> that it was constructed from. The <code class=\"notranslate\">remove</code> call on the clone delegates to <code class=\"notranslate\">multiValueMap#remove</code> which in turn delegates to <code class=\"notranslate\">underlyingMap#remove</code>.</p>",
  "description_text": "Summary\nWe saw this when updating from AssertJ 3.19.0 to 3.20.0. It appears that AbstractMapAssert#containsOnlyKeys is mutating the map that we're asserting on, which leads to test failures in our case. This is happening on an instance of org.springframework.util.MultiValueMapAdapter\nExample\nvar underlyingMap = new HashMap<String, List<String>>();\nunderlyingMap.put(\"Hello\", List.of(\"World\"));\n\nvar multiValueMap = CollectionUtils.toMultiValueMap(underlyingMap);\n// This assertion passes\nassertThat(multiValueMap).containsOnlyKeys(\"Hello\");\n// This assertion fails, as `multiValueMap` and `underlyingMap` are now empty\nassertThat(multiValueMap).containsOnlyKeys(\"Hello\");\nThe issue seems to have been introduced in #2167, and is caused by this use of Map#remove on a \"clone\" of the Map being asserted on. In our case that Map is a Spring MultiValueMapAdapter, which delegates operations to the underlying Map that it was constructed from. The remove call on the clone delegates to multiValueMap#remove which in turn delegates to underlyingMap#remove."
}