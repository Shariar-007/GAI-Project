{
  "issue_id": 847,
  "issue_url": "https://github.com/google/gson/issues/847",
  "title": "LazilyParsedNumber being serialised as JsonObject",
  "description": "<p dir=\"auto\">When I deserialise a JSON object into a map and back into JSON it seems to serialise the <code class=\"notranslate\">LazilyParsedNumber</code> as an object.</p>\n<p dir=\"auto\">JSON being parsed:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n    \"class\": \"Setting\",\n    \"event\": 4,\n    \"severity\": 2,\n    \"notify\": true,\n    \"sound\": false,\n    \"feeds\": [\n        {\n            \"code\": \"USGS\",\n            \"language\": \"eng\"\n        }\n    ]\n}\"><pre><span class=\"pl-kos\">{</span>\n    <span class=\"pl-s\">\"class\"</span>: <span class=\"pl-s\">\"Setting\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"event\"</span>: <span class=\"pl-c1\">4</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"severity\"</span>: <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"notify\"</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"sound\"</span>: <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"feeds\"</span>: <span class=\"pl-kos\">[</span>\n        <span class=\"pl-kos\">{</span>\n            <span class=\"pl-s\">\"code\"</span>: <span class=\"pl-s\">\"USGS\"</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-s\">\"language\"</span>: <span class=\"pl-s\">\"eng\"</span>\n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">]</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Class JSON is being parsed into</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@NoArgsConstructor\n@AllArgsConstructor(suppressConstructorProperties = true)\n@Accessors(chain = true) @Data\npublic class MonitoredLocationSetting\n{\n    @SerializedName(\"class\") private final String className = \"Setting\";\n\n    protected int event = -1;\n    protected Map<String, Object> settings = new HashMap<>();\n    protected List<LocationSettingFeed> feeds = new ArrayList<>();\n}\"><pre><span class=\"pl-c1\">@</span><span class=\"pl-c1\">NoArgsConstructor</span>\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">AllArgsConstructor</span>(<span class=\"pl-s1\">suppressConstructorProperties</span> = <span class=\"pl-c1\">true</span>)\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Accessors</span>(<span class=\"pl-s1\">chain</span> = <span class=\"pl-c1\">true</span>) <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Data</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">MonitoredLocationSetting</span>\n{\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">SerializedName</span>(<span class=\"pl-s\">\"class\"</span>) <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">className</span> = <span class=\"pl-s\">\"Setting\"</span>;\n\n    <span class=\"pl-k\">protected</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">event</span> = -<span class=\"pl-c1\">1</span>;\n    <span class=\"pl-k\">protected</span> <span class=\"pl-smi\">Map</span><<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>> <span class=\"pl-s1\">settings</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span><>();\n    <span class=\"pl-k\">protected</span> <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">LocationSettingFeed</span>> <span class=\"pl-s1\">feeds</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ArrayList</span><>();\n}</pre></div>\n<p dir=\"auto\">Basically all im doing is deserialising all fields except \"event\", \"feeds\", and \"class\" into the <code class=\"notranslate\">settings</code> map using the following adapters</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"builder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonDeserializer<MonitoredLocationSetting>()\n{\n    @Override public MonitoredLocationSetting deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException\n    {\n        MonitoredLocationSetting setting = new Gson().fromJson(json, typeOfT);\n\n        if (setting != null)\n        {\n            // Ignore for setting.settings\n            List<String> fieldsToIgnore = new ArrayList<String>(Arrays.asList(new String[]{\"event\", \"feeds\", \"class\"}));\n            Iterator<Map.Entry<String, JsonElement>> entries = json.getAsJsonObject().entrySet().iterator();\n            while (entries.hasNext())\n            {\n                Map.Entry<String, JsonElement> next = entries.next();\n\n                if (!fieldsToIgnore.contains(next.getKey()))\n                {\n                    if (next.getValue().isJsonPrimitive())\n                    {\n                        if (next.getValue().getAsJsonPrimitive().isBoolean())\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsBoolean());\n                        }\n                        else if (next.getValue().getAsJsonPrimitive().isNumber())\n                        {\n                            // This deserialises as LazilyParsedNumber\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsNumber());\n                        }\n                        else if (next.getValue().getAsJsonPrimitive().isString())\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsString());\n                        }\n                        else\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue());\n                        }\n                    }\n                }\n            }\n        }\n\n        return setting;\n    }\n});\nbuilder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonSerializer<MonitoredLocationSetting>()\n{\n    @Override public JsonElement serialize(MonitoredLocationSetting src, Type typeOfSrc, JsonSerializationContext context)\n    {\n        JsonObject serialised = (JsonObject)new Gson().toJsonTree(src);\n        // After the above line is called the following JSON is produced\n        /*\n                {\n                    \"class\": \"Setting\",\n                    \"event\": 4,\n                    \"feeds\": [\n                        {\n                            \"code\": \"USGS\",\n                            \"language\": \"eng\"\n                        }\n                    ],\n                    \"settings\": {\n                        \"notify\": true,\n                        \"severity\": {  <-- Issue here\n                            \"value\": \"2\"\n                        },\n                        \"sound\": false\n                    }\n                }\n        */\n        JsonObject setting = serialised.get(\"settings\").getAsJsonObject();\n\n        // Ignore for setting.settings\n        Iterator<Map.Entry<String, JsonElement>> entries = setting.entrySet().iterator();\n        while (entries.hasNext())\n        {\n            Map.Entry<String, JsonElement> next = entries.next();\n            serialised.add(next.getKey(), next.getValue());\n        }\n\n        serialised.remove(\"settings\");\n        return serialised;\n    }\n});\"><pre><span class=\"pl-s1\">builder</span>.<span class=\"pl-en\">registerTypeAdapter</span>(<span class=\"pl-smi\">MonitoredLocationSetting</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonDeserializer</span><<span class=\"pl-smi\">MonitoredLocationSetting</span>>()\n{\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span> <span class=\"pl-k\">public</span> <span class=\"pl-smi\">MonitoredLocationSetting</span> <span class=\"pl-en\">deserialize</span>(<span class=\"pl-smi\">JsonElement</span> <span class=\"pl-s1\">json</span>, <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">typeOfT</span>, <span class=\"pl-smi\">JsonDeserializationContext</span> <span class=\"pl-s1\">context</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonParseException</span>\n    {\n        <span class=\"pl-smi\">MonitoredLocationSetting</span> <span class=\"pl-s1\">setting</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">fromJson</span>(<span class=\"pl-s1\">json</span>, <span class=\"pl-s1\">typeOfT</span>);\n\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">setting</span> != <span class=\"pl-c1\">null</span>)\n        {\n            <span class=\"pl-c\">// Ignore for setting.settings</span>\n            <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">String</span>> <span class=\"pl-s1\">fieldsToIgnore</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ArrayList</span><<span class=\"pl-smi\">String</span>>(<span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">String</span>[]{<span class=\"pl-s\">\"event\"</span>, <span class=\"pl-s\">\"feeds\"</span>, <span class=\"pl-s\">\"class\"</span>}));\n            <span class=\"pl-smi\">Iterator</span><<span class=\"pl-smi\">Map</span>.<span class=\"pl-smi\">Entry</span><<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">JsonElement</span>>> <span class=\"pl-s1\">entries</span> = <span class=\"pl-s1\">json</span>.<span class=\"pl-en\">getAsJsonObject</span>().<span class=\"pl-en\">entrySet</span>().<span class=\"pl-en\">iterator</span>();\n            <span class=\"pl-k\">while</span> (<span class=\"pl-s1\">entries</span>.<span class=\"pl-en\">hasNext</span>())\n            {\n                <span class=\"pl-smi\">Map</span>.<span class=\"pl-smi\">Entry</span><<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">JsonElement</span>> <span class=\"pl-s1\">next</span> = <span class=\"pl-s1\">entries</span>.<span class=\"pl-en\">next</span>();\n\n                <span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">fieldsToIgnore</span>.<span class=\"pl-en\">contains</span>(<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getKey</span>()))\n                {\n                    <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">isJsonPrimitive</span>())\n                    {\n                        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">getAsJsonPrimitive</span>().<span class=\"pl-en\">isBoolean</span>())\n                        {\n                            <span class=\"pl-s1\">setting</span>.<span class=\"pl-en\">getSettings</span>().<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getKey</span>(), <span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">getAsBoolean</span>());\n                        }\n                        <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">getAsJsonPrimitive</span>().<span class=\"pl-en\">isNumber</span>())\n                        {\n                            <span class=\"pl-c\">// This deserialises as LazilyParsedNumber</span>\n                            <span class=\"pl-s1\">setting</span>.<span class=\"pl-en\">getSettings</span>().<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getKey</span>(), <span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">getAsNumber</span>());\n                        }\n                        <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">getAsJsonPrimitive</span>().<span class=\"pl-en\">isString</span>())\n                        {\n                            <span class=\"pl-s1\">setting</span>.<span class=\"pl-en\">getSettings</span>().<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getKey</span>(), <span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">getAsString</span>());\n                        }\n                        <span class=\"pl-k\">else</span>\n                        {\n                            <span class=\"pl-s1\">setting</span>.<span class=\"pl-en\">getSettings</span>().<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getKey</span>(), <span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>());\n                        }\n                    }\n                }\n            }\n        }\n\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">setting</span>;\n    }\n});\n<span class=\"pl-s1\">builder</span>.<span class=\"pl-en\">registerTypeAdapter</span>(<span class=\"pl-smi\">MonitoredLocationSetting</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonSerializer</span><<span class=\"pl-smi\">MonitoredLocationSetting</span>>()\n{\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span> <span class=\"pl-k\">public</span> <span class=\"pl-smi\">JsonElement</span> <span class=\"pl-en\">serialize</span>(<span class=\"pl-smi\">MonitoredLocationSetting</span> <span class=\"pl-s1\">src</span>, <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">typeOfSrc</span>, <span class=\"pl-smi\">JsonSerializationContext</span> <span class=\"pl-s1\">context</span>)\n    {\n        <span class=\"pl-smi\">JsonObject</span> <span class=\"pl-s1\">serialised</span> = (<span class=\"pl-smi\">JsonObject</span>)<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">toJsonTree</span>(<span class=\"pl-s1\">src</span>);\n        <span class=\"pl-c\">// After the above line is called the following JSON is produced</span>\n        <span class=\"pl-c\">/*</span>\n<span class=\"pl-c\">                {</span>\n<span class=\"pl-c\">                    \"class\": \"Setting\",</span>\n<span class=\"pl-c\">                    \"event\": 4,</span>\n<span class=\"pl-c\">                    \"feeds\": [</span>\n<span class=\"pl-c\">                        {</span>\n<span class=\"pl-c\">                            \"code\": \"USGS\",</span>\n<span class=\"pl-c\">                            \"language\": \"eng\"</span>\n<span class=\"pl-c\">                        }</span>\n<span class=\"pl-c\">                    ],</span>\n<span class=\"pl-c\">                    \"settings\": {</span>\n<span class=\"pl-c\">                        \"notify\": true,</span>\n<span class=\"pl-c\">                        \"severity\": {  <-- Issue here</span>\n<span class=\"pl-c\">                            \"value\": \"2\"</span>\n<span class=\"pl-c\">                        },</span>\n<span class=\"pl-c\">                        \"sound\": false</span>\n<span class=\"pl-c\">                    }</span>\n<span class=\"pl-c\">                }</span>\n<span class=\"pl-c\">        */</span>\n        <span class=\"pl-smi\">JsonObject</span> <span class=\"pl-s1\">setting</span> = <span class=\"pl-s1\">serialised</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s\">\"settings\"</span>).<span class=\"pl-en\">getAsJsonObject</span>();\n\n        <span class=\"pl-c\">// Ignore for setting.settings</span>\n        <span class=\"pl-smi\">Iterator</span><<span class=\"pl-smi\">Map</span>.<span class=\"pl-smi\">Entry</span><<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">JsonElement</span>>> <span class=\"pl-s1\">entries</span> = <span class=\"pl-s1\">setting</span>.<span class=\"pl-en\">entrySet</span>().<span class=\"pl-en\">iterator</span>();\n        <span class=\"pl-k\">while</span> (<span class=\"pl-s1\">entries</span>.<span class=\"pl-en\">hasNext</span>())\n        {\n            <span class=\"pl-smi\">Map</span>.<span class=\"pl-smi\">Entry</span><<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">JsonElement</span>> <span class=\"pl-s1\">next</span> = <span class=\"pl-s1\">entries</span>.<span class=\"pl-en\">next</span>();\n            <span class=\"pl-s1\">serialised</span>.<span class=\"pl-en\">add</span>(<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getKey</span>(), <span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>());\n        }\n\n        <span class=\"pl-s1\">serialised</span>.<span class=\"pl-en\">remove</span>(<span class=\"pl-s\">\"settings\"</span>);\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">serialised</span>;\n    }\n});</pre></div>\n<p dir=\"auto\">From what I can see, <em>technically</em> this is correct because as far as Gson is concerned <code class=\"notranslate\">LazilyParsedNumber</code> IS an object and not a 'primitive', however, doing a straight convert from and then back to json causes a problem because the object isnt parsed back as a primitive after being read as a primitive (Number)</p>",
  "description_text": "When I deserialise a JSON object into a map and back into JSON it seems to serialise the LazilyParsedNumber as an object.\nJSON being parsed:\n{\n    \"class\": \"Setting\",\n    \"event\": 4,\n    \"severity\": 2,\n    \"notify\": true,\n    \"sound\": false,\n    \"feeds\": [\n        {\n            \"code\": \"USGS\",\n            \"language\": \"eng\"\n        }\n    ]\n}\nClass JSON is being parsed into\n settings = new HashMap<>();\n    protected List feeds = new ArrayList<>();\n}\">@NoArgsConstructor\n@AllArgsConstructor(suppressConstructorProperties = true)\n@Accessors(chain = true) @Data\npublic class MonitoredLocationSetting\n{\n    @SerializedName(\"class\") private final String className = \"Setting\";\n\n    protected int event = -1;\n    protected Map<String, Object> settings = new HashMap<>();\n    protected List<LocationSettingFeed> feeds = new ArrayList<>();\n}\nBasically all im doing is deserialising all fields except \"event\", \"feeds\", and \"class\" into the settings map using the following adapters\n> entries = json.getAsJsonObject().entrySet().iterator();\n            while (entries.hasNext())\n            {\n                Map.Entry next = entries.next();\n\n                if (!fieldsToIgnore.contains(next.getKey()))\n                {\n                    if (next.getValue().isJsonPrimitive())\n                    {\n                        if (next.getValue().getAsJsonPrimitive().isBoolean())\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsBoolean());\n                        }\n                        else if (next.getValue().getAsJsonPrimitive().isNumber())\n                        {\n                            // This deserialises as LazilyParsedNumber\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsNumber());\n                        }\n                        else if (next.getValue().getAsJsonPrimitive().isString())\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsString());\n                        }\n                        else\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue());\n                        }\n                    }\n                }\n            }\n        }\n\n        return setting;\n    }\n});\nbuilder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonSerializer()\n{\n    @Override public JsonElement serialize(MonitoredLocationSetting src, Type typeOfSrc, JsonSerializationContext context)\n    {\n        JsonObject serialised = (JsonObject)new Gson().toJsonTree(src);\n        // After the above line is called the following JSON is produced\n        /*\n                {\n                    \"class\": \"Setting\",\n                    \"event\": 4,\n                    \"feeds\": [\n                        {\n                            \"code\": \"USGS\",\n                            \"language\": \"eng\"\n                        }\n                    ],\n                    \"settings\": {\n                        \"notify\": true,\n                        \"severity\": {  <-- Issue here\n                            \"value\": \"2\"\n                        },\n                        \"sound\": false\n                    }\n                }\n        */\n        JsonObject setting = serialised.get(\"settings\").getAsJsonObject();\n\n        // Ignore for setting.settings\n        Iterator> entries = setting.entrySet().iterator();\n        while (entries.hasNext())\n        {\n            Map.Entry next = entries.next();\n            serialised.add(next.getKey(), next.getValue());\n        }\n\n        serialised.remove(\"settings\");\n        return serialised;\n    }\n});\">builder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonDeserializer<MonitoredLocationSetting>()\n{\n    @Override public MonitoredLocationSetting deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException\n    {\n        MonitoredLocationSetting setting = new Gson().fromJson(json, typeOfT);\n\n        if (setting != null)\n        {\n            // Ignore for setting.settings\n            List<String> fieldsToIgnore = new ArrayList<String>(Arrays.asList(new String[]{\"event\", \"feeds\", \"class\"}));\n            Iterator<Map.Entry<String, JsonElement>> entries = json.getAsJsonObject().entrySet().iterator();\n            while (entries.hasNext())\n            {\n                Map.Entry<String, JsonElement> next = entries.next();\n\n                if (!fieldsToIgnore.contains(next.getKey()))\n                {\n                    if (next.getValue().isJsonPrimitive())\n                    {\n                        if (next.getValue().getAsJsonPrimitive().isBoolean())\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsBoolean());\n                        }\n                        else if (next.getValue().getAsJsonPrimitive().isNumber())\n                        {\n                            // This deserialises as LazilyParsedNumber\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsNumber());\n                        }\n                        else if (next.getValue().getAsJsonPrimitive().isString())\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsString());\n                        }\n                        else\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue());\n                        }\n                    }\n                }\n            }\n        }\n\n        return setting;\n    }\n});\nbuilder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonSerializer<MonitoredLocationSetting>()\n{\n    @Override public JsonElement serialize(MonitoredLocationSetting src, Type typeOfSrc, JsonSerializationContext context)\n    {\n        JsonObject serialised = (JsonObject)new Gson().toJsonTree(src);\n        // After the above line is called the following JSON is produced\n        /*\n                {\n                    \"class\": \"Setting\",\n                    \"event\": 4,\n                    \"feeds\": [\n                        {\n                            \"code\": \"USGS\",\n                            \"language\": \"eng\"\n                        }\n                    ],\n                    \"settings\": {\n                        \"notify\": true,\n                        \"severity\": {  <-- Issue here\n                            \"value\": \"2\"\n                        },\n                        \"sound\": false\n                    }\n                }\n        */\n        JsonObject setting = serialised.get(\"settings\").getAsJsonObject();\n\n        // Ignore for setting.settings\n        Iterator<Map.Entry<String, JsonElement>> entries = setting.entrySet().iterator();\n        while (entries.hasNext())\n        {\n            Map.Entry<String, JsonElement> next = entries.next();\n            serialised.add(next.getKey(), next.getValue());\n        }\n\n        serialised.remove(\"settings\");\n        return serialised;\n    }\n});\nFrom what I can see, technically this is correct because as far as Gson is concerned LazilyParsedNumber IS an object and not a 'primitive', however, doing a straight convert from and then back to json causes a problem because the object isnt parsed back as a primitive after being read as a primitive (Number)"
}