{
  "checkstyle_checkstyle-10839": {
    "code_elements": [
      "import java.io.File;",
      "import java.io.IOException;",
      "import java.io.InputStream;",
      "import java.util.EmptyStackException;",
      "public class Test {",
      "public static void main(String[] args) {",
      "try {",
      "System.out.println(args[7]);",
      "File myFile = new File(\"myfile.txt\"); // 1",
      "InputStream stream = myFile.toURL().openStream(); // 2",
      "} catch (IOException  | EmptyStackException e) { // 3,4",
      "}",
      "}",
      "}",
      "import java.io.File;",
      "import java.io.IOException;",
      "import java.io.InputStream;",
      "import java.util.EmptyStackException;",
      "public class Test {",
      "public static void main(String[] args) {",
      "try {",
      "System.out.println(args[7]);",
      "File myFile = new File(\"myfile.txt\"); // 1",
      "InputStream stream = myFile.toURL().openStream(); // 2",
      "} catch (IOException  | EmptyStackException e) { // 3,4",
      "}",
      "}",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "ClassFanOutComplexity",
      "createFullType",
      "CheckUtil"
    ],
    "summary_text": [
      "ClassFanOutComplexity fails to count all classes in multicatch and implements clause, remove unused CheckUtil#createFullType method"
    ],
    "desc_hints": [
      "java.io.InputStream",
      "all.jar",
      "cmdline.html",
      "Test.java",
      "java.util.EmptyStackException",
      "openStream",
      "config.xml",
      "java.io.IOException",
      "config_metrics.html",
      "myfile.txt",
      "checkstyle.sourceforge.io",
      "myFile.toURL",
      "myFile",
      "System.out.println",
      "ClassFanOutComplexity",
      "InputStream",
      "checkstyle.org",
      "java.io.File",
      "EmptyStackException"
    ],
    "desc_text": [
      [
        "I have read check documentation: https://checkstyle.sourceforge.io/config_metrics.html#ClassFanOutComplexity",
        []
      ],
      [
        "I have downloaded the latest checkstyle from: https://checkstyle.org/cmdline.html#Download_and_Run",
        []
      ],
      [
        "I have executed the cli and showed it below, as cli describes the problem better than 1,000 words",
        []
      ],
      [
        "\u279c src cat Test.java",
        []
      ],
      [
        "import java.io.File;",
        "CODE"
      ],
      [
        "import java.io.IOException;",
        "CODE"
      ],
      [
        "import java.io.InputStream;",
        "CODE"
      ],
      [
        "import java.util.EmptyStackException;",
        "CODE"
      ],
      [
        "public class Test {",
        "CODE"
      ],
      [
        "public static void main(String[] args) {",
        "CODE"
      ],
      [
        "try {",
        "CODE"
      ],
      [
        "System.out.println(args[7]);",
        "CODE"
      ],
      [
        "File myFile = new File(\"myfile.txt\"); // 1",
        "CODE"
      ],
      [
        "InputStream stream = myFile.toURL().openStream(); // 2",
        "CODE"
      ],
      [
        "} catch (IOException  | EmptyStackException e) { // 3,4",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "\u279c src java -jar checkstyle-8.43-all.jar -c config.xml Test.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] /home/nick/Desktop/Tester/src/Test.java:6:1: Class Fan-Out Complexity is 3 (max allowed is 1).",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "[ClassFanOutComplexity]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Checkstyle ends with 1 errors.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "\u279c src",
        []
      ],
      [
        "\">",
        []
      ],
      [
        "\u279c src javac Test.java",
        []
      ],
      [
        "Note: Test.java uses or overrides a deprecated API.",
        []
      ],
      [
        "Note: Recompile with -Xlint:deprecation for details.",
        []
      ],
      [
        "\u279c src cat config.xml",
        []
      ],
      [
        "\u279c src cat Test.java",
        []
      ],
      [
        "import java.io.File;",
        "CODE"
      ],
      [
        "import java.io.IOException;",
        "CODE"
      ],
      [
        "import java.io.InputStream;",
        "CODE"
      ],
      [
        "import java.util.EmptyStackException;",
        "CODE"
      ],
      [
        "public class Test {",
        "CODE"
      ],
      [
        "public static void main(String[] args) {",
        "CODE"
      ],
      [
        "try {",
        "CODE"
      ],
      [
        "System.out.println(args[7]);",
        "CODE"
      ],
      [
        "File myFile = new File(\"myfile.txt\"); // 1",
        "CODE"
      ],
      [
        "InputStream stream = myFile.toURL().openStream(); // 2",
        "CODE"
      ],
      [
        "} catch (IOException  | EmptyStackException e) { // 3,4",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "\u279c src java -jar checkstyle-8.43-all.jar -c config.xml Test.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] /home/nick/Desktop/Tester/src/Test.java:6:1: Class Fan-Out Complexity is 3 (max allowed is 1).",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "[ClassFanOutComplexity]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Checkstyle ends with 1 errors.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "\u279c src",
        []
      ],
      [
        "I would expect the \"Class Fan-Out Complexity\" to be 4.",
        [
          "OB",
          "EB",
          "SR"
        ]
      ]
    ]
  },
  "FasterXML_jackson-databind-3418": {
    "code_elements": [
      "\", new TypeReference>() {});",
      "Assert.assertTrue(list.isEmpty());",
      "}",
      "import com.fasterxml.jackson.core.type.TypeReference;",
      "import com.fasterxml.jackson.databind.DeserializationFeature;",
      "import com.fasterxml.jackson.dataformat.xml.XmlMapper;",
      "import org.junit.Assert;",
      "import org.junit.Test;",
      "import java.util.List;",
      "public class EmptyElementTest {",
      "@Test",
      "public void test() throws JsonProcessingException {",
      "XmlMapper mapper = new XmlMapper();",
      "mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);",
      "List<String> list = mapper.readValue(\"\", new TypeReference<List<String>>() {});",
      "Assert.assertTrue(list.isEmpty());",
      "}",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [],
    "summary_text": [
      "Empty list incorrectly deserialized when `ACCEPT_SINGLE_VALUE_AS_ARRAY` is enabled"
    ],
    "desc_hints": [
      "JsonProcessingException",
      "org.junit.Assert",
      "handleNonArray",
      "XmlMapper",
      "com.fasterxml.jackson.dataformat.xml.XmlMapper",
      "Assert.assertTrue",
      "org.junit.Test",
      "mapper.readValue",
      "com.fasterxml.jackson.core.type.TypeReference",
      "EmptyElementTest",
      "mapper.enable",
      "com.fasterxml.jackson.core.JsonProcessingException",
      "DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY",
      "FromXmlParser.isExpectedStartArrayToken",
      "java.util.List",
      "list.isEmpty",
      "TypeReference",
      "StringCollectionDeserializer",
      "List.of",
      "isExpectedStartArrayToken",
      "com.fasterxml.jackson.databind.DeserializationFeature"
    ],
    "desc_text": [
      [
        "When ACCEPT_SINGLE_VALUE_AS_ARRAY is enabled, an empty List is incorrectly deserialized as a list containing a single empty string (List.of(\"\")).",
        [
          "OB"
        ]
      ],
      [
        "Test case:",
        []
      ],
      [
        "\", new TypeReference>() {});",
        "CODE"
      ],
      [
        "Assert.assertTrue(list.isEmpty());",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}\">import com.fasterxml.jackson.core.JsonProcessingException;",
        []
      ],
      [
        "import com.fasterxml.jackson.core.type.TypeReference;",
        "CODE"
      ],
      [
        "import com.fasterxml.jackson.databind.DeserializationFeature;",
        "CODE"
      ],
      [
        "import com.fasterxml.jackson.dataformat.xml.XmlMapper;",
        "CODE"
      ],
      [
        "import org.junit.Assert;",
        "CODE"
      ],
      [
        "import org.junit.Test;",
        "CODE"
      ],
      [
        "import java.util.List;",
        "CODE"
      ],
      [
        "public class EmptyElementTest {",
        "CODE"
      ],
      [
        "@Test",
        "CODE"
      ],
      [
        "public void test() throws JsonProcessingException {",
        "CODE"
      ],
      [
        "XmlMapper mapper = new XmlMapper();",
        "CODE"
      ],
      [
        "mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);",
        "CODE"
      ],
      [
        "List<String> list = mapper.readValue(\"\", new TypeReference<List<String>>() {});",
        "CODE"
      ],
      [
        "Assert.assertTrue(list.isEmpty());",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "This is technically correct behavior, because can be deserialized as an empty string, which can then be wrapped in a list.",
        [
          "OB"
        ]
      ],
      [
        "However imo this should still be fixed.",
        []
      ],
      [
        "Looking at the code, the issue is in databind StringCollectionDeserializer.",
        [
          "OB"
        ]
      ],
      [
        "For the test case, isExpectedStartArrayToken returns false, which triggers the handleNonArray logic.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "This logic checks for the ACCEPT_SINGLE_VALUE_AS_ARRAY first, before trying to coerce the empty string to a list, which would succeed here.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "I see two approaches to fix this.",
        []
      ],
      [
        "Either change FromXmlParser.isExpectedStartArrayToken to return true for an empty string token, or change StringCollectionDeserializer to attempt a coercion from empty string before wrapping the value.",
        [
          "OB",
          "EB",
          "SR"
        ]
      ],
      [
        "imo the former should work fine.",
        [
          "OB",
          "EB"
        ]
      ],
      [
        "I can work on a fix for this once my corp CLA is cleared, which will be soon(tm).",
        []
      ]
    ]
  },
  "google_gson-2061": {
    "code_elements": [],
    "stack_traces": [],
    "summary_hints": [
      "JsonReader.hasNext"
    ],
    "summary_text": [
      "JsonReader.hasNext() returns true at END_DOCUMENT"
    ],
    "desc_hints": [
      "JsonToken.END_DOCUMENT",
      "JsonReader.hasNext",
      "reader.peek"
    ],
    "desc_text": [
      [
        "JsonReader.hasNext() will return true if we are at the end of the document",
        [
          "OB"
        ]
      ],
      [
        "(reader.peek() == JsonToken.END_DOCUMENT)",
        []
      ]
    ]
  },
  "assertj_assertj-core-2445": {
    "code_elements": [
      "assertThat(x.red).isNotNull().isExactlyInstanceOf(A.class);"
    ],
    "stack_traces": [],
    "summary_hints": [
      "isExactlyInstanceOf"
    ],
    "summary_text": [
      "isExactlyInstanceOf gives confusing error message when instance is an anonymous inner class"
    ],
    "desc_hints": [
      "isNotNull",
      "isExactlyInstanceOf",
      "assertThat",
      "java.lang.AssertionError"
    ],
    "desc_text": [
      [
        "Summary",
        [
          "OB"
        ]
      ],
      [
        "When using isExactlyInstanceOf and the actual value is an anonymous inner class, the message is confusing as it claims that the actual value is an \"instance of null\".",
        [
          "OB"
        ]
      ],
      [
        "Example",
        [
          "SR"
        ]
      ],
      [
        "assertThat(x.red).isNotNull().isExactlyInstanceOf(A.class);",
        "CODE"
      ],
      [
        "Will not fail isNotNull but fails on isExactlyInstanceOf with:",
        [
          "OB"
        ]
      ],
      [
        "java.lang.AssertionError:",
        []
      ],
      [
        "Expecting:",
        [
          "EB"
        ]
      ],
      [
        "to be exactly an instance of:",
        []
      ],
      [
        "but was an instance of:",
        []
      ],
      [
        "This led me to believe the value in x.red is null, but it clearly isn't.",
        [
          "OB"
        ]
      ],
      [
        "If it is not possible to detect the anonymous inner class type here (it in this case is an anonymous implementation of the interface Provider) perhaps change the message to but was an instance of an anonymous class.",
        [
          "OB"
        ]
      ]
    ]
  },
  "checkstyle_checkstyle-10825": {
    "code_elements": [
      "...",
      "public class Test {",
      "public void test() {",
      "String s = \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" +",
      "\" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" +",
      "\" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" +",
      "...",
      "\" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" +",
      "\" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" +",
      "\" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" +",
      "\" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \";",
      "}",
      "}",
      "..."
    ],
    "stack_traces": [
      "Caused by: java.lang.StackOverflowError",
      "at com.puppycrawl.tools.checkstyle.DetailAstImpl.getLineNo(DetailAstImpl.java:264)",
      "at com.puppycrawl.tools.checkstyle.DetailAstImpl.findLineNo(DetailAstImpl.java:361)",
      "at com.puppycrawl.tools.checkstyle.DetailAstImpl.getLineNo(DetailAstImpl.java:267)",
      "at com.puppycrawl.tools.checkstyle.DetailAstImpl.findLineNo(DetailAstImpl.java:361)",
      "at com.puppycrawl.tools.checkstyle.DetailAstImpl.getLineNo(DetailAstImpl.java:264)",
      "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:442)",
      "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
      "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
      "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
      "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
      "Caused by: java.lang.StackOverflowError",
      "at com.puppycrawl.tools.checkstyle.DetailAstImpl.getLineNo(DetailAstImpl.java:264)",
      "at com.puppycrawl.tools.checkstyle.DetailAstImpl.findLineNo(DetailAstImpl.java:361)",
      "at com.puppycrawl.tools.checkstyle.DetailAstImpl.getLineNo(DetailAstImpl.java:267)",
      "at com.puppycrawl.tools.checkstyle.DetailAstImpl.findLineNo(DetailAstImpl.java:361)",
      "at com.puppycrawl.tools.checkstyle.DetailAstImpl.getLineNo(DetailAstImpl.java:264)",
      "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:442)",
      "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
      "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
      "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
      "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)"
    ],
    "summary_hints": [
      "StackOverflow",
      "IndentationCheck"
    ],
    "summary_text": [
      "StackOverflow Error in IndentationCheck on deeply concatenated strings"
    ],
    "desc_hints": [
      "configuration_1_3.dtd",
      "all.jar",
      "IndentationCheck",
      "Main.java",
      "www.puppycrawl.com",
      "config_misc.html",
      "com.puppycrawl.tools.checkstyle.Main.runCli",
      "Test.java",
      "AbstractExpressionHandler.java",
      "com.puppycrawl.tools.checkstyle.Main.main",
      "com.puppycrawl.tools.checkstyle.Checker.process",
      "TreeWalker",
      "java.lang.Error",
      "AbstractExpressionHandler",
      "DetailAstImpl.java",
      "com.puppycrawl.tools.checkstyle.Main.runCheckstyle",
      "config.xml",
      "com.puppycrawl.tools.checkstyle.DetailAstImpl.getLineNo",
      "checkstyle.sourceforge.io",
      "com.puppycrawl.tools.checkstyle.Main.execute",
      "Checker.java",
      "getFirstAst",
      "realStart",
      "java.lang.StackOverflowError",
      "com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst",
      "com.puppycrawl.tools.checkstyle.DetailAstImpl.findLineNo",
      "com.puppycrawl.tools.checkstyle.Checker.processFiles"
    ],
    "desc_text": [
      [
        "I have read check documentation: https://checkstyle.sourceforge.io/config_misc.html#Indentation",
        []
      ],
      [
        "Noticed at #9622 (comment):",
        []
      ],
      [
        "\u279c javac Test.java",
        []
      ],
      [
        "\u279c java -jar checkstyle-9.0-all.jar -c config.xml Test.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "Exception in thread \"main\" java.lang.Error: Error was thrown while processing Test.java",
        []
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:310)",
        []
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)",
        []
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:409)",
        []
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:332)",
        []
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:191)",
        []
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.main(Main.java:126)",
        []
      ],
      [
        "Caused by: java.lang.StackOverflowError",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.DetailAstImpl.getLineNo(DetailAstImpl.java:264)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.DetailAstImpl.findLineNo(DetailAstImpl.java:361)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.DetailAstImpl.getLineNo(DetailAstImpl.java:267)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.DetailAstImpl.findLineNo(DetailAstImpl.java:361)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.DetailAstImpl.getLineNo(DetailAstImpl.java:264)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:442)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
        "STACK_TRACE"
      ],
      [
        "...",
        "CODE"
      ],
      [
        "\">\u279c cat Test.java",
        []
      ],
      [
        "public class Test {",
        "CODE"
      ],
      [
        "public void test() {",
        "CODE"
      ],
      [
        "String s = \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" +",
        "CODE"
      ],
      [
        "\" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" +",
        "CODE"
      ],
      [
        "\" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" +",
        "CODE"
      ],
      [
        "...",
        "CODE"
      ],
      [
        "\" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" +",
        "CODE"
      ],
      [
        "\" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" +",
        "CODE"
      ],
      [
        "\" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" +",
        "CODE"
      ],
      [
        "\" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \" + \" \";",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "\u279c cat Test.java | wc -l",
        []
      ],
      [
        "3028",
        []
      ],
      [
        "\u279c cat config.xml",
        []
      ],
      [
        "<?xml version=\"1.0\"?>",
        []
      ],
      [
        "<!DOCTYPE module PUBLIC",
        []
      ],
      [
        "\"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"",
        []
      ],
      [
        "\"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">",
        []
      ],
      [
        "<module name=\"Checker\">",
        []
      ],
      [
        "<property name=\"charset\" value=\"UTF-8\"/>",
        []
      ],
      [
        "<property name=\"severity\" value=\"error\"/>",
        [
          "OB"
        ]
      ],
      [
        "<module name=\"TreeWalker\">",
        []
      ],
      [
        "<module name=\"IndentationCheck\">",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "\u279c javac Test.java",
        []
      ],
      [
        "\u279c java -jar checkstyle-9.0-all.jar -c config.xml Test.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "Exception in thread \"main\" java.lang.Error: Error was thrown while processing Test.java",
        []
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:310)",
        []
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)",
        []
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:409)",
        []
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:332)",
        []
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:191)",
        []
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.main(Main.java:126)",
        []
      ],
      [
        "Caused by: java.lang.StackOverflowError",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.DetailAstImpl.getLineNo(DetailAstImpl.java:264)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.DetailAstImpl.findLineNo(DetailAstImpl.java:361)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.DetailAstImpl.getLineNo(DetailAstImpl.java:267)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.DetailAstImpl.findLineNo(DetailAstImpl.java:361)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.DetailAstImpl.getLineNo(DetailAstImpl.java:264)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:442)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.indentation.AbstractExpressionHandler.getFirstAst(AbstractExpressionHandler.java:453)",
        "STACK_TRACE"
      ],
      [
        "...",
        "CODE"
      ],
      [
        "IndentationCheck is failing on a large number of string concatenations, the culprit is recursive calls to AbstractExpressionHandler#getFirstAst:",
        [
          "OB"
        ]
      ],
      [
        "checkstyle/src/main/java/com/puppycrawl/tools/checkstyle/checks/indentation/AbstractExpressionHandler.java",
        []
      ],
      [
        "Line 453",
        []
      ],
      [
        "in",
        [
          "OB"
        ]
      ],
      [
        "1ce8eea",
        []
      ],
      [
        "realStart = getFirstAst(realStart, node);",
        []
      ],
      [
        "Perhaps some iterative approach will provide better performance and solve this issue.",
        []
      ]
    ]
  },
  "google_gson-2153": {
    "code_elements": [],
    "stack_traces": [],
    "summary_hints": [
      "Gson.getAdapter",
      "TypeToken"
    ],
    "summary_text": [
      "Gson.getAdapter((TypeToken) null) throws exception"
    ],
    "desc_hints": [
      "TypeAdapter",
      "Gson.java",
      "NullPointerException",
      "GitHub",
      "typeTokenCache.get",
      "getAdapter",
      "TypeToken"
    ],
    "desc_text": [
      [
        "The Gson class has logic for handling null arguments for getAdapter(TypeToken), see:",
        []
      ],
      [
        "gson/gson/src/main/java/com/google/gson/Gson.java",
        []
      ],
      [
        "Line 434",
        []
      ],
      [
        "in",
        [
          "OB"
        ]
      ],
      [
        "ceae88b",
        []
      ],
      [
        "TypeAdapter cached = typeTokenCache.get(type == null ?",
        []
      ],
      [
        "NULL_KEY_SURROGATE : type);",
        []
      ],
      [
        "However, it appears the pull request which tried to keep the support for null arguments also broke it due to commit 31dcfa3 because it does not reassign a non-null value to the type argument anymore which later on in the method causes a NullPointerException.",
        [
          "OB"
        ]
      ],
      [
        "However that was 4 years ago and it appears support for null arguments might not have been used much (if at all; I did not find existing issues about this here on GitHub).",
        []
      ],
      [
        "Therefore maybe it would be better instead of fixing this issue to simply remove null handling for getAdapter(TypeToken) completely and to throw an exception on purpose.",
        [
          "EB"
        ]
      ]
    ]
  },
  "assertj_assertj-core-2685": {
    "code_elements": [],
    "stack_traces": [],
    "summary_hints": [
      "assertContainsIgnoringCase"
    ],
    "summary_text": [
      "assertContainsIgnoringCase fails to compare i and I in tr_TR locale"
    ],
    "desc_hints": [
      "github.com",
      "Strings.java",
      "assertContainsIgnoringCase",
      "toLowerCase",
      "org.assertj.core.internal.Strings",
      "toUpperCase"
    ],
    "desc_text": [
      [
        "See org.assertj.core.internal.Strings#assertContainsIgnoringCase",
        [
          "OB"
        ]
      ],
      [
        "https://github.com/assertj/assertj-core/blob/9051a958e6ab0a750bb243060aef57001ab97e6e/src/main/java/org/assertj/core/internal/Strings.java#L528-L531",
        []
      ],
      [
        "I would suggest adding https://github.com/policeman-tools/forbidden-apis verification to just ban toLowerCase(), toUpperCase() and other unsafe methods: #2664",
        []
      ]
    ]
  },
  "checkstyle_checkstyle-11468": {
    "code_elements": [
      "public class Test {",
      "class a { // expected no violation",
      "private a() {",
      "}",
      "}",
      "a obj = new a() {",
      "};",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "FinalClassCheck"
    ],
    "summary_text": [
      "FinalClassCheck: False positive with anonymous classes"
    ],
    "desc_hints": [
      "configuration_1_3.dtd",
      "FinalClass",
      "checkstyle.sourceforge.io",
      "config_design.html",
      "all.jar",
      "TreeWalker",
      "cmdline.html",
      "checkstyle.org",
      "Duser.language",
      "Test.java",
      "config.xml",
      "Duser.country"
    ],
    "desc_text": [
      [
        "I have read check documentation: https://checkstyle.sourceforge.io/config_design.html#FinalClass",
        []
      ],
      [
        "I have downloaded the latest checkstyle from: https://checkstyle.org/cmdline.html#Download_and_Run",
        []
      ],
      [
        "I have executed the cli and showed it below, as cli describes the problem better than 1,000 words",
        []
      ],
      [
        "/var/tmp $ javac Test.java",
        []
      ],
      [
        "/var/tmp $ cat config.xml",
        []
      ],
      [
        "\">xml version=\"1.0\"?>",
        []
      ],
      [
        "DOCTYPE module PUBLIC",
        []
      ],
      [
        "\"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"",
        []
      ],
      [
        "\"https://checkstyle.org/dtds/configuration_1_3.dtd\">",
        []
      ],
      [
        "<module name=\"Checker\">",
        []
      ],
      [
        "<module name=\"TreeWalker\">",
        []
      ],
      [
        "<module name=\"FinalClass\"/>",
        []
      ],
      [
        "module>",
        []
      ],
      [
        "module>",
        []
      ],
      [
        "/var/tmp $ cat Test.java",
        []
      ],
      [
        "public class Test {",
        "CODE"
      ],
      [
        "class a { // expected no violation",
        "CODE"
      ],
      [
        "private a() {",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "a obj = new a() {",
        "CODE"
      ],
      [
        "};",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-10.0-all.jar -c config.xml Test.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:3:5: Class a should be declared as final.",
        [
          "EB"
        ]
      ],
      [
        "[FinalClass]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Checkstyle ends with 1 errors.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "Describe what you expect in detail.",
        [
          "OB",
          "EB"
        ]
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-10.0-all.jar -c config.xml Test.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "This was supposed to be fixed in #9357.",
        []
      ],
      [
        "Making the class final results in a compile-time error.",
        [
          "OB"
        ]
      ]
    ]
  },
  "assertj_assertj-core-2324": {
    "code_elements": [
      "class DefaultHasMethodTest {",
      "interface HasDefault {",
      "default void method() {}",
      "}",
      "static class Impl implements HasDefault {",
      "}",
      "@Test",
      "void testHasMethod() throws Exception {",
      "assertThat(Impl.class).hasMethods(\"method\");",
      "}",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "hasMethods"
    ],
    "summary_text": [
      "hasMethods does not work on default methods"
    ],
    "desc_hints": [
      "DefaultHasMethodTest",
      "hasMethod",
      "org.assertj.core.internal.Classes.getAllMethods",
      "Class.getMethod",
      "testHasMethod",
      "hasMethods",
      "Impl.class",
      "assertThat",
      "HasDefault"
    ],
    "desc_text": [
      [
        "Summary",
        [
          "OB"
        ]
      ],
      [
        "IMO hasMethod should really follow the same contract as Class.getMethod(), but it doesn't when it comes to default methods inherited from an interface (that are not overridden with an implementation in the class being asserted).",
        [
          "OB",
          "EB",
          "SR"
        ]
      ],
      [
        "This is because org.assertj.core.internal.Classes.getAllMethods(Class) only looks at parent classes and not any implemented interfaces.",
        []
      ],
      [
        "Example",
        [
          "SR"
        ]
      ],
      [
        "class DefaultHasMethodTest {",
        "CODE"
      ],
      [
        "interface HasDefault {",
        "CODE"
      ],
      [
        "default void method() {}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "static class Impl implements HasDefault {",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "@Test",
        "CODE"
      ],
      [
        "void testHasMethod() throws Exception {",
        "CODE"
      ],
      [
        "assertThat(Impl.class).hasMethods(\"method\");",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "This might be related to #880.",
        []
      ]
    ]
  },
  "assertj_assertj-core-2364": {
    "code_elements": [
      "private static class Person {",
      "private final Optional<String> name;",
      "public Person(final Optional<String> name) {",
      "this.name = name;",
      "}",
      "public Optional<String> getName() {",
      "return name;",
      "}",
      "}",
      "public void should_access() {",
      "final Optional<String> name = Optional.of(\"john\");",
      "final var person = new Person(name);",
      "Assertions.assertThat(person)",
      ".extracting(\"name.value\")",
      ".isEqualTo(\"john\");",
      "}"
    ],
    "stack_traces": [
      "at org.assertj.core.util.introspection.PropertyOrFieldSupport.getSimpleValue(PropertyOrFieldSupport.java:88)",
      "at org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:60)",
      "at org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:57)",
      "at org.assertj.core.extractor.ByNameSingleExtractor.apply(ByNameSingleExtractor.java:29)",
      "at org.assertj.core.api.AbstractAssert.extracting(AbstractAssert.java:1059)",
      "at org.assertj.core.api.AbstractObjectAssert.extracting(AbstractObjectAssert.java:834)",
      "at fr.witchbird.cl.negotiation.test.functional.VersionIT.should_access(VersionIT.java:165)",
      "Caused by: org.assertj.core.util.introspection.IntrospectionError: Unable to obtain the value of the field <'value'> from",
      "at org.assertj.core.util.introspection.FieldSupport.readSimpleField(FieldSupport.java:248)",
      "at org.assertj.core.util.introspection.FieldSupport.fieldValue(FieldSupport.java:202)",
      "at org.assertj.core.util.introspection.PropertyOrFieldSupport.getSimpleValue(PropertyOrFieldSupport.java:70)",
      "... 28 more",
      "Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.lang.Object java.util.Optional.value accessible: module java.base does not \"opens java.util\" to unnamed module @7fbe847c",
      "at org.assertj.core.util.introspection.FieldUtils.getField(FieldUtils.java:67)",
      "at org.assertj.core.util.introspection.FieldUtils.readField(FieldUtils.java:143)",
      "at org.assertj.core.util.introspection.FieldSupport.readSimpleField(FieldSupport.java:208)",
      "... 30 more"
    ],
    "summary_hints": [],
    "summary_text": [
      "Extracting through field names not supported for optional in java 17"
    ],
    "desc_hints": [
      "java.util",
      "jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke",
      "org.junit.runners.ParentRunner.run",
      "JUnitStarter.java",
      "com.intellij.rt.junit.JUnitStarter.main",
      "java.lang.reflect.AccessibleObject.checkCanSetAccessible",
      "getName",
      "ParentRunner.java",
      "com.intellij.rt.junit.IdeaTestRunner",
      "Field.java",
      "name.value",
      "jdk.internal.reflect.NativeMethodAccessorImpl.invoke0",
      "AccessibleObject.java",
      "org.junit.runners.ParentRunner.runLeaf",
      "FieldUtils.java",
      "java.util.Optional",
      "jdk.internal.reflect.NativeMethodAccessorImpl.invoke",
      "Repeater.startRunnerWithArgs",
      "AbstractObjectAssert.java",
      "JUnitCore.java",
      "org.junit.runners.ParentRunner.runChildren",
      "org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf",
      "Assertions.assertThat",
      "org.assertj.core.api.AbstractAssert.extracting",
      "IdeaTestRunner.java",
      "AbstractAssert.java",
      "com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart",
      "ReflectiveCallable.java",
      "org.junit.runners.model.FrameworkMethod.invokeExplosively",
      "java.lang.reflect.Method.invoke",
      "java.lang.reflect.InaccessibleObjectException",
      "java.util.Optional.value",
      "org.assertj.core.util.introspection.FieldSupport.readSimpleField",
      "VersionIT.java",
      "org.junit.internal.runners.statements.InvokeMethod.evaluate",
      "org.junit.runners.ParentRunner.access",
      "java.lang.reflect.Field.checkCanSetAccessible",
      "org.assertj.core.api.AbstractObjectAssert.extracting",
      "this.name",
      "java.base",
      "FieldSupport.java",
      "runReflectiveCall",
      "org.junit.runners.model.FrameworkMethod",
      "InvokeMethod.java",
      "NativeMethodAccessorImpl.java",
      "DelegatingMethodAccessorImpl.java",
      "BlockJUnit4ClassRunner.java",
      "PropertyOrFieldSupport.java",
      "org.assertj.core.extractor.ByNameSingleExtractor.apply",
      "org.junit.runner.JUnitCore.run",
      "JUnit4IdeaTestRunner.java",
      "java.lang.Object",
      "java.lang.reflect.Field.setAccessible",
      "FrameworkMethod.java",
      "org.assertj.core.util.introspection.FieldUtils.getField",
      "org.assertj.core.util.introspection.FieldUtils.readField",
      "com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs",
      "object.value",
      "org.junit.runners.ParentRunner",
      "Method.java",
      "fr.witchbird.cl.negotiation.test.functional.VersionIT.should_access",
      "org.junit.internal.runners.model.ReflectiveCallable.run",
      "org.assertj.core.util.introspection.FieldSupport.fieldValue",
      "isEqualTo",
      "org.junit.runners.BlockJUnit4ClassRunner.runChild",
      "Optional.of",
      "ByNameSingleExtractor.java",
      "org.assertj.core.util.introspection.IntrospectionError",
      "org.assertj.core.util.introspection.PropertyOrFieldSupport.getSimpleValue"
    ],
    "desc_text": [
      [
        "Summary",
        [
          "OB"
        ]
      ],
      [
        "I'm upgrading to java 17 (from java 11), and I have some tests failing due to an incompatibility between java 17 and assertJ.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "One of the breaking changes introduced by java 17 is JEP 396: Strongly Encapsulate JDK Internals by Default.",
        [
          "OB"
        ]
      ],
      [
        "It seems that assertJ try to force access to non public value (not public) when extracting them through field name => extract the value from an optional (\"object.value\") and since the value is not public I got this exception:",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "org.assertj.core.util.introspection.IntrospectionError:",
        []
      ],
      [
        "Can't find any field or property with name 'value'.",
        [
          "OB"
        ]
      ],
      [
        "Error when introspecting properties was :",
        [
          "OB"
        ]
      ],
      [
        "- No getter for property 'value' in java.util.Optional",
        [
          "OB"
        ]
      ],
      [
        "Error when introspecting fields was :",
        [
          "OB"
        ]
      ],
      [
        "- Unable to obtain the value of the field <'value'> from",
        [
          "OB"
        ]
      ],
      [
        "at org.assertj.core.util.introspection.PropertyOrFieldSupport.getSimpleValue(PropertyOrFieldSupport.java:88)",
        "STACK_TRACE"
      ],
      [
        "at org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:60)",
        "STACK_TRACE"
      ],
      [
        "at org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:57)",
        "STACK_TRACE"
      ],
      [
        "at org.assertj.core.extractor.ByNameSingleExtractor.apply(ByNameSingleExtractor.java:29)",
        "STACK_TRACE"
      ],
      [
        "at org.assertj.core.api.AbstractAssert.extracting(AbstractAssert.java:1059)",
        "STACK_TRACE"
      ],
      [
        "at org.assertj.core.api.AbstractObjectAssert.extracting(AbstractObjectAssert.java:834)",
        "STACK_TRACE"
      ],
      [
        "at fr.witchbird.cl.negotiation.test.functional.VersionIT.should_access(VersionIT.java:165)",
        "STACK_TRACE"
      ],
      [
        "at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
        []
      ],
      [
        "at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)",
        []
      ],
      [
        "at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
        []
      ],
      [
        "at java.base/java.lang.reflect.Method.invoke(Method.java:568)",
        []
      ],
      [
        "at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)",
        []
      ],
      [
        "at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)",
        []
      ],
      [
        "at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)",
        []
      ],
      [
        "at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)",
        []
      ],
      [
        "at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)",
        []
      ],
      [
        "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)",
        []
      ],
      [
        "at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)",
        []
      ],
      [
        "at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)",
        []
      ],
      [
        "at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)",
        []
      ],
      [
        "at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)",
        []
      ],
      [
        "at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)",
        []
      ],
      [
        "at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)",
        []
      ],
      [
        "at org.junit.runners.ParentRunner.run(ParentRunner.java:363)",
        []
      ],
      [
        "at org.junit.runner.JUnitCore.run(JUnitCore.java:137)",
        []
      ],
      [
        "at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)",
        []
      ],
      [
        "at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)",
        []
      ],
      [
        "at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)",
        []
      ],
      [
        "at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)",
        []
      ],
      [
        "Caused by: org.assertj.core.util.introspection.IntrospectionError: Unable to obtain the value of the field <'value'> from",
        "STACK_TRACE"
      ],
      [
        "at org.assertj.core.util.introspection.FieldSupport.readSimpleField(FieldSupport.java:248)",
        "STACK_TRACE"
      ],
      [
        "at org.assertj.core.util.introspection.FieldSupport.fieldValue(FieldSupport.java:202)",
        "STACK_TRACE"
      ],
      [
        "at org.assertj.core.util.introspection.PropertyOrFieldSupport.getSimpleValue(PropertyOrFieldSupport.java:70)",
        "STACK_TRACE"
      ],
      [
        "... 28 more",
        "STACK_TRACE"
      ],
      [
        "Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.lang.Object java.util.Optional.value accessible: module java.base does not \"opens java.util\" to unnamed module @7fbe847c",
        "STACK_TRACE"
      ],
      [
        "at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)",
        []
      ],
      [
        "at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)",
        []
      ],
      [
        "at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)",
        []
      ],
      [
        "at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)",
        []
      ],
      [
        "at org.assertj.core.util.introspection.FieldUtils.getField(FieldUtils.java:67)",
        "STACK_TRACE"
      ],
      [
        "at org.assertj.core.util.introspection.FieldUtils.readField(FieldUtils.java:143)",
        "STACK_TRACE"
      ],
      [
        "at org.assertj.core.util.introspection.FieldSupport.readSimpleField(FieldSupport.java:208)",
        "STACK_TRACE"
      ],
      [
        "... 30 more",
        "STACK_TRACE"
      ],
      [
        "Example",
        [
          "SR"
        ]
      ],
      [
        "private static class Person {",
        "CODE"
      ],
      [
        "private final Optional<String> name;",
        "CODE"
      ],
      [
        "public Person(final Optional<String> name) {",
        "CODE"
      ],
      [
        "this.name = name;",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "public Optional<String> getName() {",
        "CODE"
      ],
      [
        "return name;",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "@Test",
        []
      ],
      [
        "public void should_access() {",
        "CODE"
      ],
      [
        "final Optional<String> name = Optional.of(\"john\");",
        "CODE"
      ],
      [
        "final var person = new Person(name);",
        "CODE"
      ],
      [
        "Assertions.assertThat(person)",
        "CODE"
      ],
      [
        ".extracting(\"name.value\")",
        "CODE"
      ],
      [
        ".isEqualTo(\"john\");",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ]
    ]
  },
  "checkstyle_checkstyle-10958": {
    "code_elements": [],
    "stack_traces": [
      "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:302)",
      "at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)",
      "at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.getActualViolationsForFile(AbstractModuleTestSupport.java:442)",
      "at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.verifyViolations(AbstractModuleTestSupport.java:416)",
      "at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.verifyWithInlineConfigParser(AbstractModuleTestSupport.java:269)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheckTest.testValidateRecordsPass(IllegalTypeCheckTest.java:66)",
      "Caused by: java.lang.NullPointerException: Cannot invoke \"com.puppycrawl.tools.checkstyle.api.DetailAST.getFirstChild()\" because \"modifiers\" is null",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isContainVerifiableType(IllegalTypeCheck.java:516)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isVerifiable(IllegalTypeCheck.java:502)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitVariableDef(IllegalTypeCheck.java:577)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitToken(IllegalTypeCheck.java:477)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:335)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:406)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:273)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:154)",
      "at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)",
      "at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:328)",
      "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)",
      "... 70 more",
      "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:302)",
      "at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)",
      "at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.getActualViolationsForFile(AbstractModuleTestSupport.java:442)",
      "at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.verifyViolations(AbstractModuleTestSupport.java:416)",
      "at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.verifyWithInlineConfigParser(AbstractModuleTestSupport.java:269)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheckTest.testValidateInnerRecordsPass(IllegalTypeCheckTest.java:74)",
      "Caused by: java.lang.NullPointerException: Cannot invoke \"com.puppycrawl.tools.checkstyle.api.DetailAST.getFirstChild()\" because \"modifiers\" is null",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isContainVerifiableType(IllegalTypeCheck.java:516)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isVerifiable(IllegalTypeCheck.java:502)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitVariableDef(IllegalTypeCheck.java:577)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitToken(IllegalTypeCheck.java:477)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:335)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:406)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:273)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:154)",
      "at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)",
      "at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:328)",
      "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)",
      "... 70 more",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isContainVerifiableType(IllegalTypeCheck.java:516)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isVerifiable(IllegalTypeCheck.java:502)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitVariableDef(IllegalTypeCheck.java:577)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitToken(IllegalTypeCheck.java:477)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:335)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:406)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:273)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:154)",
      "at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)",
      "at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:328)",
      "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)"
    ],
    "summary_hints": [
      "IllegalTypeCheck"
    ],
    "summary_text": [
      "NPE in IllegalTypeCheck when checking a record (Java 14)"
    ],
    "desc_hints": [
      "org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively",
      "JUnitStarter.java",
      "com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitToken",
      "org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute",
      "jdk.internal.reflect.NativeMethodAccessorImpl.invoke0",
      "jdk.internal.reflect.NativeMethodAccessorImpl.invoke",
      "org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams",
      "org.junit.platform.launcher.core.DefaultLauncher.execute",
      "InputIllegalTypeTestInnerRecordsPass.java",
      "com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheckTest.testValidateRecordsPass",
      "com.puppycrawl.tools.checkstyle.Checker.processFile",
      "java.util.ArrayList.forEach",
      "com.puppycrawl.tools.checkstyle.TreeWalker.walk",
      "org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke",
      "org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod",
      "org.junit.jupiter.engine.extension.TimeoutExtension.intercept",
      "ofVoidMethod",
      "ExecutableInvoker.java",
      "com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.verifyWithInlineConfigParser",
      "TreeWalker.java",
      "com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitVariableDef",
      "InputIllegalTypeTestInnerRecordsPass",
      "com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isVerifiable",
      "Method.java",
      "Node.java",
      "HierarchicalTestEngine.java",
      "org.junit.jupiter.engine.execution.InvocationInterceptorChain",
      "org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute",
      "org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod",
      "org.junit.jupiter.engine.execution.MethodInvocation.proceed",
      "InputIllegalTypeTestRecordsPass.java",
      "IdeaTestRunner.java",
      "com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart",
      "com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs",
      "NodeTestTask.java",
      "com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process",
      "TestMethodTestDescriptor.java",
      "java.lang.NullPointerException",
      "invokeTestMethod",
      "Checker.java",
      "IllegalTypeCheckTest.java",
      "AbstractFileSetCheck.java",
      "InterceptedInvocation.proceed",
      "org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed",
      "ReflectiveInterceptorCall.lambda",
      "org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke",
      "IllegalType",
      "ThrowableCollector.java",
      "SameThreadHierarchicalTestExecutorService.java",
      "org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod",
      "org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll",
      "com.intellij.rt.junit.IdeaTestRunner",
      "Repeater.startRunnerWithArgs",
      "AbstractModuleTestSupport.java",
      "com.puppycrawl.tools.checkstyle.Checker.process",
      "org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda",
      "org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit",
      "com.puppycrawl.tools.checkstyle.TreeWalker.processIter",
      "MethodInvocation.java",
      "org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda",
      "EngineExecutionOrchestrator.java",
      "org.junit.platform.commons.util.ReflectionUtils.invokeMethod",
      "org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute",
      "org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute",
      "NativeMethodAccessorImpl.java",
      "org.junit.jupiter.engine.execution.ExecutableInvoker",
      "InvocationInterceptorChain.java",
      "checkstyle.org",
      "org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda",
      "org.junit.platform.engine.support.hierarchical.NodeTestTask.execute",
      "com.puppycrawl.tools.checkstyle.api.CheckstyleException",
      "InputIllegalTypeTestRecordsPass",
      "org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute",
      "jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke",
      "com.intellij.rt.junit.JUnitStarter.main",
      "org.junit.jupiter.engine.execution.ExecutableInvoker.invoke",
      "config_coding.html",
      "com.puppycrawl.tools.checkstyle.api.DetailAST.getFirstChild",
      "com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered",
      "com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit",
      "JUnit5IdeaTestRunner.java",
      "IllegalTypeCheckTest",
      "ReflectionUtils.java",
      "org.junit.platform.engine.support.hierarchical.Node.around",
      "java.lang.reflect.Method.invoke",
      "com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isContainVerifiableType",
      "com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.verifyViolations",
      "ArrayList.java",
      "java.base",
      "executeRecursively",
      "IllegalTypeCheck.java",
      "DelegatingMethodAccessorImpl.java",
      "DefaultLauncher.java",
      "com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheckTest.testValidateInnerRecordsPass",
      "ValidatingInvocation.proceed",
      "TimeoutExtension.java",
      "com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.getActualViolationsForFile",
      "org.junit.jupiter.engine.execution.ExecutableInvoker.lambda",
      "HierarchicalTestExecutor.java",
      "com.puppycrawl.tools.checkstyle.Checker.processFiles",
      "memberModifiers"
    ],
    "desc_text": [
      [
        "Hello,",
        []
      ],
      [
        "https://checkstyle.org/config_coding.html#IllegalType",
        []
      ],
      [
        "I'm trying JDK 16 with language-level 16 I've run into an NPE.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "I've discovered this on Checkstyle 9.0, but the same problem is still unresolved on the master branch.",
        [
          "OB"
        ]
      ],
      [
        "Since the build is configured to run on 1.8, I had to modify the source+target language to allow for the reproducer test-case, which I've prepared here: fprochazka@0e18223, it's probably not ideal, but IMHO it should pass a verifiable reproducer.",
        [
          "EB",
          "SR"
        ]
      ],
      [
        "if you run the IllegalTypeCheckTest from my commit, you'll see the following errors:",
        [
          "OB"
        ]
      ],
      [
        "InputIllegalTypeTestRecordsPass fail",
        [
          "OB"
        ]
      ],
      [
        "com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing /home/fprochazka/devel/libs/checkstyle/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/illegaltype/InputIllegalTypeTestRecordsPass.java",
        [
          "OB"
        ]
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:302)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.getActualViolationsForFile(AbstractModuleTestSupport.java:442)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.verifyViolations(AbstractModuleTestSupport.java:416)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.verifyWithInlineConfigParser(AbstractModuleTestSupport.java:269)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheckTest.testValidateRecordsPass(IllegalTypeCheckTest.java:66)",
        "STACK_TRACE"
      ],
      [
        "at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
        []
      ],
      [
        "at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)",
        []
      ],
      [
        "at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
        []
      ],
      [
        "at java.base/java.lang.reflect.Method.invoke(Method.java:567)",
        []
      ],
      [
        "at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)",
        []
      ],
      [
        "at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)",
        []
      ],
      [
        "at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)",
        []
      ],
      [
        "at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)",
        []
      ],
      [
        "at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)",
        []
      ],
      [
        "at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)",
        []
      ],
      [
        "at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)",
        []
      ],
      [
        "at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)",
        []
      ],
      [
        "at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)",
        []
      ],
      [
        "at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)",
        []
      ],
      [
        "at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)",
        []
      ],
      [
        "at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)",
        []
      ],
      [
        "at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)",
        []
      ],
      [
        "Caused by: java.lang.NullPointerException: Cannot invoke \"com.puppycrawl.tools.checkstyle.api.DetailAST.getFirstChild()\" because \"modifiers\" is null",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isContainVerifiableType(IllegalTypeCheck.java:516)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isVerifiable(IllegalTypeCheck.java:502)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitVariableDef(IllegalTypeCheck.java:577)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitToken(IllegalTypeCheck.java:477)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:335)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:406)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:273)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:154)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:328)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)",
        "STACK_TRACE"
      ],
      [
        "... 70 more",
        "STACK_TRACE"
      ],
      [
        "InputIllegalTypeTestInnerRecordsPass fail",
        [
          "OB"
        ]
      ],
      [
        "com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing /home/fprochazka/devel/libs/checkstyle/checkstyle/src/test/resources/com/puppycrawl/tools/checkstyle/checks/coding/illegaltype/InputIllegalTypeTestInnerRecordsPass.java",
        [
          "OB"
        ]
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:302)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.getActualViolationsForFile(AbstractModuleTestSupport.java:442)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.verifyViolations(AbstractModuleTestSupport.java:416)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport.verifyWithInlineConfigParser(AbstractModuleTestSupport.java:269)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheckTest.testValidateInnerRecordsPass(IllegalTypeCheckTest.java:74)",
        "STACK_TRACE"
      ],
      [
        "at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)",
        []
      ],
      [
        "at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)",
        []
      ],
      [
        "at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)",
        []
      ],
      [
        "at java.base/java.lang.reflect.Method.invoke(Method.java:567)",
        []
      ],
      [
        "at org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:725)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)",
        []
      ],
      [
        "at org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)",
        []
      ],
      [
        "at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)",
        []
      ],
      [
        "at org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)",
        []
      ],
      [
        "at org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)",
        []
      ],
      [
        "at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:214)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:210)",
        []
      ],
      [
        "at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:135)",
        []
      ],
      [
        "at org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:66)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:151)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)",
        []
      ],
      [
        "at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)",
        []
      ],
      [
        "at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:41)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$6(NodeTestTask.java:155)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:141)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$9(NodeTestTask.java:139)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:138)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:95)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:35)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)",
        []
      ],
      [
        "at org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:54)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)",
        []
      ],
      [
        "at org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)",
        []
      ],
      [
        "at com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)",
        []
      ],
      [
        "at com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)",
        []
      ],
      [
        "at com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)",
        []
      ],
      [
        "at com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)",
        []
      ],
      [
        "Caused by: java.lang.NullPointerException: Cannot invoke \"com.puppycrawl.tools.checkstyle.api.DetailAST.getFirstChild()\" because \"modifiers\" is null",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isContainVerifiableType(IllegalTypeCheck.java:516)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isVerifiable(IllegalTypeCheck.java:502)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitVariableDef(IllegalTypeCheck.java:577)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitToken(IllegalTypeCheck.java:477)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:335)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:406)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:273)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:154)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:328)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)",
        "STACK_TRACE"
      ],
      [
        "... 70 more",
        "STACK_TRACE"
      ],
      [
        "The interesting part is IMHO this:",
        []
      ],
      [
        "java.lang.NullPointerException: Cannot invoke \"com.puppycrawl.tools.checkstyle.api.DetailAST.getFirstChild()\" because \"modifiers\" is null",
        []
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isContainVerifiableType(IllegalTypeCheck.java:516)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.isVerifiable(IllegalTypeCheck.java:502)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitVariableDef(IllegalTypeCheck.java:577)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.IllegalTypeCheck.visitToken(IllegalTypeCheck.java:477)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.notifyVisit(TreeWalker.java:335)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.processIter(TreeWalker.java:406)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:273)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:154)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:328)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)",
        "STACK_TRACE"
      ],
      [
        "My configuration of the check is baked into the comment in the tested source file.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "If I change",
        [
          "OB"
        ]
      ],
      [
        "memberModifiers = LITERAL_PUBLIC, LITERAL_PROTECTED, LITERAL_STATIC",
        []
      ],
      [
        "to",
        []
      ],
      [
        "memberModifiers = (default)",
        []
      ],
      [
        "it starts to pass",
        [
          "OB"
        ]
      ],
      [
        "...",
        []
      ],
      [
        "Am I configuring it incorrectly?",
        []
      ],
      [
        "IMHO it should not throw an NPE even when configured incorrectly.",
        [
          "OB",
          "EB"
        ]
      ]
    ]
  },
  "Hakky54_sslcontext-kickstart-203": {
    "code_elements": [],
    "stack_traces": [],
    "summary_hints": [],
    "summary_text": [
      "Support for Android keystore"
    ],
    "desc_hints": [],
    "desc_text": []
  },
  "checkstyle_checkstyle-11926": {
    "code_elements": [
      "public class Test {",
      "/**",
      "* Test",
      "*/",
      "Test(E a) {",
      "}",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "InvalidJavadocPosition"
    ],
    "summary_text": [
      "InvalidJavadocPosition: false positive for the generic constructor without access modifier"
    ],
    "desc_hints": [
      "InvalidJavadocPosition",
      "checkstyle.sourceforge.io",
      "all.jar",
      "config_javadoc.html",
      "Duser.language",
      "Test.java",
      "config.xml",
      "Duser.country"
    ],
    "desc_text": [
      [
        "Check documentation: https://checkstyle.sourceforge.io/config_javadoc.html#InvalidJavadocPosition",
        []
      ],
      [
        "/var/tmp $ javac Test.java",
        []
      ],
      [
        "/var/tmp $ cat Test.java",
        []
      ],
      [
        "public class Test {",
        "CODE"
      ],
      [
        "/**",
        "CODE"
      ],
      [
        "* Test",
        "CODE"
      ],
      [
        "*/",
        "CODE"
      ],
      [
        "Test(E a) {",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "/var/tmp $ cat config.xml",
        []
      ],
      [
        "\">",
        []
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c config.xml Test.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] C:\\Projects\\checkstyle\\Test.java:2:5: Javadoc comment is placed in the wrong location.",
        [
          "OB"
        ]
      ],
      [
        "[InvalidJavadocPosition]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Checkstyle ends with 1 errors.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "Expected: no validation error",
        [
          "OB",
          "EB"
        ]
      ]
    ]
  },
  "google_gson-2130": {
    "code_elements": [
      "float x = 3.723379;"
    ],
    "stack_traces": [],
    "summary_hints": [
      "JsonWriter"
    ],
    "summary_text": [
      "JsonWriter don't work correctly with float"
    ],
    "desc_hints": [
      "JsonWriter",
      "writer.value"
    ],
    "desc_text": [
      [
        "float x = 3.723379;",
        "CODE"
      ],
      [
        "JsonWriter writer = ...",
        []
      ],
      [
        "writer.value(x); //is will call value(double value), so it will wrong",
        [
          "OB"
        ]
      ],
      [
        "result is 3.723378896713257",
        [
          "OB"
        ]
      ],
      [
        "Please add new function for float.",
        [
          "OB"
        ]
      ],
      [
        "Thank you.",
        [
          "OB"
        ]
      ]
    ]
  },
  "google_gson-2071": {
    "code_elements": [
      ">() {}.getType();",
      "EnumMap actualMap = gson.fromJson(\"{\\\"VALUE1\\\":\\\"test\\\"}\", type);",
      "Map expectedMap = Collections.singletonMap(MyEnum.VALUE1, \"test\");",
      "assertEquals(expectedMap, actualMap);",
      "}",
      "public void testEnumMap() throws Exception {",
      "EnumMap<MyEnum, String> map = new EnumMap<MyEnum, String>(MyEnum.class);",
      "map.put(MyEnum.VALUE1, \"test\");",
      "String json = gson.toJson(map);",
      "assertEquals(\"{\\\"VALUE1\\\":\\\"test\\\"}\", json);",
      "Type type = new TypeToken<EnumMap<MyEnum, String>>() {}.getType();",
      "EnumMap actualMap = gson.fromJson(\"{\\\"VALUE1\\\":\\\"test\\\"}\", type);",
      "Map expectedMap = Collections.singletonMap(MyEnum.VALUE1, \"test\");",
      "assertEquals(expectedMap, actualMap);",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "EnumMap",
      "ClassCastException"
    ],
    "summary_text": [
      "`EnumMap` deserialization fails with `ClassCastException`"
    ],
    "desc_hints": [
      "actualMap",
      "java.util.LinkedHashMap",
      "java.util.EnumMap",
      "gson.toJson",
      "ClassCastException",
      "Collections.singletonMap",
      "EnumMap",
      "MyEnum.VALUE1",
      "expectedMap",
      "map.put",
      "TypeToken",
      "getType",
      "assertEquals",
      "OpenJDK",
      "MyEnum.class",
      "MyEnum",
      "gson.fromJson",
      "java.lang.ClassCastException",
      "testEnumMap"
    ],
    "desc_text": [
      [
        "Gson version",
        []
      ],
      [
        "e2e851c",
        []
      ],
      [
        "Java / Android version",
        []
      ],
      [
        "openjdk version \"11.0.13\" 2021-10-19",
        []
      ],
      [
        "OpenJDK Runtime Environment Temurin-11.0.13+8 (build 11.0.13+8)",
        []
      ],
      [
        "OpenJDK 64-Bit Server VM Temurin-11.0.13+8 (build 11.0.13+8, mixed mode)",
        []
      ],
      [
        "Description",
        []
      ],
      [
        "EnumMap deserialization fails with ClassCastException:",
        [
          "OB"
        ]
      ],
      [
        "java.lang.ClassCastException: class java.util.LinkedHashMap cannot be cast to class java.util.EnumMap",
        []
      ],
      [
        "The underlying issue is related to #1708, it appears special handling for EnumMap is missing.",
        [
          "OB"
        ]
      ],
      [
        "(I am a bit surprised that this issue has not been mentioned here anywhere before.)",
        []
      ],
      [
        "Reproduction steps",
        []
      ],
      [
        "Test case:",
        []
      ],
      [
        ">() {}.getType();",
        "CODE"
      ],
      [
        "EnumMap actualMap = gson.fromJson(\"{\\\"VALUE1\\\":\\\"test\\\"}\", type);",
        "CODE"
      ],
      [
        "Map expectedMap = Collections.singletonMap(MyEnum.VALUE1, \"test\");",
        "CODE"
      ],
      [
        "assertEquals(expectedMap, actualMap);",
        "CODE"
      ],
      [
        "}\">private static enum MyEnum {",
        []
      ],
      [
        "VALUE1, VALUE2",
        []
      ],
      [
        "}",
        "CODE"
      ],
      [
        "public void testEnumMap() throws Exception {",
        "CODE"
      ],
      [
        "EnumMap<MyEnum, String> map = new EnumMap<MyEnum, String>(MyEnum.class);",
        "CODE"
      ],
      [
        "map.put(MyEnum.VALUE1, \"test\");",
        "CODE"
      ],
      [
        "String json = gson.toJson(map);",
        "CODE"
      ],
      [
        "assertEquals(\"{\\\"VALUE1\\\":\\\"test\\\"}\", json);",
        "CODE"
      ],
      [
        "Type type = new TypeToken<EnumMap<MyEnum, String>>() {}.getType();",
        "CODE"
      ],
      [
        "EnumMap actualMap = gson.fromJson(\"{\\\"VALUE1\\\":\\\"test\\\"}\", type);",
        "CODE"
      ],
      [
        "Map expectedMap = Collections.singletonMap(MyEnum.VALUE1, \"test\");",
        "CODE"
      ],
      [
        "assertEquals(expectedMap, actualMap);",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "Exception stack trace",
        [
          "OB"
        ]
      ],
      [
        "Not really useful because ClassCastException occurs in user code.",
        [
          "OB"
        ]
      ]
    ]
  },
  "FasterXML_jackson-databind-3195": {
    "code_elements": [
      "public void testAnnotatedConstructorEquality() {",
      "ObjectMapper mapper = new ObjectMapper();",
      "DeserializationConfig context = mapper.getDeserializationConfig();",
      "JavaType beanType = mapper.constructType(SomeBean.class);",
      "AnnotatedClass instance1 = AnnotatedClassResolver.resolve(context, beanType, context);",
      "AnnotatedClass instance2 = AnnotatedClassResolver.resolve(context, beanType, context);",
      "// Successful",
      "assertEquals(instance1, instance2);",
      "assertEquals(instance1.getDefaultConstructor().getAnnotated(), instance2.getDefaultConstructor().getAnnotated());",
      "// Fails",
      "assertEquals(instance1.getDefaultConstructor(), instance2.getDefaultConstructor());",
      "}",
      "public boolean equals(Object o) {",
      "if (o == this) return true;",
      "return ClassUtil.hasClass(o, getClass())",
      "&& (((AnnotatedConstructor) o)._constructor == _constructor);",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "AnnotatedMember.equals"
    ],
    "summary_text": [
      "`AnnotatedMember.equals()` does not work reliably"
    ],
    "desc_hints": [
      "AnnotatedClass",
      "ClassUtil.hasClass",
      "AnnotatedClassResolver.resolve",
      "AnnotatedMethod",
      "AnnotatedMember",
      "beanType",
      "ObjectMapper",
      "JavaType",
      "instance1.getDefaultConstructor",
      "AnnotatedConstructor",
      "java.lang.Class",
      "assertEquals",
      "AnnotatedMember.equals",
      "Class.getConstructors",
      "getClass",
      "AnnotatedField",
      "testAnnotatedConstructorEquality",
      "getAnnotated",
      "mapper.constructType",
      "instance2.getDefaultConstructor",
      "AnnotatedConstructor.equals",
      "SomeBean.class",
      "mapper.getDeserializationConfig",
      "DeserializationConfig",
      "Class.copyConstructors"
    ],
    "desc_text": [
      [
        "Hi,",
        []
      ],
      [
        "I noticed some strange behavior of the current AnnotatedMember.equals() implementations.",
        [
          "OB"
        ]
      ],
      [
        "Following test case for AnnotatedConstructor.equals() currently fails:",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "public void testAnnotatedConstructorEquality() {",
        "CODE"
      ],
      [
        "ObjectMapper mapper = new ObjectMapper();",
        "CODE"
      ],
      [
        "DeserializationConfig context = mapper.getDeserializationConfig();",
        "CODE"
      ],
      [
        "JavaType beanType = mapper.constructType(SomeBean.class);",
        "CODE"
      ],
      [
        "AnnotatedClass instance1 = AnnotatedClassResolver.resolve(context, beanType, context);",
        "CODE"
      ],
      [
        "AnnotatedClass instance2 = AnnotatedClassResolver.resolve(context, beanType, context);",
        "CODE"
      ],
      [
        "// Successful",
        "CODE"
      ],
      [
        "assertEquals(instance1, instance2);",
        "CODE"
      ],
      [
        "assertEquals(instance1.getDefaultConstructor().getAnnotated(), instance2.getDefaultConstructor().getAnnotated());",
        "CODE"
      ],
      [
        "// Fails",
        "CODE"
      ],
      [
        "assertEquals(instance1.getDefaultConstructor(), instance2.getDefaultConstructor());",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "Based on the first two successful assertEquals(...) statements, I would have expected that the third assertEquals(...) should be also successful.",
        [
          "EB"
        ]
      ],
      [
        "However, it currently fails.",
        [
          "OB"
        ]
      ],
      [
        "The reason for this behavior is that AnnotatedConstructor.equals() is currently using == for comparing the two constructors:",
        []
      ],
      [
        "public boolean equals(Object o) {",
        "CODE"
      ],
      [
        "if (o == this) return true;",
        "CODE"
      ],
      [
        "return ClassUtil.hasClass(o, getClass())",
        "CODE"
      ],
      [
        "&& (((AnnotatedConstructor) o)._constructor == _constructor);",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "However, the implementation of the reflection API in java.lang.Class is always copying / cloning the Field, Method and Constructor instances prior to returning them to the caller (e.g.",
        [
          "OB"
        ]
      ],
      [
        "see Class.copyConstructors()).",
        [
          "OB"
        ]
      ],
      [
        "Thus, each call of Class.getConstructors() will always return new instances.",
        [
          "OB"
        ]
      ],
      [
        "If you agree that the above test case should be successful (i.e.",
        [
          "EB",
          "SR"
        ]
      ],
      [
        "also assertEquals(instance1.getDefaultConstructor(), instance2.getDefaultConstructor()) should be successful), I would prepare a corresponding pull request that slightly modifies the current implementation of the equals() method for all subclasses of AnnotatedMember that are affected by this problem (i.e.",
        [
          "EB"
        ]
      ],
      [
        "at least AnnotatedField, AnnotatedConstructor and AnnotatedMethod).",
        [
          "OB"
        ]
      ]
    ]
  },
  "checkstyle_checkstyle-10857": {
    "code_elements": [
      "package checkstyle.reproducer;",
      "import java.util.HashMap;",
      "import java.util.HashSet;",
      "import java.util.Set;",
      "public class UnusedImportBug {",
      "private static final Set FOO;",
      "static {",
      "FOO = new HashSet<>();",
      "FOO.add( HashMap[].class.getName() );",
      "}",
      "}",
      "package checkstyle.reproducer;",
      "import java.util.HashMap;",
      "import java.util.HashSet;",
      "import java.util.Set;",
      "public class UnusedImportBug {",
      "private static final Set<String> FOO;",
      "static {",
      "FOO = new HashSet<>();",
      "FOO.add( HashMap[].class.getName() );",
      "}",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "UnusedImports"
    ],
    "summary_text": [
      "UnusedImports error if there are only array references to a given class"
    ],
    "desc_hints": [
      "HashSet",
      "github.com",
      "configuration_1_3.dtd",
      "all.jar",
      "FOO.add",
      "HashMap",
      "checkstyle.xml",
      "Duser.language",
      "www.puppycrawl.com",
      "processJavadoc",
      "TreeWalker",
      "UnusedImports",
      "java.util.HashSet",
      "Duser.country",
      "class.getName",
      "checkstyle.reproducer",
      "UnusedImportBug.java",
      "java.util.HashMap",
      "UnusedImportBug",
      "UnusedImport",
      "java.util.Set"
    ],
    "desc_text": [
      [
        "slovdahl@desk:~/checkstyle-unused-import-bug-reproducer (main)$ cat src/main/java/checkstyle/reproducer/UnusedImportBug.java",
        []
      ],
      [
        "package checkstyle.reproducer;",
        "CODE"
      ],
      [
        "import java.util.HashMap;",
        "CODE"
      ],
      [
        "import java.util.HashSet;",
        "CODE"
      ],
      [
        "import java.util.Set;",
        "CODE"
      ],
      [
        "public class UnusedImportBug {",
        "CODE"
      ],
      [
        "private static final Set FOO;",
        "CODE"
      ],
      [
        "static {",
        "CODE"
      ],
      [
        "FOO = new HashSet<>();",
        "CODE"
      ],
      [
        "FOO.add( HashMap[].class.getName() );",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "slovdahl@desk:~/checkstyle-unused-import-bug-reproducer (main)$ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "slovdahl@desk:~/checkstyle-unused-import-bug-reproducer (main)$ java $RUN_LOCALE -jar checkstyle-9.0.1-all.jar -c gradle/checkstyle/checkstyle.xml src/main/java/checkstyle/reproducer/UnusedImportBug.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] /home/slovdahl/checkstyle-unused-import-bug-reproducer/src/main/java/checkstyle/reproducer/UnusedImportBug.java:3:8: Unused import - java.util.HashMap.",
        []
      ],
      [
        "[UnusedImports]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Checkstyle ends with 1 errors.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "\">slovdahl@desk:~/checkstyle-unused-import-bug-reproducer/src/main/java (main)$ javac checkstyle/reproducer/UnusedImportBug.java",
        []
      ],
      [
        "slovdahl@desk:~/checkstyle-unused-import-bug-reproducer/src/main/java (main)$",
        []
      ],
      [
        "slovdahl@desk:~/checkstyle-unused-import-bug-reproducer (main)$ cat gradle/checkstyle/checkstyle.xml",
        []
      ],
      [
        "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
        []
      ],
      [
        "<!DOCTYPE module PUBLIC",
        []
      ],
      [
        "\"-//Puppy Crawl//DTD Check Configuration 1.3//EN\"",
        []
      ],
      [
        "\"http://www.puppycrawl.com/dtds/configuration_1_3.dtd\">",
        []
      ],
      [
        "<module name=\"Checker\">",
        []
      ],
      [
        "<module name=\"TreeWalker\">",
        []
      ],
      [
        "<module name=\"UnusedImports\">",
        []
      ],
      [
        "<property name=\"processJavadoc\" value=\"true\"/>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "slovdahl@desk:~/checkstyle-unused-import-bug-reproducer (main)$ cat src/main/java/checkstyle/reproducer/UnusedImportBug.java",
        []
      ],
      [
        "package checkstyle.reproducer;",
        "CODE"
      ],
      [
        "import java.util.HashMap;",
        "CODE"
      ],
      [
        "import java.util.HashSet;",
        "CODE"
      ],
      [
        "import java.util.Set;",
        "CODE"
      ],
      [
        "public class UnusedImportBug {",
        "CODE"
      ],
      [
        "private static final Set<String> FOO;",
        "CODE"
      ],
      [
        "static {",
        "CODE"
      ],
      [
        "FOO = new HashSet<>();",
        "CODE"
      ],
      [
        "FOO.add( HashMap[].class.getName() );",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "slovdahl@desk:~/checkstyle-unused-import-bug-reproducer (main)$ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "slovdahl@desk:~/checkstyle-unused-import-bug-reproducer (main)$ java $RUN_LOCALE -jar checkstyle-9.0.1-all.jar -c gradle/checkstyle/checkstyle.xml src/main/java/checkstyle/reproducer/UnusedImportBug.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] /home/slovdahl/checkstyle-unused-import-bug-reproducer/src/main/java/checkstyle/reproducer/UnusedImportBug.java:3:8: Unused import - java.util.HashMap.",
        []
      ],
      [
        "[UnusedImports]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Checkstyle ends with 1 errors.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "Describe what you expect in detail.",
        [
          "OB",
          "EB"
        ]
      ],
      [
        "The UnusedImport error should not be triggered if an import is actually used.",
        [
          "OB",
          "EB"
        ]
      ],
      [
        "MCVE: https://github.com/hiboxsystems/checkstyle-unused-import-bug-reproducer",
        []
      ]
    ]
  },
  "checkstyle_checkstyle-11085": {
    "code_elements": [
      "class Test {",
      "public void foo() {",
      "String status = \"pending\";",
      "if (status == \"do\" + \"ne\") {} // violation",
      "}",
      "}",
      "class Test {",
      "public void foo() {",
      "String status = \"pending\";",
      "if (status == \"do\" + \"ne\") {} // violation",
      "}",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "StringLiteralEquality"
    ],
    "summary_text": [
      "StringLiteralEquality FN about String literal expression"
    ],
    "desc_hints": [
      "configuration_1_3.dtd",
      "TreeWalker",
      "checkstyle.sourceforge.io",
      "all.jar",
      "StringLiteralEquality",
      "cmdline.html",
      "config_coding.html",
      "fileExtensions",
      "checkstyle.org",
      "Duser.language",
      "Test.java",
      "config.xml",
      "Duser.country"
    ],
    "desc_text": [
      [
        "I have read check documentation: https://checkstyle.sourceforge.io/config_coding.html#StringLiteralEquality",
        []
      ],
      [
        "I have downloaded the latest checkstyle from: https://checkstyle.org/cmdline.html#Download_and_Run",
        []
      ],
      [
        "I have executed the cli and showed it below, as cli describes the problem better than 1,000 words",
        []
      ],
      [
        "/var/tmp $ cat Test.java",
        []
      ],
      [
        "class Test {",
        "CODE"
      ],
      [
        "public void foo() {",
        "CODE"
      ],
      [
        "String status = \"pending\";",
        "CODE"
      ],
      [
        "if (status == \"do\" + \"ne\") {} // violation",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c config.xml Test.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "Audit done.\">/var/tmp $ javac Test.java",
        [
          "OB"
        ]
      ],
      [
        "/var/tmp $ cat config.xml",
        []
      ],
      [
        "<?xml version=\"1.0\"?>",
        []
      ],
      [
        "<!DOCTYPE module PUBLIC",
        []
      ],
      [
        "\"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"",
        []
      ],
      [
        "\"https://checkstyle.org/dtds/configuration_1_3.dtd\">",
        []
      ],
      [
        "<module name=\"Checker\">",
        []
      ],
      [
        "<property name=\"severity\" value=\"error\"/>",
        [
          "OB"
        ]
      ],
      [
        "<property name=\"fileExtensions\" value=\"java, properties, xml\"/>",
        []
      ],
      [
        "<module name=\"TreeWalker\">",
        []
      ],
      [
        "<module name=\"StringLiteralEquality\"/>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "/var/tmp $ cat Test.java",
        []
      ],
      [
        "class Test {",
        "CODE"
      ],
      [
        "public void foo() {",
        "CODE"
      ],
      [
        "String status = \"pending\";",
        "CODE"
      ],
      [
        "if (status == \"do\" + \"ne\") {} // violation",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-X.XX-all.jar -c config.xml Test.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Describe what you expect in detail.",
        [
          "OB",
          "EB"
        ]
      ],
      [
        "Hi, I found a false negative about the rule StringLiteralEquality.",
        [
          "OB"
        ]
      ],
      [
        "At line 4, it is obvious that right value is string literal, but no violation report.",
        [
          "OB"
        ]
      ],
      [
        "I think this is resulted by string literal expression.",
        [
          "OB"
        ]
      ],
      [
        "Thanks for your consideration.",
        [
          "OB"
        ]
      ]
    ]
  },
  "checkstyle_checkstyle-10963": {
    "code_elements": [
      "package com.fsp.test;",
      "public class DerivedClass extends AbstractBaseClass",
      "{",
      "public DerivedClass()",
      "{",
      "if ( this.stringFromBaseClass.equals(\"JKHKJ\") ) System.out.println(\"Hello\");",
      "}",
      "}",
      "package com.fsp.test;",
      "public abstract class AbstractBaseClass",
      "{",
      "protected String stringFromBaseClass = \"ABC\";",
      "}",
      "package com.fsp.test;",
      "public class DerivedClass extends AbstractBaseClass",
      "{",
      "public DerivedClass()",
      "{",
      "if ( this.stringFromBaseClass.equals(\"JKHKJ\") ) System.out.println(\"Hello\");",
      "}",
      "}"
    ],
    "stack_traces": [
      "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:302)",
      "at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)",
      "at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:409)",
      "at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:332)",
      "at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:191)",
      "at com.puppycrawl.tools.checkstyle.Main.main(Main.java:126)",
      "Caused by: java.lang.NullPointerException",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.getFieldType(EqualsAvoidNullCheck.java:545)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.isStringFieldOrVariableFromThisInstance(EqualsAvoidNullCheck.java:481)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.isCalledOnStringFieldOrVariable(EqualsAvoidNullCheck.java:439)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.checkMethodCall(EqualsAvoidNullCheck.java:356)",
      "at java.lang.Iterable.forEach(Iterable.java:75)",
      "at java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1080)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.traverseFieldFrameTree(EqualsAvoidNullCheck.java:339)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.traverseFieldFrameTree(EqualsAvoidNullCheck.java:336)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.traverseFieldFrameTree(EqualsAvoidNullCheck.java:336)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.finishTree(EqualsAvoidNullCheck.java:242)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.notifyEnd(TreeWalker.java:319)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:274)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:154)",
      "at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)",
      "at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:328)",
      "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)",
      "... 5 more",
      "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:302)",
      "at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)",
      "at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:409)",
      "at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:332)",
      "at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:191)",
      "at com.puppycrawl.tools.checkstyle.Main.main(Main.java:126)",
      "Caused by: java.lang.NullPointerException",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.getFieldType(EqualsAvoidNullCheck.java:545)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.isStringFieldOrVariableFromThisInstance(EqualsAvoidNullCheck.java:481)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.isCalledOnStringFieldOrVariable(EqualsAvoidNullCheck.java:439)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.checkMethodCall(EqualsAvoidNullCheck.java:356)",
      "at java.lang.Iterable.forEach(Iterable.java:75)",
      "at java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1080)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.traverseFieldFrameTree(EqualsAvoidNullCheck.java:339)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.traverseFieldFrameTree(EqualsAvoidNullCheck.java:336)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.traverseFieldFrameTree(EqualsAvoidNullCheck.java:336)",
      "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.finishTree(EqualsAvoidNullCheck.java:242)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.notifyEnd(TreeWalker.java:319)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:274)",
      "at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:154)",
      "at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)",
      "at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:328)",
      "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)",
      "... 5 more"
    ],
    "summary_hints": [
      "EqualsAvoidNull"
    ],
    "summary_text": [
      "NPE in EqualsAvoidNull check when accessing string from base class with 'this' qualifier"
    ],
    "desc_hints": [
      "AbstractBaseClass",
      "all.jar",
      "AbstractBaseClass.java",
      "Iterable.java",
      "Main.java",
      "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.getFieldType",
      "UnmodifiableCollection.forEach",
      "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.traverseFieldFrameTree",
      "Duser.language",
      "java.util.Collections",
      "com.puppycrawl.tools.checkstyle.Main.runCli",
      "com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered",
      "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.finishTree",
      "com.puppycrawl.tools.checkstyle.Main.main",
      "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.isStringFieldOrVariableFromThisInstance",
      "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.checkMethodCall",
      "com.puppycrawl.tools.checkstyle.Checker.process",
      "DerivedClass",
      "com.puppycrawl.tools.checkstyle.TreeWalker.notifyEnd",
      "com.puppycrawl.tools.checkstyle.Checker.processFile",
      "Collections.java",
      "com.puppycrawl.tools.checkstyle.TreeWalker.walk",
      "com.puppycrawl.tools.checkstyle.Main.runCheckstyle",
      "stringFromBaseClass",
      "config.xml",
      "Duser.country",
      "com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process",
      "java.lang.NullPointerException",
      "com.puppycrawl.tools.checkstyle.Main.execute",
      "com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.isCalledOnStringFieldOrVariable",
      "Checker.java",
      "AbstractFileSetCheck.java",
      "DerivedClass.java",
      "java.lang.Iterable.forEach",
      "TreeWalker.java",
      "EqualsAvoidNullCheck.java",
      "this.stringFromBaseClass.equals",
      "com.fsp.test",
      "System.out.println",
      "com.puppycrawl.tools.checkstyle.Checker.processFiles",
      "com.puppycrawl.tools.checkstyle.api.CheckstyleException"
    ],
    "desc_text": [
      [
        "Checkstyle ends with a NPE when a derived class accesses an String variable from a base class when the variable is accessed via 'this' qualifier.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "The check runs fine when the 'this.' is omitted.",
        [
          "OB"
        ]
      ],
      [
        "This error appeared first in the Checkstyle version 8.29 we currently use but can be reprodued with the latest 9.1 version.",
        [
          "OB"
        ]
      ],
      [
        "It appears on the checkstyle command line (as in the sample below), withing the checkstyle maven plugin and in the checkstyle Eclipse plugin.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "The below command sequence demonstrates the error:",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "type DerivedClass.java",
        []
      ],
      [
        "package com.fsp.test;",
        "CODE"
      ],
      [
        "public class DerivedClass extends AbstractBaseClass",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "public DerivedClass()",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "if ( this.stringFromBaseClass.equals(\"JKHKJ\") ) System.out.println(\"Hello\");",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "C:\\Temp\\test>type checkstyle-config.xml",
        []
      ],
      [
        "C:\\Temp\\test>java -Duser.language=en -Duser.country=US -jar c:\\temp\\checkstyle-9.1-all.jar -c checkstyle-config.xml AbstractBaseClass.java DerivedClass.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing DerivedClass.java",
        [
          "OB"
        ]
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:302)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:409)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:332)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:191)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.main(Main.java:126)",
        "STACK_TRACE"
      ],
      [
        "Caused by: java.lang.NullPointerException",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.getFieldType(EqualsAvoidNullCheck.java:545)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.isStringFieldOrVariableFromThisInstance(EqualsAvoidNullCheck.java:481)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.isCalledOnStringFieldOrVariable(EqualsAvoidNullCheck.java:439)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.checkMethodCall(EqualsAvoidNullCheck.java:356)",
        "STACK_TRACE"
      ],
      [
        "at java.lang.Iterable.forEach(Iterable.java:75)",
        "STACK_TRACE"
      ],
      [
        "at java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1080)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.traverseFieldFrameTree(EqualsAvoidNullCheck.java:339)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.traverseFieldFrameTree(EqualsAvoidNullCheck.java:336)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.traverseFieldFrameTree(EqualsAvoidNullCheck.java:336)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.finishTree(EqualsAvoidNullCheck.java:242)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.notifyEnd(TreeWalker.java:319)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:274)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:154)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:328)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)",
        "STACK_TRACE"
      ],
      [
        "... 5 more",
        "STACK_TRACE"
      ],
      [
        "Checkstyle ends with 1 errors.\">C:\\Temp\\test>type AbstractBaseClass.java",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "package com.fsp.test;",
        "CODE"
      ],
      [
        "public abstract class AbstractBaseClass",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "protected String stringFromBaseClass = \"ABC\";",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "C:\\Temp\\test>type DerivedClass.java",
        []
      ],
      [
        "package com.fsp.test;",
        "CODE"
      ],
      [
        "public class DerivedClass extends AbstractBaseClass",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "public DerivedClass()",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "if ( this.stringFromBaseClass.equals(\"JKHKJ\") ) System.out.println(\"Hello\");",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "C:\\Temp\\test>type checkstyle-config.xml",
        []
      ],
      [
        "C:\\Temp\\test>java -Duser.language=en -Duser.country=US -jar c:\\temp\\checkstyle-9.1-all.jar -c checkstyle-config.xml AbstractBaseClass.java DerivedClass.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "com.puppycrawl.tools.checkstyle.api.CheckstyleException: Exception was thrown while processing DerivedClass.java",
        [
          "OB"
        ]
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:302)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.process(Checker.java:221)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.runCheckstyle(Main.java:409)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.runCli(Main.java:332)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.execute(Main.java:191)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Main.main(Main.java:126)",
        "STACK_TRACE"
      ],
      [
        "Caused by: java.lang.NullPointerException",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.getFieldType(EqualsAvoidNullCheck.java:545)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.isStringFieldOrVariableFromThisInstance(EqualsAvoidNullCheck.java:481)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.isCalledOnStringFieldOrVariable(EqualsAvoidNullCheck.java:439)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.checkMethodCall(EqualsAvoidNullCheck.java:356)",
        "STACK_TRACE"
      ],
      [
        "at java.lang.Iterable.forEach(Iterable.java:75)",
        "STACK_TRACE"
      ],
      [
        "at java.util.Collections$UnmodifiableCollection.forEach(Collections.java:1080)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.traverseFieldFrameTree(EqualsAvoidNullCheck.java:339)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.traverseFieldFrameTree(EqualsAvoidNullCheck.java:336)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.traverseFieldFrameTree(EqualsAvoidNullCheck.java:336)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.checks.coding.EqualsAvoidNullCheck.finishTree(EqualsAvoidNullCheck.java:242)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.notifyEnd(TreeWalker.java:319)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.walk(TreeWalker.java:274)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.TreeWalker.processFiltered(TreeWalker.java:154)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.api.AbstractFileSetCheck.process(AbstractFileSetCheck.java:87)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFile(Checker.java:328)",
        "STACK_TRACE"
      ],
      [
        "at com.puppycrawl.tools.checkstyle.Checker.processFiles(Checker.java:289)",
        "STACK_TRACE"
      ],
      [
        "... 5 more",
        "STACK_TRACE"
      ],
      [
        "Checkstyle ends with 1 errors.",
        [
          "OB",
          "SR"
        ]
      ]
    ]
  },
  "checkstyle_checkstyle-10840": {
    "code_elements": [
      "/** Javadoc ok here. */",
      "void test();",
      "class MyClass {",
      "/** Missing parameter here. */",
      "public MyClass(Integer amount) {",
      "}",
      "}",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "accessModifiers",
      "JavadocMethod"
    ],
    "summary_text": [
      "JavadocMethod accessModifiers incorrectly interpreted for interface class"
    ],
    "desc_hints": [
      "TreeWalker",
      "YOUR_FILE.java",
      "all.jar",
      "config_javadoc.html",
      "accessModifiers",
      "allowMissingReturnTag",
      "cmdline.html",
      "fileExtensions",
      "checkstyle.org",
      "Duser.language",
      "www.puppycrawl.com",
      "JavadocMethod",
      "MyInterface",
      "MyClass",
      "config.xml",
      "configuration_1_2.dtd",
      "Duser.country",
      "allowMissingParamTags"
    ],
    "desc_text": [
      [
        "I have read check documentation: https://checkstyle.org/config_javadoc.html#JavadocMethod",
        []
      ],
      [
        "I have downloaded the latest checkstyle from: https://checkstyle.org/cmdline.html#Download_and_Run",
        []
      ],
      [
        "I have executed the cli and showed it below, as cli describes the problem better than 1,000 words",
        []
      ],
      [
        "/var/tmp $ cat YOUR_FILE.java",
        []
      ],
      [
        "#[[PLACE YOU OUTPUT HERE]]",
        []
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-9.0-all.jar -c config.xml YOUR_FILE.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "Audit done.\">/var/tmp $ javac YOUR_FILE.java",
        [
          "OB"
        ]
      ],
      [
        "#[[MAKE SURE THERE IS SUCCESSFUL COMPILATION]]",
        []
      ],
      [
        "public interface MyInterface {",
        []
      ],
      [
        "/** Javadoc ok here. */",
        "CODE"
      ],
      [
        "void test();",
        "CODE"
      ],
      [
        "class MyClass {",
        "CODE"
      ],
      [
        "/** Missing parameter here. */",
        "CODE"
      ],
      [
        "public MyClass(Integer amount) {",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "/var/tmp $ cat config.xml",
        []
      ],
      [
        "<?xml version=\"1.0\"?>",
        []
      ],
      [
        "<!DOCTYPE module PUBLIC",
        []
      ],
      [
        "\"-//Puppy Crawl//DTD Check Configuration 1.2//EN\"",
        []
      ],
      [
        "\"http://www.puppycrawl.com/dtds/configuration_1_2.dtd\">",
        []
      ],
      [
        "<module name=\"Checker\">",
        []
      ],
      [
        "<property name=\"charset\" value=\"UTF-8\"/>",
        []
      ],
      [
        "<property name=\"fileExtensions\" value=\"java, xml, properties\"/>",
        []
      ],
      [
        "<module name=\"TreeWalker\">",
        []
      ],
      [
        "<module name=\"JavadocMethod\">",
        []
      ],
      [
        "<property name=\"accessModifiers\" value=\"public\"/>",
        []
      ],
      [
        "<property name=\"allowMissingParamTags\" value=\"false\"/>",
        []
      ],
      [
        "<property name=\"allowMissingReturnTag\" value=\"true\"/>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "/var/tmp $ cat YOUR_FILE.java",
        []
      ],
      [
        "#[[PLACE YOU OUTPUT HERE]]",
        []
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-9.0-all.jar -c config.xml YOUR_FILE.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "I expect checkstyle to report constructor to have missing javadoc param.",
        [
          "OB",
          "EB"
        ]
      ],
      [
        "Reason for that is that interface of this inner class is implicitly considered public according to java specs (Some IDEs even mark explicit public keyword as unnecessary).",
        []
      ],
      [
        "If I add public keyword to class declaration, constructor is reported by checkstyle as expected.",
        []
      ]
    ]
  },
  "google_gson-2134": {
    "code_elements": [
      "public void testDateParseNonExistentDate() throws ParseException {",
      "String dateStr = \"2022-14-30\";",
      "try {",
      "Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));",
      "fail(\"Should've thrown exception\");",
      "} catch (Exception expected) {",
      "}",
      "}",
      "public void testDateParseNonExistentDate() throws ParseException {",
      "String dateStr = \"2022-12-33\";",
      "try {",
      "Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));",
      "fail(\"Should've thrown exception\");",
      "} catch (Exception expected) {",
      "}",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "ISO8061Utils.parse"
    ],
    "summary_text": [
      "ISO8061Utils.parse() accepts non-existent dates"
    ],
    "desc_hints": [
      "ISO8061Utils.parse",
      "ParseException",
      "testDateParseNonExistentDate",
      "ParsePosition",
      "toString",
      "dateStr",
      "ISO8601Utils.parse",
      "IllegalArgumentException",
      "HotSpot"
    ],
    "desc_text": [
      [
        "Gson version",
        []
      ],
      [
        "2.9.0",
        []
      ],
      [
        "Java / Android version",
        []
      ],
      [
        "java 16 2021-03-16",
        []
      ],
      [
        "Java(TM) SE Runtime Environment (build 16+36-2231)",
        []
      ],
      [
        "Java HotSpot(TM) 64-Bit Server VM (build 16+36-2231, mixed mode, sharing)",
        []
      ],
      [
        "Description",
        []
      ],
      [
        "Apparently ISO8061Utils.parse() works in a very lenient manner when dealing with dates that do not exist (for instance 2022-14-30), generating valid Date objects.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "Given this unit test:",
        [
          "SR"
        ]
      ],
      [
        "@Test",
        []
      ],
      [
        "public void testDateParseNonExistentDate() throws ParseException {",
        "CODE"
      ],
      [
        "String dateStr = \"2022-14-30\";",
        "CODE"
      ],
      [
        "try {",
        "CODE"
      ],
      [
        "Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));",
        "CODE"
      ],
      [
        "fail(\"Should've thrown exception\");",
        "CODE"
      ],
      [
        "} catch (Exception expected) {",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "It fails and produces a Date object whose toString() yields:",
        [
          "OB"
        ]
      ],
      [
        "Thu Mar 02 00:00:00 BRT 2023",
        []
      ],
      [
        "This also applies for instances where the day is invalid as well.",
        [
          "OB"
        ]
      ],
      [
        "@Test",
        []
      ],
      [
        "public void testDateParseNonExistentDate() throws ParseException {",
        "CODE"
      ],
      [
        "String dateStr = \"2022-12-33\";",
        "CODE"
      ],
      [
        "try {",
        "CODE"
      ],
      [
        "Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));",
        "CODE"
      ],
      [
        "fail(\"Should've thrown exception\");",
        "CODE"
      ],
      [
        "} catch (Exception expected) {",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "It fails and produces a Date object whose toString() yields:",
        [
          "OB"
        ]
      ],
      [
        "Mon Jan 02 00:00:00 BRT 2023",
        []
      ],
      [
        "Expected behavior",
        []
      ],
      [
        "An exception to be thrown, likely IllegalArgumentException.",
        [
          "OB"
        ]
      ],
      [
        "Actual behavior",
        [
          "OB"
        ]
      ],
      [
        "A valid Date object was generated that \"absorbed\" the surplus from the illegal argument.",
        [
          "OB"
        ]
      ],
      [
        "Note",
        []
      ],
      [
        "If this is expected behavior, let me know and I'll close the issue.",
        [
          "EB"
        ]
      ]
    ]
  },
  "checkstyle_checkstyle-11270": {
    "code_elements": [
      "package tmp;",
      "}",
      "}",
      "public static class someClass { // violation for both",
      "}",
      "public static record someRecord() { // violation for none, will be fixed in #11259",
      "}",
      "}",
      "}",
      "package tmp;",
      "}",
      "}",
      "public static class someClass { // violation for both",
      "}",
      "public static record someRecord() { // violation for none, will be fixed in #11259",
      "}",
      "}",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "RedundantModifierCheck"
    ],
    "summary_text": [
      "False Negative: RedundantModifierCheck"
    ],
    "desc_hints": [
      "someClass",
      "configuration_1_3.dtd",
      "someAnnInterface",
      "checkstyle.sourceforge.io",
      "all.jar",
      "TreeWalker",
      "RedundantModifier",
      "someRecord",
      "cmdline.html",
      "checkstyle.org",
      "Duser.language",
      "Test.java",
      "config.xml",
      "someEnum",
      "Duser.country",
      "config_modifier.html"
    ],
    "desc_text": [
      [
        "I have read check documentation: https://checkstyle.sourceforge.io/config_modifier.html#RedundantModifier",
        []
      ],
      [
        "I have downloaded the latest checkstyle from: https://checkstyle.org/cmdline.html#Download_and_Run",
        []
      ],
      [
        "I have executed the cli and showed it below, as cli describes the problem better than 1,000 words",
        []
      ],
      [
        "/var/tmp $ cat Test.java",
        []
      ],
      [
        "package tmp;",
        "CODE"
      ],
      [
        "public interface Test {",
        []
      ],
      [
        "public static interface foo { // violation for 'static', no violation for 'public'",
        []
      ],
      [
        "}",
        "CODE"
      ],
      [
        "public static enum someEnum { // violation for both",
        []
      ],
      [
        "}",
        "CODE"
      ],
      [
        "public static class someClass { // violation for both",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "public static record someRecord() { // violation for none, will be fixed in #11259",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "public static @interface someAnnInterface { // violation for none",
        []
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-9.3-all.jar -c config.xml Test.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:4:12: Redundant 'static' modifier.",
        [
          "OB"
        ]
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:7:5: Redundant 'public' modifier.",
        []
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:7:12: Redundant 'static' modifier.",
        [
          "OB"
        ]
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:10:5: Redundant 'public' modifier.",
        []
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:10:12: Redundant 'static' modifier.",
        [
          "OB"
        ]
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Checkstyle ends with 5 errors.",
        [
          "OB",
          "EB"
        ]
      ],
      [
        "\">/var/tmp $ javac Test.java",
        []
      ],
      [
        "/var/tmp $ cat config.xml",
        []
      ],
      [
        "<?xml version=\"1.0\"?>",
        []
      ],
      [
        "<!DOCTYPE module PUBLIC",
        []
      ],
      [
        "\"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"",
        []
      ],
      [
        "\"https://checkstyle.org/dtds/configuration_1_3.dtd\">",
        []
      ],
      [
        "<module name=\"Checker\">",
        []
      ],
      [
        "<module name=\"TreeWalker\">",
        []
      ],
      [
        "<module name=\"RedundantModifier\"/>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "/var/tmp $ cat Test.java",
        []
      ],
      [
        "package tmp;",
        "CODE"
      ],
      [
        "public interface Test {",
        []
      ],
      [
        "public static interface foo { // violation for 'static', no violation for 'public'",
        []
      ],
      [
        "}",
        "CODE"
      ],
      [
        "public static enum someEnum { // violation for both",
        []
      ],
      [
        "}",
        "CODE"
      ],
      [
        "public static class someClass { // violation for both",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "public static record someRecord() { // violation for none, will be fixed in #11259",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "public static @interface someAnnInterface { // violation for none",
        []
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-9.3-all.jar -c config.xml Test.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:4:12: Redundant 'static' modifier.",
        [
          "OB"
        ]
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:7:5: Redundant 'public' modifier.",
        []
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:7:12: Redundant 'static' modifier.",
        [
          "OB"
        ]
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:10:5: Redundant 'public' modifier.",
        []
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:10:12: Redundant 'static' modifier.",
        [
          "OB"
        ]
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Checkstyle ends with 5 errors.",
        [
          "OB",
          "EB"
        ]
      ],
      [
        "Describe what you expect in detail.",
        [
          "OB",
          "EB"
        ]
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:4:5: Redundant 'public' modifier.",
        []
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:4:12: Redundant 'static' modifier.",
        [
          "OB"
        ]
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:7:5: Redundant 'public' modifier.",
        []
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:7:12: Redundant 'static' modifier.",
        [
          "OB"
        ]
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:10:5: Redundant 'public' modifier.",
        []
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:10:12: Redundant 'static' modifier.",
        [
          "OB"
        ]
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:13:5: Redundant 'public' modifier.",
        []
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:13:12: Redundant 'static' modifier.",
        [
          "OB"
        ]
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:16:5: Redundant 'public' modifier.",
        []
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "[ERROR] /var/tmp/Test.java:16:12: Redundant 'static' modifier.",
        [
          "OB"
        ]
      ],
      [
        "[RedundantModifier]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Checkstyle ends with 10 errors.",
        [
          "OB"
        ]
      ],
      [
        "Every member class or interface declaration in the body of an interface declaration is implicitly public and static.",
        [
          "OB"
        ]
      ],
      [
        "See JLS for more info.",
        [
          "OB"
        ]
      ],
      [
        "Comments in code specify the current behavior.",
        [
          "OB",
          "SR"
        ]
      ]
    ]
  },
  "google_gson-2158": {
    "code_elements": [
      "System.out.println(new Gson().toJson(1.5, byte.class));",
      "System.out.println(new Gson().toJson(1.5, byte.class));"
    ],
    "stack_traces": [],
    "summary_hints": [],
    "summary_text": [
      "Primitive type adapters don't perform numeric conversion during serialization"
    ],
    "desc_hints": [
      "JsonWriter.value",
      "Number.toString",
      "toJson",
      "System.out.println",
      "byte.class",
      "Gson.toJson"
    ],
    "desc_text": [
      [
        "Gson version",
        []
      ],
      [
        "2.9.0",
        []
      ],
      [
        "Java / Android version",
        []
      ],
      [
        "Java 17",
        []
      ],
      [
        "Description",
        []
      ],
      [
        "The built-in adapters for primitive types don't perform numeric conversion for serialization.",
        [
          "OB"
        ]
      ],
      [
        "This is most obvious when using Gson's non-typesafe method Gson.toJson(Object, Type):",
        []
      ],
      [
        "System.out.println(new Gson().toJson(1.5, byte.class));",
        "CODE"
      ],
      [
        "Even though the adapter for byte should be used, Gson nonetheless emits 1.5 as output.",
        [
          "OB",
          "EB"
        ]
      ],
      [
        "I noticed that while trying to refactor the primitive type adapters to directly call the primitive JsonWriter.value methods instead of JsonWriter.value(Number) due to the overhead for checking if the string representation is a valid JSON number.",
        [
          "OB"
        ]
      ],
      [
        "Expected behavior",
        []
      ],
      [
        "Either narrowing / widening conversion should be performed or an exception should be thrown.",
        [
          "OB",
          "EB"
        ]
      ],
      [
        "(Or are there legit use cases for this?)",
        []
      ],
      [
        "Actual behavior",
        [
          "OB"
        ]
      ],
      [
        "Gson just emits the Number.toString() result, even if that does not match the type of the requested adapter.",
        [
          "OB"
        ]
      ],
      [
        "Reproduction steps",
        []
      ],
      [
        "System.out.println(new Gson().toJson(1.5, byte.class));",
        "CODE"
      ]
    ]
  },
  "checkstyle_checkstyle-11020": {
    "code_elements": [
      "public class Test {",
      "public boolean fun() {",
      "return false;",
      "}",
      "public boolean foo() {",
      "boolean tag = fun() ? true : false;  // should report a warning here",
      "// boolean tag = func() == true; // can be detected",
      "return tag;",
      "}",
      "}",
      "public class Test {",
      "public boolean fun() {",
      "return false;",
      "}",
      "public boolean foo() {",
      "boolean tag = fun() ? true : false;  // should report a warning here",
      "// boolean tag = func() == true; // can be detected",
      "return tag;",
      "}",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "SimplifyBooleanExpression"
    ],
    "summary_text": [
      "SimplifyBooleanExpression: A false negative about ternary operator"
    ],
    "desc_hints": [
      "configuration_1_3.dtd",
      "TreeWalker",
      "checkstyle.sourceforge.io",
      "all.jar",
      "cmdline.html",
      "config_coding.html",
      "fileExtensions",
      "checkstyle.org",
      "Duser.language",
      "Test.java",
      "config.xml",
      "Duser.country",
      "SimplifyBooleanExpression"
    ],
    "desc_text": [
      [
        "I have read check documentation: https://checkstyle.sourceforge.io/config_coding.html#SimplifyBooleanExpression",
        []
      ],
      [
        "I have downloaded the latest checkstyle from: https://checkstyle.org/cmdline.html#Download_and_Run",
        []
      ],
      [
        "I have executed the cli and showed it below, as cli describes the problem better than 1,000 words",
        []
      ],
      [
        "/var/tmp $ cat Test.java",
        []
      ],
      [
        "public class Test {",
        "CODE"
      ],
      [
        "public boolean fun() {",
        "CODE"
      ],
      [
        "return false;",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "public boolean foo() {",
        "CODE"
      ],
      [
        "boolean tag = fun() ? true : false;  // should report a warning here",
        "CODE"
      ],
      [
        "// boolean tag = func() == true; // can be detected",
        "CODE"
      ],
      [
        "return tag;",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-9.2-all.jar -c ./config.xml Test.java",
        [
          "OB"
        ]
      ],
      [
        "#[[PLACE YOUR OUTPUT HERE]]",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "Audit done.\">/var/tmp $ javac Test.java",
        [
          "OB"
        ]
      ],
      [
        "/var/tmp $ cat config.xml",
        []
      ],
      [
        "<?xml version=\"1.0\"?>",
        []
      ],
      [
        "<!DOCTYPE module PUBLIC",
        []
      ],
      [
        "\"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"",
        []
      ],
      [
        "\"https://checkstyle.org/dtds/configuration_1_3.dtd\">",
        []
      ],
      [
        "<module name=\"Checker\">",
        []
      ],
      [
        "<property name=\"severity\" value=\"error\"/>",
        [
          "OB"
        ]
      ],
      [
        "<property name=\"fileExtensions\" value=\"java, properties, xml\"/>",
        []
      ],
      [
        "<module name=\"TreeWalker\">",
        []
      ],
      [
        "<module name=\"SimplifyBooleanExpression\"/>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "/var/tmp $ cat Test.java",
        []
      ],
      [
        "public class Test {",
        "CODE"
      ],
      [
        "public boolean fun() {",
        "CODE"
      ],
      [
        "return false;",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "public boolean foo() {",
        "CODE"
      ],
      [
        "boolean tag = fun() ? true : false;  // should report a warning here",
        "CODE"
      ],
      [
        "// boolean tag = func() == true; // can be detected",
        "CODE"
      ],
      [
        "return tag;",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-9.2-all.jar -c ./config.xml Test.java",
        [
          "OB"
        ]
      ],
      [
        "#[[PLACE YOUR OUTPUT HERE]]",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Describe what you expect in detail.",
        [
          "OB",
          "EB"
        ]
      ],
      [
        "I have just found a false negative about the rule SimplifyBooleanExpression.",
        []
      ],
      [
        "Please refer to the below simplfied case.",
        [
          "OB"
        ]
      ],
      [
        "Here, I think fun() ?",
        []
      ],
      [
        "true : false at line 6 is similar to func() == true.",
        []
      ],
      [
        "They all can be simplified into func().",
        [
          "OB"
        ]
      ]
    ]
  },
  "assertj_assertj-core-2549": {
    "code_elements": [
      "var underlyingMap = new HashMap<String, List<String>>();",
      "underlyingMap.put(\"Hello\", List.of(\"World\"));",
      "var multiValueMap = CollectionUtils.toMultiValueMap(underlyingMap);",
      "// This assertion passes",
      "assertThat(multiValueMap).containsOnlyKeys(\"Hello\");",
      "// This assertion fails, as `multiValueMap` and `underlyingMap` are now empty",
      "assertThat(multiValueMap).containsOnlyKeys(\"Hello\");"
    ],
    "stack_traces": [],
    "summary_hints": [
      "AbstractMapAssert",
      "MultiValueMapAdapter",
      "containsOnlyKeys"
    ],
    "summary_text": [
      "Regression in `AbstractMapAssert#containsOnlyKeys` with Spring's `MultiValueMapAdapter`"
    ],
    "desc_hints": [
      "underlyingMap",
      "CollectionUtils.toMultiValueMap",
      "multiValueMap",
      "MultiValueMapAdapter",
      "HashMap",
      "List.of",
      "containsOnlyKeys",
      "AbstractMapAssert",
      "org.springframework.util.MultiValueMapAdapter",
      "assertThat",
      "underlyingMap.put"
    ],
    "desc_text": [
      [
        "Summary",
        [
          "OB"
        ]
      ],
      [
        "We saw this when updating from AssertJ 3.19.0 to 3.20.0.",
        [
          "OB"
        ]
      ],
      [
        "It appears that AbstractMapAssert#containsOnlyKeys is mutating the map that we're asserting on, which leads to test failures in our case.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "This is happening on an instance of org.springframework.util.MultiValueMapAdapter",
        []
      ],
      [
        "Example",
        [
          "SR"
        ]
      ],
      [
        "var underlyingMap = new HashMap<String, List<String>>();",
        "CODE"
      ],
      [
        "underlyingMap.put(\"Hello\", List.of(\"World\"));",
        "CODE"
      ],
      [
        "var multiValueMap = CollectionUtils.toMultiValueMap(underlyingMap);",
        "CODE"
      ],
      [
        "// This assertion passes",
        "CODE"
      ],
      [
        "assertThat(multiValueMap).containsOnlyKeys(\"Hello\");",
        "CODE"
      ],
      [
        "// This assertion fails, as `multiValueMap` and `underlyingMap` are now empty",
        "CODE"
      ],
      [
        "assertThat(multiValueMap).containsOnlyKeys(\"Hello\");",
        "CODE"
      ],
      [
        "The issue seems to have been introduced in #2167, and is caused by this use of Map#remove on a \"clone\" of the Map being asserted on.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "In our case that Map is a Spring MultiValueMapAdapter, which delegates operations to the underlying Map that it was constructed from.",
        []
      ],
      [
        "The remove call on the clone delegates to multiValueMap#remove which in turn delegates to underlyingMap#remove.",
        [
          "OB",
          "SR"
        ]
      ]
    ]
  },
  "Hakky54_sslcontext-kickstart-122": {
    "code_elements": [],
    "stack_traces": [],
    "summary_hints": [
      "TrustManager",
      "HostnameVerifier"
    ],
    "summary_text": [
      "Remove/Disable logging in unsafe HostnameVerifier and TrustManager"
    ],
    "desc_hints": [
      "TrustManager",
      "HostnameVerifier"
    ],
    "desc_text": [
      [
        "the logging in the unsafe variants of HostnameVerifier and TrustManager spam logs.",
        [
          "OB"
        ]
      ],
      [
        "There should be a way to disable this or at least log it to DEBUG.",
        [
          "EB"
        ]
      ],
      [
        "I see no reason why i would like to know that a self signed certificate is trusted.",
        [
          "OB"
        ]
      ],
      [
        "that's exactly what i want to do else i wouldn't use this specific verifier.",
        []
      ]
    ]
  },
  "checkstyle_checkstyle-11383": {
    "code_elements": [
      "// unexpected violation below",
      "/**",
      "* This is the actual summary.",
      "* {@summary This is wrong usage}",
      "*/",
      "public class Test2 {",
      "}",
      "// expected violation below",
      "/**",
      "* This is summary",
      "*/",
      "class foo {",
      "}",
      "// unexpected violation below",
      "/**",
      "* This is the actual summary.",
      "* {@summary This is wrong usage}",
      "*/",
      "public class Test2 {",
      "}",
      "// expected violation below",
      "/**",
      "* This is summary",
      "*/",
      "class foo {",
      "}",
      "* {@summary This is wrong usage}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "SummaryJavadocCheck"
    ],
    "summary_text": [
      "False positive: SummaryJavadocCheck"
    ],
    "desc_hints": [
      "configuration_1_3.dtd",
      "TreeWalker",
      "checkstyle.sourceforge.io",
      "all.jar",
      "IdeaProjects",
      "config_javadoc.html",
      "SummaryJavadocCheck",
      "cmdline.html",
      "ConfigCheckstyle",
      "checkstyle.org",
      "Duser.language",
      "Test2.java",
      "Test.java",
      "SummaryJavadoc",
      "config.xml",
      "Duser.country"
    ],
    "desc_text": [
      [
        "From comment1 and comment2",
        []
      ],
      [
        "I have read check documentation: https://checkstyle.sourceforge.io/config_javadoc.html#SummaryJavadoc",
        []
      ],
      [
        "I have downloaded the latest checkstyle from: https://checkstyle.org/cmdline.html#Download_and_Run",
        []
      ],
      [
        "I have executed the cli and showed it below, as cli describes the problem better than 1,000 words",
        []
      ],
      [
        "/var/tmp $ cat Test2.java",
        []
      ],
      [
        "// unexpected violation below",
        "CODE"
      ],
      [
        "/**",
        "CODE"
      ],
      [
        "* This is the actual summary.",
        "CODE"
      ],
      [
        "* {@summary This is wrong usage}",
        "CODE"
      ],
      [
        "*/",
        "CODE"
      ],
      [
        "public class Test2 {",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "// expected violation below",
        "CODE"
      ],
      [
        "/**",
        "CODE"
      ],
      [
        "* This is summary",
        "CODE"
      ],
      [
        "*/",
        "CODE"
      ],
      [
        "class foo {",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-9.2.1-all.jar -c config.xml Test2.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] /home/vyom/IdeaProjects/ConfigCheckstyle/src/TestP/Test2.java:2: Summary of Javadoc is missing an ending period.",
        [
          "OB"
        ]
      ],
      [
        "[SummaryJavadoc]",
        []
      ],
      [
        "[ERROR] /home/vyom/IdeaProjects/ConfigCheckstyle/src/TestP/Test2.java:10: First sentence of Javadoc is missing an ending period.",
        [
          "OB"
        ]
      ],
      [
        "[SummaryJavadoc]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Checkstyle ends with 2 errors.\">/var/tmp $ javac Test2.java",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "/var/tmp $ cat config.xml",
        []
      ],
      [
        "<?xml version=\"1.0\"?>",
        []
      ],
      [
        "<!DOCTYPE module PUBLIC",
        []
      ],
      [
        "\"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"",
        []
      ],
      [
        "\"https://checkstyle.org/dtds/configuration_1_3.dtd\">",
        []
      ],
      [
        "<module name=\"Checker\">",
        []
      ],
      [
        "<module name=\"TreeWalker\">",
        []
      ],
      [
        "<module name=\"SummaryJavadocCheck\"/>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "/var/tmp $ cat Test2.java",
        []
      ],
      [
        "// unexpected violation below",
        "CODE"
      ],
      [
        "/**",
        "CODE"
      ],
      [
        "* This is the actual summary.",
        "CODE"
      ],
      [
        "* {@summary This is wrong usage}",
        "CODE"
      ],
      [
        "*/",
        "CODE"
      ],
      [
        "public class Test2 {",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "// expected violation below",
        "CODE"
      ],
      [
        "/**",
        "CODE"
      ],
      [
        "* This is summary",
        "CODE"
      ],
      [
        "*/",
        "CODE"
      ],
      [
        "class foo {",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-9.2.1-all.jar -c config.xml Test2.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] /home/vyom/IdeaProjects/ConfigCheckstyle/src/TestP/Test2.java:2: Summary of Javadoc is missing an ending period.",
        [
          "OB"
        ]
      ],
      [
        "[SummaryJavadoc]",
        []
      ],
      [
        "[ERROR] /home/vyom/IdeaProjects/ConfigCheckstyle/src/TestP/Test2.java:10: First sentence of Javadoc is missing an ending period.",
        [
          "OB"
        ]
      ],
      [
        "[SummaryJavadoc]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Checkstyle ends with 2 errors.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "Describe what you expect in detail.",
        [
          "OB",
          "EB"
        ]
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] /home/vyom/IdeaProjects/ConfigCheckstyle/src/TestP/Test2.java:10: First sentence of Javadoc is missing an ending period.",
        [
          "OB"
        ]
      ],
      [
        "[SummaryJavadoc]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "If the first line is present then @summary is ignored, though a warning is given by the Javadoc tool.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "Test.java:4: warning: invalid use of @summary",
        []
      ],
      [
        "* {@summary This is wrong usage}",
        "CODE"
      ],
      [
        "see all details at #11051 (comment)",
        []
      ],
      [
        "Expected: only violation on second javadoc",
        [
          "OB",
          "EB"
        ]
      ]
    ]
  },
  "jhy_jsoup-1648": {
    "code_elements": [
      "public static void main(String[] args) {",
      "String html = \"unicode attr names\";",
      "org.jsoup.nodes.Document jsoupDoc;",
      "jsoupDoc = Jsoup.parse(html);",
      "Document w3Doc = W3CDom.convert(jsoupDoc);",
      "System.out.println(W3CDom.asString(w3Doc, W3CDom.OutputHtml()));",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [],
    "summary_text": [
      "Allow attributes valid in html when converting from JSoup to W3C Document"
    ],
    "desc_hints": [
      "github.com",
      "W3CDom.OutputHtml",
      "W3CDom.asString",
      "W3CDOM.java",
      "System.out.println",
      "W3CDom.convert",
      "jsoupDoc",
      "W3CDom.java",
      "Jsoup.parse",
      "org.jsoup.nodes.Document"
    ],
    "desc_text": [
      [
        "Consider the following html document:",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "unicode attr names",
        [
          "OB"
        ]
      ],
      [
        "Using v1.14.2 and running the following code:",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "public static void main(String[] args) {",
        "CODE"
      ],
      [
        "String html = \"unicode attr names\";",
        "CODE"
      ],
      [
        "org.jsoup.nodes.Document jsoupDoc;",
        "CODE"
      ],
      [
        "jsoupDoc = Jsoup.parse(html);",
        "CODE"
      ],
      [
        "Document w3Doc = W3CDom.convert(jsoupDoc);",
        "CODE"
      ],
      [
        "System.out.println(W3CDom.asString(w3Doc, W3CDom.OutputHtml()));",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "Results in:",
        [
          "OB"
        ]
      ],
      [
        "unicode attr names",
        [
          "OB"
        ]
      ],
      [
        "This is caused by [W3CDOM.java#L346](https://github.com/jhy/jsoup/blob/master/src/main/java/org/jsoup/helper/W3CDom.java#L346) hard-codes the syntax to `xml`.",
        [
          "OB"
        ]
      ],
      [
        "It can be easily fixed by checking the doctype of the output document and use that as the syntax.",
        [
          "OB"
        ]
      ]
    ]
  },
  "Hakky54_sslcontext-kickstart-197": {
    "code_elements": [
      "SSLFactory.Builder builder = SSLFactory.builder().withDefaultTrustMaterial();",
      "builder.withUnsafeTrustMaterial();",
      "SSLFactory factory = builder.build();",
      "SSLContext sslContext = factory.getSslContext();",
      "SSLContext.setDefault(sslContext);"
    ],
    "stack_traces": [],
    "summary_hints": [],
    "summary_text": [
      "Version 7.4.3 fails to accept all certificates"
    ],
    "desc_hints": [
      "builder.withUnsafeTrustMaterial",
      "builder.build",
      "sslContext",
      "UnsafeX509ExtendedTrustManager",
      "CombinableX509TrustManager",
      "withDefaultTrustMaterial",
      "factory.getSslContext",
      "SSLFactory.Builder",
      "SSLFactory.builder",
      "MacOS",
      "SSLContext.setDefault",
      "builder.withTrustingAllCertificatesWithoutValidation"
    ],
    "desc_text": [
      [
        "Describe the bug",
        []
      ],
      [
        "It seems that changes in version 7.4.3 skips accept-all truststore configured using",
        []
      ],
      [
        "builder.withUnsafeTrustMaterial() or builder.withTrustingAllCertificatesWithoutValidation()",
        []
      ],
      [
        "This is because UnsafeX509ExtendedTrustManager has 0 accepted X509Certificate",
        []
      ],
      [
        "therefore it is skipped during checking in CombinableX509TrustManager",
        [
          "OB"
        ]
      ],
      [
        "To Reproduce",
        [
          "SR"
        ]
      ],
      [
        "SSLFactory.Builder builder = SSLFactory.builder().withDefaultTrustMaterial();",
        "CODE"
      ],
      [
        "builder.withUnsafeTrustMaterial();",
        "CODE"
      ],
      [
        "SSLFactory factory = builder.build();",
        "CODE"
      ],
      [
        "SSLContext sslContext = factory.getSslContext();",
        "CODE"
      ],
      [
        "SSLContext.setDefault(sslContext);",
        "CODE"
      ],
      [
        "Expected behavior",
        []
      ],
      [
        "Validation of the TLS certificate should pass and connection should be established",
        [
          "EB"
        ]
      ],
      [
        "Environmental Data:",
        []
      ],
      [
        "Java Version 11.0",
        []
      ],
      [
        "Gradle",
        []
      ],
      [
        "OS MacOS",
        []
      ],
      [
        "Additional context",
        []
      ],
      [
        "The test passes with 7.3.0 and 7.4.2",
        [
          "OB"
        ]
      ]
    ]
  },
  "Hakky54_sslcontext-kickstart-167": {
    "code_elements": [
      ".build();",
      "SSLContext sslContext = sslFactory.getSslContext();"
    ],
    "stack_traces": [],
    "summary_hints": [
      "CertificateEntry"
    ],
    "summary_text": [
      "the alias of CertificateEntry"
    ],
    "desc_hints": [
      "nl.altindag.ssl.util.KeyStoreUtils.createTrustStore",
      "NaqXBUqI0AVHuVWJmFMLYwpi",
      "sOKrScnTCPIVn3uExcYDLDEuRDsQXfDvD03Bm6aFPC",
      "K6iJYjwLuVUQ1Eaw6X3s78c",
      "NRaX76Fv9XG",
      "zpyGN1acwh9jl50pcKjgM",
      "ytyu9annHs",
      "sslFactory",
      "java.security.KeyStore.isCertificateEntry",
      "I0JHatPA4Xw8m",
      "sun.security.validator.KeyStores.getTrustedCerts",
      "TPtvnFwTunD3Bzv14b",
      "qac3XCVI7vwjY21uEHbCEklh8ZycAt28Dc0h747MqG9A3xdMDV",
      "cmF0aW9uIEhUVFAgQ0EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDB",
      "tq42vguuiQvpLndfGIEA4qh5AFyo",
      "WD1QUsRkr9EQaGinawo9owHwYDVR0jBBgwFoAUphpsq",
      "WD1QUsRkr9",
      "piouaXkY5FnVmMlNqWGkXfmvtMC8JzG",
      "ZPbDcI1zg",
      "l3yaAtFxguNyhKftHia518iTjcUpn9f3gmSzDlZy2",
      "FgQUphpsq",
      "UYhNgWvGQgOF7MP8",
      "1nXoRmNJO8ardAVWcL7z",
      "iqP1226",
      "g1nGMVQmssCChkH5r",
      "XqmJ36MSY3WtAPfF3ySH1ltcMguXqN79k3Bxw0mGq",
      "ynmf96NzzHQq1CfKp5CgQB",
      "W7k8WZPc7UW3vLzTg",
      "HD5Al4yMYCMzx7ocbZLg",
      "hhs1uLEBgF",
      "PuRt1NBZYC",
      "XehLeYxNoTBLytY2d9kdEmW9MIGCqaROabDdxygxcJ5l3aqkBTiA",
      "8rAkgoega4zCQ89L7w8g1b54NnvnMOQIKs4aQ7TsYQUgyGxj6j",
      "4BWXBn9O7ufdUt4n08yPFP5hn",
      "sun.security.pkcs12.PKCS12KeyStore.engineIsCertificateEntry",
      "VDUY7Hab08GJzRRP",
      "lf8iBtGjuxQNJSsOBRY6Up8ajEWeYvEqpKDHVHYxc78qdjGCzltgGIvjzah389mH",
      "z4q8Lq2e8vsMKKpSO1vZ0grvffj6MBni2stfZ4ifA6Kubh",
      "Icz6L3CaSAVCMIEw145G",
      "sslContext",
      "yE65FKuMXoHLhCdN9MoKFEDr6eLlY7l9HWbcfQGpePoX4L",
      "UC458l4Ey4Lns4C7NVAteHva9L71CE",
      "TG2vVsLzDhZiNjOE1Le3UeT4eAz7psgg",
      "MIIFWTCCA0GgAwIBAgIUW4b6bPPPyRAm0DrDKKJJ8YlSqOkwDQYJKoZIhvcNAQEL",
      "KeyStore",
      "zANBgkqhkiG9w0BAQsFAAOCAgEAlg8X",
      "BAUwAwEB",
      "auN0cal3jM14k3FeZApyoL",
      "trustedCerts",
      "6RZTeomHhqAwr",
      "yePShKsG",
      "withTrustMaterial",
      "sun.security.ssl.X509TrustManagerImpl",
      "a9imOFcddUgoNSCgwAyBuGdnUKTjuDnV2630O7cRky4Ly8gI3hxuV3j",
      "caOKVyjBn73HzXQ6Xp8KM6ef3",
      "X509TrustManagerImpl",
      "ca.crt",
      "BQAwPDE6MDgGA1UEAxMxRWxhc3RpY3NlYXJjaCBzZWN1cml0eSBhdXRvLWNvbmZp",
      "1onHfeXtbtyqjpHIV6RZa8RqNLg",
      "h5BvtLZEjAtAP6q1Al0phYV6eYQvLE8Dzbw0RQ0",
      "zDTwJ3nECqwIDAQABo1MwUTAdBgNVHQ4E",
      "eESTlzZiM6I7qTR1JzW5Fuyz",
      "sslFactory.getSslContext",
      "SSLFactory.builder",
      "Z3VyYXRpb24gSFRUUCBDQTAeFw0yMjA0MDUxMjQ1MzVaFw0yNTA0MDQxMjQ1MzVa",
      "CertificateUtils.loadCertificate",
      "KgzZMaw8GwdtT",
      "nl.altindag.ssl.util.CertificateUtils.generateAlias",
      "uWGUtSV2plImhQMgfrF4wMhntiNQcHa0Fge0k4I4ajt",
      "PnpSKIkt",
      "DQLUYifwOlGx4iAb6ePuiA8b7tXAGPn0z",
      "MDwxOjA4BgNVBAMTMUVsYXN0aWNzZWFyY2ggc2VjdXJpdHkgYXV0by1jb25maWd1",
      "uCJR1INZbiw4tjGTJssRSGMUsn7Mto0",
      "EQaGinawo9owDwYDVR0TAQH",
      "3UL3AHqbmQY4IavRDEd2s"
    ],
    "desc_text": [
      [
        "Describe the bug",
        []
      ],
      [
        "Hello, I am going to create an SSLContext with the following code, but the resulting SSLContext does not appear to be complete and its trustedCerts is empty.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "SSLFactory sslFactory = SSLFactory.builder()",
        []
      ],
      [
        ".withTrustMaterial(CertificateUtils.loadCertificate(\"ca.crt\"))",
        [
          "OB"
        ]
      ],
      [
        ".build();",
        "CODE"
      ],
      [
        "SSLContext sslContext = sslFactory.getSslContext();",
        "CODE"
      ],
      [
        "the content of ca.crt",
        [
          "OB"
        ]
      ],
      [
        "-----BEGIN CERTIFICATE-----",
        []
      ],
      [
        "MIIFWTCCA0GgAwIBAgIUW4b6bPPPyRAm0DrDKKJJ8YlSqOkwDQYJKoZIhvcNAQEL",
        []
      ],
      [
        "BQAwPDE6MDgGA1UEAxMxRWxhc3RpY3NlYXJjaCBzZWN1cml0eSBhdXRvLWNvbmZp",
        []
      ],
      [
        "Z3VyYXRpb24gSFRUUCBDQTAeFw0yMjA0MDUxMjQ1MzVaFw0yNTA0MDQxMjQ1MzVa",
        []
      ],
      [
        "MDwxOjA4BgNVBAMTMUVsYXN0aWNzZWFyY2ggc2VjdXJpdHkgYXV0by1jb25maWd1",
        []
      ],
      [
        "cmF0aW9uIEhUVFAgQ0EwggIiMA0GCSqGSIb3DQEBAQUAA4ICDwAwggIKAoICAQDB",
        []
      ],
      [
        "q3aR//NaqXBUqI0AVHuVWJmFMLYwpi/DQLUYifwOlGx4iAb6ePuiA8b7tXAGPn0z",
        []
      ],
      [
        "TWFQ82t0DZf/1nXoRmNJO8ardAVWcL7z+VDUY7Hab08GJzRRP/V5b7VL+J+WBQOG",
        []
      ],
      [
        "auN0cal3jM14k3FeZApyoL+XqmJ36MSY3WtAPfF3ySH1ltcMguXqN79k3Bxw0mGq",
        []
      ],
      [
        "AJt+z4q8Lq2e8vsMKKpSO1vZ0grvffj6MBni2stfZ4ifA6Kubh/yePShKsG/N8nY",
        []
      ],
      [
        "K6iJYjwLuVUQ1Eaw6X3s78c+eESTlzZiM6I7qTR1JzW5Fuyz/ZPbDcI1zg+p9H4g",
        []
      ],
      [
        "NRaX76Fv9XG/XehLeYxNoTBLytY2d9kdEmW9MIGCqaROabDdxygxcJ5l3aqkBTiA",
        []
      ],
      [
        "tq42vguuiQvpLndfGIEA4qh5AFyo+iqP1226+1onHfeXtbtyqjpHIV6RZa8RqNLg",
        []
      ],
      [
        "ynmf96NzzHQq1CfKp5CgQB/l3yaAtFxguNyhKftHia518iTjcUpn9f3gmSzDlZy2",
        []
      ],
      [
        "KgzZMaw8GwdtT+qac3XCVI7vwjY21uEHbCEklh8ZycAt28Dc0h747MqG9A3xdMDV",
        []
      ],
      [
        "lf8iBtGjuxQNJSsOBRY6Up8ajEWeYvEqpKDHVHYxc78qdjGCzltgGIvjzah389mH",
        []
      ],
      [
        "UC458l4Ey4Lns4C7NVAteHva9L71CE/zDTwJ3nECqwIDAQABo1MwUTAdBgNVHQ4E",
        []
      ],
      [
        "FgQUphpsq/WD1QUsRkr9EQaGinawo9owHwYDVR0jBBgwFoAUphpsq/WD1QUsRkr9",
        []
      ],
      [
        "EQaGinawo9owDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAgEAlg8X",
        []
      ],
      [
        "PnpSKIkt+a9imOFcddUgoNSCgwAyBuGdnUKTjuDnV2630O7cRky4Ly8gI3hxuV3j",
        []
      ],
      [
        "I0JHatPA4Xw8m/8rAkgoega4zCQ89L7w8g1b54NnvnMOQIKs4aQ7TsYQUgyGxj6j",
        []
      ],
      [
        "hhs1uLEBgF/uCJR1INZbiw4tjGTJssRSGMUsn7Mto0+3UL3AHqbmQY4IavRDEd2s",
        []
      ],
      [
        "zpyGN1acwh9jl50pcKjgM/UYhNgWvGQgOF7MP8+4BWXBn9O7ufdUt4n08yPFP5hn",
        []
      ],
      [
        "sOKrScnTCPIVn3uExcYDLDEuRDsQXfDvD03Bm6aFPC+qwr+W7k8WZPc7UW3vLzTg",
        []
      ],
      [
        "TPtvnFwTunD3Bzv14b+2BOQH+caOKVyjBn73HzXQ6Xp8KM6ef3+6RZTeomHhqAwr",
        []
      ],
      [
        "TG2vVsLzDhZiNjOE1Le3UeT4eAz7psgg+piouaXkY5FnVmMlNqWGkXfmvtMC8JzG",
        []
      ],
      [
        "uWGUtSV2plImhQMgfrF4wMhntiNQcHa0Fge0k4I4ajt/HD5Al4yMYCMzx7ocbZLg",
        []
      ],
      [
        "bTSDn+PuRt1NBZYC/Icz6L3CaSAVCMIEw145G/ytyu9annHs+hXSx+1ji3MHkF/g",
        []
      ],
      [
        "yE65FKuMXoHLhCdN9MoKFEDr6eLlY7l9HWbcfQGpePoX4L/g1nGMVQmssCChkH5r",
        []
      ],
      [
        "h5BvtLZEjAtAP6q1Al0phYV6eYQvLE8Dzbw0RQ0=",
        []
      ],
      [
        "-----END CERTIFICATE-----",
        []
      ],
      [
        "Environmental Data:",
        []
      ],
      [
        "Java Version 1.8.0_202",
        []
      ],
      [
        "sslcontext-kickstart Version 7.3.0",
        []
      ],
      [
        "OS: Windows",
        []
      ],
      [
        "Additional context",
        []
      ],
      [
        "I found out the cause of the problem, when create X509TrustManagerImpl, its trustedCerts is already empty.",
        [
          "OB"
        ]
      ],
      [
        "sun.security.ssl.X509TrustManagerImpl",
        []
      ],
      [
        "sun.security.validator.KeyStores.getTrustedCerts(KeyStore var0)",
        []
      ],
      [
        "java.security.KeyStore.isCertificateEntry(String alias)",
        []
      ],
      [
        "sun.security.pkcs12.PKCS12KeyStore.engineIsCertificateEntry(String var1)",
        []
      ],
      [
        "the entries keys has the capital letters, but the parameter var1 is lowercase letters",
        [
          "OB"
        ]
      ],
      [
        "Can you consider changing alias to lowercase in the nl.altindag.ssl.util.KeyStoreUtils.createTrustStore(List certificates)",
        [
          "OB"
        ]
      ],
      [
        "or nl.altindag.ssl.util.CertificateUtils.generateAlias(Certificate certificate)",
        []
      ]
    ]
  },
  "google_gson-2060": {
    "code_elements": [
      "{",
      "\"class\": \"Setting\",",
      "\"event\": 4,",
      "\"notify\": true,",
      "\"feeds\": [",
      "{",
      "\"code\": \"USGS\",",
      "\"language\": \"eng\"",
      "}",
      "}",
      "settings = new HashMap<>();",
      "protected List feeds = new ArrayList<>();",
      "public class MonitoredLocationSetting",
      "{",
      "@SerializedName(\"class\") private final String className = \"Setting\";",
      "protected int event = -1;",
      "protected Map<String, Object> settings = new HashMap<>();",
      "protected List<LocationSettingFeed> feeds = new ArrayList<>();",
      "}",
      "> entries = json.getAsJsonObject().entrySet().iterator();",
      "while (entries.hasNext())",
      "{",
      "Map.Entry next = entries.next();",
      "if (!fieldsToIgnore.contains(next.getKey()))",
      "{",
      "if (next.getValue().isJsonPrimitive())",
      "{",
      "if (next.getValue().getAsJsonPrimitive().isBoolean())",
      "{",
      "setting.getSettings().put(next.getKey(), next.getValue().getAsBoolean());",
      "}",
      "else if (next.getValue().getAsJsonPrimitive().isNumber())",
      "{",
      "// This deserialises as LazilyParsedNumber",
      "setting.getSettings().put(next.getKey(), next.getValue().getAsNumber());",
      "}",
      "else if (next.getValue().getAsJsonPrimitive().isString())",
      "{",
      "setting.getSettings().put(next.getKey(), next.getValue().getAsString());",
      "}",
      "else",
      "{",
      "setting.getSettings().put(next.getKey(), next.getValue());",
      "}",
      "}",
      "}",
      "}",
      "}",
      "return setting;",
      "}",
      "builder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonSerializer()",
      "{",
      "@Override public JsonElement serialize(MonitoredLocationSetting src, Type typeOfSrc, JsonSerializationContext context)",
      "{",
      "JsonObject serialised = (JsonObject)new Gson().toJsonTree(src);",
      "// After the above line is called the following JSON is produced",
      "/*",
      "{",
      "\"class\": \"Setting\",",
      "\"event\": 4,",
      "\"feeds\": [",
      "{",
      "\"code\": \"USGS\",",
      "\"language\": \"eng\"",
      "}",
      "],",
      "\"settings\": {",
      "\"notify\": true,",
      "\"severity\": {  <-- Issue here",
      "\"value\": \"2\"",
      "},",
      "\"sound\": false",
      "}",
      "}",
      "*/",
      "JsonObject setting = serialised.get(\"settings\").getAsJsonObject();",
      "// Ignore for setting.settings",
      "Iterator> entries = setting.entrySet().iterator();",
      "while (entries.hasNext())",
      "{",
      "Map.Entry next = entries.next();",
      "serialised.add(next.getKey(), next.getValue());",
      "}",
      "serialised.remove(\"settings\");",
      "return serialised;",
      "}",
      "});\">builder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonDeserializer<MonitoredLocationSetting>()",
      "{",
      "@Override public MonitoredLocationSetting deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException",
      "{",
      "MonitoredLocationSetting setting = new Gson().fromJson(json, typeOfT);",
      "if (setting != null)",
      "{",
      "// Ignore for setting.settings",
      "List<String> fieldsToIgnore = new ArrayList<String>(Arrays.asList(new String[]{\"event\", \"feeds\", \"class\"}));",
      "Iterator<Map.Entry<String, JsonElement>> entries = json.getAsJsonObject().entrySet().iterator();",
      "while (entries.hasNext())",
      "{",
      "Map.Entry<String, JsonElement> next = entries.next();",
      "if (!fieldsToIgnore.contains(next.getKey()))",
      "{",
      "if (next.getValue().isJsonPrimitive())",
      "{",
      "if (next.getValue().getAsJsonPrimitive().isBoolean())",
      "{",
      "setting.getSettings().put(next.getKey(), next.getValue().getAsBoolean());",
      "}",
      "else if (next.getValue().getAsJsonPrimitive().isNumber())",
      "{",
      "// This deserialises as LazilyParsedNumber",
      "setting.getSettings().put(next.getKey(), next.getValue().getAsNumber());",
      "}",
      "else if (next.getValue().getAsJsonPrimitive().isString())",
      "{",
      "setting.getSettings().put(next.getKey(), next.getValue().getAsString());",
      "}",
      "else",
      "{",
      "setting.getSettings().put(next.getKey(), next.getValue());",
      "}",
      "}",
      "}",
      "}",
      "}",
      "return setting;",
      "}",
      "builder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonSerializer<MonitoredLocationSetting>()",
      "{",
      "@Override public JsonElement serialize(MonitoredLocationSetting src, Type typeOfSrc, JsonSerializationContext context)",
      "{",
      "JsonObject serialised = (JsonObject)new Gson().toJsonTree(src);",
      "// After the above line is called the following JSON is produced",
      "/*",
      "{",
      "\"class\": \"Setting\",",
      "\"event\": 4,",
      "\"feeds\": [",
      "{",
      "\"code\": \"USGS\",",
      "\"language\": \"eng\"",
      "}",
      "],",
      "\"settings\": {",
      "\"notify\": true,",
      "\"severity\": {  <-- Issue here",
      "\"value\": \"2\"",
      "},",
      "\"sound\": false",
      "}",
      "}",
      "*/",
      "JsonObject setting = serialised.get(\"settings\").getAsJsonObject();",
      "// Ignore for setting.settings",
      "Iterator<Map.Entry<String, JsonElement>> entries = setting.entrySet().iterator();",
      "while (entries.hasNext())",
      "{",
      "Map.Entry<String, JsonElement> next = entries.next();",
      "serialised.add(next.getKey(), next.getValue());",
      "}",
      "serialised.remove(\"settings\");",
      "return serialised;",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "LazilyParsedNumber",
      "JsonObject"
    ],
    "summary_text": [
      "LazilyParsedNumber being serialised as JsonObject"
    ],
    "desc_hints": [
      "serialised.get",
      "JsonObject",
      "getAsBoolean",
      "getAsNumber",
      "JsonSerializationContext",
      "entries.hasNext",
      "next.getValue",
      "builder.registerTypeAdapter",
      "HashMap",
      "isJsonPrimitive",
      "serialised.add",
      "entrySet",
      "json.getAsJsonObject",
      "NoArgsConstructor",
      "LazilyParsedNumber",
      "SerializedName",
      "LocationSettingFeed",
      "suppressConstructorProperties",
      "JsonSerializer",
      "Map.Entry",
      "getAsJsonPrimitive",
      "toJsonTree",
      "next.getKey",
      "isString",
      "MonitoredLocationSetting.class",
      "serialised.remove",
      "setting.getSettings",
      "fromJson",
      "MonitoredLocationSetting",
      "Arrays.asList",
      "entries.next",
      "fieldsToIgnore.contains",
      "typeOfSrc",
      "typeOfT",
      "setting.settings",
      "JsonDeserializer",
      "isNumber",
      "JsonParseException",
      "fieldsToIgnore",
      "getAsJsonObject",
      "JsonDeserializationContext",
      "JsonElement",
      "isBoolean",
      "setting.entrySet",
      "AllArgsConstructor",
      "className",
      "getAsString",
      "ArrayList"
    ],
    "desc_text": [
      [
        "When I deserialise a JSON object into a map and back into JSON it seems to serialise the LazilyParsedNumber as an object.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "JSON being parsed:",
        []
      ],
      [
        "{",
        "CODE"
      ],
      [
        "\"class\": \"Setting\",",
        "CODE"
      ],
      [
        "\"event\": 4,",
        "CODE"
      ],
      [
        "\"severity\": 2,",
        []
      ],
      [
        "\"notify\": true,",
        "CODE"
      ],
      [
        "\"sound\": false,",
        []
      ],
      [
        "\"feeds\": [",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "\"code\": \"USGS\",",
        "CODE"
      ],
      [
        "\"language\": \"eng\"",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "]",
        []
      ],
      [
        "}",
        "CODE"
      ],
      [
        "Class JSON is being parsed into",
        [
          "OB"
        ]
      ],
      [
        "settings = new HashMap<>();",
        "CODE"
      ],
      [
        "protected List feeds = new ArrayList<>();",
        "CODE"
      ],
      [
        "}\">@NoArgsConstructor",
        []
      ],
      [
        "@AllArgsConstructor(suppressConstructorProperties = true)",
        []
      ],
      [
        "@Accessors(chain = true) @Data",
        []
      ],
      [
        "public class MonitoredLocationSetting",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "@SerializedName(\"class\") private final String className = \"Setting\";",
        "CODE"
      ],
      [
        "protected int event = -1;",
        "CODE"
      ],
      [
        "protected Map<String, Object> settings = new HashMap<>();",
        "CODE"
      ],
      [
        "protected List<LocationSettingFeed> feeds = new ArrayList<>();",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "Basically all im doing is deserialising all fields except \"event\", \"feeds\", and \"class\" into the settings map using the following adapters",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "> entries = json.getAsJsonObject().entrySet().iterator();",
        "CODE"
      ],
      [
        "while (entries.hasNext())",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "Map.Entry next = entries.next();",
        "CODE"
      ],
      [
        "if (!fieldsToIgnore.contains(next.getKey()))",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "if (next.getValue().isJsonPrimitive())",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "if (next.getValue().getAsJsonPrimitive().isBoolean())",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "setting.getSettings().put(next.getKey(), next.getValue().getAsBoolean());",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "else if (next.getValue().getAsJsonPrimitive().isNumber())",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "// This deserialises as LazilyParsedNumber",
        "CODE"
      ],
      [
        "setting.getSettings().put(next.getKey(), next.getValue().getAsNumber());",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "else if (next.getValue().getAsJsonPrimitive().isString())",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "setting.getSettings().put(next.getKey(), next.getValue().getAsString());",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "else",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "setting.getSettings().put(next.getKey(), next.getValue());",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "return setting;",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "});",
        []
      ],
      [
        "builder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonSerializer()",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "@Override public JsonElement serialize(MonitoredLocationSetting src, Type typeOfSrc, JsonSerializationContext context)",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "JsonObject serialised = (JsonObject)new Gson().toJsonTree(src);",
        "CODE"
      ],
      [
        "// After the above line is called the following JSON is produced",
        "CODE"
      ],
      [
        "/*",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "\"class\": \"Setting\",",
        "CODE"
      ],
      [
        "\"event\": 4,",
        "CODE"
      ],
      [
        "\"feeds\": [",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "\"code\": \"USGS\",",
        "CODE"
      ],
      [
        "\"language\": \"eng\"",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "],",
        "CODE"
      ],
      [
        "\"settings\": {",
        "CODE"
      ],
      [
        "\"notify\": true,",
        "CODE"
      ],
      [
        "\"severity\": {  <-- Issue here",
        "CODE"
      ],
      [
        "\"value\": \"2\"",
        "CODE"
      ],
      [
        "},",
        "CODE"
      ],
      [
        "\"sound\": false",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "*/",
        "CODE"
      ],
      [
        "JsonObject setting = serialised.get(\"settings\").getAsJsonObject();",
        "CODE"
      ],
      [
        "// Ignore for setting.settings",
        "CODE"
      ],
      [
        "Iterator> entries = setting.entrySet().iterator();",
        "CODE"
      ],
      [
        "while (entries.hasNext())",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "Map.Entry next = entries.next();",
        "CODE"
      ],
      [
        "serialised.add(next.getKey(), next.getValue());",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "serialised.remove(\"settings\");",
        "CODE"
      ],
      [
        "return serialised;",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "});\">builder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonDeserializer<MonitoredLocationSetting>()",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "@Override public MonitoredLocationSetting deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "MonitoredLocationSetting setting = new Gson().fromJson(json, typeOfT);",
        "CODE"
      ],
      [
        "if (setting != null)",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "// Ignore for setting.settings",
        "CODE"
      ],
      [
        "List<String> fieldsToIgnore = new ArrayList<String>(Arrays.asList(new String[]{\"event\", \"feeds\", \"class\"}));",
        "CODE"
      ],
      [
        "Iterator<Map.Entry<String, JsonElement>> entries = json.getAsJsonObject().entrySet().iterator();",
        "CODE"
      ],
      [
        "while (entries.hasNext())",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "Map.Entry<String, JsonElement> next = entries.next();",
        "CODE"
      ],
      [
        "if (!fieldsToIgnore.contains(next.getKey()))",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "if (next.getValue().isJsonPrimitive())",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "if (next.getValue().getAsJsonPrimitive().isBoolean())",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "setting.getSettings().put(next.getKey(), next.getValue().getAsBoolean());",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "else if (next.getValue().getAsJsonPrimitive().isNumber())",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "// This deserialises as LazilyParsedNumber",
        "CODE"
      ],
      [
        "setting.getSettings().put(next.getKey(), next.getValue().getAsNumber());",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "else if (next.getValue().getAsJsonPrimitive().isString())",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "setting.getSettings().put(next.getKey(), next.getValue().getAsString());",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "else",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "setting.getSettings().put(next.getKey(), next.getValue());",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "return setting;",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "});",
        []
      ],
      [
        "builder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonSerializer<MonitoredLocationSetting>()",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "@Override public JsonElement serialize(MonitoredLocationSetting src, Type typeOfSrc, JsonSerializationContext context)",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "JsonObject serialised = (JsonObject)new Gson().toJsonTree(src);",
        "CODE"
      ],
      [
        "// After the above line is called the following JSON is produced",
        "CODE"
      ],
      [
        "/*",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "\"class\": \"Setting\",",
        "CODE"
      ],
      [
        "\"event\": 4,",
        "CODE"
      ],
      [
        "\"feeds\": [",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "\"code\": \"USGS\",",
        "CODE"
      ],
      [
        "\"language\": \"eng\"",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "],",
        "CODE"
      ],
      [
        "\"settings\": {",
        "CODE"
      ],
      [
        "\"notify\": true,",
        "CODE"
      ],
      [
        "\"severity\": {  <-- Issue here",
        "CODE"
      ],
      [
        "\"value\": \"2\"",
        "CODE"
      ],
      [
        "},",
        "CODE"
      ],
      [
        "\"sound\": false",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "*/",
        "CODE"
      ],
      [
        "JsonObject setting = serialised.get(\"settings\").getAsJsonObject();",
        "CODE"
      ],
      [
        "// Ignore for setting.settings",
        "CODE"
      ],
      [
        "Iterator<Map.Entry<String, JsonElement>> entries = setting.entrySet().iterator();",
        "CODE"
      ],
      [
        "while (entries.hasNext())",
        "CODE"
      ],
      [
        "{",
        "CODE"
      ],
      [
        "Map.Entry<String, JsonElement> next = entries.next();",
        "CODE"
      ],
      [
        "serialised.add(next.getKey(), next.getValue());",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "serialised.remove(\"settings\");",
        "CODE"
      ],
      [
        "return serialised;",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "});",
        []
      ],
      [
        "From what I can see, technically this is correct because as far as Gson is concerned LazilyParsedNumber IS an object and not a 'primitive', however, doing a straight convert from and then back to json causes a problem because the object isnt parsed back as a primitive after being read as a primitive (Number)",
        [
          "OB"
        ]
      ]
    ]
  },
  "jhy_jsoup-1763": {
    "code_elements": [
      "Safelist safelist1 = Safelist.none().addAttributes(\"foo\", \"bar\");",
      "Safelist safelist2 = new Safelist(safelist1);",
      "safelist1.addAttributes(\"foo\", \"baz\");",
      "final String html = \"\";",
      "System.out.println(Jsoup.clean(html, safelist1));",
      "System.out.println(Jsoup.clean(html, safelist2));"
    ],
    "stack_traces": [],
    "summary_hints": [],
    "summary_text": [
      "Copy constructor of Safelist shares state"
    ],
    "desc_hints": [
      "addAttributes",
      "Jsoup.clean",
      "JavaDoc",
      "System.out.println",
      "Safelist.none",
      "safelist1.addAttributes"
    ],
    "desc_text": [
      [
        "The copy constructor of Safelist `public Safelist(Safelist copy)` does not deep copy the data structures as advertised in the JavaDoc but shares the nested data structures, e.g.",
        [
          "OB"
        ]
      ],
      [
        "`Map>`.",
        [
          "OB"
        ]
      ],
      [
        "This causes unexpected mutation.",
        [
          "OB"
        ]
      ],
      [
        "An example would be:",
        [
          "SR"
        ]
      ],
      [
        "Safelist safelist1 = Safelist.none().addAttributes(\"foo\", \"bar\");",
        "CODE"
      ],
      [
        "Safelist safelist2 = new Safelist(safelist1);",
        "CODE"
      ],
      [
        "safelist1.addAttributes(\"foo\", \"baz\");",
        "CODE"
      ],
      [
        "final String html = \"\";",
        "CODE"
      ],
      [
        "System.out.println(Jsoup.clean(html, safelist1));",
        "CODE"
      ],
      [
        "System.out.println(Jsoup.clean(html, safelist2));",
        "CODE"
      ],
      [
        "The second output should not contain the `baz` attribute but does.",
        [
          "OB",
          "EB"
        ]
      ]
    ]
  },
  "checkstyle_checkstyle-10967": {
    "code_elements": [
      "\"foo\",",
      "\"bar\"",
      "public class OperatorWrapExample {",
      "public String[] array = {",
      "\"foo\",",
      "\"bar\"",
      "};",
      "}",
      "String[] example();",
      "}",
      "\"foo\",",
      "\"bar\"",
      "public class OperatorWrapExample {",
      "public String[] array = {",
      "\"foo\",",
      "\"bar\"",
      "};",
      "}",
      "String[] example();",
      "}"
    ],
    "stack_traces": [],
    "summary_hints": [
      "OperatorWrap"
    ],
    "summary_text": [
      "OperatorWrap with token ASSIGN too strict for annotations"
    ],
    "desc_hints": [
      "configuration_1_3.dtd",
      "TreeWalker",
      "checkstyle.sourceforge.io",
      "all.jar",
      "config_whitespace.html",
      "cmdline.html",
      "checkstyle.org",
      "OperatorWrapExample.java",
      "Duser.language",
      "OperatorWrapExample",
      "config.xml",
      "OperatorWrap",
      "Duser.country"
    ],
    "desc_text": [
      [
        "I have read check documentation: https://checkstyle.sourceforge.io/config_whitespace.html#OperatorWrap",
        []
      ],
      [
        "I have downloaded the latest checkstyle from: https://checkstyle.org/cmdline.html#Download_and_Run",
        []
      ],
      [
        "I have executed the cli and showed it below, as cli describes the problem better than 1,000 words",
        []
      ],
      [
        "/var/tmp $ cat OperatorWrapExample.java",
        []
      ],
      [
        "@Annotation(example = {",
        []
      ],
      [
        "\"foo\",",
        "CODE"
      ],
      [
        "\"bar\"",
        "CODE"
      ],
      [
        "})",
        []
      ],
      [
        "public class OperatorWrapExample {",
        "CODE"
      ],
      [
        "public String[] array = {",
        "CODE"
      ],
      [
        "\"foo\",",
        "CODE"
      ],
      [
        "\"bar\"",
        "CODE"
      ],
      [
        "};",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "@interface Annotation {",
        []
      ],
      [
        "String[] example();",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-9.1-all.jar -c config.xml OperatorWrapExample.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] I:\\_tmp\\_checkstyle\\OperatorWrapExample.java:1:21: '=' should be on a new line.",
        [
          "EB"
        ]
      ],
      [
        "[OperatorWrap]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Checkstyle ends with 1 errors.\">/var/tmp $ javac OperatorWrapExample.java",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "/var/tmp $ cat config.xml",
        []
      ],
      [
        "<?xml version=\"1.0\"?>",
        []
      ],
      [
        "<!DOCTYPE module PUBLIC",
        []
      ],
      [
        "\"-//Checkstyle//DTD Checkstyle Configuration 1.3//EN\"",
        []
      ],
      [
        "\"https://checkstyle.org/dtds/configuration_1_3.dtd\">",
        []
      ],
      [
        "<module name=\"Checker\">",
        []
      ],
      [
        "<module name=\"TreeWalker\">",
        []
      ],
      [
        "<module name=\"OperatorWrap\">",
        []
      ],
      [
        "<property name=\"tokens\" value=\"ASSIGN\"/>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "</module>",
        []
      ],
      [
        "/var/tmp $ cat OperatorWrapExample.java",
        []
      ],
      [
        "@Annotation(example = {",
        []
      ],
      [
        "\"foo\",",
        "CODE"
      ],
      [
        "\"bar\"",
        "CODE"
      ],
      [
        "})",
        []
      ],
      [
        "public class OperatorWrapExample {",
        "CODE"
      ],
      [
        "public String[] array = {",
        "CODE"
      ],
      [
        "\"foo\",",
        "CODE"
      ],
      [
        "\"bar\"",
        "CODE"
      ],
      [
        "};",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "@interface Annotation {",
        []
      ],
      [
        "String[] example();",
        "CODE"
      ],
      [
        "}",
        "CODE"
      ],
      [
        "/var/tmp $ RUN_LOCALE=\"-Duser.language=en -Duser.country=US\"",
        []
      ],
      [
        "/var/tmp $ java $RUN_LOCALE -jar checkstyle-9.1-all.jar -c config.xml OperatorWrapExample.java",
        []
      ],
      [
        "Starting audit...",
        []
      ],
      [
        "[ERROR] I:\\_tmp\\_checkstyle\\OperatorWrapExample.java:1:21: '=' should be on a new line.",
        [
          "EB"
        ]
      ],
      [
        "[OperatorWrap]",
        []
      ],
      [
        "Audit done.",
        [
          "OB"
        ]
      ],
      [
        "Checkstyle ends with 1 errors.",
        [
          "OB",
          "SR"
        ]
      ],
      [
        "In the above example, the array field allows the first element to be on a new line.",
        [
          "OB",
          "EB",
          "SR"
        ]
      ],
      [
        "If the same is done for an annotation, Checkstyle complains.",
        [
          "OB"
        ]
      ],
      [
        "The only way to \"fix\" this is to put the first element on the same line as the = {.",
        []
      ],
      [
        "I expect the same behaviour in annotations as in other code.",
        [
          "EB"
        ]
      ]
    ]
  }
}