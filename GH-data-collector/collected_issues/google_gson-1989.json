{
  "issue_id": 1452,
  "issue_url": "https://github.com/google/gson/issues/1452",
  "title": "newJsonWriter not return a new JSON writer configured for the settings on this Gson instance!",
  "description": "<p dir=\"auto\">Hi,</p>\n<p dir=\"auto\">while working on my project with Retrofit, I found an issue with <code class=\"notranslate\">newJsonWriter</code> method in Gson class.</p>\n<p dir=\"auto\">I used <code class=\"notranslate\">GsonConverterFactory</code> which is a wrapper class of Gson in Retrofit.</p>\n<p dir=\"auto\">Gson enables to escape HTML characters as a default.</p>\n<p dir=\"auto\">However, Retrofit doesn't encode the request body as the same as Gson does.</p>\n<p dir=\"auto\">Here is GsonConverterFactory code from Retrofit. I can see there is no any other options it gives to gson.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public final class GsonConverterFactory extends Converter.Factory {\n  /**\n   * Create an instance using a default {@link Gson} instance for conversion. Encoding to JSON and\n   * decoding from JSON (when no charset is specified by a header) will use UTF-8.\n   */\n  public static GsonConverterFactory create() {\n    return create(new Gson());\n  }\n\n  /**\n   * Create an instance using {@code gson} for conversion. Encoding to JSON and\n   * decoding from JSON (when no charset is specified by a header) will use UTF-8.\n   */\n  @SuppressWarnings(\"ConstantConditions\") // Guarding public API nullability.\n  public static GsonConverterFactory create(Gson gson) {\n    if (gson == null) throw new NullPointerException(\"gson == null\");\n    return new GsonConverterFactory(gson);\n  }\n\n  private final Gson gson;\n\n  private GsonConverterFactory(Gson gson) {\n    this.gson = gson;\n  }\n\n  @Override\n  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,\n      Retrofit retrofit) {\n    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));\n    return new GsonResponseBodyConverter<>(gson, adapter);\n  }\n\n  @Override\n  public Converter<?, RequestBody> requestBodyConverter(Type type,\n      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {\n    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));\n    return new GsonRequestBodyConverter<>(gson, adapter);\n  }\n}\"><pre class=\"notranslate\"><code>public final class GsonConverterFactory extends Converter.Factory {\n  /**\n   * Create an instance using a default {@link Gson} instance for conversion. Encoding to JSON and\n   * decoding from JSON (when no charset is specified by a header) will use UTF-8.\n   */\n  public static GsonConverterFactory create() {\n    return create(new Gson());\n  }\n\n  /**\n   * Create an instance using {@code gson} for conversion. Encoding to JSON and\n   * decoding from JSON (when no charset is specified by a header) will use UTF-8.\n   */\n  @SuppressWarnings(\"ConstantConditions\") // Guarding public API nullability.\n  public static GsonConverterFactory create(Gson gson) {\n    if (gson == null) throw new NullPointerException(\"gson == null\");\n    return new GsonConverterFactory(gson);\n  }\n\n  private final Gson gson;\n\n  private GsonConverterFactory(Gson gson) {\n    this.gson = gson;\n  }\n\n  @Override\n  public Converter<ResponseBody, ?> responseBodyConverter(Type type, Annotation[] annotations,\n      Retrofit retrofit) {\n    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));\n    return new GsonResponseBodyConverter<>(gson, adapter);\n  }\n\n  @Override\n  public Converter<?, RequestBody> requestBodyConverter(Type type,\n      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {\n    TypeAdapter<?> adapter = gson.getAdapter(TypeToken.get(type));\n    return new GsonRequestBodyConverter<>(gson, adapter);\n  }\n}\n</code></pre></div>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final class GsonRequestBodyConverter<T> implements Converter<T, RequestBody> {\n  private static final MediaType MEDIA_TYPE = MediaType.get(\"application/json; charset=UTF-8\");\n  private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n\n  private final Gson gson;\n  private final TypeAdapter<T> adapter;\n\n  GsonRequestBodyConverter(Gson gson, TypeAdapter<T> adapter) {\n    this.gson = gson;\n    this.adapter = adapter;\n  }\n\n  @Override public RequestBody convert(T value) throws IOException {\n    Buffer buffer = new Buffer();\n    Writer writer = new OutputStreamWriter(buffer.outputStream(), UTF_8);\n    JsonWriter jsonWriter = gson.newJsonWriter(writer);\n    adapter.write(jsonWriter, value);\n    jsonWriter.close();\n    return RequestBody.create(MEDIA_TYPE, buffer.readByteString());\n  }\n}\n\"><pre class=\"notranslate\"><code>final class GsonRequestBodyConverter<T> implements Converter<T, RequestBody> {\n  private static final MediaType MEDIA_TYPE = MediaType.get(\"application/json; charset=UTF-8\");\n  private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n\n  private final Gson gson;\n  private final TypeAdapter<T> adapter;\n\n  GsonRequestBodyConverter(Gson gson, TypeAdapter<T> adapter) {\n    this.gson = gson;\n    this.adapter = adapter;\n  }\n\n  @Override public RequestBody convert(T value) throws IOException {\n    Buffer buffer = new Buffer();\n    Writer writer = new OutputStreamWriter(buffer.outputStream(), UTF_8);\n    JsonWriter jsonWriter = gson.newJsonWriter(writer);\n    adapter.write(jsonWriter, value);\n    jsonWriter.close();\n    return RequestBody.create(MEDIA_TYPE, buffer.readByteString());\n  }\n}\n\n</code></pre></div>\n<p dir=\"auto\">As above, it uses <code class=\"notranslate\">gson.newJsonWriter(writer)</code>.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  /**\n   * Returns a new JSON writer configured for the settings on this Gson instance.\n   */\n  public JsonWriter newJsonWriter(Writer writer) throws IOException {\n    if (generateNonExecutableJson) {\n      writer.write(JSON_NON_EXECUTABLE_PREFIX);\n    }\n    JsonWriter jsonWriter = new JsonWriter(writer);\n    if (prettyPrinting) {\n      jsonWriter.setIndent(\"  \");\n    }\n    jsonWriter.setSerializeNulls(serializeNulls);\n    return jsonWriter;\n  }\"><pre class=\"notranslate\"><code>  /**\n   * Returns a new JSON writer configured for the settings on this Gson instance.\n   */\n  public JsonWriter newJsonWriter(Writer writer) throws IOException {\n    if (generateNonExecutableJson) {\n      writer.write(JSON_NON_EXECUTABLE_PREFIX);\n    }\n    JsonWriter jsonWriter = new JsonWriter(writer);\n    if (prettyPrinting) {\n      jsonWriter.setIndent(\"  \");\n    }\n    jsonWriter.setSerializeNulls(serializeNulls);\n    return jsonWriter;\n  }\n</code></pre></div>\n<p dir=\"auto\">I look through <code class=\"notranslate\">newJsonWriter</code>, but it does not apparently configure whole settings from Gson.</p>\n<p dir=\"auto\">For example, it is <code class=\"notranslate\">HtmlSafe</code> option in my case.</p>\n<p dir=\"auto\">I guess HtmlSafe is garanteed as true in Gson, though, it can be false in JsonWriter when not using `setHtmlSafe(true)'.</p>\n<p dir=\"auto\">Could you check this issue?</p>",
  "description_text": "Hi,\nwhile working on my project with Retrofit, I found an issue with newJsonWriter method in Gson class.\nI used GsonConverterFactory which is a wrapper class of Gson in Retrofit.\nGson enables to escape HTML characters as a default.\nHowever, Retrofit doesn't encode the request body as the same as Gson does.\nHere is GsonConverterFactory code from Retrofit. I can see there is no any other options it gives to gson.\n responseBodyConverter(Type type, Annotation[] annotations,\n      Retrofit retrofit) {\n    TypeAdapter adapter = gson.getAdapter(TypeToken.get(type));\n    return new GsonResponseBodyConverter<>(gson, adapter);\n  }\n\n  @Override\n  public Converter requestBodyConverter(Type type,\n      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {\n    TypeAdapter adapter = gson.getAdapter(TypeToken.get(type));\n    return new GsonRequestBodyConverter<>(gson, adapter);\n  }\n}\">public final class GsonConverterFactory extends Converter.Factory {\n  /**\n   * Create an instance using a default {@link Gson} instance for conversion. Encoding to JSON and\n   * decoding from JSON (when no charset is specified by a header) will use UTF-8.\n   */\n  public static GsonConverterFactory create() {\n    return create(new Gson());\n  }\n\n  /**\n   * Create an instance using {@code gson} for conversion. Encoding to JSON and\n   * decoding from JSON (when no charset is specified by a header) will use UTF-8.\n   */\n  @SuppressWarnings(\"ConstantConditions\") // Guarding public API nullability.\n  public static GsonConverterFactory create(Gson gson) {\n    if (gson == null) throw new NullPointerException(\"gson == null\");\n    return new GsonConverterFactory(gson);\n  }\n\n  private final Gson gson;\n\n  private GsonConverterFactory(Gson gson) {\n    this.gson = gson;\n  }\n\n  @Override\n  public Converter responseBodyConverter(Type type, Annotation[] annotations,\n      Retrofit retrofit) {\n    TypeAdapter adapter = gson.getAdapter(TypeToken.get(type));\n    return new GsonResponseBodyConverter<>(gson, adapter);\n  }\n\n  @Override\n  public Converter requestBodyConverter(Type type,\n      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {\n    TypeAdapter adapter = gson.getAdapter(TypeToken.get(type));\n    return new GsonRequestBodyConverter<>(gson, adapter);\n  }\n}\n\n adapter;\n\n  GsonRequestBodyConverter(Gson gson, TypeAdapter adapter) {\n    this.gson = gson;\n    this.adapter = adapter;\n  }\n\n  @Override public RequestBody convert(T value) throws IOException {\n    Buffer buffer = new Buffer();\n    Writer writer = new OutputStreamWriter(buffer.outputStream(), UTF_8);\n    JsonWriter jsonWriter = gson.newJsonWriter(writer);\n    adapter.write(jsonWriter, value);\n    jsonWriter.close();\n    return RequestBody.create(MEDIA_TYPE, buffer.readByteString());\n  }\n}\n\">final class GsonRequestBodyConverter implements Converter {\n  private static final MediaType MEDIA_TYPE = MediaType.get(\"application/json; charset=UTF-8\");\n  private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n\n  private final Gson gson;\n  private final TypeAdapter adapter;\n\n  GsonRequestBodyConverter(Gson gson, TypeAdapter adapter) {\n    this.gson = gson;\n    this.adapter = adapter;\n  }\n\n  @Override public RequestBody convert(T value) throws IOException {\n    Buffer buffer = new Buffer();\n    Writer writer = new OutputStreamWriter(buffer.outputStream(), UTF_8);\n    JsonWriter jsonWriter = gson.newJsonWriter(writer);\n    adapter.write(jsonWriter, value);\n    jsonWriter.close();\n    return RequestBody.create(MEDIA_TYPE, buffer.readByteString());\n  }\n}\n\n\nAs above, it uses gson.newJsonWriter(writer).\n  /**\n   * Returns a new JSON writer configured for the settings on this Gson instance.\n   */\n  public JsonWriter newJsonWriter(Writer writer) throws IOException {\n    if (generateNonExecutableJson) {\n      writer.write(JSON_NON_EXECUTABLE_PREFIX);\n    }\n    JsonWriter jsonWriter = new JsonWriter(writer);\n    if (prettyPrinting) {\n      jsonWriter.setIndent(\"  \");\n    }\n    jsonWriter.setSerializeNulls(serializeNulls);\n    return jsonWriter;\n  }\n\nI look through newJsonWriter, but it does not apparently configure whole settings from Gson.\nFor example, it is HtmlSafe option in my case.\nI guess HtmlSafe is garanteed as true in Gson, though, it can be false in JsonWriter when not using `setHtmlSafe(true)'.\nCould you check this issue?"
}