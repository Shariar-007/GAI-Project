{
  "issue_id": 2303,
  "issue_url": "https://github.com/assertj/assertj/issues/2303",
  "title": "Add `containsAnyOf` to `CharSequence` assertions",
  "description": "<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Currently, checking if a String contains at least one substring can be done with <code class=\"notranslate\">satisfiesAnyOf</code> or <code class=\"notranslate\">containsPattern</code>. The former is quite verbose, while the latter does not provide specific details in case of failures.</p>\n<p dir=\"auto\">To improve this use case, <code class=\"notranslate\">containsAnyOf(CharSequence...)</code> could be added to <code class=\"notranslate\">AbstractCharSequenceAssert</code>.</p>\n<p dir=\"auto\">Inspired by <a href=\"https://stackoverflow.com/q/68643040/9714611\" rel=\"nofollow\">https://stackoverflow.com/q/68643040/9714611</a></p>\n<h4 dir=\"auto\">Example</h4>\n<h5 dir=\"auto\"><code class=\"notranslate\">satisfiesAnyOf</code></h5>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(\"I am a string\").satisfiesAnyOf(s -> assertThat(s).contains(\"am\"),\n                                           s -> assertThat(s).contains(\"some string\"));\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"I am a string\"</span>).<span class=\"pl-en\">satisfiesAnyOf</span>(<span class=\"pl-s1\">s</span> -> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">s</span>).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"am\"</span>),\n                                           <span class=\"pl-s1\">s</span> -> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">s</span>).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"some string\"</span>));</pre></div>\n<p dir=\"auto\">Failure message:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Multiple Failures (2 failures)\n-- failure 1 --\nExpecting actual:\n  \"I a string\"\nto contain:\n  \"am\" \n-- failure 2 --\nExpecting actual:\n  \"I a string\"\nto contain:\n  \"some string\" \"><pre class=\"notranslate\"><code>Multiple Failures (2 failures)\n-- failure 1 --\nExpecting actual:\n  \"I a string\"\nto contain:\n  \"am\" \n-- failure 2 --\nExpecting actual:\n  \"I a string\"\nto contain:\n  \"some string\" \n</code></pre></div>\n<h5 dir=\"auto\"><code class=\"notranslate\">containsPattern</code></h5>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(\"I am a string\").containsPattern(\".(?:am|some string).*\");\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"I am a string\"</span>).<span class=\"pl-en\">containsPattern</span>(<span class=\"pl-s\">\".(?:am|some string).*\"</span>);</pre></div>\n<p dir=\"auto\">Failure message:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Expecting actual:\n  \"I a string\"\nto contain pattern:\n  \".(?:am|some string).*\"\"><pre class=\"notranslate\"><code>Expecting actual:\n  \"I a string\"\nto contain pattern:\n  \".(?:am|some string).*\"\n</code></pre></div>\n<h5 dir=\"auto\"><code class=\"notranslate\">containsAnyOf</code></h5>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(\"I am a string\").containsAnyOf(\"am\", \"some string\");\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"I am a string\"</span>).<span class=\"pl-en\">containsAnyOf</span>(<span class=\"pl-s\">\"am\"</span>, <span class=\"pl-s\">\"some string\"</span>);</pre></div>\n<p dir=\"auto\">Failure message:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Expecting actual:\n  \"I a string\"\nto contain any of:\n  [\"am\", \"some string\"]\"><pre class=\"notranslate\"><code>Expecting actual:\n  \"I a string\"\nto contain any of:\n  [\"am\", \"some string\"]\n</code></pre></div>",
  "description_text": "Summary\nCurrently, checking if a String contains at least one substring can be done with satisfiesAnyOf or containsPattern. The former is quite verbose, while the latter does not provide specific details in case of failures.\nTo improve this use case, containsAnyOf(CharSequence...) could be added to AbstractCharSequenceAssert.\nInspired by https://stackoverflow.com/q/68643040/9714611\nExample\nsatisfiesAnyOf\n assertThat(s).contains(\"am\"),\n                                           s -> assertThat(s).contains(\"some string\"));\">assertThat(\"I am a string\").satisfiesAnyOf(s -> assertThat(s).contains(\"am\"),\n                                           s -> assertThat(s).contains(\"some string\"));\nFailure message:\nMultiple Failures (2 failures)\n-- failure 1 --\nExpecting actual:\n  \"I a string\"\nto contain:\n  \"am\" \n-- failure 2 --\nExpecting actual:\n  \"I a string\"\nto contain:\n  \"some string\" \n\ncontainsPattern\nassertThat(\"I am a string\").containsPattern(\".(?:am|some string).*\");\nFailure message:\nExpecting actual:\n  \"I a string\"\nto contain pattern:\n  \".(?:am|some string).*\"\n\ncontainsAnyOf\nassertThat(\"I am a string\").containsAnyOf(\"am\", \"some string\");\nFailure message:\nExpecting actual:\n  \"I a string\"\nto contain any of:\n  [\"am\", \"some string\"]\n"
}