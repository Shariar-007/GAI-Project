{
  "issue_id": 2680,
  "issue_url": "https://github.com/mockito/mockito/issues/2680",
  "title": "MockedConstruction has side effects even after close() (with Sub-/Superclass)",
  "description": "<p dir=\"auto\">I am not 100% sure, but I think this is a bug. (Might be me just doing something wrong, but I don't see anything)</p>\n<p dir=\"auto\">I prepared a small example <a href=\"https://github.com/eNBeWe/mockito-bug\">here</a> with most recent versions of mockito-inline (4.6.1) and junit5 (5.8.2). I prepared it on Ubuntu, using OpenJDK 11, but I also experienced this issue on other systems.</p>\n<p dir=\"auto\">In short, I have two tests, each mocking constructors. The two constructors are related to each other, via inheritance. Both constructor mocks are auto-closed through try-with-resource.<br>\nIf I first mock the subclass constructor, close it again and then mock the superclass constructor and create a subclass object, my test fails. If I do it the other way around, my tests work.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class SuperClass {}\n\nclass SubClass extends SuperClass {\n\tpublic boolean isOtherValue() {\n\t\treturn true;\n\t}\n}\"><pre class=\"notranslate\"><code>class SuperClass {}\n\nclass SubClass extends SuperClass {\n\tpublic boolean isOtherValue() {\n\t\treturn true;\n\t}\n}\n</code></pre></div>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@TestMethodOrder(OrderAnnotation.class)\nclass FailingTest {\n\n\t@Test\n\t@Order(1)\n\tvoid testThingsFirst() {\n\t\ttry (MockedConstruction<SubClass> mocked = Mockito.mockConstruction(SubClass.class)) {\n\t\t\tSystem.out.println(\"Running testCreateStuff\");\n\t\t}\n\t}\n\n\t@Test\n\t@Order(2)\n\tvoid testThingsSecond() {\n\t\ttry (MockedConstruction<SuperClass> constructionMock = Mockito.mockConstruction(SuperClass.class)) {\n\t\t\tSystem.out.println(\"Running testOtherValue\");\n\t\t\tSubClass testee = new SubClass();\n\t\t\tassertTrue(testee.isOtherValue());\n\t\t}\n\t}\n}\"><pre class=\"notranslate\"><code>@TestMethodOrder(OrderAnnotation.class)\nclass FailingTest {\n\n\t@Test\n\t@Order(1)\n\tvoid testThingsFirst() {\n\t\ttry (MockedConstruction<SubClass> mocked = Mockito.mockConstruction(SubClass.class)) {\n\t\t\tSystem.out.println(\"Running testCreateStuff\");\n\t\t}\n\t}\n\n\t@Test\n\t@Order(2)\n\tvoid testThingsSecond() {\n\t\ttry (MockedConstruction<SuperClass> constructionMock = Mockito.mockConstruction(SuperClass.class)) {\n\t\t\tSystem.out.println(\"Running testOtherValue\");\n\t\t\tSubClass testee = new SubClass();\n\t\t\tassertTrue(testee.isOtherValue());\n\t\t}\n\t}\n}\n</code></pre></div>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[ERROR] Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.793 s <<< FAILURE! - in de.enbewe.bug.mockito.FailingTest\n[ERROR] de.enbewe.bug.mockito.FailingTest.testThingsSecond  Time elapsed: 0.039 s  <<< FAILURE!\norg.opentest4j.AssertionFailedError: expected: <true> but was: <false>\"><pre class=\"notranslate\"><code>[ERROR] Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.793 s <<< FAILURE! - in de.enbewe.bug.mockito.FailingTest\n[ERROR] de.enbewe.bug.mockito.FailingTest.testThingsSecond  Time elapsed: 0.039 s  <<< FAILURE!\norg.opentest4j.AssertionFailedError: expected: <true> but was: <false>\n</code></pre></div>\n<p dir=\"auto\">So it seems the old, closed subclass-constructor is becoming active again, when I mock the superclass.</p>\n<p dir=\"auto\">I tried to find some more info / debug more, but I don't really understand enough of the internals of Mockito.</p>",
  "description_text": "I am not 100% sure, but I think this is a bug. (Might be me just doing something wrong, but I don't see anything)\nI prepared a small example here with most recent versions of mockito-inline (4.6.1) and junit5 (5.8.2). I prepared it on Ubuntu, using OpenJDK 11, but I also experienced this issue on other systems.\nIn short, I have two tests, each mocking constructors. The two constructors are related to each other, via inheritance. Both constructor mocks are auto-closed through try-with-resource.\nIf I first mock the subclass constructor, close it again and then mock the superclass constructor and create a subclass object, my test fails. If I do it the other way around, my tests work.\nclass SuperClass {}\n\nclass SubClass extends SuperClass {\n\tpublic boolean isOtherValue() {\n\t\treturn true;\n\t}\n}\n\n constructionMock = Mockito.mockConstruction(SuperClass.class)) {\n\t\t\tSystem.out.println(\"Running testOtherValue\");\n\t\t\tSubClass testee = new SubClass();\n\t\t\tassertTrue(testee.isOtherValue());\n\t\t}\n\t}\n}\">@TestMethodOrder(OrderAnnotation.class)\nclass FailingTest {\n\n\t@Test\n\t@Order(1)\n\tvoid testThingsFirst() {\n\t\ttry (MockedConstruction mocked = Mockito.mockConstruction(SubClass.class)) {\n\t\t\tSystem.out.println(\"Running testCreateStuff\");\n\t\t}\n\t}\n\n\t@Test\n\t@Order(2)\n\tvoid testThingsSecond() {\n\t\ttry (MockedConstruction constructionMock = Mockito.mockConstruction(SuperClass.class)) {\n\t\t\tSystem.out.println(\"Running testOtherValue\");\n\t\t\tSubClass testee = new SubClass();\n\t\t\tassertTrue(testee.isOtherValue());\n\t\t}\n\t}\n}\n\n[ERROR] Tests run: 2, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.793 s <<< FAILURE! - in de.enbewe.bug.mockito.FailingTest\n[ERROR] de.enbewe.bug.mockito.FailingTest.testThingsSecond  Time elapsed: 0.039 s  <<< FAILURE!\norg.opentest4j.AssertionFailedError: expected:  but was: \n\nSo it seems the old, closed subclass-constructor is becoming active again, when I mock the superclass.\nI tried to find some more info / debug more, but I don't really understand enough of the internals of Mockito."
}