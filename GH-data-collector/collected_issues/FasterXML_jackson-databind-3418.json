{
  "issue_id": 513,
  "issue_url": "https://github.com/FasterXML/jackson-dataformat-xml/issues/513",
  "title": "Empty list incorrectly deserialized when `ACCEPT_SINGLE_VALUE_AS_ARRAY` is enabled",
  "description": "<p dir=\"auto\">When <code class=\"notranslate\">ACCEPT_SINGLE_VALUE_AS_ARRAY</code> is enabled, an empty <code class=\"notranslate\">List<String></code> is incorrectly deserialized as a list containing a single empty string (<code class=\"notranslate\">List.of(\"\")</code>). Test case:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.List;\n\npublic class EmptyElementTest {\n    @Test\n    public void test() throws JsonProcessingException {\n        XmlMapper mapper = new XmlMapper();\n        mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        List<String> list = mapper.readValue(\"<values/>\", new TypeReference<List<String>>() {});\n        Assert.assertTrue(list.isEmpty());\n    }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonProcessingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">type</span>.<span class=\"pl-s1\">TypeReference</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">DeserializationFeature</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">dataformat</span>.<span class=\"pl-s1\">xml</span>.<span class=\"pl-s1\">XmlMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Assert</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">List</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">EmptyElementTest</span> {\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">test</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">XmlMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">XmlMapper</span>();\n        <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">enable</span>(<span class=\"pl-smi\">DeserializationFeature</span>.<span class=\"pl-c1\">ACCEPT_SINGLE_VALUE_AS_ARRAY</span>);\n        <span class=\"pl-smi\">List</span><<span class=\"pl-smi\">String</span>> <span class=\"pl-s1\">list</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"<values/>\"</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeReference</span><<span class=\"pl-smi\">List</span><<span class=\"pl-smi\">String</span>>>() {});\n        <span class=\"pl-s1\">Assert</span>.<span class=\"pl-en\">assertTrue</span>(<span class=\"pl-s1\">list</span>.<span class=\"pl-en\">isEmpty</span>());\n    }\n}</pre></div>\n<p dir=\"auto\">This is technically correct behavior, because <code class=\"notranslate\"><values/></code> can be deserialized as an empty string, which can then be wrapped in a list. However imo this should still be fixed.</p>\n<p dir=\"auto\">Looking at the code, the issue is in databind <code class=\"notranslate\">StringCollectionDeserializer</code>. For the test case, <code class=\"notranslate\">isExpectedStartArrayToken</code> returns false, which triggers the <code class=\"notranslate\">handleNonArray</code> logic. This logic checks for the <code class=\"notranslate\">ACCEPT_SINGLE_VALUE_AS_ARRAY</code> <em>first</em>, before trying to coerce the empty string to a list, which would succeed here.</p>\n<p dir=\"auto\">I see two approaches to fix this. Either change <code class=\"notranslate\">FromXmlParser.isExpectedStartArrayToken</code> to return <code class=\"notranslate\">true</code> for an empty string token, or change <code class=\"notranslate\">StringCollectionDeserializer</code> to attempt a coercion from empty string <em>before</em> wrapping the value. imo the former should work fine.</p>\n<p dir=\"auto\">I can work on a fix for this once my corp CLA is cleared, which will be soon(tm).</p>",
  "description_text": "When ACCEPT_SINGLE_VALUE_AS_ARRAY is enabled, an empty List is incorrectly deserialized as a list containing a single empty string (List.of(\"\")). Test case:\n\", new TypeReference>() {});\n        Assert.assertTrue(list.isEmpty());\n    }\n}\">import com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.List;\n\npublic class EmptyElementTest {\n    @Test\n    public void test() throws JsonProcessingException {\n        XmlMapper mapper = new XmlMapper();\n        mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        List<String> list = mapper.readValue(\"\", new TypeReference<List<String>>() {});\n        Assert.assertTrue(list.isEmpty());\n    }\n}\nThis is technically correct behavior, because  can be deserialized as an empty string, which can then be wrapped in a list. However imo this should still be fixed.\nLooking at the code, the issue is in databind StringCollectionDeserializer. For the test case, isExpectedStartArrayToken returns false, which triggers the handleNonArray logic. This logic checks for the ACCEPT_SINGLE_VALUE_AS_ARRAY first, before trying to coerce the empty string to a list, which would succeed here.\nI see two approaches to fix this. Either change FromXmlParser.isExpectedStartArrayToken to return true for an empty string token, or change StringCollectionDeserializer to attempt a coercion from empty string before wrapping the value. imo the former should work fine.\nI can work on a fix for this once my corp CLA is cleared, which will be soon(tm)."
}