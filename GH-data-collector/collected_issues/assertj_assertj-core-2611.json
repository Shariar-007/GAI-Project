{
  "issue_id": 2570,
  "issue_url": "https://github.com/assertj/assertj/issues/2570",
  "title": "Add more assertion on ClassAssert",
  "description": "<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Apologies, If I'm wrong.</p>\n<p dir=\"auto\">It's nice that the <code class=\"notranslate\">ClassAssert</code> already has an assertion for <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isAssignableFrom-java.lang.Class-\" rel=\"nofollow\">Class#isAssignableFrom</a>.<br>\nAn assertion of opposite flow may be more intuitive, I believe.<br>\nSay, we have the following class or any other class being expected to implement the <code class=\"notranslate\">MyInterface</code> interface.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyClass\n        extends HisClass // which extends HerClass\n        implements MyInterface {\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyClass</span>\n        <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">HisClass</span> <span class=\"pl-c\">// which extends HerClass</span>\n        <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">MyInterface</span> {\n}</pre></div>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"HerClass\n    HisClass\n        MyClass\"><pre class=\"notranslate\"><code>HerClass\n    HisClass\n        MyClass\n</code></pre></div>\n<p dir=\"auto\">We can,</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Asserts that MyInterface.class is assignable from MyClass.class, based on Class#isAssignableFrom\nassertThat(MyInterface.class)\n        .isAssignableFrom(MyClass.class);\n// Asserts that MyClass.class has HisClass.class as direct superclass.\nassertThat(MyClass.class)\n        .hasSuperclass(HisClass.class);\"><pre><span class=\"pl-c\">// Asserts that MyInterface.class is assignable from MyClass.class, based on Class#isAssignableFrom</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyInterface</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isAssignableFrom</span>(<span class=\"pl-smi\">MyClass</span>.<span class=\"pl-s1\">class</span>);\n<span class=\"pl-c\">// Asserts that MyClass.class has HisClass.class as direct superclass.</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">hasSuperclass</span>(<span class=\"pl-smi\">HisClass</span>.<span class=\"pl-s1\">class</span>);</pre></div>\n<p dir=\"auto\">But following idiom(s) will be more intuitive.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Asserts that MyClass implements MyInterface\nassertThat(MyClass.class)\n        .implements(MyInterface.class)\n        .isAssignableTo(MyInterface.class);\n// Or\nassertThat(MyClass.class)\n        .implements(MyInterface.class)\n        .isSubclassOf(HisClass.class) // is direct subclass; opposite of hasSuperclass(superClass)\n        .isDescendentOf(HisClass.class)\n        .isDescendentOf(HerClass.class) // is direct or transitively\n;\nassertThat(HisClass.class)\n        .isAscendentOf(MyClass.class)\n        .isSubclassOf(HerClass.class)\n        .isDescendentOf(HerClass.class);\"><pre><span class=\"pl-c\">// Asserts that MyClass implements MyInterface</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">implements</span>(<span class=\"pl-smi\">MyInterface</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isAssignableTo</span>(<span class=\"pl-smi\">MyInterface</span>.<span class=\"pl-s1\">class</span>);\n<span class=\"pl-c\">// Or</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">implements</span>(<span class=\"pl-smi\">MyInterface</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isSubclassOf</span>(<span class=\"pl-smi\">HisClass</span>.<span class=\"pl-s1\">class</span>) <span class=\"pl-c\">// is direct subclass; opposite of hasSuperclass(superClass)</span>\n        .<span class=\"pl-en\">isDescendentOf</span>(<span class=\"pl-smi\">HisClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isDescendentOf</span>(<span class=\"pl-smi\">HerClass</span>.<span class=\"pl-s1\">class</span>) <span class=\"pl-c\">// is direct or transitively</span>\n;\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">HisClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isAscendentOf</span>(<span class=\"pl-smi\">MyClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isSubclassOf</span>(<span class=\"pl-smi\">HerClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isDescendentOf</span>(<span class=\"pl-smi\">HerClass</span>.<span class=\"pl-s1\">class</span>);</pre></div>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">isAssignableTo(classOrInterface)</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">implements(interfaceClass)</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">isSubclassOf(superClass)</code> - is direct subclass of</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">is(Descendant|Descendent)Of(ascendentClass)</code> - is direct or transitive descendent of</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">is(Ancestor|Ascendent)Of(descendentClass)</code> - is direct or transitive ascendent of</li>\n</ul>",
  "description_text": "Summary\nApologies, If I'm wrong.\nIt's nice that the ClassAssert already has an assertion for Class#isAssignableFrom.\nAn assertion of opposite flow may be more intuitive, I believe.\nSay, we have the following class or any other class being expected to implement the MyInterface interface.\nclass MyClass\n        extends HisClass // which extends HerClass\n        implements MyInterface {\n}\nHerClass\n    HisClass\n        MyClass\n\nWe can,\n// Asserts that MyInterface.class is assignable from MyClass.class, based on Class#isAssignableFrom\nassertThat(MyInterface.class)\n        .isAssignableFrom(MyClass.class);\n// Asserts that MyClass.class has HisClass.class as direct superclass.\nassertThat(MyClass.class)\n        .hasSuperclass(HisClass.class);\nBut following idiom(s) will be more intuitive.\n// Asserts that MyClass implements MyInterface\nassertThat(MyClass.class)\n        .implements(MyInterface.class)\n        .isAssignableTo(MyInterface.class);\n// Or\nassertThat(MyClass.class)\n        .implements(MyInterface.class)\n        .isSubclassOf(HisClass.class) // is direct subclass; opposite of hasSuperclass(superClass)\n        .isDescendentOf(HisClass.class)\n        .isDescendentOf(HerClass.class) // is direct or transitively\n;\nassertThat(HisClass.class)\n        .isAscendentOf(MyClass.class)\n        .isSubclassOf(HerClass.class)\n        .isDescendentOf(HerClass.class);\n\n isAssignableTo(classOrInterface)\n implements(interfaceClass)\n isSubclassOf(superClass) - is direct subclass of\n is(Descendant|Descendent)Of(ascendentClass) - is direct or transitive descendent of\n is(Ancestor|Ascendent)Of(descendentClass) - is direct or transitive ascendent of\n"
}