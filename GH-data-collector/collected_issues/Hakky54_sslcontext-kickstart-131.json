{
  "issue_id": 130,
  "issue_url": "https://github.com/Hakky54/sslcontext-kickstart/issues/130",
  "title": "If multiple certificates are configured, the browser cannot obtain the correct certificate after the host address is entered",
  "description": "<p dir=\"auto\"><code class=\"notranslate\">Hello, I have configured two certificates through your library, the domain name of one certificate is www.gateway.com.cn, and the domain name of the other certificate is www.ingress.com.cn. My code is written like this</code></p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Bean\n    public WebServerFactoryCustomizer<NettyReactiveWebServerFactory> sslServerConsumer() {\n        return factory -> {\n            factory.addServerCustomizers(httpServer -> httpServer.secure(sslContextSpec -> {\n                try {\n                    X509ExtendedKeyManager x509ExtendedKeyManager = PemUtils.loadIdentityMaterial(\n                            getResource(\"classpath:ssl/default/server.pem\"),\n                            getResource(\"classpath:ssl/default/server-key.pem\"));\n                    X509ExtendedTrustManager x509ExtendedTrustManager = PemUtils.loadTrustMaterial(getResource(\"classpath:ssl/default/ca.pem\"));\n                    SSLFactory.Builder builder = SSLFactory.builder()\n                            .withIdentityMaterial(x509ExtendedKeyManager)\n                            .withTrustMaterial(x509ExtendedTrustManager);\n                    loadOtherCertificate(builder);\n                    builder.withProtocols(\"TLSv1.2\");\n                    SSLFactory sslFactory = builder.build();\n                    System.out.println(\"ssl init success\");\n                    X509ExtendedKeyManager keyManager = sslFactory.getKeyManager()\n                            .orElseThrow(NullPointerException::new);\n                    SslContextBuilder sslContextBuilder = SslContextBuilder.forServer(composeKeyManager((CompositeX509ExtendedKeyManager) keyManager))\n                            .ciphers(sslFactory.getCiphers(), SupportedCipherSuiteFilter.INSTANCE)\n                            .protocols(sslFactory.getProtocols())\n                            .clientAuth(getClientAuth(sslFactory.getSslParameters()));\n                    sslFactory.getTrustManager().ifPresent(sslContextBuilder::trustManager);\n                    sslContextSpec.sslContext(sslContextBuilder);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }));\n        };\n    }\n\n    private KeyManager composeKeyManager(CompositeX509ExtendedKeyManager keyManager) {\n        return new CustomKeyManager(keyManager.getKeyManagers());\n    }\n\n    private void loadOtherCertificate(SSLFactory.Builder builder) throws IOException {\n        X509ExtendedKeyManager x509ExtendedKeyManager = PemUtils.loadIdentityMaterial(\n                getResource(\"classpath:ssl/ingress/server.pem\"),\n                getResource(\"classpath:ssl/ingress/server-key.pem\"));\n        X509ExtendedTrustManager x509ExtendedTrustManager = PemUtils.loadTrustMaterial(\n                getResource(\"classpath:ssl/ingress/ca.pem\"));\n        builder.withIdentityMaterial(x509ExtendedKeyManager)\n                .withTrustMaterial(x509ExtendedTrustManager);\n    }\n\n    private static ClientAuth getClientAuth(SSLParameters sslParameters) {\n        if (sslParameters.getNeedClientAuth()) {\n            return ClientAuth.REQUIRE;\n        } else if (sslParameters.getWantClientAuth()) {\n            return ClientAuth.OPTIONAL;\n        } else {\n            return ClientAuth.NONE;\n        }\n    }\n\n    private InputStream getResource(String path) throws IOException {\n        Resource resource = ResourceUtils.getResource(path);\n        return resource.getInputStream();\n    }\"><pre><span class=\"pl-c1\">@</span><span class=\"pl-c1\">Bean</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">WebServerFactoryCustomizer</span><<span class=\"pl-smi\">NettyReactiveWebServerFactory</span>> <span class=\"pl-s1\">sslServerConsumer</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">factory</span> -> {\n            <span class=\"pl-s1\">factory</span>.<span class=\"pl-en\">addServerCustomizers</span>(<span class=\"pl-s1\">httpServer</span> -> <span class=\"pl-s1\">httpServer</span>.<span class=\"pl-en\">secure</span>(<span class=\"pl-s1\">sslContextSpec</span> -> {\n                <span class=\"pl-k\">try</span> {\n                    <span class=\"pl-smi\">X509ExtendedKeyManager</span> <span class=\"pl-s1\">x509ExtendedKeyManager</span> = <span class=\"pl-s1\">PemUtils</span>.<span class=\"pl-en\">loadIdentityMaterial</span>(\n                            <span class=\"pl-en\">getResource</span>(<span class=\"pl-s\">\"classpath:ssl/default/server.pem\"</span>),\n                            <span class=\"pl-en\">getResource</span>(<span class=\"pl-s\">\"classpath:ssl/default/server-key.pem\"</span>));\n                    <span class=\"pl-smi\">X509ExtendedTrustManager</span> <span class=\"pl-s1\">x509ExtendedTrustManager</span> = <span class=\"pl-s1\">PemUtils</span>.<span class=\"pl-en\">loadTrustMaterial</span>(<span class=\"pl-en\">getResource</span>(<span class=\"pl-s\">\"classpath:ssl/default/ca.pem\"</span>));\n                    <span class=\"pl-smi\">SSLFactory</span>.<span class=\"pl-smi\">Builder</span> <span class=\"pl-s1\">builder</span> = <span class=\"pl-c1\">SSLFactory</span>.<span class=\"pl-en\">builder</span>()\n                            .<span class=\"pl-en\">withIdentityMaterial</span>(<span class=\"pl-s1\">x509ExtendedKeyManager</span>)\n                            .<span class=\"pl-en\">withTrustMaterial</span>(<span class=\"pl-s1\">x509ExtendedTrustManager</span>);\n                    <span class=\"pl-en\">loadOtherCertificate</span>(<span class=\"pl-s1\">builder</span>);\n                    <span class=\"pl-s1\">builder</span>.<span class=\"pl-en\">withProtocols</span>(<span class=\"pl-s\">\"TLSv1.2\"</span>);\n                    <span class=\"pl-smi\">SSLFactory</span> <span class=\"pl-s1\">sslFactory</span> = <span class=\"pl-s1\">builder</span>.<span class=\"pl-en\">build</span>();\n                    <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s\">\"ssl init success\"</span>);\n                    <span class=\"pl-smi\">X509ExtendedKeyManager</span> <span class=\"pl-s1\">keyManager</span> = <span class=\"pl-s1\">sslFactory</span>.<span class=\"pl-en\">getKeyManager</span>()\n                            .<span class=\"pl-en\">orElseThrow</span>(<span class=\"pl-s1\">NullPointerException</span>::<span class=\"pl-k\">new</span>);\n                    <span class=\"pl-smi\">SslContextBuilder</span> <span class=\"pl-s1\">sslContextBuilder</span> = <span class=\"pl-s1\">SslContextBuilder</span>.<span class=\"pl-en\">forServer</span>(<span class=\"pl-en\">composeKeyManager</span>((<span class=\"pl-smi\">CompositeX509ExtendedKeyManager</span>) <span class=\"pl-s1\">keyManager</span>))\n                            .<span class=\"pl-en\">ciphers</span>(<span class=\"pl-s1\">sslFactory</span>.<span class=\"pl-en\">getCiphers</span>(), <span class=\"pl-smi\">SupportedCipherSuiteFilter</span>.<span class=\"pl-c1\">INSTANCE</span>)\n                            .<span class=\"pl-en\">protocols</span>(<span class=\"pl-s1\">sslFactory</span>.<span class=\"pl-en\">getProtocols</span>())\n                            .<span class=\"pl-en\">clientAuth</span>(<span class=\"pl-en\">getClientAuth</span>(<span class=\"pl-s1\">sslFactory</span>.<span class=\"pl-en\">getSslParameters</span>()));\n                    <span class=\"pl-s1\">sslFactory</span>.<span class=\"pl-en\">getTrustManager</span>().<span class=\"pl-en\">ifPresent</span>(<span class=\"pl-s1\">sslContextBuilder</span>::<span class=\"pl-s1\">trustManager</span>);\n                    <span class=\"pl-s1\">sslContextSpec</span>.<span class=\"pl-en\">sslContext</span>(<span class=\"pl-s1\">sslContextBuilder</span>);\n                } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> <span class=\"pl-s1\">e</span>) {\n                    <span class=\"pl-s1\">e</span>.<span class=\"pl-en\">printStackTrace</span>();\n                }\n            }));\n        };\n    }\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">KeyManager</span> <span class=\"pl-s1\">composeKeyManager</span>(<span class=\"pl-smi\">CompositeX509ExtendedKeyManager</span> <span class=\"pl-s1\">keyManager</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CustomKeyManager</span>(<span class=\"pl-s1\">keyManager</span>.<span class=\"pl-en\">getKeyManagers</span>());\n    }\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">loadOtherCertificate</span>(<span class=\"pl-smi\">SSLFactory</span>.<span class=\"pl-smi\">Builder</span> <span class=\"pl-s1\">builder</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-c1\">IOException</span> {\n        <span class=\"pl-smi\">X509ExtendedKeyManager</span> <span class=\"pl-s1\">x509ExtendedKeyManager</span> = <span class=\"pl-s1\">PemUtils</span>.<span class=\"pl-en\">loadIdentityMaterial</span>(\n                <span class=\"pl-en\">getResource</span>(<span class=\"pl-s\">\"classpath:ssl/ingress/server.pem\"</span>),\n                <span class=\"pl-en\">getResource</span>(<span class=\"pl-s\">\"classpath:ssl/ingress/server-key.pem\"</span>));\n        <span class=\"pl-smi\">X509ExtendedTrustManager</span> <span class=\"pl-s1\">x509ExtendedTrustManager</span> = <span class=\"pl-s1\">PemUtils</span>.<span class=\"pl-en\">loadTrustMaterial</span>(\n                <span class=\"pl-en\">getResource</span>(<span class=\"pl-s\">\"classpath:ssl/ingress/ca.pem\"</span>));\n        <span class=\"pl-s1\">builder</span>.<span class=\"pl-en\">withIdentityMaterial</span>(<span class=\"pl-s1\">x509ExtendedKeyManager</span>)\n                .<span class=\"pl-en\">withTrustMaterial</span>(<span class=\"pl-s1\">x509ExtendedTrustManager</span>);\n    }\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">ClientAuth</span> <span class=\"pl-s1\">getClientAuth</span>(<span class=\"pl-smi\">SSLParameters</span> <span class=\"pl-s1\">sslParameters</span>) {\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">sslParameters</span>.<span class=\"pl-en\">getNeedClientAuth</span>()) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-smi\">ClientAuth</span>.<span class=\"pl-c1\">REQUIRE</span>;\n        } <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">sslParameters</span>.<span class=\"pl-en\">getWantClientAuth</span>()) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-smi\">ClientAuth</span>.<span class=\"pl-c1\">OPTIONAL</span>;\n        } <span class=\"pl-k\">else</span> {\n            <span class=\"pl-k\">return</span> <span class=\"pl-smi\">ClientAuth</span>.<span class=\"pl-c1\">NONE</span>;\n        }\n    }\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">InputStream</span> <span class=\"pl-s1\">getResource</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">path</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-c1\">IOException</span> {\n        <span class=\"pl-smi\">Resource</span> <span class=\"pl-s1\">resource</span> = <span class=\"pl-s1\">ResourceUtils</span>.<span class=\"pl-en\">getResource</span>(<span class=\"pl-s1\">path</span>);\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">resource</span>.<span class=\"pl-en\">getInputStream</span>();\n    }</pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">When I input www.ingress.com.cn on the browser, the console printed www.gateway.com.cn, there is no other way to match the correct certificate, and the certificate displayed on my browser is www.gateway.com.cn, can you help me</code></p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/42345796/143981896-eead48b3-10f3-4853-859d-46735fb2747b.png\"><img src=\"https://user-images.githubusercontent.com/42345796/143981896-eead48b3-10f3-4853-859d-46735fb2747b.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>",
  "description_text": "Hello, I have configured two certificates through your library, the domain name of one certificate is www.gateway.com.cn, and the domain name of the other certificate is www.ingress.com.cn. My code is written like this\n@Bean\n    public WebServerFactoryCustomizer<NettyReactiveWebServerFactory> sslServerConsumer() {\n        return factory -> {\n            factory.addServerCustomizers(httpServer -> httpServer.secure(sslContextSpec -> {\n                try {\n                    X509ExtendedKeyManager x509ExtendedKeyManager = PemUtils.loadIdentityMaterial(\n                            getResource(\"classpath:ssl/default/server.pem\"),\n                            getResource(\"classpath:ssl/default/server-key.pem\"));\n                    X509ExtendedTrustManager x509ExtendedTrustManager = PemUtils.loadTrustMaterial(getResource(\"classpath:ssl/default/ca.pem\"));\n                    SSLFactory.Builder builder = SSLFactory.builder()\n                            .withIdentityMaterial(x509ExtendedKeyManager)\n                            .withTrustMaterial(x509ExtendedTrustManager);\n                    loadOtherCertificate(builder);\n                    builder.withProtocols(\"TLSv1.2\");\n                    SSLFactory sslFactory = builder.build();\n                    System.out.println(\"ssl init success\");\n                    X509ExtendedKeyManager keyManager = sslFactory.getKeyManager()\n                            .orElseThrow(NullPointerException::new);\n                    SslContextBuilder sslContextBuilder = SslContextBuilder.forServer(composeKeyManager((CompositeX509ExtendedKeyManager) keyManager))\n                            .ciphers(sslFactory.getCiphers(), SupportedCipherSuiteFilter.INSTANCE)\n                            .protocols(sslFactory.getProtocols())\n                            .clientAuth(getClientAuth(sslFactory.getSslParameters()));\n                    sslFactory.getTrustManager().ifPresent(sslContextBuilder::trustManager);\n                    sslContextSpec.sslContext(sslContextBuilder);\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }));\n        };\n    }\n\n    private KeyManager composeKeyManager(CompositeX509ExtendedKeyManager keyManager) {\n        return new CustomKeyManager(keyManager.getKeyManagers());\n    }\n\n    private void loadOtherCertificate(SSLFactory.Builder builder) throws IOException {\n        X509ExtendedKeyManager x509ExtendedKeyManager = PemUtils.loadIdentityMaterial(\n                getResource(\"classpath:ssl/ingress/server.pem\"),\n                getResource(\"classpath:ssl/ingress/server-key.pem\"));\n        X509ExtendedTrustManager x509ExtendedTrustManager = PemUtils.loadTrustMaterial(\n                getResource(\"classpath:ssl/ingress/ca.pem\"));\n        builder.withIdentityMaterial(x509ExtendedKeyManager)\n                .withTrustMaterial(x509ExtendedTrustManager);\n    }\n\n    private static ClientAuth getClientAuth(SSLParameters sslParameters) {\n        if (sslParameters.getNeedClientAuth()) {\n            return ClientAuth.REQUIRE;\n        } else if (sslParameters.getWantClientAuth()) {\n            return ClientAuth.OPTIONAL;\n        } else {\n            return ClientAuth.NONE;\n        }\n    }\n\n    private InputStream getResource(String path) throws IOException {\n        Resource resource = ResourceUtils.getResource(path);\n        return resource.getInputStream();\n    }\nWhen I input www.ingress.com.cn on the browser, the console printed www.gateway.com.cn, there is no other way to match the correct certificate, and the certificate displayed on my browser is www.gateway.com.cn, can you help me\n"
}