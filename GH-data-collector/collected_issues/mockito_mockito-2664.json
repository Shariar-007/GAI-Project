{
  "issue_id": 2644,
  "issue_url": "https://github.com/mockito/mockito/issues/2644",
  "title": "Varargs methods cause `ClassCastException` in `AnswerFunctionalInterfaces`",
  "description": "<p dir=\"auto\">Hi,</p>\n<p dir=\"auto\">The other day, I discovered that this code does not work:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        doAnswer(answerVoid((VoidAnswer2<String, Object[]>)\n                logger::info\n        )).when(mock)\n                .info(any(), (Object[]) any());\n\n        // This call will throw an exception\n        mock.info(\"Some message with {} {} {}\", \"three\", \"parameters\", \"\");\"><pre>        <span class=\"pl-en\">doAnswer</span>(<span class=\"pl-en\">answerVoid</span>((<span class=\"pl-smi\">VoidAnswer2</span><<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>[]>)\n                <span class=\"pl-s1\">logger</span>::<span class=\"pl-s1\">info</span>\n        )).<span class=\"pl-en\">when</span>(<span class=\"pl-s1\">mock</span>)\n                .<span class=\"pl-en\">info</span>(<span class=\"pl-en\">any</span>(), (<span class=\"pl-smi\">Object</span>[]) <span class=\"pl-en\">any</span>());\n\n        <span class=\"pl-c\">// This call will throw an exception</span>\n        <span class=\"pl-s1\">mock</span>.<span class=\"pl-en\">info</span>(<span class=\"pl-s\">\"Some message with {} {} {}\"</span>, <span class=\"pl-s\">\"three\"</span>, <span class=\"pl-s\">\"parameters\"</span>, <span class=\"pl-s\">\"\"</span>);</pre></div>\n<p dir=\"auto\">The exception details looks as follows:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class java.lang.String cannot be cast to class [Ljava.lang.Object; (java.lang.String and [Ljava.lang.Object; are in module java.base of loader 'bootstrap')\njava.lang.ClassCastException: class java.lang.String cannot be cast to class [Ljava.lang.Object; (java.lang.String and [Ljava.lang.Object; are in module java.base of loader 'bootstrap')\n\tat org.mockito.internal.stubbing.answers.AnswerFunctionalInterfaces$4.answer(AnswerFunctionalInterfaces.java:97)\n\tat org.mockito.internal.stubbing.answers.AnswerFunctionalInterfaces$4.answer(AnswerFunctionalInterfaces.java:93)\n\tat org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:42)\n\tat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:103)\n\tat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\n\tat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:34)\n\tat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82)\n\tat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:56)\n\tat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$DispatcherDefaultingToRealMethod.interceptAbstract(MockMethodInterceptor.java:161)\n\tat org.slf4j.Logger$MockitoMock$f4Org7xs.info(Unknown Source)\n\tat LoggerMockingTest.logger_info_can_be_called_without_exceptions(LoggerMockingTest.java:34)\n        [...]\"><pre class=\"notranslate\"><code>class java.lang.String cannot be cast to class [Ljava.lang.Object; (java.lang.String and [Ljava.lang.Object; are in module java.base of loader 'bootstrap')\njava.lang.ClassCastException: class java.lang.String cannot be cast to class [Ljava.lang.Object; (java.lang.String and [Ljava.lang.Object; are in module java.base of loader 'bootstrap')\n\tat org.mockito.internal.stubbing.answers.AnswerFunctionalInterfaces$4.answer(AnswerFunctionalInterfaces.java:97)\n\tat org.mockito.internal.stubbing.answers.AnswerFunctionalInterfaces$4.answer(AnswerFunctionalInterfaces.java:93)\n\tat org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:42)\n\tat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:103)\n\tat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\n\tat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:34)\n\tat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82)\n\tat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:56)\n\tat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$DispatcherDefaultingToRealMethod.interceptAbstract(MockMethodInterceptor.java:161)\n\tat org.slf4j.Logger$MockitoMock$f4Org7xs.info(Unknown Source)\n\tat LoggerMockingTest.logger_info_can_be_called_without_exceptions(LoggerMockingTest.java:34)\n        [...]\n</code></pre></div>\n<p dir=\"auto\">The following <em>works</em>, but feels much less elegant:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        doAnswer( invocation -> {\n            String format = invocation.getArgument( 0 );\n            Object[] allArguments = invocation.getArguments();\n            Object[] arguments = Arrays.copyOfRange( allArguments, 1, allArguments.length );\n            logger.info( format, arguments );\n            return null;\n        } ).when( mock )\n                .info( anyString(), (Object[])any() );\"><pre>        <span class=\"pl-en\">doAnswer</span>( <span class=\"pl-s1\">invocation</span> -> {\n            <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">format</span> = <span class=\"pl-s1\">invocation</span>.<span class=\"pl-en\">getArgument</span>( <span class=\"pl-c1\">0</span> );\n            <span class=\"pl-smi\">Object</span>[] <span class=\"pl-s1\">allArguments</span> = <span class=\"pl-s1\">invocation</span>.<span class=\"pl-en\">getArguments</span>();\n            <span class=\"pl-smi\">Object</span>[] <span class=\"pl-s1\">arguments</span> = <span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">copyOfRange</span>( <span class=\"pl-s1\">allArguments</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-s1\">allArguments</span>.<span class=\"pl-s1\">length</span> );\n            <span class=\"pl-s1\">logger</span>.<span class=\"pl-en\">info</span>( <span class=\"pl-s1\">format</span>, <span class=\"pl-s1\">arguments</span> );\n            <span class=\"pl-k\">return</span> <span class=\"pl-c1\">null</span>;\n        } ).<span class=\"pl-en\">when</span>( <span class=\"pl-s1\">mock</span> )\n                .<span class=\"pl-en\">info</span>( <span class=\"pl-en\">anyString</span>(), (<span class=\"pl-smi\">Object</span>[])<span class=\"pl-en\">any</span>() );</pre></div>\n<p dir=\"auto\">Is this to be considered a bug or a feature? <g-emoji class=\"g-emoji\" alias=\"slightly_smiling_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f642.png\">\ud83d\ude42</g-emoji> I get the feeling that varargs (<code class=\"notranslate\">Object[]</code> under the hood) parameters do not really work when used with the <code class=\"notranslate\">answerVoid()</code>-based approach as described above.</p>\n<h3 dir=\"auto\">Full MCVE</h3>\n<p dir=\"auto\"><a href=\"https://github.com/perlun/mockito-slf4-logging-example\">https://github.com/perlun/mockito-slf4-logging-example</a></p>\n<h3 dir=\"auto\">Issue checks</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> The mockito message in the stacktrace have useful information, but it didn't help</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> The problematic code (if that's possible) is copied here;<br>\nNote that some configuration are impossible to mock via Mockito</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Provide versions (mockito / jdk / os / any other relevant information): Reproduced with latest Mockito, 4.5.1</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Provide a <a href=\"http://sscce.org\" rel=\"nofollow\">Short, Self Contained, Correct (Compilable), Example</a> of the issue</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Read the <a href=\"https://github.com/mockito/mockito/blob/main/.github/CONTRIBUTING.md\">contributing guide</a></li>\n</ul>",
  "description_text": "Hi,\nThe other day, I discovered that this code does not work:\n        doAnswer(answerVoid((VoidAnswer2<String, Object[]>)\n                logger::info\n        )).when(mock)\n                .info(any(), (Object[]) any());\n\n        // This call will throw an exception\n        mock.info(\"Some message with {} {} {}\", \"three\", \"parameters\", \"\");\nThe exception details looks as follows:\nclass java.lang.String cannot be cast to class [Ljava.lang.Object; (java.lang.String and [Ljava.lang.Object; are in module java.base of loader 'bootstrap')\njava.lang.ClassCastException: class java.lang.String cannot be cast to class [Ljava.lang.Object; (java.lang.String and [Ljava.lang.Object; are in module java.base of loader 'bootstrap')\n\tat org.mockito.internal.stubbing.answers.AnswerFunctionalInterfaces$4.answer(AnswerFunctionalInterfaces.java:97)\n\tat org.mockito.internal.stubbing.answers.AnswerFunctionalInterfaces$4.answer(AnswerFunctionalInterfaces.java:93)\n\tat org.mockito.internal.stubbing.StubbedInvocationMatcher.answer(StubbedInvocationMatcher.java:42)\n\tat org.mockito.internal.handler.MockHandlerImpl.handle(MockHandlerImpl.java:103)\n\tat org.mockito.internal.handler.NullResultGuardian.handle(NullResultGuardian.java:29)\n\tat org.mockito.internal.handler.InvocationNotifierHandler.handle(InvocationNotifierHandler.java:34)\n\tat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:82)\n\tat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor.doIntercept(MockMethodInterceptor.java:56)\n\tat org.mockito.internal.creation.bytebuddy.MockMethodInterceptor$DispatcherDefaultingToRealMethod.interceptAbstract(MockMethodInterceptor.java:161)\n\tat org.slf4j.Logger$MockitoMock$f4Org7xs.info(Unknown Source)\n\tat LoggerMockingTest.logger_info_can_be_called_without_exceptions(LoggerMockingTest.java:34)\n        [...]\n\nThe following works, but feels much less elegant:\n        doAnswer( invocation -> {\n            String format = invocation.getArgument( 0 );\n            Object[] allArguments = invocation.getArguments();\n            Object[] arguments = Arrays.copyOfRange( allArguments, 1, allArguments.length );\n            logger.info( format, arguments );\n            return null;\n        } ).when( mock )\n                .info( anyString(), (Object[])any() );\nIs this to be considered a bug or a feature? \ud83d\ude42 I get the feeling that varargs (Object[] under the hood) parameters do not really work when used with the answerVoid()-based approach as described above.\nFull MCVE\nhttps://github.com/perlun/mockito-slf4-logging-example\nIssue checks\n\n The mockito message in the stacktrace have useful information, but it didn't help\n The problematic code (if that's possible) is copied here;\nNote that some configuration are impossible to mock via Mockito\n Provide versions (mockito / jdk / os / any other relevant information): Reproduced with latest Mockito, 4.5.1\n Provide a Short, Self Contained, Correct (Compilable), Example of the issue\n Read the contributing guide\n"
}