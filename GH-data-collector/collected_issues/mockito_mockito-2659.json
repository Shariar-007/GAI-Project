{
  "issue_id": 2656,
  "issue_url": "https://github.com/mockito/mockito/issues/2656",
  "title": "Regression? Strictness set in `@MockitoSettings` ignored after upgrade from 4.5.1 to 4.6.0",
  "description": "<p dir=\"auto\">Upgrading from Mockito 4.5.1 to 4.6.0 and it looks to me as though <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1244556133\" data-permission-text=\"Title is private\" data-url=\"https://github.com/mockito/mockito/issues/2650\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/mockito/mockito/pull/2650/hovercard\" href=\"https://github.com/mockito/mockito/pull/2650\">#2650</a> or something around there has introduced a regression.</p>\n<p dir=\"auto\">I'm seeing <code class=\"notranslate\">PotentialStubbingProblem</code> exceptions where previously there were none, because the test class is annotated with <code class=\"notranslate\">@MockitoSettings(strictness = Strictness.LENIENT)</code>.</p>\n<p dir=\"auto\">The issue seems to be that <code class=\"notranslate\">StrictnessSelector</code> prefers the strictness set in the mock to the test level strictness, and the mock <em>defaults</em> to <code class=\"notranslate\">STRICT_STUBS</code>, so always overrides the strictness set in <code class=\"notranslate\">@MockitoSettings</code>.</p>\n<p dir=\"auto\">I've added a failing example test that demonstrates the issue here:  <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1253595131\" data-permission-text=\"Title is private\" data-url=\"https://github.com/big-andy-coates/mockito/issues/1\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/big-andy-coates/mockito/pull/1/hovercard\" href=\"https://github.com/big-andy-coates/mockito/pull/1\">big-andy-coates#1</a></p>\n<p dir=\"auto\">The above test fails with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"expected: \n  Optional.empty\n but was: \n  Optional[org.mockito.exceptions.misusing.PotentialStubbingProblem: \n  Strict stubbing argument mismatch. Please check:\n   - this invocation of 'test' method:\n      rootMock.test(\"Bar\");\n      -> at org.mockitousage.ProductionCode.simpleMethod(ProductionCode.java:9)\n   - has following stubbing(s) with different arguments:\n      1. rootMock.test(\"Foo\");\n        -> at org.mockitousage.StrictnessTest$LenientMockitoSettings.should_not_throw_on_potential_stubbing_issue(StrictnessTest.java:176)\n  Typically, stubbing argument mismatch indicates user mistake when writing tests.\n  Mockito fails early so that you can debug potential problem easily.\n  However, there are legit scenarios when this exception generates false negative signal:\n    - stubbing the same method multiple times using 'given().will()' or 'when().then()' API\n      Please use 'will().given()' or 'doReturn().when()' API for stubbing.\n    - stubbed method is intentionally invoked with different arguments by code under test\n      Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).\n  For more information see javadoc for PotentialStubbingProblem class.]\"><pre class=\"notranslate\"><code>expected: \n  Optional.empty\n but was: \n  Optional[org.mockito.exceptions.misusing.PotentialStubbingProblem: \n  Strict stubbing argument mismatch. Please check:\n   - this invocation of 'test' method:\n      rootMock.test(\"Bar\");\n      -> at org.mockitousage.ProductionCode.simpleMethod(ProductionCode.java:9)\n   - has following stubbing(s) with different arguments:\n      1. rootMock.test(\"Foo\");\n        -> at org.mockitousage.StrictnessTest$LenientMockitoSettings.should_not_throw_on_potential_stubbing_issue(StrictnessTest.java:176)\n  Typically, stubbing argument mismatch indicates user mistake when writing tests.\n  Mockito fails early so that you can debug potential problem easily.\n  However, there are legit scenarios when this exception generates false negative signal:\n    - stubbing the same method multiple times using 'given().will()' or 'when().then()' API\n      Please use 'will().given()' or 'doReturn().when()' API for stubbing.\n    - stubbed method is intentionally invoked with different arguments by code under test\n      Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).\n  For more information see javadoc for PotentialStubbingProblem class.]\n</code></pre></div>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> The mockito message in the stacktrace have useful information, but it didn't help</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> The problematic code (if that's possible) is copied here;<br>\nNote that some configuration are impossible to mock via Mockito</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Provide versions (mockito / jdk / os / any other relevant information)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Provide a <a href=\"http://sscce.org\" rel=\"nofollow\">Short, Self Contained, Correct (Compilable), Example</a> of the issue<br>\n(same as any question on stackoverflow.com)</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Read the <a href=\"https://github.com/mockito/mockito/blob/main/.github/CONTRIBUTING.md\">contributing guide</a></li>\n</ul>",
  "description_text": "Upgrading from Mockito 4.5.1 to 4.6.0 and it looks to me as though #2650 or something around there has introduced a regression.\nI'm seeing PotentialStubbingProblem exceptions where previously there were none, because the test class is annotated with @MockitoSettings(strictness = Strictness.LENIENT).\nThe issue seems to be that StrictnessSelector prefers the strictness set in the mock to the test level strictness, and the mock defaults to STRICT_STUBS, so always overrides the strictness set in @MockitoSettings.\nI've added a failing example test that demonstrates the issue here:  big-andy-coates#1\nThe above test fails with:\n at org.mockitousage.ProductionCode.simpleMethod(ProductionCode.java:9)\n   - has following stubbing(s) with different arguments:\n      1. rootMock.test(\"Foo\");\n        -> at org.mockitousage.StrictnessTest$LenientMockitoSettings.should_not_throw_on_potential_stubbing_issue(StrictnessTest.java:176)\n  Typically, stubbing argument mismatch indicates user mistake when writing tests.\n  Mockito fails early so that you can debug potential problem easily.\n  However, there are legit scenarios when this exception generates false negative signal:\n    - stubbing the same method multiple times using 'given().will()' or 'when().then()' API\n      Please use 'will().given()' or 'doReturn().when()' API for stubbing.\n    - stubbed method is intentionally invoked with different arguments by code under test\n      Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).\n  For more information see javadoc for PotentialStubbingProblem class.]\">expected: \n  Optional.empty\n but was: \n  Optional[org.mockito.exceptions.misusing.PotentialStubbingProblem: \n  Strict stubbing argument mismatch. Please check:\n   - this invocation of 'test' method:\n      rootMock.test(\"Bar\");\n      -> at org.mockitousage.ProductionCode.simpleMethod(ProductionCode.java:9)\n   - has following stubbing(s) with different arguments:\n      1. rootMock.test(\"Foo\");\n        -> at org.mockitousage.StrictnessTest$LenientMockitoSettings.should_not_throw_on_potential_stubbing_issue(StrictnessTest.java:176)\n  Typically, stubbing argument mismatch indicates user mistake when writing tests.\n  Mockito fails early so that you can debug potential problem easily.\n  However, there are legit scenarios when this exception generates false negative signal:\n    - stubbing the same method multiple times using 'given().will()' or 'when().then()' API\n      Please use 'will().given()' or 'doReturn().when()' API for stubbing.\n    - stubbed method is intentionally invoked with different arguments by code under test\n      Please use default or 'silent' JUnit Rule (equivalent of Strictness.LENIENT).\n  For more information see javadoc for PotentialStubbingProblem class.]\n\n\n The mockito message in the stacktrace have useful information, but it didn't help\n The problematic code (if that's possible) is copied here;\nNote that some configuration are impossible to mock via Mockito\n Provide versions (mockito / jdk / os / any other relevant information)\n Provide a Short, Self Contained, Correct (Compilable), Example of the issue\n(same as any question on stackoverflow.com)\n Read the contributing guide\n"
}