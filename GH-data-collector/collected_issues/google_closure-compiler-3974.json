{
  "issue_id": 3973,
  "issue_url": "https://github.com/google/closure-compiler/issues/3973",
  "title": "Potentially incorrect/useless test case for LiveVariablesAnalysis",
  "description": "<p dir=\"auto\">TL;DR: a test doesn't appear to verify anything useful. No impact on users.</p>\n<p dir=\"auto\">Hi, I was recently looking at the tests for <code class=\"notranslate\">LiveVariablesAnalysis</code> and came across some test cases that appear to be incorrect/useless.<br>\n<div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/closure-compiler/blob/1b7b32d78640297d8814ddabaf971da530c98659/test/com/google/javascript/jscomp/LiveVariablesAnalysisTest.java#L360-L368\">closure-compiler/test/com/google/javascript/jscomp/LiveVariablesAnalysisTest.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 360 to 368\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/google/closure-compiler/commit/1b7b32d78640297d8814ddabaf971da530c98659\">1b7b32d</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L360\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"360\"></td>\n          <td id=\"LC360\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L361\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"361\"></td>\n          <td id=\"LC361\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">testArgumentsArray_doesNotEscape_destructuredParams</span>() { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L362\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"362\"></td>\n          <td id=\"LC362\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-c\">// These cases also cover a crash related to assuming all RESTs have a NAME child.</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L363\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"363\"></td>\n          <td id=\"LC363\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-en\">assertNotEscaped</span>(<span class=\"pl-s\">\"function f([a]) { arguments; }\"</span>, <span class=\"pl-s\">\"a\"</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L364\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"364\"></td>\n          <td id=\"LC364\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-en\">assertNotEscaped</span>(<span class=\"pl-s\">\"function f([a] = []) { arguments; }\"</span>, <span class=\"pl-s\">\"a\"</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L365\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"365\"></td>\n          <td id=\"LC365\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-en\">assertNotEscaped</span>(<span class=\"pl-s\">\"function f(...[a]) { arguments; }\"</span>, <span class=\"pl-s\">\"a\"</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L366\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"366\"></td>\n          <td id=\"LC366\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-en\">assertNotEscaped</span>(<span class=\"pl-s\">\"function f({a}) { arguments; }\"</span>, <span class=\"pl-s\">\"a\"</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L367\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"367\"></td>\n          <td id=\"LC367\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-en\">assertNotEscaped</span>(<span class=\"pl-s\">\"function f({a} = {}) { arguments; }\"</span>, <span class=\"pl-s\">\"a\"</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L368\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"368\"></td>\n          <td id=\"LC368\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<br>\nThe assertions appear to test that various destructuring parameters aren't escaped by references to the <code class=\"notranslate\">arguments</code> array. However, the params in the input code will <em>never</em> be considered escaped because they, and the <code class=\"notranslate\">arguments</code> references, are in nested functions; The inputs contain a function e.g. <code class=\"notranslate\">function f([a]) { arguments; }</code> but are then wrapped in another function by <code class=\"notranslate\">computeLiveness</code>:<br>\n<div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/closure-compiler/blob/1b7b32d78640297d8814ddabaf971da530c98659/test/com/google/javascript/jscomp/LiveVariablesAnalysisTest.java#L677-L678\">closure-compiler/test/com/google/javascript/jscomp/LiveVariablesAnalysisTest.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 677 to 678\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/google/closure-compiler/commit/1b7b32d78640297d8814ddabaf971da530c98659\">1b7b32d</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L677\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"677\"></td>\n          <td id=\"LC677\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-s1\">src</span> = </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L678\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"678\"></td>\n          <td id=\"LC678\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     (<span class=\"pl-s1\">async</span> ? <span class=\"pl-s\">\"async \"</span> : <span class=\"pl-s\">\"\"</span>) + <span class=\"pl-s\">\"function _FUNCTION(param1, param2 = 1, ...param3){\"</span> + <span class=\"pl-s1\">src</span> + <span class=\"pl-s\">\"}\"</span>; </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<br>\nwhich then configures <code class=\"notranslate\">ControlFlowAnalysis</code> to not visit nested functions (note the lack of <code class=\"notranslate\">builder.setTraverseFunctions(true)</code>):<br>\n<div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/closure-compiler/blob/1b7b32d78640297d8814ddabaf971da530c98659/test/com/google/javascript/jscomp/LiveVariablesAnalysisTest.java#L691-L696\">closure-compiler/test/com/google/javascript/jscomp/LiveVariablesAnalysisTest.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 691 to 696\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/google/closure-compiler/commit/1b7b32d78640297d8814ddabaf971da530c98659\">1b7b32d</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L691\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"691\"></td>\n          <td id=\"LC691\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-smi\">ControlFlowGraph</span><<span class=\"pl-smi\">Node</span>> <span class=\"pl-s1\">cfg</span> = </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L692\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"692\"></td>\n          <td id=\"LC692\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-s1\">ControlFlowAnalysis</span>.<span class=\"pl-en\">builder</span>() </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L693\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"693\"></td>\n          <td id=\"LC693\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">         .<span class=\"pl-en\">setCompiler</span>(<span class=\"pl-s1\">compiler</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L694\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"694\"></td>\n          <td id=\"LC694\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">         .<span class=\"pl-en\">setCfgRoot</span>(<span class=\"pl-s1\">n</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L695\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"695\"></td>\n          <td id=\"LC695\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">         .<span class=\"pl-en\">setIncludeEdgeAnnotations</span>(<span class=\"pl-c1\">true</span>) </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L696\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"696\"></td>\n          <td id=\"LC696\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">         .<span class=\"pl-en\">computeCfg</span>(); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<br>\nThis means that the params will never be escaped because:</p>\n<ol dir=\"auto\">\n<li>The <code class=\"notranslate\">arguments</code> references are never visited during data flow analysis, so <a href=\"https://github.com/google/closure-compiler/blob/1b7b32d78640297d8814ddabaf971da530c98659/src/com/google/javascript/jscomp/LiveVariablesAnalysis.java#L433\"><code class=\"notranslate\">markAllParametersEscaped</code></a> is never called.</li>\n<li>Even if <code class=\"notranslate\">markAllParametersEscaped</code> were called, the <em>outer</em> params (<code class=\"notranslate\">param1</code>, <code class=\"notranslate\">param2</code>, <code class=\"notranslate\">param3</code>) would be escaped, not the inner params (<code class=\"notranslate\">a</code>).</li>\n</ol>\n<p dir=\"auto\">The issue can be shown by adding the following test cases to LiveVariablesAnalysisTest.java:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertNotEscaped(\"function f(a) { arguments; }\", \"a\");\n   assertEscaped(\"function f(a) { arguments; }\", \"a\");\"><pre><span class=\"pl-en\">assertNotEscaped</span>(<span class=\"pl-s\">\"function f(a) { arguments; }\"</span>, <span class=\"pl-s\">\"a\"</span>);\n   <span class=\"pl-en\">assertEscaped</span>(<span class=\"pl-s\">\"function f(a) { arguments; }\"</span>, <span class=\"pl-s\">\"a\"</span>);</pre></div>\n<p dir=\"auto\">The param <code class=\"notranslate\">a</code> should be escaped because it's a <code class=\"notranslate\">NAME</code> param, and therefore <code class=\"notranslate\">assertNotEscaped</code> should fail and <code class=\"notranslate\">assertEscaped</code> should pass, but the <em>reverse</em> happens.</p>\n<p dir=\"auto\">One way to resolve this would be to add an alternate <code class=\"notranslate\">assertNotEscaped</code> helper function that doesn't wrap the input in a function. I believe this would correct the tests so they verify the intended behaviour.</p>\n<p dir=\"auto\">If you agree with the above, I'm happy to open a PR to explore the aforementioned fix.</p>",
  "description_text": "TL;DR: a test doesn't appear to verify anything useful. No impact on users.\nHi, I was recently looking at the tests for LiveVariablesAnalysis and came across some test cases that appear to be incorrect/useless.\n\n\n\nclosure-compiler/test/com/google/javascript/jscomp/LiveVariablesAnalysisTest.java\n\n\n        Lines 360 to 368\n      in\n      1b7b32d\n\n\n\n\n\n\n @Test \n\n\n\n public void testArgumentsArray_doesNotEscape_destructuredParams() { \n\n\n\n // These cases also cover a crash related to assuming all RESTs have a NAME child. \n\n\n\n assertNotEscaped(\"function f([a]) { arguments; }\", \"a\"); \n\n\n\n assertNotEscaped(\"function f([a] = []) { arguments; }\", \"a\"); \n\n\n\n assertNotEscaped(\"function f(...[a]) { arguments; }\", \"a\"); \n\n\n\n assertNotEscaped(\"function f({a}) { arguments; }\", \"a\"); \n\n\n\n assertNotEscaped(\"function f({a} = {}) { arguments; }\", \"a\"); \n\n\n\n } \n\n\n\n\n\nThe assertions appear to test that various destructuring parameters aren't escaped by references to the arguments array. However, the params in the input code will never be considered escaped because they, and the arguments references, are in nested functions; The inputs contain a function e.g. function f([a]) { arguments; } but are then wrapped in another function by computeLiveness:\n\n\n\nclosure-compiler/test/com/google/javascript/jscomp/LiveVariablesAnalysisTest.java\n\n\n        Lines 677 to 678\n      in\n      1b7b32d\n\n\n\n\n\n\n src = \n\n\n\n     (async ? \"async \" : \"\") + \"function _FUNCTION(param1, param2 = 1, ...param3){\" + src + \"}\"; \n\n\n\n\n\nwhich then configures ControlFlowAnalysis to not visit nested functions (note the lack of builder.setTraverseFunctions(true)):\n\n\n\nclosure-compiler/test/com/google/javascript/jscomp/LiveVariablesAnalysisTest.java\n\n\n        Lines 691 to 696\n      in\n      1b7b32d\n\n\n\n\n\n\n ControlFlowGraph<Node> cfg = \n\n\n\n ControlFlowAnalysis.builder() \n\n\n\n         .setCompiler(compiler) \n\n\n\n         .setCfgRoot(n) \n\n\n\n         .setIncludeEdgeAnnotations(true) \n\n\n\n         .computeCfg(); \n\n\n\n\n\nThis means that the params will never be escaped because:\n\nThe arguments references are never visited during data flow analysis, so markAllParametersEscaped is never called.\nEven if markAllParametersEscaped were called, the outer params (param1, param2, param3) would be escaped, not the inner params (a).\n\nThe issue can be shown by adding the following test cases to LiveVariablesAnalysisTest.java:\nassertNotEscaped(\"function f(a) { arguments; }\", \"a\");\n   assertEscaped(\"function f(a) { arguments; }\", \"a\");\nThe param a should be escaped because it's a NAME param, and therefore assertNotEscaped should fail and assertEscaped should pass, but the reverse happens.\nOne way to resolve this would be to add an alternate assertNotEscaped helper function that doesn't wrap the input in a function. I believe this would correct the tests so they verify the intended behaviour.\nIf you agree with the above, I'm happy to open a PR to explore the aforementioned fix."
}