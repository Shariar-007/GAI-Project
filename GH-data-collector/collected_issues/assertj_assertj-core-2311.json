{
  "issue_id": 2242,
  "issue_url": "https://github.com/assertj/assertj/issues/2242",
  "title": "`ThrowableAssert` should have a type parameter",
  "description": "<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Currently <code class=\"notranslate\">assertThatExceptionOfType</code> allows chaining type-specific assertions like <code class=\"notranslate\">extracting(Function)</code>, but <code class=\"notranslate\">assertThat</code> with an instance of the same exception type does not allow chaining them.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Having an exception type like:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyException extends RuntimeException {\n\n    private final int field;\n\n    MyException(int field) {\n        this.field = field;\n    }\n\n    int getField() {\n        return field;\n    }\n\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyException</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">RuntimeException</span> {\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">field</span>;\n\n    <span class=\"pl-smi\">MyException</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">field</span>) {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">field</span> = <span class=\"pl-s1\">field</span>;\n    }\n\n    <span class=\"pl-smi\">int</span> <span class=\"pl-en\">getField</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">field</span>;\n    }\n\n}</pre></div>\n<p dir=\"auto\">The following works:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThatExceptionOfType(MyException.class).isThrownBy(() -> doSomething())\n    .extracting(MyException::getField)\n    .isEqualTo(10);\"><pre><span class=\"pl-en\">assertThatExceptionOfType</span>(<span class=\"pl-smi\">MyException</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isThrownBy</span>(() -> <span class=\"pl-en\">doSomething</span>())\n    .<span class=\"pl-en\">extracting</span>(<span class=\"pl-s1\">MyException</span>::<span class=\"pl-s1\">getField</span>)\n    .<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">10</span>);</pre></div>\n<p dir=\"auto\">but the following does not:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"MyException myException = catchThrowableOfType(() -> doSomething(), MyException.class);\n\nassertThat(myException)\n    .extracting(MyException::getField) // does not compile\n    .isEqualTo(10);\"><pre><span class=\"pl-smi\">MyException</span> <span class=\"pl-s1\">myException</span> = <span class=\"pl-en\">catchThrowableOfType</span>(() -> <span class=\"pl-en\">doSomething</span>(), <span class=\"pl-smi\">MyException</span>.<span class=\"pl-s1\">class</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">myException</span>)\n    .<span class=\"pl-en\">extracting</span>(<span class=\"pl-s1\">MyException</span>::<span class=\"pl-s1\">getField</span>) <span class=\"pl-c\">// does not compile</span>\n    .<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">10</span>);</pre></div>\n<p dir=\"auto\">Adding a type parameter to <code class=\"notranslate\">ThrowableAssert</code> should fix the issue. E.g.:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class ThrowableAssert<ACTUAL extends Throwable> extends AbstractThrowableAssert<ThrowableAssert<ACTUAL>, ACTUAL> {\n   // implementation\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ThrowableAssert</span><<span class=\"pl-c1\">ACTUAL</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">Throwable</span>> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">AbstractThrowableAssert</span><<span class=\"pl-smi\">ThrowableAssert</span><<span class=\"pl-smi\">ACTUAL</span>>, <span class=\"pl-smi\">ACTUAL</span>> {\n   <span class=\"pl-c\">// implementation</span>\n}</pre></div>",
  "description_text": "Summary\nCurrently assertThatExceptionOfType allows chaining type-specific assertions like extracting(Function), but assertThat with an instance of the same exception type does not allow chaining them.\nExample\nHaving an exception type like:\nclass MyException extends RuntimeException {\n\n    private final int field;\n\n    MyException(int field) {\n        this.field = field;\n    }\n\n    int getField() {\n        return field;\n    }\n\n}\nThe following works:\nassertThatExceptionOfType(MyException.class).isThrownBy(() -> doSomething())\n    .extracting(MyException::getField)\n    .isEqualTo(10);\nbut the following does not:\nMyException myException = catchThrowableOfType(() -> doSomething(), MyException.class);\n\nassertThat(myException)\n    .extracting(MyException::getField) // does not compile\n    .isEqualTo(10);\nAdding a type parameter to ThrowableAssert should fix the issue. E.g.:\npublic class ThrowableAssert<ACTUAL extends Throwable> extends AbstractThrowableAssert<ThrowableAssert<ACTUAL>, ACTUAL> {\n   // implementation\n}"
}