{
  "issue_id": 2156,
  "issue_url": "https://github.com/google/gson/issues/2156",
  "title": "Primitive type adapters don't perform numeric conversion during serialization",
  "description": "<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.9.0</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">Java 17</p>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">The built-in adapters for primitive types don't perform numeric conversion for serialization. This is most obvious when using Gson's non-typesafe method <code class=\"notranslate\">Gson.toJson(Object, Type)</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"System.out.println(new Gson().toJson(1.5, byte.class));\"><pre><span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">toJson</span>(<span class=\"pl-c1\">1.5</span>, <span class=\"pl-smi\">byte</span>.<span class=\"pl-k\">class</span>));</pre></div>\n<p dir=\"auto\">Even though the adapter for <code class=\"notranslate\">byte</code> should be used, Gson nonetheless emits <code class=\"notranslate\">1.5</code> as output.</p>\n<p dir=\"auto\">I noticed that while trying to refactor the primitive type adapters to directly call the primitive <code class=\"notranslate\">JsonWriter.value</code> methods instead of <code class=\"notranslate\">JsonWriter.value(Number)</code> due to the overhead for checking if the string representation is a valid JSON number.</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n<p dir=\"auto\">Either narrowing / widening conversion should be performed or an exception should be thrown.<br>\n(Or are there legit use cases for this?)</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n<p dir=\"auto\">Gson just emits the <code class=\"notranslate\">Number.toString()</code> result, even if that does not match the type of the requested adapter.</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"System.out.println(new Gson().toJson(1.5, byte.class));\"><pre><span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">toJson</span>(<span class=\"pl-c1\">1.5</span>, <span class=\"pl-smi\">byte</span>.<span class=\"pl-k\">class</span>));</pre></div>",
  "description_text": "Gson version\n2.9.0\nJava / Android version\nJava 17\nDescription\nThe built-in adapters for primitive types don't perform numeric conversion for serialization. This is most obvious when using Gson's non-typesafe method Gson.toJson(Object, Type):\nSystem.out.println(new Gson().toJson(1.5, byte.class));\nEven though the adapter for byte should be used, Gson nonetheless emits 1.5 as output.\nI noticed that while trying to refactor the primitive type adapters to directly call the primitive JsonWriter.value methods instead of JsonWriter.value(Number) due to the overhead for checking if the string representation is a valid JSON number.\nExpected behavior\nEither narrowing / widening conversion should be performed or an exception should be thrown.\n(Or are there legit use cases for this?)\nActual behavior\nGson just emits the Number.toString() result, even if that does not match the type of the requested adapter.\nReproduction steps\nSystem.out.println(new Gson().toJson(1.5, byte.class));"
}