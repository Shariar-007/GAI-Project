{
  "issue_id": 5692,
  "issue_url": "https://github.com/google/guava/issues/5692",
  "title": "TopKSelector is unstable when quicksort fallback to Arrays.sort.",
  "description": "<p dir=\"auto\">Related PR : <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"974581919\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/guava/issues/5691\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/guava/pull/5691/hovercard\" href=\"https://github.com/google/guava/pull/5691\">#5691</a><br>\nThe result of <code class=\"notranslate\">TopKSelector</code> may be wrong when <code class=\"notranslate\">trim()</code> is invoked and quiksort fallback to <code class=\"notranslate\">Arrasys.sort()</code>. Because <code class=\"notranslate\">Arrasys.sort()</code> is been used by mistake there.<br>\nFollowing test case can trigger this bug.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n    int n = 10000;\n    int k = 10000;\n    int testIteration = 10;\n    Random random = new Random(System.currentTimeMillis());\n    for (int iter = 0; iter < testIteration; iter ++) {\n      // target array to be sorted using TopKSelector\n      List<Integer> target = new ArrayList<>();\n      for (int i = 0; i < 9; i++) {\n        List<Integer> sortedArray = new ArrayList();\n        for (int j = 0; j < n; j++) {\n          sortedArray.add(random.nextInt());\n        }\n        sortedArray.sort(Integer::compareTo);\n        target.addAll(sortedArray);\n      }\n\n      TopKSelector<Integer> top = TopKSelector.least(k, Integer::compareTo);\n      for (int value : target) {\n        top.offer(value);\n      }\n\n      target.sort(Integer::compareTo);\n      assertEquals(top.topK(), target.subList(0, k));\n    }\n  }\"><pre class=\"notranslate\"><code>{\n    int n = 10000;\n    int k = 10000;\n    int testIteration = 10;\n    Random random = new Random(System.currentTimeMillis());\n    for (int iter = 0; iter < testIteration; iter ++) {\n      // target array to be sorted using TopKSelector\n      List<Integer> target = new ArrayList<>();\n      for (int i = 0; i < 9; i++) {\n        List<Integer> sortedArray = new ArrayList();\n        for (int j = 0; j < n; j++) {\n          sortedArray.add(random.nextInt());\n        }\n        sortedArray.sort(Integer::compareTo);\n        target.addAll(sortedArray);\n      }\n\n      TopKSelector<Integer> top = TopKSelector.least(k, Integer::compareTo);\n      for (int value : target) {\n        top.offer(value);\n      }\n\n      target.sort(Integer::compareTo);\n      assertEquals(top.topK(), target.subList(0, k));\n    }\n  }\n</code></pre></div>",
  "description_text": "Related PR : #5691\nThe result of TopKSelector may be wrong when trim() is invoked and quiksort fallback to Arrasys.sort(). Because Arrasys.sort() is been used by mistake there.\nFollowing test case can trigger this bug.\n{\n    int n = 10000;\n    int k = 10000;\n    int testIteration = 10;\n    Random random = new Random(System.currentTimeMillis());\n    for (int iter = 0; iter < testIteration; iter ++) {\n      // target array to be sorted using TopKSelector\n      List target = new ArrayList<>();\n      for (int i = 0; i < 9; i++) {\n        List sortedArray = new ArrayList();\n        for (int j = 0; j < n; j++) {\n          sortedArray.add(random.nextInt());\n        }\n        sortedArray.sort(Integer::compareTo);\n        target.addAll(sortedArray);\n      }\n\n      TopKSelector top = TopKSelector.least(k, Integer::compareTo);\n      for (int value : target) {\n        top.offer(value);\n      }\n\n      target.sort(Integer::compareTo);\n      assertEquals(top.topK(), target.subList(0, k));\n    }\n  }\n"
}