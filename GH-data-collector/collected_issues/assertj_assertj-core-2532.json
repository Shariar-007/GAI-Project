{
  "issue_id": 2557,
  "issue_url": "https://github.com/assertj/assertj/issues/2557",
  "title": "`assertThat(comparable)` returns `ObjectAssert` instead of `AbstractComparableAssert`",
  "description": "<h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Given a <code class=\"notranslate\">Comparable<T></code> variable, it's currently not possible to use assertions from <a href=\"https://www.javadoc.io/doc/org.assertj/assertj-core/latest/org/assertj/core/api/ComparableAssert.html\" rel=\"nofollow\"><code class=\"notranslate\">ComparableAssert</code></a> unless <code class=\"notranslate\">T</code> is <code class=\"notranslate\">Object</code>.</p>\n<p dir=\"auto\">Also, if the type implementing <code class=\"notranslate\">Comparable</code> targets a parent type that is not <code class=\"notranslate\">Object</code>, <code class=\"notranslate\">assertThat</code> always returns <code class=\"notranslate\">ObjectAssert</code> for both strongly-typed and <code class=\"notranslate\">Comparable<T></code> variables.</p>\n<h3 dir=\"auto\">Example: JDK type not comparing with <code class=\"notranslate\">Object</code></h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Comparable<String> comparable = \"value\";\n\nassertThat(comparable)            // ObjectAssert<Comparable<String>>\n  .isEqualByComparingTo(\"value\"); // does not compile\"><pre><span class=\"pl-smi\">Comparable</span><<span class=\"pl-smi\">String</span>> <span class=\"pl-s1\">comparable</span> = <span class=\"pl-s\">\"value\"</span>;\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparable</span>)            <span class=\"pl-c\">// ObjectAssert<Comparable<String>></span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-s\">\"value\"</span>); <span class=\"pl-c\">// does not compile</span></pre></div>\n<h3 dir=\"auto\">Example: Custom type comparing with self</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class ComparingWithSelf implements Comparable<ComparingWithSelf> {\n  @Override\n  public int compareTo(ComparingWithSelf other) {\n    return 0;\n  }\n}\n\nComparable<ComparingWithSelf> comparable = new ComparingWithSelf();\n\nassertThat(comparable)                            // ObjectAssert<Comparable<ComparingWithSelf>>\n  .isEqualByComparingTo(new ComparingWithSelf()); // does not compile\n\nComparingWithSelf comparingWithSelf = new ComparingWithSelf();\n\nassertThat(comparingWithSelf)                     // AbstractComparableAssert<?, ComparingWithSelf>\n  .isEqualByComparingTo(new ComparingWithSelf()); // compiles\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">ComparingWithSelf</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Comparable</span><<span class=\"pl-smi\">ComparingWithSelf</span>> {\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">compareTo</span>(<span class=\"pl-smi\">ComparingWithSelf</span> <span class=\"pl-s1\">other</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;\n  }\n}\n\n<span class=\"pl-smi\">Comparable</span><<span class=\"pl-smi\">ComparingWithSelf</span>> <span class=\"pl-s1\">comparable</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithSelf</span>();\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparable</span>)                            <span class=\"pl-c\">// ObjectAssert<Comparable<ComparingWithSelf>></span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithSelf</span>()); <span class=\"pl-c\">// does not compile</span>\n\n<span class=\"pl-smi\">ComparingWithSelf</span> <span class=\"pl-s1\">comparingWithSelf</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithSelf</span>();\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparingWithSelf</span>)                     <span class=\"pl-c\">// AbstractComparableAssert<?, ComparingWithSelf></span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithSelf</span>()); <span class=\"pl-c\">// compiles</span></pre></div>\n<h3 dir=\"auto\">Example: Custom type comparing with parent</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class Parent {}\n\nclass ComparingWithParent extends Parent implements Comparable<Parent> {\n  @Override\n  public int compareTo(Parent other) {\n    return 0;\n  }\n}\n\nComparable<Parent> comparable = new ComparingWithParent();\n\nassertThat(comparable)                              // ObjectAssert<Comparable<Parent>>\n  .isEqualByComparingTo(new ComparingWithParent()); // does not compile\n\nComparingWithParent comparingWithParent = new ComparingWithParent();\n\nassertThat(comparingWithParent)                     // ObjectAssert<ComparingWithParent>\n  .isEqualByComparingTo(new ComparingWithParent()); // does not compile\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">Parent</span> {}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">ComparingWithParent</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">Parent</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Comparable</span><<span class=\"pl-smi\">Parent</span>> {\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">compareTo</span>(<span class=\"pl-smi\">Parent</span> <span class=\"pl-s1\">other</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;\n  }\n}\n\n<span class=\"pl-smi\">Comparable</span><<span class=\"pl-smi\">Parent</span>> <span class=\"pl-s1\">comparable</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithParent</span>();\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparable</span>)                              <span class=\"pl-c\">// ObjectAssert<Comparable<Parent>></span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithParent</span>()); <span class=\"pl-c\">// does not compile</span>\n\n<span class=\"pl-smi\">ComparingWithParent</span> <span class=\"pl-s1\">comparingWithParent</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithParent</span>();\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparingWithParent</span>)                     <span class=\"pl-c\">// ObjectAssert<ComparingWithParent></span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithParent</span>()); <span class=\"pl-c\">// does not compile</span></pre></div>\n<h3 dir=\"auto\">Example: Custom type comparing with <code class=\"notranslate\">Object</code></h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class ComparingWithObject implements Comparable<Object> {\n  @Override\n  public int compareTo(Object other) {\n    return 0;\n  }\n}\n\nComparable<Object> comparable = new ComparingWithObject();\n\nassertThat(comparable)                              // AbstractComparableAssert<?, Comparable<Object>\n  .isEqualByComparingTo(new ComparingWithObject()); // compiles\n\nComparingWithObject comparingWithObject = new ComparingWithObject();\n\nassertThat(comparingWithObject)                     // AbstractComparableAssert<?, ComparingWithObject>\n  .isEqualByComparingTo(new ComparingWithObject()); // compiles\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">ComparingWithObject</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Comparable</span><<span class=\"pl-smi\">Object</span>> {\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">compareTo</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">other</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;\n  }\n}\n\n<span class=\"pl-smi\">Comparable</span><<span class=\"pl-smi\">Object</span>> <span class=\"pl-s1\">comparable</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithObject</span>();\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparable</span>)                              <span class=\"pl-c\">// AbstractComparableAssert<?, Comparable<Object></span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithObject</span>()); <span class=\"pl-c\">// compiles</span>\n\n<span class=\"pl-smi\">ComparingWithObject</span> <span class=\"pl-s1\">comparingWithObject</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithObject</span>();\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparingWithObject</span>)                     <span class=\"pl-c\">// AbstractComparableAssert<?, ComparingWithObject></span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithObject</span>()); <span class=\"pl-c\">// compiles</span></pre></div>\n<h3 dir=\"auto\">Workaround: Raw type</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Comparable comparable = \"value\";  // \"rawtypes\" warning\n\nassertThat(comparable)            // AbstractComparableAssert<?, Comparable> with \"unchecked\" warning\n  .isEqualByComparingTo(\"value\"); // compiles with \"unchecked\" warning\"><pre><span class=\"pl-smi\">Comparable</span> <span class=\"pl-s1\">comparable</span> = <span class=\"pl-s\">\"value\"</span>;  <span class=\"pl-c\">// \"rawtypes\" warning</span>\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparable</span>)            <span class=\"pl-c\">// AbstractComparableAssert<?, Comparable> with \"unchecked\" warning</span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-s\">\"value\"</span>); <span class=\"pl-c\">// compiles with \"unchecked\" warning</span></pre></div>\n<h3 dir=\"auto\">Workaround: <code class=\"notranslate\">asInstanceOf</code></h3>\n<p dir=\"auto\">This works only with non-null instances due to the null-check performed in <code class=\"notranslate\">asInstanceOf</code>.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Comparable<String> comparable = \"value\";\n\nassertThat(comparable)                    // ObjectAssert<Comparable<String>>\n  .asInstanceOf(comparable(String.class)) // AbstractComparableAssert<?, String>\n  .isEqualByComparingTo(\"value\");         // compiles\"><pre><span class=\"pl-smi\">Comparable</span><<span class=\"pl-smi\">String</span>> <span class=\"pl-s1\">comparable</span> = <span class=\"pl-s\">\"value\"</span>;\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparable</span>)                    <span class=\"pl-c\">// ObjectAssert<Comparable<String>></span>\n  .<span class=\"pl-en\">asInstanceOf</span>(<span class=\"pl-en\">comparable</span>(<span class=\"pl-smi\">String</span>.<span class=\"pl-s1\">class</span>)) <span class=\"pl-c\">// AbstractComparableAssert<?, String></span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-s\">\"value\"</span>);         <span class=\"pl-c\">// compiles</span></pre></div>\n<h3 dir=\"auto\">Current status</h3>\n<table role=\"table\">\n<thead>\n<tr>\n<th><code class=\"notranslate\">assertThat</code> use case</th>\n<th><code class=\"notranslate\">Comparable<T></code> variable</th>\n<th>Strongly-typed variable</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JDK type not comparing with <code class=\"notranslate\">Object</code></td>\n<td><code class=\"notranslate\">ObjectAssert</code></td>\n<td>N/A (dedicated assertions)</td>\n</tr>\n<tr>\n<td>Custom type comparing with self</td>\n<td><code class=\"notranslate\">ObjectAssert</code></td>\n<td><code class=\"notranslate\">AbstractComparableAssert</code></td>\n</tr>\n<tr>\n<td>Custom type comparing with parent</td>\n<td><code class=\"notranslate\">ObjectAssert</code></td>\n<td><code class=\"notranslate\">ObjectAssert</code></td>\n</tr>\n<tr>\n<td>Custom type comparing with <code class=\"notranslate\">Object</code></td>\n<td><code class=\"notranslate\">AbstractComparableAssert</code></td>\n<td><code class=\"notranslate\">AbstractComparableAssert</code></td>\n</tr>\n</tbody>\n</table>",
  "description_text": "Summary\nGiven a Comparable variable, it's currently not possible to use assertions from ComparableAssert unless T is Object.\nAlso, if the type implementing Comparable targets a parent type that is not Object, assertThat always returns ObjectAssert for both strongly-typed and Comparable variables.\nExample: JDK type not comparing with Object\n>\n  .isEqualByComparingTo(\"value\"); // does not compile\">Comparable<String> comparable = \"value\";\n\nassertThat(comparable)            // ObjectAssert>\n  .isEqualByComparingTo(\"value\"); // does not compile\nExample: Custom type comparing with self\nclass ComparingWithSelf implements Comparable<ComparingWithSelf> {\n  @Override\n  public int compareTo(ComparingWithSelf other) {\n    return 0;\n  }\n}\n\nComparable<ComparingWithSelf> comparable = new ComparingWithSelf();\n\nassertThat(comparable)                            // ObjectAssert>\n  .isEqualByComparingTo(new ComparingWithSelf()); // does not compile\n\nComparingWithSelf comparingWithSelf = new ComparingWithSelf();\n\nassertThat(comparingWithSelf)                     // AbstractComparableAssert\n  .isEqualByComparingTo(new ComparingWithSelf()); // compiles\nExample: Custom type comparing with parent\nclass Parent {}\n\nclass ComparingWithParent extends Parent implements Comparable<Parent> {\n  @Override\n  public int compareTo(Parent other) {\n    return 0;\n  }\n}\n\nComparable<Parent> comparable = new ComparingWithParent();\n\nassertThat(comparable)                              // ObjectAssert>\n  .isEqualByComparingTo(new ComparingWithParent()); // does not compile\n\nComparingWithParent comparingWithParent = new ComparingWithParent();\n\nassertThat(comparingWithParent)                     // ObjectAssert\n  .isEqualByComparingTo(new ComparingWithParent()); // does not compile\nExample: Custom type comparing with Object\nclass ComparingWithObject implements Comparable<Object> {\n  @Override\n  public int compareTo(Object other) {\n    return 0;\n  }\n}\n\nComparable<Object> comparable = new ComparingWithObject();\n\nassertThat(comparable)                              // AbstractComparableAssert\n  .isEqualByComparingTo(new ComparingWithObject()); // compiles\n\nComparingWithObject comparingWithObject = new ComparingWithObject();\n\nassertThat(comparingWithObject)                     // AbstractComparableAssert\n  .isEqualByComparingTo(new ComparingWithObject()); // compiles\nWorkaround: Raw type\n with \"unchecked\" warning\n  .isEqualByComparingTo(\"value\"); // compiles with \"unchecked\" warning\">Comparable comparable = \"value\";  // \"rawtypes\" warning\n\nassertThat(comparable)            // AbstractComparableAssert with \"unchecked\" warning\n  .isEqualByComparingTo(\"value\"); // compiles with \"unchecked\" warning\nWorkaround: asInstanceOf\nThis works only with non-null instances due to the null-check performed in asInstanceOf.\n>\n  .asInstanceOf(comparable(String.class)) // AbstractComparableAssert\n  .isEqualByComparingTo(\"value\");         // compiles\">Comparable<String> comparable = \"value\";\n\nassertThat(comparable)                    // ObjectAssert>\n  .asInstanceOf(comparable(String.class)) // AbstractComparableAssert\n  .isEqualByComparingTo(\"value\");         // compiles\nCurrent status\n\n\n\nassertThat use case\nComparable variable\nStrongly-typed variable\n\n\n\n\nJDK type not comparing with Object\nObjectAssert\nN/A (dedicated assertions)\n\n\nCustom type comparing with self\nObjectAssert\nAbstractComparableAssert\n\n\nCustom type comparing with parent\nObjectAssert\nObjectAssert\n\n\nCustom type comparing with Object\nAbstractComparableAssert\nAbstractComparableAssert\n\n\n"
}