[{"repository":{"pullRequest":{"title":"Fix issue with recursive type variable protections to fix #1390","url":"https://github.com/google/gson/pull/1391","resourcePath":"/google/gson/pull/1391","createdAt":"2018-09-25T23:13:01Z","number":1391,"mergeCommit":{"oid":"d65960b001530f62a01f947fd4a639e93b3e0347","message":"Merge pull request #1391 from mcumings/issue1390\n\nFix issue with recursive type variable protections to fix #1390","commitUrl":"https://github.com/google/gson/commit/d65960b001530f62a01f947fd4a639e93b3e0347","parents":{"nodes":[{"oid":"f319c1b8e5ac1135ab253513f91d5ece6719cdf7","message":"Merge pull request #1897 from Conclure/patch-1\n\nUpdate README.md version 2.8.6 -> 2.8.7"},{"oid":"69f7c4e243c385b318ed63205817347e4bbe379e","message":"Replace instance equality checks in $Gson$Types#resolve"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/$Gson$Types.java"}},{"node":{"changeType":"ADDED","path":"gson/src/test/java/com/google/gson/functional/ReusedTypeVariablesFullyResolveTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MjE4MTQ2MTQ4OjY5ZjdjNGUyNDNjMzg1YjMxOGVkNjMyMDU4MTczNDdlNGJiZTM3OWU=","url":"https://github.com/google/gson/pull/1391/commits/69f7c4e243c385b318ed63205817347e4bbe379e"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1390,"url":"https://github.com/google/gson/issues/1390","title":"Recursive TypeVariable resolution results in ClassCastException when type var is referenced multiple times","bodyHTML":"<p dir=\"auto\">The recursive type variable resolution protections put into place in Gson 2.8.2 to fix <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"246819814\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1128\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/1128/hovercard\" href=\"https://github.com/google/gson/pull/1128\">#1128</a> does not work if a TypeVariable is referenced multiple times.</p>\n<p dir=\"auto\">Example failing code:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    enum TestEnum { ONE, TWO, THREE }\n\n    private static class TestEnumSetCollection extends SetCollection&lt;TestEnum&gt; {}\n\n    private static class SetCollection&lt;T&gt; extends BaseCollection&lt;T, Set&lt;T&gt;&gt; {}\n\n    private static class BaseCollection&lt;U, C extends Collection&lt;U&gt;&gt;\n    {\n        public C collection;\n    }\"><pre class=\"notranslate\"><code>    enum TestEnum { ONE, TWO, THREE }\n\n    private static class TestEnumSetCollection extends SetCollection&lt;TestEnum&gt; {}\n\n    private static class SetCollection&lt;T&gt; extends BaseCollection&lt;T, Set&lt;T&gt;&gt; {}\n\n    private static class BaseCollection&lt;U, C extends Collection&lt;U&gt;&gt;\n    {\n        public C collection;\n    }\n</code></pre></div>\n<p dir=\"auto\">When used with the following code to unmarshal</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"TestEnumSetCollection withSet = gson.fromJson(&quot;{\\&quot;collection\\&quot;:[\\&quot;ONE\\&quot;,\\&quot;THREE\\&quot;]}&quot;, TestEnumSetCollection.class);\"><pre class=\"notranslate\"><code>TestEnumSetCollection withSet = gson.fromJson(\"{\\\"collection\\\":[\\\"ONE\\\",\\\"THREE\\\"]}\", TestEnumSetCollection.class);\n</code></pre></div>\n<p dir=\"auto\">The enum values are unmarshaled as <code class=\"notranslate\">String</code> instances instead of as <code class=\"notranslate\">TestEnum</code> instances, causing <code class=\"notranslate\">ClassCastException</code> to be raised at runtime.  This is due to the fact that the <code class=\"notranslate\">visitedTypeVariables</code> map receives an entry for <code class=\"notranslate\">T</code>, resolves it properly, and then upon subsequent attempt to resolve <code class=\"notranslate\">T</code> fails, since the <code class=\"notranslate\">visitedTypeVariables</code> set indicates that <code class=\"notranslate\">T</code> has already been resolved.</p>","resourcePath":"/google/gson/issues/1390","createdAt":"2018-09-25T22:59:08Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fixed nullSafe usage.","url":"https://github.com/google/gson/pull/1555","resourcePath":"/google/gson/pull/1555","createdAt":"2019-07-19T09:42:36Z","number":1555,"mergeCommit":null,"potentialMergeCommit":{"oid":"812af79e8a3e67828b4a5580ee08e857a68c7a16","message":"Merge 5f3fecf1234d85f5954a2d4b660e6bce0afccf12 into a1d2ebc8b51a3a0df8b15c98f47d5ac95cf7f7b0","commitUrl":"https://github.com/google/gson/commit/812af79e8a3e67828b4a5580ee08e857a68c7a16","parents":{"nodes":[{"oid":"a1d2ebc8b51a3a0df8b15c98f47d5ac95cf7f7b0","message":"Fix #1702: Gson.toJson creates CharSequence which does not implement toString (#1703)\n\n* Gson.toJson creates CharSequence which does not implement toString\r\n\r\n* Improve Streams.AppendableWriter.CurrentWrite test\r\n\r\n* Make setChars package-private"},{"oid":"5f3fecf1234d85f5954a2d4b660e6bce0afccf12","message":"Fixed nullSafe usage.\n\nThe JsonSerializer/Deserializer adapters used to ignore this attribute\nwhich result in inconsistent behaviour for annotated adapters.\n\nFixes #1553\n\nSigned-off-by: Dmitry Bufistov <dmitry@midokura.com>"}]}},"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/JsonAdapterAnnotationTypeAdapterFactory.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/JsonAdapterSerializerDeserializerTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0Mjk5MjYxMjYzOjVmM2ZlY2YxMjM0ZDg1ZjU5NTRhMmQ0YjY2MGU2YmNlMGFmY2NmMTI=","url":"https://github.com/google/gson/pull/1555/commits/5f3fecf1234d85f5954a2d4b660e6bce0afccf12"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1553,"url":"https://github.com/google/gson/issues/1553","title":"JsonAdapter nullSafe parameter is ignored by JsonSerializer/JsonDeserializer type adapters","bodyHTML":"<p dir=\"auto\">Hi there,</p>\n<p dir=\"auto\">It looks like gson uses TreeTypeAdapter for JsonSerializer/JsonDeserializer type adapters.<br>\nTreeTypeAdapter is always nullSafe, so nullSafe value of JsonAdapter annotation is ignored in this case which is at least confusing.</p>\n<p dir=\"auto\">I fixed this locally by adding nullSafe parameter to the TreeTypeAdapter and would love to submit a PR if it need be. Shall I go ahead?</p>\n<p dir=\"auto\">Thanks!</p>","resourcePath":"/google/gson/issues/1553","createdAt":"2019-07-17T10:39:33Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix OSGi metadata generation to work on JavaSE < 9","url":"https://github.com/google/gson/pull/1603","resourcePath":"/google/gson/pull/1603","createdAt":"2019-10-31T16:31:03Z","number":1603,"mergeCommit":{"oid":"521fab2dd5e829b51cff6813d0b5405d4ab2d1ee","message":"Fix OSGi metadata generation to work on JavaSE < 9 (#1603)\n\n* Explicitly specify `Require-Capability: osgi.ee` to require 1.5+\r\n\r\nSpecifying disables bnd's auto-generated value which is determined from\r\nthe minimum versions of the .class files, including `module-info.class`\r\n\r\n* Drop JavaSE-1.5 since that boat sailed a long time ago\r\n\r\n* Drop unused org.apache.felix:maven-bundle-plugin plugin","commitUrl":"https://github.com/google/gson/commit/521fab2dd5e829b51cff6813d0b5405d4ab2d1ee","parents":{"nodes":[{"oid":"47b28d99a17d492b37fcdd0fc41290419a010a0f","message":"The JavaDoc is now more accurate about the type adapter serialization and deserialization (#1441)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/bnd.bnd"}},{"node":{"changeType":"MODIFIED","path":"gson/pom.xml"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzM1MDE0MDcyOjE4Njg0NmZmY2ZmZWU0MTE1ZTQzMTA1NGY5MzI4MDBiOTE3NGI5MDI=","url":"https://github.com/google/gson/pull/1603/commits/186846ffcffee4115e431054f932800b9174b902"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1601,"url":"https://github.com/google/gson/issues/1601","title":"OSGi metadata on 2.8.6 requires Java 9 or greater","bodyHTML":"<p dir=\"auto\">gson 2.8.6's <code class=\"notranslate\">MANIFEST.MF</code> includes the following line:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Require-Capability: osgi.ee;filter:=&quot;(&amp;(osgi.ee=JavaSE)(version=9.0))&quot;\"><pre class=\"notranslate\"><code>Require-Capability: osgi.ee;filter:=\"(&amp;(osgi.ee=JavaSE)(version=9.0))\"\n</code></pre></div>\n<p dir=\"auto\">And so it requires Java 9 (or greater, as <code class=\"notranslate\">osgi.ee</code> is typically populated with all lesser versions too) and so refuses to install on Java 8 (or below).</p>","resourcePath":"/google/gson/issues/1601","createdAt":"2019-10-29T20:22:34Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Use OpenJDK 11 for Travis CI","url":"https://github.com/google/gson/pull/1607","resourcePath":"/google/gson/pull/1607","createdAt":"2019-11-05T18:15:35Z","number":1607,"mergeCommit":{"oid":"4109aaa6a92f3f9725c5e2f98308816761f0123e","message":"Use OpenJDK 11 for Travis CI (#1607)\n\nFixes #1606 (?)","commitUrl":"https://github.com/google/gson/commit/4109aaa6a92f3f9725c5e2f98308816761f0123e","parents":{"nodes":[{"oid":"521fab2dd5e829b51cff6813d0b5405d4ab2d1ee","message":"Fix OSGi metadata generation to work on JavaSE < 9 (#1603)\n\n* Explicitly specify `Require-Capability: osgi.ee` to require 1.5+\r\n\r\nSpecifying disables bnd's auto-generated value which is determined from\r\nthe minimum versions of the .class files, including `module-info.class`\r\n\r\n* Drop JavaSE-1.5 since that boat sailed a long time ago\r\n\r\n* Drop unused org.apache.felix:maven-bundle-plugin plugin"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":".travis.yml"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzM2OTE4NTM3OjEyOGEzYThmMzYzNWM0ZmRlZDQxNGUxOTE5MmI2ZWRlZThlZmQyMDc=","url":"https://github.com/google/gson/pull/1607/commits/128a3a8f3635c4fded414e19192b6edee8efd207"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1606,"url":"https://github.com/google/gson/issues/1606","title":"Fix Travis CI","bodyHTML":"<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">Travis CI fails for all builds. The relevant Travis log part is probably:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"openjdk version &quot;9.0.4&quot;\nOpenJDK Runtime Environment (build 9.0.4+11)\nOpenJDK 64-Bit Server VM (build 9.0.4+11, mixed mode)\n$ javac -J-Xmx32m -version\njavac 9.0.4\n3.54s$ mvn -f gson install -DskipTests=true\n[INFO] Scanning for projects...\nDownloading from google-maven-central: https://maven-central.storage-download.googleapis.com/repos/central/data/org/sonatype/oss/oss-parent/7/oss-parent-7.pom\nDownloading from sonatype: https://oss.sonatype.org/content/repositories/releases/org/sonatype/oss/oss-parent/7/oss-parent-7.pom\nDownloading from sonatype-apache: https://repository.apache.org/content/repositories/releases/org/sonatype/oss/oss-parent/7/oss-parent-7.pom\n[ERROR] [ERROR] Some problems were encountered while processing the POMs:\n[FATAL] Non-resolvable parent POM for com.google.code.gson:gson-parent:2.8.6-SNAPSHOT: Could not transfer artifact org.sonatype.oss:oss-parent:pom:7 from/to google-maven-central (https://maven-central.storage-download.googleapis.com/repos/central/data/): sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target and 'parent.relativePath' points at wrong local POM @ com.google.code.gson:gson-parent:2.8.6-SNAPSHOT, /home/travis/build/google/gson/pom.xml, line 6, column 11\"><pre class=\"notranslate\"><code>openjdk version \"9.0.4\"\nOpenJDK Runtime Environment (build 9.0.4+11)\nOpenJDK 64-Bit Server VM (build 9.0.4+11, mixed mode)\n$ javac -J-Xmx32m -version\njavac 9.0.4\n3.54s$ mvn -f gson install -DskipTests=true\n[INFO] Scanning for projects...\nDownloading from google-maven-central: https://maven-central.storage-download.googleapis.com/repos/central/data/org/sonatype/oss/oss-parent/7/oss-parent-7.pom\nDownloading from sonatype: https://oss.sonatype.org/content/repositories/releases/org/sonatype/oss/oss-parent/7/oss-parent-7.pom\nDownloading from sonatype-apache: https://repository.apache.org/content/repositories/releases/org/sonatype/oss/oss-parent/7/oss-parent-7.pom\n[ERROR] [ERROR] Some problems were encountered while processing the POMs:\n[FATAL] Non-resolvable parent POM for com.google.code.gson:gson-parent:2.8.6-SNAPSHOT: Could not transfer artifact org.sonatype.oss:oss-parent:pom:7 from/to google-maven-central (https://maven-central.storage-download.googleapis.com/repos/central/data/): sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target and 'parent.relativePath' points at wrong local POM @ com.google.code.gson:gson-parent:2.8.6-SNAPSHOT, /home/travis/build/google/gson/pom.xml, line 6, column 11\n</code></pre></div>\n<p dir=\"auto\">It appears it tries all configured repositories and then fails:</p>\n<ol dir=\"auto\">\n<li>maven-central.storage-download.googleapis.com</li>\n<li>oss.sonatype.org (this just redirects to central!)</li>\n<li>repository.apache.org</li>\n</ol>\n<p dir=\"auto\">It looks like Maven mixes the exception messages, but the actual problem is:</p>\n<blockquote>\n<p dir=\"auto\">sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</p>\n</blockquote>\n<p dir=\"auto\">If we now compare the last <a href=\"https://travis-ci.org/google/gson/jobs/541365646\" rel=\"nofollow\">successful build</a> with the <a href=\"https://travis-ci.org/google/gson/jobs/583845328\" rel=\"nofollow\">first known failing</a> (there might have been earlier ones through pull requests, but Travis does not show them), we will see:</p>\n<table role=\"table\">\n    <thead>\n        <tr>\n            <th>Successful</th>\n            <th>Failed</th>\n        </tr>\n    </thead>\n    <tbody>\n        <tr>\n            <td>\n<pre class=\"notranslate\">java version \"9.0.1\"\nJava(TM) SE Runtime Environment (build 9.0.1+11)\n</pre>\n            </td>\n            <td>\n<pre class=\"notranslate\">openjdk version \"9.0.4\"\nOpenJDK Runtime Environment (build 9.0.4+11)\n</pre>\n            </td>\n        </tr>\n    </tbody>\n</table>\n<p dir=\"auto\">And indeed there is <a href=\"https://bugs.openjdk.java.net/browse/JDK-8189357\" rel=\"nofollow\">JDK-8189357</a> which describes that the <code class=\"notranslate\">cacerts</code> file for OpenJDK is empty.<br>\nTo fix this a different truststore has to be specified, the certificates have to be imported, or you could switch to OpenJDK &gt; 9 (see JEP <a href=\"https://openjdk.java.net/jeps/319\" rel=\"nofollow\">319</a>), e.g. 11 which runs the build successfully as well and is also LTS.</p>","resourcePath":"/google/gson/issues/1606","createdAt":"2019-11-05T17:30:57Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix JsonWriter writing deferred name before throwing exception","url":"https://github.com/google/gson/pull/1738","resourcePath":"/google/gson/pull/1738","createdAt":"2020-07-14T00:16:55Z","number":1738,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonWriter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDQ4NTcxMzcyOmFjZjk0NjU5Zjg4NTMxMjAwNWMxYzgzNzU2OTdkYmE4NWFiNWJlMTI=","url":"https://github.com/google/gson/pull/1738/commits/acf94659f885312005c1c8375697dba85ab5be12"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1736,"url":"https://github.com/google/gson/issues/1736","title":"Non-lenient JsonWriter.value for NaN or Infinity writes name before throwing exception","bodyHTML":"<p dir=\"auto\">For a non-lenient JsonWriter the methods <code class=\"notranslate\">value(double)</code> and <code class=\"notranslate\">value(Number)</code> write the name of the current JSON property before checking if the value is valid and throwing an exception.</p>\n<p dir=\"auto\">This is problematic for JsonWriters which are supposed to not serialize properties with <code class=\"notranslate\">null</code> values (<code class=\"notranslate\">setSerializeNulls(false)</code>):</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  public void testSerializeNulls() throws IOException {\n    StringWriter stringWriter = new StringWriter();\n    JsonWriter jsonWriter = new JsonWriter(stringWriter);\n    jsonWriter.setSerializeNulls(false);\n    jsonWriter.beginObject();\n\n    // Make sure that methods throwing exceptions do not write\n    // name\n    jsonWriter.name(&quot;test&quot;);\n    try {\n      // value(double)\n      jsonWriter.value(Double.NaN);\n    } catch (IllegalArgumentException expected) {\n    }\n    jsonWriter.nullValue();\n\n    jsonWriter.endObject();\n    // Fails because `test:null` has been written\n    assertEquals(&quot;{}&quot;, stringWriter.toString());\n  }\"><pre>  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testSerializeNulls</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-c1\">IOException</span> {\n    <span class=\"pl-smi\">StringWriter</span> <span class=\"pl-s1\">stringWriter</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringWriter</span>();\n    <span class=\"pl-smi\">JsonWriter</span> <span class=\"pl-s1\">jsonWriter</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonWriter</span>(<span class=\"pl-s1\">stringWriter</span>);\n    <span class=\"pl-s1\">jsonWriter</span>.<span class=\"pl-en\">setSerializeNulls</span>(<span class=\"pl-c1\">false</span>);\n    <span class=\"pl-s1\">jsonWriter</span>.<span class=\"pl-en\">beginObject</span>();\n\n    <span class=\"pl-c\">// Make sure that methods throwing exceptions do not write</span>\n    <span class=\"pl-c\">// name</span>\n    <span class=\"pl-s1\">jsonWriter</span>.<span class=\"pl-en\">name</span>(<span class=\"pl-s\">\"test\"</span>);\n    <span class=\"pl-k\">try</span> {\n      <span class=\"pl-c\">// value(double)</span>\n      <span class=\"pl-s1\">jsonWriter</span>.<span class=\"pl-en\">value</span>(<span class=\"pl-smi\">Double</span>.<span class=\"pl-s1\">NaN</span>);\n    } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">IllegalArgumentException</span> <span class=\"pl-s1\">expected</span>) {\n    }\n    <span class=\"pl-s1\">jsonWriter</span>.<span class=\"pl-en\">nullValue</span>();\n\n    <span class=\"pl-s1\">jsonWriter</span>.<span class=\"pl-en\">endObject</span>();\n    <span class=\"pl-c\">// Fails because `test:null` has been written</span>\n    <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s\">\"{}\"</span>, <span class=\"pl-s1\">stringWriter</span>.<span class=\"pl-en\">toString</span>());\n  }</pre></div>","resourcePath":"/google/gson/issues/1736","createdAt":"2020-07-13T22:29:06Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix  #1697: Mention that GsonBuilder.registerTypeAdapter makes (de-)serializers null-safe","url":"https://github.com/google/gson/pull/1704","resourcePath":"/google/gson/pull/1704","createdAt":"2020-05-21T21:47:31Z","number":1704,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/GsonBuilder.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/GsonTypeAdapterTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDIxNjA1NTYyOjA0NDg1NDg0ZjUxNzY5YTg1YWExYWJhNzhkZjRiNDQyNDFkNDZmN2Y=","url":"https://github.com/google/gson/pull/1704/commits/04485484f51769a85aa1aba78df4b44241d46f7f"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1697,"url":"https://github.com/google/gson/issues/1697","title":"Clarify that GsonBuilder.registerTypeAdapter makes JsonSerializer and JsonDeserializer null-safe","bodyHTML":"<p dir=\"auto\">When calling <code class=\"notranslate\">GsonBuilder.registerTypeAdapter</code> with a <code class=\"notranslate\">JsonSerializer</code> or <code class=\"notranslate\">JsonDeserializer</code>, it is made <code class=\"notranslate\">null</code>-safe (see <code class=\"notranslate\">TreeTypeAdapter</code>), i.e. the (de-)serializer will not be consulted when a <code class=\"notranslate\">null</code> value is handled.</p>\n<p dir=\"auto\">It appears this is currently not documented.</p>\n<p dir=\"auto\">It should be documented in <code class=\"notranslate\">registerTypeAdapter</code> and it should refer to <code class=\"notranslate\">TypeAdapter</code> as alternative which does allow handling <code class=\"notranslate\">null</code>-values.</p>\n<p dir=\"auto\">Related:  <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"469118389\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1553\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/1553/hovercard\" href=\"https://github.com/google/gson/issues/1553\">#1553</a>, <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"196364280\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/980\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/980/hovercard\" href=\"https://github.com/google/gson/issues/980\">#980</a></p>","resourcePath":"/google/gson/issues/1697","createdAt":"2020-05-20T08:59:29Z","labels":{"edges":[{"node":{"name":"enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix #1702: Gson.toJson creates CharSequence which does not implement toString","url":"https://github.com/google/gson/pull/1703","resourcePath":"/google/gson/pull/1703","createdAt":"2020-05-21T21:19:41Z","number":1703,"mergeCommit":{"oid":"a1d2ebc8b51a3a0df8b15c98f47d5ac95cf7f7b0","message":"Fix #1702: Gson.toJson creates CharSequence which does not implement toString (#1703)\n\n* Gson.toJson creates CharSequence which does not implement toString\r\n\r\n* Improve Streams.AppendableWriter.CurrentWrite test\r\n\r\n* Make setChars package-private","commitUrl":"https://github.com/google/gson/commit/a1d2ebc8b51a3a0df8b15c98f47d5ac95cf7f7b0","parents":{"nodes":[{"oid":"4552db2630b6d506ac7e212b337f818169f3c03b","message":"Prefer existing adapter for concurrent `Gson.getAdapter` calls (#2153)\n\nAdditionally fail fast for null as type (previous null support was broken\r\nand would have thrown NullPointerException further below anyways)."}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/Streams.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/ReadersWritersTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984ZIP_m2gAoZWZhYTViZWYzYTliZDZjZjM0YzA4OWQ2NmE5NTU4MDMwOTFmNGMzMw","url":"https://github.com/google/gson/pull/1703/commits/efaa5bef3a9bd6cf34c089d66a955803091f4c33"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1702,"url":"https://github.com/google/gson/issues/1702","title":"Gson.toJson: CharSequence passed to Appendable does not implement toString()","bodyHTML":"<p dir=\"auto\">When calling <code class=\"notranslate\">Gson.toJson(..., Appendable)</code> and <code class=\"notranslate\">Appendable</code> is not an instance of <code class=\"notranslate\">Writer</code>, then <code class=\"notranslate\">Gson</code> creates a <code class=\"notranslate\">CharSequence</code> which does not fulfill the <code class=\"notranslate\">toString()</code> requirements:</p>\n<blockquote>\n<p dir=\"auto\">Returns a string containing the characters in this sequence in the same order as this sequence.  The length of the string will be the length of this sequence.</p>\n</blockquote>\n<p dir=\"auto\">Contrived example:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"static class MyAppendable implements Appendable {\n    private final StringBuilder stringBuilder = new StringBuilder();\n    \n    @Override\n    public Appendable append(char c) throws IOException {\n        stringBuilder.append(c);\n        return this;\n    }\n    \n    @Override\n    public Appendable append(CharSequence csq) throws IOException {\n        if (csq == null) {\n            append(&quot;null&quot;);\n        } else {\n            append(csq, 0, csq.length());\n        }\n        return this;\n    }\n    \n    public Appendable append(CharSequence csq, int start, int end) throws IOException {\n        if (csq == null) {\n            csq == &quot;null&quot;;\n        }\n        \n        // According to doc, toString() must return string representation\n        String s = csq.toString();\n        stringBuilder.append(s, start, end);\n        return this;\n    }\n}\n\npublic static void main(String[] args) {\n    MyAppendable myAppendable = new MyAppendable();\n    new Gson().toJson(&quot;test&quot;, myAppendable);\n    // Prints `com.` (first 4 chars of `com.google.gson.internal.Streams.AppendableWriter.CurrentWrite`)\n    System.out.println(myAppendable.stringBuilder);\n}\"><pre class=\"notranslate\"><code>static class MyAppendable implements Appendable {\n    private final StringBuilder stringBuilder = new StringBuilder();\n    \n    @Override\n    public Appendable append(char c) throws IOException {\n        stringBuilder.append(c);\n        return this;\n    }\n    \n    @Override\n    public Appendable append(CharSequence csq) throws IOException {\n        if (csq == null) {\n            append(\"null\");\n        } else {\n            append(csq, 0, csq.length());\n        }\n        return this;\n    }\n    \n    public Appendable append(CharSequence csq, int start, int end) throws IOException {\n        if (csq == null) {\n            csq == \"null\";\n        }\n        \n        // According to doc, toString() must return string representation\n        String s = csq.toString();\n        stringBuilder.append(s, start, end);\n        return this;\n    }\n}\n\npublic static void main(String[] args) {\n    MyAppendable myAppendable = new MyAppendable();\n    new Gson().toJson(\"test\", myAppendable);\n    // Prints `com.` (first 4 chars of `com.google.gson.internal.Streams.AppendableWriter.CurrentWrite`)\n    System.out.println(myAppendable.stringBuilder);\n}\n</code></pre></div>","resourcePath":"/google/gson/issues/1702","createdAt":"2020-05-21T20:57:48Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"TypeAdapter only appears as AbstractClass","url":"https://github.com/google/gson/pull/1668","resourcePath":"/google/gson/pull/1668","createdAt":"2020-03-31T15:33:03Z","number":1668,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"examples/android-proguard-example/proguard.cfg"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0Mzk2NDE2MjgwOjIxODllM2RjMWE4OTMyODMxMjU5NGI2MWJiY2MwZjk2MjQzNjg4ODI=","url":"https://github.com/google/gson/pull/1668/commits/2189e3dc1a89328312594b61bbcc0f9624368882"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1658,"url":"https://github.com/google/gson/issues/1658","title":"The rule '-keep class * implements com.google.gson.TypeAdapter' uses implements but actually matches extends.","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"“-keep class * implements com.google.gson.TypeAdapter” in examples/android-proguard-example/proguard.cfg is not valid. TypeAdapter is abstract class, not a interface.\"><pre class=\"notranslate\"><code>“-keep class * implements com.google.gson.TypeAdapter” in examples/android-proguard-example/proguard.cfg is not valid. TypeAdapter is abstract class, not a interface.\n</code></pre></div>\n<p dir=\"auto\">Should use: -keep class * extends com.google.gson.TypeAdapter</p>","resourcePath":"/google/gson/issues/1658","createdAt":"2020-02-24T10:27:09Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix JsonReader advancing before throwing exception due to malformed JSON","url":"https://github.com/google/gson/pull/1743","resourcePath":"/google/gson/pull/1743","createdAt":"2020-07-24T18:36:32Z","number":1743,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonReader.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonScope.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonReaderTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU2NDMxNTcwOmFkYzg0MjczMWRiOTlkOWQ4M2ZjNWVlYmU2ZGRhMjRkYTUyMjFhZmQ=","url":"https://github.com/google/gson/pull/1743/commits/adc842731db99d9d83fc5eebe6dda24da5221afd"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1735,"url":"https://github.com/google/gson/issues/1735","title":"JsonReader.peek advances when exception is thrown","bodyHTML":"<p dir=\"auto\">When <code class=\"notranslate\">JsonReader.peek</code> encounters malformed JSON and throws an exception, it has already modified the state of the reader and advanced one char. This is likely not intended and appears to be the reason why the test <code class=\"notranslate\">JsonReaderTest.disabled_testNumberWithOctalPrefix</code> is currently disabled.</p>\n<p dir=\"auto\">Example:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  public void testThrowingPeek() throws IOException {\n    JsonReader reader = new JsonReader(new StringReader(&quot;[a?$,1]&quot;));\n    reader.beginArray();\n    for (int i = 0; i &lt; 4; i++) {\n      try {\n        reader.peek();\n      } catch (MalformedJsonException expected) {\n      }\n    }\n    reader.nextInt();\n    reader.endArray();\n  }\"><pre>  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testThrowingPeek</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-c1\">IOException</span> {\n    <span class=\"pl-smi\">JsonReader</span> <span class=\"pl-s1\">reader</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonReader</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">StringReader</span>(<span class=\"pl-s\">\"[a?$,1]\"</span>));\n    <span class=\"pl-s1\">reader</span>.<span class=\"pl-en\">beginArray</span>();\n    <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">i</span> = <span class=\"pl-c1\">0</span>; <span class=\"pl-s1\">i</span> &lt; <span class=\"pl-c1\">4</span>; <span class=\"pl-s1\">i</span>++) {\n      <span class=\"pl-k\">try</span> {\n        <span class=\"pl-s1\">reader</span>.<span class=\"pl-en\">peek</span>();\n      } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">MalformedJsonException</span> <span class=\"pl-s1\">expected</span>) {\n      }\n    }\n    <span class=\"pl-s1\">reader</span>.<span class=\"pl-en\">nextInt</span>();\n    <span class=\"pl-s1\">reader</span>.<span class=\"pl-en\">endArray</span>();\n  }</pre></div>","resourcePath":"/google/gson/issues/1735","createdAt":"2020-07-13T22:11:23Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Rename internal classes whose name contains a `$`","url":"https://github.com/google/gson/pull/1745","resourcePath":"/google/gson/pull/1745","createdAt":"2020-07-31T12:17:07Z","number":1745,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/reflect/TypeToken.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/GenericArrayTypeTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/ParameterizedTypeFixtures.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/ParameterizedTypeTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/MapTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/GsonTypesTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDYwMDkxNjg4OmY4NDA5YjFiYTAzYWExMGQyM2Q3NjJlN2E1NjdmZWQ0ZjJlZDVhZGM=","url":"https://github.com/google/gson/pull/1745/commits/f8409b1ba03aa10d23d762e7a567fed4f2ed5adc"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1744,"url":"https://github.com/google/gson/issues/1744","title":"Rename internal Gson classes containing $","bodyHTML":"<p dir=\"auto\">Please rename Gson classes whose name contains a <code class=\"notranslate\">$</code>:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">com.google.gson.internal.$Gson$Types</code></li>\n<li><code class=\"notranslate\">com.google.gson.internal.$Gson$Preconditions</code></li>\n</ul>\n<p dir=\"auto\"><a href=\"https://docs.oracle.com/javase/specs/jls/se14/html/jls-3.html#jls-3.8\" rel=\"nofollow\">JLS 14 §3.8</a> says:</p>\n<blockquote>\n<p dir=\"auto\">The dollar sign should be used only in mechanically generated source code or, rarely, to access pre-existing names on legacy systems.</p>\n</blockquote>\n<p dir=\"auto\">It appears these classes were renamed by <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/google/gson/commit/4efb133b4a6cc93708dda782d948b9c88c3b5ff0/hovercard\" href=\"https://github.com/google/gson/commit/4efb133b4a6cc93708dda782d948b9c88c3b5ff0\"><tt>4efb133</tt></a> to prevent IDE auto-importing. However, nowadays IDEs (at least Eclipse) have ways to prevent certain types or packages from appearing in import suggestions.<br>\nAdditionally these classes are in the <code class=\"notranslate\">internal</code> package and with the Java module system they won't be visible to users anymore.</p>\n<p dir=\"auto\">For now maybe simply removing the <code class=\"notranslate\">$</code>s and adding a documentation comment that these classes are internal might already solve the issue.</p>\n<p dir=\"auto\">Currently when developing Gson having to deal with these classes is (at least under Eclipse but I assume IntelliJ has similar issues) pretty annoying:</p>\n<ul dir=\"auto\">\n<li>Eclipse fails adding the imports</li>\n<li>Eclipse suggests bogus types in the \"Open Types\" dialog</li>\n<li>Using conditional breakpoints in these classes is not possible at all because Eclipse incorrectly assumes they are nested classes</li>\n<li>... <em>likely more</em></li>\n</ul>","resourcePath":"/google/gson/issues/1744","createdAt":"2020-07-30T13:59:35Z","labels":{"edges":[{"node":{"name":"enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Support force writing null JSON value, ignoring getSerializeNulls()","url":"https://github.com/google/gson/pull/1757","resourcePath":"/google/gson/pull/1757","createdAt":"2020-08-19T14:25:00Z","number":1757,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"gson/src/main/java/com/google/gson/annotations/SerializeNull.java"}},{"node":{"changeType":"ADDED","path":"gson/src/main/java/com/google/gson/internal/JsonWriterInternalAccess.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonWriter.java"}},{"node":{"changeType":"ADDED","path":"gson/src/test/java/com/google/gson/functional/SerializeNullAnnotationTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDcwMjAxMzMzOjIzZjdiNGNhNzRjZTYzYjJhMzFjMGEwMWYzMGQ2NTBmZmIzODFhNmE=","url":"https://github.com/google/gson/pull/1757/commits/23f7b4ca74ce63b2a31c0a01f30d650ffb381a6a"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":532,"url":"https://github.com/google/gson/issues/532","title":"Feature request: Force inclusion of specific field when null","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Gson allows blanket-inclusion of null fields, using serializeNulls().  But this \nproduces much bigger JSON output (which is why the default is not to serialize \nnulls).\n\nIt would be nice to support a per-field annotation, for just those fields where \n(broken) clients expect a null to be provided.  The alternative is to turn on \nserializeNulls everywhere (I think).\n\nJackson supports this with @JsonInclude(Include.ALWAYS).\"><pre class=\"notranslate\"><code>Gson allows blanket-inclusion of null fields, using serializeNulls().  But this \nproduces much bigger JSON output (which is why the default is not to serialize \nnulls).\n\nIt would be nice to support a per-field annotation, for just those fields where \n(broken) clients expect a null to be provided.  The alternative is to turn on \nserializeNulls everywhere (I think).\n\nJackson supports this with @JsonInclude(Include.ALWAYS).\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">jus...@fathomdb.com</code> on 26 Aug 2013 at 12:58</p>","resourcePath":"/google/gson/issues/532","createdAt":"2015-03-19T18:33:42Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Make dependency on java.sql optional","url":"https://github.com/google/gson/pull/1707","resourcePath":"/google/gson/pull/1707","createdAt":"2020-05-24T21:56:24Z","number":1707,"mergeCommit":{"oid":"1023f0fe34ff1019109cd5f548c52eaee49750a5","message":"Merge pull request #1707 from Marcono1234/optional-sql\n\nMake dependency on java.sql optional","commitUrl":"https://github.com/google/gson/commit/1023f0fe34ff1019109cd5f548c52eaee49750a5","parents":{"nodes":[{"oid":"03be83591467afc368608e80a03f9d6a0e9720fd","message":"Update change log, and version numbers in documentation."},{"oid":"69173b02eaa82de0382d94478a1b4cdeafeca829","message":"Merge branch 'master' into optional-sql"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/module-info.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/CollectionTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/TreeTypeAdaptersTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/LinkedHashTreeMapTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java"}},{"node":{"changeType":"RENAMED","path":"gson/src/test/java/com/google/gson/internal/bind/DefaultDateTypeAdapterTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java"}},{"node":{"changeType":"ADDED","path":"gson/src/test/java/com/google/gson/internal/sql/SqlTypesGsonTest.java"}},{"node":{"changeType":"ADDED","path":"gson/src/test/java/com/google/gson/internal/sql/SqlTypesSupportTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDIyNDc2MDUyOjY5MTczYjAyZWFhODJkZTAzODJkOTQ0NzhhMWI0Y2RlYWZlY2E4Mjk=","url":"https://github.com/google/gson/pull/1707/commits/69173b02eaa82de0382d94478a1b4cdeafeca829"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1629,"url":"https://github.com/google/gson/issues/1629","title":"Remove support for java.sql types","bodyHTML":"<p dir=\"auto\">The original idea <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"63057503\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/134\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/134/hovercard\" href=\"https://github.com/google/gson/issues/134\">#134</a> was OK in 2015. Since then, Java got modular support and java.sql is no longer available by default. This is causing sporadic issues in random places:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"63057503\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/134\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/134/hovercard?comment_id=410848727&amp;comment_type=issue_comment\" href=\"https://github.com/google/gson/issues/134#issuecomment-410848727\">#134 (comment)</a></li>\n<li><a href=\"https://travis-ci.org/dernasherbrezon/jsp-openapi/builds/620333411\" rel=\"nofollow\">java.lang.ClassNotFoundException: java.sql.Time</a></li>\n<li><a href=\"https://stackoverflow.com/search?q=gson+java.sql\" rel=\"nofollow\">stackoverflow</a></li>\n<li><a href=\"https://github.com/google/gson/blob/master/pom.xml#L84\">gson pom.xml</a></li>\n</ul>\n<p dir=\"auto\">Would be great to deprecate support for java.sql and suggest writing type adapters instead.</p>","resourcePath":"/google/gson/issues/1629","createdAt":"2019-12-04T14:20:54Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix #1699: Don't catch OutOfMemoryError","url":"https://github.com/google/gson/pull/1701","resourcePath":"/google/gson/pull/1701","createdAt":"2020-05-21T20:16:27Z","number":1701,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/JsonParser.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/JsonStreamParser.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDIxNTYwMjY2OjdiNmFhZWUwNWQwMGMxYWJkZjYyMWIxMzY4MTU1NTdiOTRlNjIyZTk=","url":"https://github.com/google/gson/pull/1701/commits/7b6aaee05d00c1abdf621b136815557b94e622e9"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1699,"url":"https://github.com/google/gson/issues/1699","title":"Don't catch OutOfMemoryError","bodyHTML":"<p dir=\"auto\">Gson currently catches <code class=\"notranslate\">OutOfMemoryError</code>s at two places and wraps them inside <code class=\"notranslate\">JsonParseException</code>:<br>\n<div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/gson/blob/c5a3f21fbad3828deba1deb88168e1f76829f807/gson/src/main/java/com/google/gson/JsonParser.java#L88-L89\">gson/gson/src/main/java/com/google/gson/JsonParser.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 88 to 89\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/google/gson/commit/c5a3f21fbad3828deba1deb88168e1f76829f807\">c5a3f21</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L88\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"88\"></td>\n          <td id=\"LC88\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">OutOfMemoryError</span> <span class=\"pl-s1\">e</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L89\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"89\"></td>\n          <td id=\"LC89\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonParseException</span>(<span class=\"pl-s\">\"Failed parsing JSON source: \"</span> + <span class=\"pl-s1\">reader</span> + <span class=\"pl-s\">\" to Json\"</span>, <span class=\"pl-s1\">e</span>); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n<br>\n<div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/gson/blob/b75e1bbc7915f409ba0254fcc92c71ed6798e69b/gson/src/main/java/com/google/gson/JsonStreamParser.java#L90-L91\">gson/gson/src/main/java/com/google/gson/JsonStreamParser.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 90 to 91\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/google/gson/commit/b75e1bbc7915f409ba0254fcc92c71ed6798e69b\">b75e1bb</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L90\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"90\"></td>\n          <td id=\"LC90\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">OutOfMemoryError</span> <span class=\"pl-s1\">e</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L91\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"91\"></td>\n          <td id=\"LC91\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonParseException</span>(<span class=\"pl-s\">\"Failed parsing JSON source to Json\"</span>, <span class=\"pl-s1\">e</span>); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">This is bad practice because Gson is not necessarily the cause for this error and wrapping it inside an <code class=\"notranslate\">Exception</code> subclass prevents the caller from noticing the <code class=\"notranslate\">OutOfMemoryError</code> until later.</p>\n<p dir=\"auto\">Edit: Catching <code class=\"notranslate\">OutOfMemoryError</code> <em>might</em> be desired to protect about malicious JSON data, see also <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"925213007\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1912\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/1912/hovercard?comment_id=1130767871&amp;comment_type=issue_comment\" href=\"https://github.com/google/gson/pull/1912#issuecomment-1130767871\">#1912 (comment)</a>. However, it appears <code class=\"notranslate\">OutOfMemoryError</code> is not caught consistently everywhere.</p>","resourcePath":"/google/gson/issues/1699","createdAt":"2020-05-21T16:47:38Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix JsonReader and JsonTreeReader nextLong() not failing on precision loss","url":"https://github.com/google/gson/pull/1737","resourcePath":"/google/gson/pull/1737","createdAt":"2020-07-14T00:02:51Z","number":1737,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/JsonReaderInternalAccess.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonReader.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonReaderTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDQ4NTY3NTQ4OjI1M2VmZjM4OGFkMDY2ZGI4MWE0OWI3N2RhMzc4NTYzOTI3NjdhMjI=","url":"https://github.com/google/gson/pull/1737/commits/253eff388ad066db81a49b77da37856392767a22"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1727,"url":"https://github.com/google/gson/issues/1727","title":"Long upper limit value","bodyHTML":"<p dir=\"auto\">Use Gson</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Gson gson = new Gson();\nLong a = gson.fromJson(&quot;9223372036854775808&quot;, Long.class);\nSystem.out.println(a);\n\n=&gt; 9223372036854775807\"><pre class=\"notranslate\"><code>Gson gson = new Gson();\nLong a = gson.fromJson(\"9223372036854775808\", Long.class);\nSystem.out.println(a);\n\n=&gt; 9223372036854775807\n</code></pre></div>\n<p dir=\"auto\">Use JsonPrimitive</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var jp = new JsonPrimitive(&quot;9223372036854775808&quot;);\nLong b = jp.getAsLong();\nSystem.out.println(b);\n\n=&gt; java.lang.NumberFormatException: For input string: &quot;9223372036854775808&quot;\"><pre class=\"notranslate\"><code>var jp = new JsonPrimitive(\"9223372036854775808\");\nLong b = jp.getAsLong();\nSystem.out.println(b);\n\n=&gt; java.lang.NumberFormatException: For input string: \"9223372036854775808\"\n</code></pre></div>\n<p dir=\"auto\">Use Long.valueOf</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Long c = Long.valueOf(&quot;9223372036854775808&quot;);\nSystem.out.println(c);\n\n=&gt; java.lang.NumberFormatException: For input string: &quot;9223372036854775808&quot;\"><pre class=\"notranslate\"><code>Long c = Long.valueOf(\"9223372036854775808\");\nSystem.out.println(c);\n\n=&gt; java.lang.NumberFormatException: For input string: \"9223372036854775808\"\n</code></pre></div>\n<p dir=\"auto\">Why is there no error in Gson?<br>\nIs this a bug? Or is it a specification?<br>\nI want an error to occur.</p>","resourcePath":"/google/gson/issues/1727","createdAt":"2020-06-25T00:50:33Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Improved type handling","url":"https://github.com/google/gson/pull/1753","resourcePath":"/google/gson/pull/1753","createdAt":"2020-08-14T18:40:05Z","number":1753,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/$Gson$Types.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/reflect/TypeToken.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDY4MTMwODE0OmY4NTNkYmJiMzFmNDRlOGFhZjNkZWE0MGNkYWYzOGU1M2M4NGE3M2E=","url":"https://github.com/google/gson/pull/1753/commits/f853dbbb31f44e8aaf3dea40cdaf38e53c84a73a"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1219,"url":"https://github.com/google/gson/issues/1219","title":"Don't silently ignore missing type information from `TypeTokens`.","bodyHTML":"<p dir=\"auto\">I'm active on Stack Overflow, and often see questions with code more or less like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class Main {\n\t\t\n\tpublic static void main(String[] args) {\n            // should work right?\n\t    MyClass mc = new Gson().fromJson(&quot;{}&quot;, Main.&lt;MyClass&gt;typeTokenHelper());\n\t}\n\t\n\tstatic class MyClass {}\n\t\n\tpublic static &lt;T&gt; Type typeTokenHelper() {\n\t\treturn new TypeToken&lt;T&gt;() {}.getType();\n\t}\n\n}\"><pre class=\"notranslate\"><code>public class Main {\n\t\t\n\tpublic static void main(String[] args) {\n            // should work right?\n\t    MyClass mc = new Gson().fromJson(\"{}\", Main.&lt;MyClass&gt;typeTokenHelper());\n\t}\n\t\n\tstatic class MyClass {}\n\t\n\tpublic static &lt;T&gt; Type typeTokenHelper() {\n\t\treturn new TypeToken&lt;T&gt;() {}.getType();\n\t}\n\n}\n</code></pre></div>\n<p dir=\"auto\">Of course this fails with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to test.Main$MyClass\"><pre class=\"notranslate\"><code>java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap cannot be cast to test.Main$MyClass\n</code></pre></div>\n<p dir=\"auto\">Since there is not actually any type information available from the <code class=\"notranslate\">TypeToken</code>. The <code class=\"notranslate\">Type</code> that you get is the generic type <code class=\"notranslate\">T</code>:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Type t = Main.&lt;MyClass&gt;typeTokenHelper();\nSystem.out.println(t); // prints 'T'. instead of the naïvely expected 'MyClass'\"><pre class=\"notranslate\"><code>Type t = Main.&lt;MyClass&gt;typeTokenHelper();\nSystem.out.println(t); // prints 'T'. instead of the naïvely expected 'MyClass'\n</code></pre></div>\n<p dir=\"auto\">This is confusing. The missing type information should not be silently ignored only to get a <code class=\"notranslate\">ClassCastException</code> later. The missing type information is caused by a design time error and should be flagged as early as possible.</p>\n<p dir=\"auto\">At first glance a check like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// where 'typeOfT' is the type returned by TypeToken::getType\nif(typeOfT instanceof TypeVariable) {  // java.lang.reflect.TypeVariable\n    throw new RuntimeExcepiton(...);\n}\"><pre class=\"notranslate\"><code>// where 'typeOfT' is the type returned by TypeToken::getType\nif(typeOfT instanceof TypeVariable) {  // java.lang.reflect.TypeVariable\n    throw new RuntimeExcepiton(...);\n}\n</code></pre></div>\n<p dir=\"auto\">Somewhere might fix this issue. Perhaps in <a href=\"https://github.com/google/gson/blob/0636635cbffa08157bdbd558b1212e4d806474eb/gson/src/main/java/com/google/gson/reflect/TypeToken.java#L81\"><code class=\"notranslate\">TypeToken::getSuperclassTypeParameter</code></a> or in <a href=\"https://github.com/google/gson/blob/0636635cbffa08157bdbd558b1212e4d806474eb/gson/src/main/java/com/google/gson/Gson.java#L878\"><code class=\"notranslate\">Gson::fromJson</code></a>. (I don't know where the use of TypeTokens with TypeVariables might be required though)</p>","resourcePath":"/google/gson/issues/1219","createdAt":"2018-01-01T17:10:33Z","labels":{"edges":[{"node":{"name":"enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Improve location information in JsonReader exception messages","url":"https://github.com/google/gson/pull/1764","resourcePath":"/google/gson/pull/1764","createdAt":"2020-08-25T17:07:35Z","number":1764,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonReader.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonScope.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonReaderTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDczMzQxNzA4OjMzMDEzMjgzOWY0ODgzODRjZjE0M2IzYTQ5ODhjNWJiMWM5NWY3Nzk=","url":"https://github.com/google/gson/pull/1764/commits/330132839f488384cf143b3a4988c5bb1c95f779"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1564,"url":"https://github.com/google/gson/issues/1564","title":"JsonReader throws NumberFormatException which does not contain location info","bodyHTML":"<p dir=\"auto\">The message of exceptions thrown by <code class=\"notranslate\">JsonReader</code> usually contains location information including the current path. This is really helpful to locate the error in the input JSON.</p>\n<p dir=\"auto\">Example: <code class=\"notranslate\">java.lang.IllegalStateException: Expected an int but was BOOLEAN at line 7 column 10 path $.x.y</code></p>\n<p dir=\"auto\">Now <code class=\"notranslate\">JsonReader.nextInt(), .nextLong(), .nextDouble()</code> may throw exceptions that contain no such location information. The exception is thrown in the lines<br>\n<code class=\"notranslate\">double asDouble = Double.parseDouble(peekedString); // don't catch this NumberFormatException.</code></p>\n<p dir=\"auto\">How to provoke that specific exception:<br>\nModel: <code class=\"notranslate\">public class Model { int x; }</code><br>\nand then call <code class=\"notranslate\">new GsonBuilder().create().fromJson(\"{ x: ''}\", Model.class}</code></p>\n<p dir=\"auto\">The exception message will be:  <code class=\"notranslate\">java.lang.NumberFormatException: empty String</code>, containg no location information.<br>\nThe exception itself was thrown by <code class=\"notranslate\">Double</code> and <code class=\"notranslate\">JsonReader</code> just passed it along.</p>\n<p dir=\"auto\">Imho JsonReader should catch the exception from <code class=\"notranslate\">Double.parseDouble</code> and add location information to a rethrown copy.</p>","resourcePath":"/google/gson/issues/1564","createdAt":"2019-08-12T12:23:55Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Don't parse malformed string as boolean","url":"https://github.com/google/gson/pull/1775","resourcePath":"/google/gson/pull/1775","createdAt":"2020-09-02T19:56:14Z","number":1775,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/JsonPrimitive.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/JsonPrimitiveTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/PrimitiveTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDc4MTMxNDUwOjc2ZjliZmI0MGEyMWYyOTk1ZTkxYmJmZTY3MjJmMDYxMjg0NzE3YWI=","url":"https://github.com/google/gson/pull/1775/commits/76f9bfb40a21f2995e91bbfe6722f061284717ab"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":600,"url":"https://github.com/google/gson/issues/600","title":"Boolean no error passing a String value","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"passing a number to a Boolean I see the error: Expected a boolean but was \nNUMBER (OK), passing a string to a Boolean there is no error and is assigned to \nthe Boolean false (NOT OK)\n\n{&quot;isPRA&quot;:10}     generate the error (OK)\n\n{&quot;isPRA&quot;:&quot;ABC&quot;}  no error (NOT OK)\n\nIn the example isPRA is a Boolean field and I used gson 2.3\n\"><pre class=\"notranslate\"><code>passing a number to a Boolean I see the error: Expected a boolean but was \nNUMBER (OK), passing a string to a Boolean there is no error and is assigned to \nthe Boolean false (NOT OK)\n\n{\"isPRA\":10}     generate the error (OK)\n\n{\"isPRA\":\"ABC\"}  no error (NOT OK)\n\nIn the example isPRA is a Boolean field and I used gson 2.3\n\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">dmclcu57...@gmail.com</code> on 14 Oct 2014 at 9:06</p>","resourcePath":"/google/gson/issues/600","createdAt":"2015-03-19T18:34:24Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Avoid to crash with ConcurrentModificationException on serialization","url":"https://github.com/google/gson/pull/1813","resourcePath":"/google/gson/pull/1813","createdAt":"2020-11-05T10:15:01Z","number":1813,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/CollectionTypeAdapterFactory.java"}},{"node":{"changeType":"ADDED","path":"gson/src/test/java/com/google/gson/GsonMutableCollectionsTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTE1OTQ5MjY5OjA2YWE1MWYwMmEzMWE1ODM3ZDU2ZTEyOWFjMzcwYWQ3YWU0NGYxN2Y=","url":"https://github.com/google/gson/pull/1813/commits/06aa51f02a31a5837d56e129ac370ad7ae44f17f"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1812,"url":"https://github.com/google/gson/issues/1812","title":"ConcurrentModification exception on serialization of a mutable collection","bodyHTML":"<p dir=\"auto\">In the case where you want to serialize a Mutable collection and this collection get changed by another thread while Gson is serializing it you got the following error:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.util.ArrayList$Itr.next (ArrayList.java:860)\ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write (CollectionTypeAdapterFactory.java:96)\ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write (CollectionTypeAdapterFactory.java:61)\ncom.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write (TypeAdapterRuntimeTypeWrapper.java:69)\ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write (ReflectiveTypeAdapterFactory.java:127)\ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write (ReflectiveTypeAdapterFactory.java:245)\ncom.google.gson.Gson.toJson (Gson.java:704)\ncom.google.gson.Gson.toJson (Gson.java:683)\ncom.google.gson.Gson.toJson (Gson.java:638)\ncom.google.gson.Gson.toJson (Gson.java:618)\"><pre class=\"notranslate\"><code>java.util.ArrayList$Itr.next (ArrayList.java:860)\ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write (CollectionTypeAdapterFactory.java:96)\ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write (CollectionTypeAdapterFactory.java:61)\ncom.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write (TypeAdapterRuntimeTypeWrapper.java:69)\ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write (ReflectiveTypeAdapterFactory.java:127)\ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write (ReflectiveTypeAdapterFactory.java:245)\ncom.google.gson.Gson.toJson (Gson.java:704)\ncom.google.gson.Gson.toJson (Gson.java:683)\ncom.google.gson.Gson.toJson (Gson.java:638)\ncom.google.gson.Gson.toJson (Gson.java:618)\n</code></pre></div>\n<p dir=\"auto\">Starting from the fact that having a mutable collection shared between threads is bad, I think the library should handle it in the sense that is should take a snapshot of the collection and serialize that one.</p>\n<p dir=\"auto\">Suggested solution: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"736798678\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1813\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/1813/hovercard\" href=\"https://github.com/google/gson/pull/1813\">#1813</a></p>","resourcePath":"/google/gson/issues/1812","createdAt":"2020-11-05T10:11:12Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Avoid returning incomplete TypeAdapters in concurrent calls","url":"https://github.com/google/gson/pull/1830","resourcePath":"/google/gson/pull/1830","createdAt":"2020-12-01T22:26:33Z","number":1830,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/Gson.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTMwNjEzNTA2OmE1OGVkZThiZTk0NGZmZDBmZTI1MWZjZjUwNWFhNTJmMTIyNTE5YmE=","url":"https://github.com/google/gson/pull/1830/commits/a58ede8be944ffd0fe251fcf505aa52f122519ba"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":625,"url":"https://github.com/google/gson/issues/625","title":"FutureTypeAdapter.read() throws unhelpful exception","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"What steps will reproduce the problem?\nWhen FutureTypeAdapter's delegate is null, the read() method throws an \nIllegalStateException with no message.  This then gets turned into a \nJsonSyntaxException\n\nThese two exceptions don't make it easy to diagnose what went wrong, and you \ncan't easily tell if the issue is caused by a programming error, a bug in Gson, \nor with the json being parsed.  There's also no indication of what the \ndeveloper can do to avoid hitting this exception. Adding javasdoc and a helpful \nmethod to the exception woudl be very nice. \n\nBelow is a sample stack trace. \n\nE/Timber  ( 3055): Caused by: retrofit.converter.ConversionException: \ncom.google.gson.JsonSyntaxException: java.lang.IllegalStateException\nE/Timber  ( 3055):  at \nretrofit.converter.GsonConverter.fromBody(GsonConverter.java:67)\nE/Timber  ( 3055):  at \nretrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:362)\nE/Timber  ( 3055):  ... 9 more\nE/Timber  ( 3055): Caused by: com.google.gson.JsonSyntaxException: \njava.lang.IllegalStateException\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(Reflecti\nveTypeAdapterFactory.java:187)\nE/Timber  ( 3055):  at com.google.gson.Gson.fromJson(Gson.java:805)\nE/Timber  ( 3055):  at com.google.gson.Gson.fromJson(Gson.java:770)\nE/Timber  ( 3055):  at \nretrofit.converter.GsonConverter.fromBody(GsonConverter.java:63)\nE/Timber  ( 3055):  ... 10 more\nE/Timber  ( 3055): Caused by: java.lang.IllegalStateException\nE/Timber  ( 3055):  at \ncom.google.gson.Gson$FutureTypeAdapter.read(Gson.java:885)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRunt\nimeTypeWrapper.java:40)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(Collecti\nonTypeAdapterFactory.java:81)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(Collecti\nonTypeAdapterFactory.java:60)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveType\nAdapterFactory.java:95)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(Reflecti\nveTypeAdapterFactory.java:183)\nE/Timber  ( 3055):  ... 13 more\n\"><pre class=\"notranslate\"><code>What steps will reproduce the problem?\nWhen FutureTypeAdapter's delegate is null, the read() method throws an \nIllegalStateException with no message.  This then gets turned into a \nJsonSyntaxException\n\nThese two exceptions don't make it easy to diagnose what went wrong, and you \ncan't easily tell if the issue is caused by a programming error, a bug in Gson, \nor with the json being parsed.  There's also no indication of what the \ndeveloper can do to avoid hitting this exception. Adding javasdoc and a helpful \nmethod to the exception woudl be very nice. \n\nBelow is a sample stack trace. \n\nE/Timber  ( 3055): Caused by: retrofit.converter.ConversionException: \ncom.google.gson.JsonSyntaxException: java.lang.IllegalStateException\nE/Timber  ( 3055):  at \nretrofit.converter.GsonConverter.fromBody(GsonConverter.java:67)\nE/Timber  ( 3055):  at \nretrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:362)\nE/Timber  ( 3055):  ... 9 more\nE/Timber  ( 3055): Caused by: com.google.gson.JsonSyntaxException: \njava.lang.IllegalStateException\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(Reflecti\nveTypeAdapterFactory.java:187)\nE/Timber  ( 3055):  at com.google.gson.Gson.fromJson(Gson.java:805)\nE/Timber  ( 3055):  at com.google.gson.Gson.fromJson(Gson.java:770)\nE/Timber  ( 3055):  at \nretrofit.converter.GsonConverter.fromBody(GsonConverter.java:63)\nE/Timber  ( 3055):  ... 10 more\nE/Timber  ( 3055): Caused by: java.lang.IllegalStateException\nE/Timber  ( 3055):  at \ncom.google.gson.Gson$FutureTypeAdapter.read(Gson.java:885)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRunt\nimeTypeWrapper.java:40)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(Collecti\nonTypeAdapterFactory.java:81)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(Collecti\nonTypeAdapterFactory.java:60)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveType\nAdapterFactory.java:95)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(Reflecti\nveTypeAdapterFactory.java:183)\nE/Timber  ( 3055):  ... 13 more\n\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">MhaleK...@gmail.com</code> on 29 Jan 2015 at 5:26</p>","resourcePath":"/google/gson/issues/625","createdAt":"2015-03-19T18:34:32Z","labels":{"edges":[{"node":{"name":"bug"}}]}}},{"node":{"number":1829,"url":"https://github.com/google/gson/issues/1829","title":"fromJson intermittently fails with IllegalStateException when deserializing recursive structures in parallel","bodyHTML":"<p dir=\"auto\">We are seeing an issue where <code class=\"notranslate\">fromJson</code> results in a <code class=\"notranslate\">JsonSyntaxException</code> with the root cause being an <code class=\"notranslate\">IllegalStateException</code>. The stacktrace that comes from within the GSON library is:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Caused by: com.google.gson.JsonSyntaxException: java.lang.IllegalStateException\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:226)\nat com.google.gson.Gson.fromJson(Gson.java:927)\nat com.google.gson.Gson.fromJson(Gson.java:892)\nat com.google.gson.Gson.fromJson(Gson.java:841)\nat com.google.gson.Gson.fromJson(Gson.java:813)\nat com.stripe.net.LiveStripeResponseGetter.request(LiveStripeResponseGetter.java:66)\n... 136 common frames omitted\nCaused by: java.lang.IllegalStateException: null\nat com.google.gson.Gson$FutureTypeAdapter.read(Gson.java:1009)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)\n... 141 common frames omitted\"><pre class=\"notranslate\"><code>Caused by: com.google.gson.JsonSyntaxException: java.lang.IllegalStateException\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:226)\nat com.google.gson.Gson.fromJson(Gson.java:927)\nat com.google.gson.Gson.fromJson(Gson.java:892)\nat com.google.gson.Gson.fromJson(Gson.java:841)\nat com.google.gson.Gson.fromJson(Gson.java:813)\nat com.stripe.net.LiveStripeResponseGetter.request(LiveStripeResponseGetter.java:66)\n... 136 common frames omitted\nCaused by: java.lang.IllegalStateException: null\nat com.google.gson.Gson$FutureTypeAdapter.read(Gson.java:1009)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)\n... 141 common frames omitted\n</code></pre></div>\n<p dir=\"auto\">This seems to be due to a race condition in <code class=\"notranslate\">Gson.getAdapter</code> where a <code class=\"notranslate\">FutureTypeAdapter</code> is created by one thread and accessed by another before the delegate is set<br>\n<div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/gson/blob/5370b076e329444860b0ea0c7f33b10504281f27/gson/src/main/java/com/google/gson/Gson.java#L433\">gson/gson/src/main/java/com/google/gson/Gson.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 433\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/google/gson/commit/5370b076e329444860b0ea0c7f33b10504281f27\">5370b07</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L433\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"433\"></td>\n          <td id=\"LC433\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">public</span> &lt;<span class=\"pl-s1\">T</span>&gt; <span class=\"pl-smi\">TypeAdapter</span>&lt;<span class=\"pl-smi\">T</span>&gt; <span class=\"pl-en\">getAdapter</span>(<span class=\"pl-smi\">TypeToken</span>&lt;<span class=\"pl-smi\">T</span>&gt; <span class=\"pl-s1\">type</span>) { </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">edit: This looks to be well described by the comment on <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"63060198\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/625\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/625/hovercard\" href=\"https://github.com/google/gson/issues/625\">#625</a> : <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"63060198\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/625\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/625/hovercard?comment_id=321373437&amp;comment_type=issue_comment\" href=\"https://github.com/google/gson/issues/625#issuecomment-321373437\">#625 (comment)</a></p>","resourcePath":"/google/gson/issues/1829","createdAt":"2020-12-01T16:35:03Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"ISO8601UtilsTest.testDateFormatString: Create date instance with UTC","url":"https://github.com/google/gson/pull/1781","resourcePath":"/google/gson/pull/1781","createdAt":"2020-09-12T05:02:28Z","number":1781,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/bind/util/ISO8601UtilsTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDg1NzQ5MjU2OjgxYjJiYjkxMzUwZGNiOGNlOTVhZjdjNzM5ZDEzZjhmMDAzZWYwODU=","url":"https://github.com/google/gson/pull/1781/commits/81b2bb91350dcb8ce95af7c739d13f8f003ef085"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1780,"url":"https://github.com/google/gson/issues/1780","title":"ISO8601UtilsTest failed when System Timezone is between UTC-1 and UTC-12","bodyHTML":"<p dir=\"auto\">In ISO8601UtilsTest.ISO8601UtilsTest, calendar is initiated with Local Timezone.<br>\nBut ISO8601Utils.format is processing time with UTC, so following error can be raised on UTC-1 and UTC-12</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ env TZ=UTC-1 mvn -f gson test\n\nRunning com.google.gson.internal.bind.util.ISO8601UtilsTest\nTests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.024 sec &lt;&lt;&lt; FAILURE!\ntestDateFormatString(com.google.gson.internal.bind.util.ISO8601UtilsTest)  Time elapsed: 0.005 sec  &lt;&lt;&lt; FAILURE!\norg.junit.ComparisonFailure: expected:&lt;2018-06-2[5]&gt; but was:&lt;2018-06-2[4]&gt;\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateFormatString(ISO8601UtilsTest.java:26)\n\"><pre class=\"notranslate\"><code>$ env TZ=UTC-1 mvn -f gson test\n\nRunning com.google.gson.internal.bind.util.ISO8601UtilsTest\nTests run: 7, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.024 sec &lt;&lt;&lt; FAILURE!\ntestDateFormatString(com.google.gson.internal.bind.util.ISO8601UtilsTest)  Time elapsed: 0.005 sec  &lt;&lt;&lt; FAILURE!\norg.junit.ComparisonFailure: expected:&lt;2018-06-2[5]&gt; but was:&lt;2018-06-2[4]&gt;\n\tat org.junit.Assert.assertEquals(Assert.java:115)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat com.google.gson.internal.bind.util.ISO8601UtilsTest.testDateFormatString(ISO8601UtilsTest.java:26)\n\n</code></pre></div>","resourcePath":"/google/gson/issues/1780","createdAt":"2020-09-12T05:01:27Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Support `jsonValue` in JsonTreeWriter","url":"https://github.com/google/gson/pull/1819","resourcePath":"/google/gson/pull/1819","createdAt":"2020-11-16T01:07:27Z","number":1819,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/bind/JsonTreeWriterTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTIxMjk4MDA2OmI2ZmRiODUxMzU0MDk2NDllNjcyZWM0NDEzNDcwNjliNGQ3NmQ0ODY=","url":"https://github.com/google/gson/pull/1819/commits/b6fdb85135409649e672ec441347069b4d76d486"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1268,"url":"https://github.com/google/gson/issues/1268","title":"JsonWriter#jsonValue(String) throws AssertionError","bodyHTML":"<p dir=\"auto\">Relevant code:</p>\n<p dir=\"auto\"><a href=\"https://github.com/Atherys-Horizons/AtherysCore/blob/master/src/main/java/com/atherys/core/gson/AbstractConfigurateAdapter.java#L39\">https://github.com/Atherys-Horizons/AtherysCore/blob/master/src/main/java/com/atherys/core/gson/AbstractConfigurateAdapter.java#L39</a></p>\n<p dir=\"auto\">Without getting into the details of it, <code class=\"notranslate\">logger.info(json)</code> outputs the proper Json string. However, JsonWriter#jsonValue(String) right after it throws an AssertionError. Here is the relevant error:</p>\n<p dir=\"auto\">`[19:35:59] [Server thread/INFO] [atheryscore]: Write: {\"ContentVersion\":1,\"ItemType\":\"minecraft:anvil\",\"Count\":1,\"UnsafeDamage\":0,\"UnsafeData\":{\"display\":{\"Name\":\"The Magical Anvil\"}}}</p>\n<p dir=\"auto\">[19:35:59] [Server thread/ERROR] [Sponge]: Could not pass FMLServerStartedEvent to Plugin{id=atherysquests, name=A'therys Quests, version=1.0.0b, description=A quest plugin written for the A'therys Horizons server., source=D:\\Sponge1122\\Server\\mods\\AtherysQuests-all.jar}<br>\njava.lang.AssertionError: null<br>\nat com.google.gson.internal.bind.JsonTreeWriter$1.write(JsonTreeWriter.java:36) ~[JsonTreeWriter$1.class:?]<br>\nat java.io.Writer.write(Unknown Source) ~[?:1.8.0_161]<br>\nat java.io.Writer.write(Unknown Source) ~[?:1.8.0_161]<br>\nat java.io.Writer.append(Unknown Source) ~[?:1.8.0_161]<br>\nat com.google.gson.stream.JsonWriter.jsonValue(JsonWriter.java:436) ~[JsonWriter.class:?]<br>\nat com.atherys.core.gson.AbstractConfigurateAdapter.write(AbstractConfigurateAdapter.java:44) ~[AbstractConfigurateAdapter.class:?]<br>\nat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[TypeAdapterRuntimeTypeWrapper.class:?]<br>\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:125) ~[ReflectiveTypeAdapterFactory$1.class:?]<br>\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:243) ~[ReflectiveTypeAdapterFactory$Adapter.class:?]<br>\nat com.google.gson.TypeAdapter.toJsonTree(TypeAdapter.java:234) ~[TypeAdapter.class:?]<br>\nat com.atherys.core.utils.RuntimeTypeAdapterFactory$1.write(RuntimeTypeAdapterFactory.java:222) ~[RuntimeTypeAdapterFactory$1.class:?]<br>\nat com.google.gson.TypeAdapter$1.write(TypeAdapter.java:191) ~[TypeAdapter$1.class:?]<br>\nat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[TypeAdapterRuntimeTypeWrapper.class:?]<br>\nat com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:97) ~[CollectionTypeAdapterFactory$Adapter.class:?]<br>\nat com.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.write(CollectionTypeAdapterFactory.java:61) ~[CollectionTypeAdapterFactory$Adapter.class:?]<br>\nat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69) ~[TypeAdapterRuntimeTypeWrapper.class:?]<br>\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.write(ReflectiveTypeAdapterFactory.java:125) ~[ReflectiveTypeAdapterFactory$1.class:?]<br>\nat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.write(ReflectiveTypeAdapterFactory.java:243) ~[ReflectiveTypeAdapterFactory$Adapter.class:?]<br>\nat com.google.gson.Gson.toJson(Gson.java:669) ~[Gson.class:?]<br>\nat com.google.gson.Gson.toJson(Gson.java:648) ~[Gson.class:?]<br>\nat com.google.gson.Gson.toJson(Gson.java:603) ~[Gson.class:?]<br>\nat com.atherys.quests.AtherysQuests.start(AtherysQuests.java:120) ~[AtherysQuests.class:?]<br>\nat com.atherys.quests.AtherysQuests.onStart(AtherysQuests.java:141) ~[AtherysQuests.class:?]<br>\nat org.spongepowered.common.event.listener.GameStartedServerEventListener_AtherysQuests_onStart5.handle(Unknown Source) ~[?:?]<br>\nat org.spongepowered.common.event.RegisteredListener.handle(RegisteredListener.java:95) ~[RegisteredListener.class:1.12.2-2611-7.1.0-BETA-2970]<br>\nat org.spongepowered.mod.event.SpongeModEventManager.post(SpongeModEventManager.java:335) [SpongeModEventManager.class:1.12.2-2611-7.1.0-BETA-2970]<br>\nat org.spongepowered.mod.event.SpongeModEventManager.post(SpongeModEventManager.java:368) [SpongeModEventManager.class:1.12.2-2611-7.1.0-BETA-2970]<br>\nat org.spongepowered.common.SpongeImpl.postEvent(SpongeImpl.java:213) [SpongeImpl.class:1.12.2-2611-7.1.0-BETA-2970]<br>\nat org.spongepowered.mod.SpongeMod.onStateEvent(SpongeMod.java:240) [SpongeMod.class:1.12.2-2611-7.1.0-BETA-2970]<br>\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]<br>\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[?:1.8.0_161]<br>\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[?:1.8.0_161]<br>\nat java.lang.reflect.Method.invoke(Unknown Source) ~[?:1.8.0_161]<br>\nat com.google.common.eventbus.Subscriber.invokeSubscriberMethod(Subscriber.java:91) [minecraft_server.1.12.2.jar:?]<br>\nat com.google.common.eventbus.Subscriber$SynchronizedSubscriber.invokeSubscriberMethod(Subscriber.java:150) [minecraft_server.1.12.2.jar:?]<br>\nat com.google.common.eventbus.Subscriber$1.run(Subscriber.java:76) [minecraft_server.1.12.2.jar:?]<br>\nat com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:399) [minecraft_server.1.12.2.jar:?]<br>\nat com.google.common.eventbus.Subscriber.dispatchEvent(Subscriber.java:71) [minecraft_server.1.12.2.jar:?]<br>\nat com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher.dispatch(Dispatcher.java:116) [minecraft_server.1.12.2.jar:?]<br>\nat com.google.common.eventbus.EventBus.post(EventBus.java:217) [minecraft_server.1.12.2.jar:?]<br>\nat net.minecraftforge.fml.common.LoadController.sendEventToModContainer(LoadController.java:278) [LoadController.class:?]<br>\nat net.minecraftforge.fml.common.LoadController.propogateStateMessage(LoadController.java:256) [LoadController.class:?]<br>\nat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]<br>\nat sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source) ~[?:1.8.0_161]<br>\nat sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source) ~[?:1.8.0_161]<br>\nat java.lang.reflect.Method.invoke(Unknown Source) ~[?:1.8.0_161]<br>\nat com.google.common.eventbus.Subscriber.invokeSubscriberMethod(Subscriber.java:91) [minecraft_server.1.12.2.jar:?]<br>\nat com.google.common.eventbus.Subscriber$SynchronizedSubscriber.invokeSubscriberMethod(Subscriber.java:150) [minecraft_server.1.12.2.jar:?]<br>\nat com.google.common.eventbus.Subscriber$1.run(Subscriber.java:76) [minecraft_server.1.12.2.jar:?]<br>\nat com.google.common.util.concurrent.MoreExecutors$DirectExecutor.execute(MoreExecutors.java:399) [minecraft_server.1.12.2.jar:?]<br>\nat com.google.common.eventbus.Subscriber.dispatchEvent(Subscriber.java:71) [minecraft_server.1.12.2.jar:?]<br>\nat com.google.common.eventbus.Dispatcher$PerThreadQueuedDispatcher.dispatch(Dispatcher.java:116) [minecraft_server.1.12.2.jar:?]<br>\nat com.google.common.eventbus.EventBus.post(EventBus.java:217) [minecraft_server.1.12.2.jar:?]<br>\nat net.minecraftforge.fml.common.LoadController.redirect$onPost$zza000(LoadController.java:560) [LoadController.class:?]<br>\nat net.minecraftforge.fml.common.LoadController.distributeStateMessage(LoadController.java:148) [LoadController.class:?]<br>\nat net.minecraftforge.fml.common.Loader.serverStarted(Loader.java:784) [Loader.class:?]<br>\nat net.minecraftforge.fml.common.FMLCommonHandler.handleServerStarted(FMLCommonHandler.java:301) [FMLCommonHandler.class:?]<br>\nat net.minecraft.server.MinecraftServer.run(MinecraftServer.java:486) [MinecraftServer.class:?]<br>\nat java.lang.Thread.run(Unknown Source) [?:1.8.0_161]`</p>","resourcePath":"/google/gson/issues/1268","createdAt":"2018-03-19T17:38:54Z","labels":{"edges":[]}}},{"node":{"number":1289,"url":"https://github.com/google/gson/issues/1289","title":"Gson serialization from JsonSerializationContext triggers an exception if a typeadapter uses jsonValue","bodyHTML":"<p dir=\"auto\">Hi,</p>\n<p dir=\"auto\">I'm having trouble combining a JsonSerializer with a TypeAdapter that uses <code class=\"notranslate\">JsonWriter ::jsonValue</code></p>\n<p dir=\"auto\">Here is the TypeAdapter for BigDecimals that I created:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\tpublic class BigDecimalTypeAdapter extends TypeAdapter&lt;BigDecimal&gt; {\n\t\tpublic static final BigDecimalTypeAdapter INSTANCE = new BigDecimalTypeAdapter();\n\n\t\t@Override\n\t\tpublic void write(JsonWriter out, BigDecimal value) throws IOException {\n\t\t\tif (value == null) {\n\t\t\t\tout.nullValue();\n\t\t\t} else {\n\t\t\t\tout.jsonValue(value.stripTrailingZeros().toPlainString());\n\t\t\t}\n\t\t}\n\n\t\t@Override\n\t\tpublic BigDecimal read(JsonReader in) throws IOException {\n\t\t\treturn TypeAdapters.BIG_DECIMAL.read(in);\n\t\t}\n\t}\"><pre>\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">BigDecimalTypeAdapter</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">TypeAdapter</span>&lt;<span class=\"pl-smi\">BigDecimal</span>&gt; {\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">BigDecimalTypeAdapter</span> <span class=\"pl-c1\">INSTANCE</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">BigDecimalTypeAdapter</span>();\n\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">write</span>(<span class=\"pl-smi\">JsonWriter</span> <span class=\"pl-s1\">out</span>, <span class=\"pl-smi\">BigDecimal</span> <span class=\"pl-s1\">value</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n\t\t\t<span class=\"pl-k\">if</span> (<span class=\"pl-s1\">value</span> == <span class=\"pl-c1\">null</span>) {\n\t\t\t\t<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">nullValue</span>();\n\t\t\t} <span class=\"pl-k\">else</span> {\n\t\t\t\t<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">jsonValue</span>(<span class=\"pl-s1\">value</span>.<span class=\"pl-en\">stripTrailingZeros</span>().<span class=\"pl-en\">toPlainString</span>());\n\t\t\t}\n\t\t}\n\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">BigDecimal</span> <span class=\"pl-en\">read</span>(<span class=\"pl-smi\">JsonReader</span> <span class=\"pl-s1\">in</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-smi\">TypeAdapters</span>.<span class=\"pl-c1\">BIG_DECIMAL</span>.<span class=\"pl-en\">read</span>(<span class=\"pl-s1\">in</span>);\n\t\t}\n\t}</pre></div>\n<p dir=\"auto\">And that is a generic serializer for one of my interfaces:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\tpublic class MyInterfaceJsonSerializer implements JsonSerializer&lt;IMyInterface&gt; {\n\t\t@Override\n\t\tpublic JsonElement serialize(IMyInterface src, Type typeOfSrc, JsonSerializationContext context) {\n\t\t\tMap&lt;String, Object&gt; map = new TreeMap&lt;&gt;();\n\t\t\t\n\t\t\tMap&lt;String, Object&gt; map = new TreeMap&lt;&gt;();\n\t\t\tMap&lt;String, Object&gt; failed = new TreeMap&lt;&gt;();\n\t\t\tMethod[] methods = IMyInterface.class.getMethods();\n\n\t\t\tfor (int i = 0; i &lt; methods.length; i++) {\n\t\t\t\tMethod method = methods[i];\n\t\t\t\tString key = makePropertyName(method.getName());\n\t\t\t\ttry {\n\t\t\t\t\tObject result = method.invoke(src);\n\t\t\t\t\tmap.put(key, result);\n\t\t\t\t} catch (Exception e) {\n\t\t\t\t\tfailed.put(key, e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!failed.isEmpty())\n\t\t\t\tmap.put(&quot;__failed&quot;, failed);\n\n\t\t\treturn context.serialize(map); // Here that will call the BigDecimalTypeAdapter if any value is BigDecimal\n\t\t}\n\t}\"><pre>\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyInterfaceJsonSerializer</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">JsonSerializer</span>&lt;<span class=\"pl-smi\">IMyInterface</span>&gt; {\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">JsonElement</span> <span class=\"pl-en\">serialize</span>(<span class=\"pl-smi\">IMyInterface</span> <span class=\"pl-s1\">src</span>, <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">typeOfSrc</span>, <span class=\"pl-smi\">JsonSerializationContext</span> <span class=\"pl-s1\">context</span>) {\n\t\t\t<span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">map</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TreeMap</span>&lt;&gt;();\n\t\t\t\n\t\t\t<span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">map</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TreeMap</span>&lt;&gt;();\n\t\t\t<span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">failed</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TreeMap</span>&lt;&gt;();\n\t\t\t<span class=\"pl-smi\">Method</span>[] <span class=\"pl-s1\">methods</span> = <span class=\"pl-smi\">IMyInterface</span>.<span class=\"pl-s1\">class</span>.<span class=\"pl-en\">getMethods</span>();\n\n\t\t\t<span class=\"pl-k\">for</span> (<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">i</span> = <span class=\"pl-c1\">0</span>; <span class=\"pl-s1\">i</span> &lt; <span class=\"pl-s1\">methods</span>.<span class=\"pl-s1\">length</span>; <span class=\"pl-s1\">i</span>++) {\n\t\t\t\t<span class=\"pl-smi\">Method</span> <span class=\"pl-s1\">method</span> = <span class=\"pl-s1\">methods</span>[<span class=\"pl-s1\">i</span>];\n\t\t\t\t<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">key</span> = <span class=\"pl-en\">makePropertyName</span>(<span class=\"pl-s1\">method</span>.<span class=\"pl-en\">getName</span>());\n\t\t\t\t<span class=\"pl-k\">try</span> {\n\t\t\t\t\t<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">result</span> = <span class=\"pl-s1\">method</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-s1\">src</span>);\n\t\t\t\t\t<span class=\"pl-s1\">map</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">key</span>, <span class=\"pl-s1\">result</span>);\n\t\t\t\t} <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> <span class=\"pl-s1\">e</span>) {\n\t\t\t\t\t<span class=\"pl-s1\">failed</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">key</span>, <span class=\"pl-s1\">e</span>.<span class=\"pl-en\">getMessage</span>());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t<span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">failed</span>.<span class=\"pl-en\">isEmpty</span>())\n\t\t\t\t<span class=\"pl-s1\">map</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s\">\"__failed\"</span>, <span class=\"pl-s1\">failed</span>);\n\n\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">context</span>.<span class=\"pl-en\">serialize</span>(<span class=\"pl-s1\">map</span>); <span class=\"pl-c\">// Here that will call the BigDecimalTypeAdapter if any value is BigDecimal</span>\n\t\t}\n\t}</pre></div>\n<p dir=\"auto\">When I try to serialize an instance of <code class=\"notranslate\">IMyInterface</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError\n\tat com.google.gson.internal.bind.JsonTreeWriter$1.write(JsonTreeWriter.java:36)\n\tat java.io.Writer.write(Writer.java:192)\n\tat java.io.Writer.write(Writer.java:157)\n\tat java.io.Writer.append(Writer.java:227)\n\tat com.google.gson.stream.JsonWriter.jsonValue(JsonWriter.java:436)\n\tat my.common.gson.BigDecimalTypeAdapter.write(BigDecimalTypeAdapter.java:22)\n\tat my.common.gson.BigDecimalTypeAdapter.write(BigDecimalTypeAdapter.java:1)\n\tat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:208)\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)\n\tat com.google.gson.Gson.toJson(Gson.java:669)\n\tat com.google.gson.Gson.toJsonTree(Gson.java:562)\n\tat com.google.gson.Gson.toJsonTree(Gson.java:541)\n\tat com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.serialize(TreeTypeAdapter.java:155)\n\tat my.service.ib.MyInterfaceJsonSerializer.serialize(MyInterfaceJsonSerializer.java:37)\n\tat my.service.ib.MyInterfaceJsonSerializer.serialize(MyInterfaceJsonSerializer.java:1)\n\tat com.google.gson.internal.bind.TreeTypeAdapter.write(TreeTypeAdapter.java:81)\n\tat com.google.gson.Gson.toJson(Gson.java:669)\n\tat com.google.gson.Gson.toJson(Gson.java:648)\n\tat com.google.gson.Gson.toJson(Gson.java:603)\n\tat com.google.gson.Gson.toJson(Gson.java:583)\n\tat my.service.ib.MyHandlerTest.test_gson(MyHandlerTest.java:26)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)\"><pre class=\"notranslate\"><code>java.lang.AssertionError\n\tat com.google.gson.internal.bind.JsonTreeWriter$1.write(JsonTreeWriter.java:36)\n\tat java.io.Writer.write(Writer.java:192)\n\tat java.io.Writer.write(Writer.java:157)\n\tat java.io.Writer.append(Writer.java:227)\n\tat com.google.gson.stream.JsonWriter.jsonValue(JsonWriter.java:436)\n\tat my.common.gson.BigDecimalTypeAdapter.write(BigDecimalTypeAdapter.java:22)\n\tat my.common.gson.BigDecimalTypeAdapter.write(BigDecimalTypeAdapter.java:1)\n\tat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:69)\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:208)\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)\n\tat com.google.gson.Gson.toJson(Gson.java:669)\n\tat com.google.gson.Gson.toJsonTree(Gson.java:562)\n\tat com.google.gson.Gson.toJsonTree(Gson.java:541)\n\tat com.google.gson.internal.bind.TreeTypeAdapter$GsonContextImpl.serialize(TreeTypeAdapter.java:155)\n\tat my.service.ib.MyInterfaceJsonSerializer.serialize(MyInterfaceJsonSerializer.java:37)\n\tat my.service.ib.MyInterfaceJsonSerializer.serialize(MyInterfaceJsonSerializer.java:1)\n\tat com.google.gson.internal.bind.TreeTypeAdapter.write(TreeTypeAdapter.java:81)\n\tat com.google.gson.Gson.toJson(Gson.java:669)\n\tat com.google.gson.Gson.toJson(Gson.java:648)\n\tat com.google.gson.Gson.toJson(Gson.java:603)\n\tat com.google.gson.Gson.toJson(Gson.java:583)\n\tat my.service.ib.MyHandlerTest.test_gson(MyHandlerTest.java:26)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:538)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:760)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:460)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:206)\n</code></pre></div>\n<p dir=\"auto\">This error comes from <code class=\"notranslate\">JsonTreeWriter.UNWRITABLE_WRITER::write</code>.</p>\n<p dir=\"auto\">I'm not sure if i'm doing something wrong here. If I change <code class=\"notranslate\">jsonValue</code> to <code class=\"notranslate\">value</code> it works nice except that I get double quotes around my BigDecimal values which i'd like to avoid.</p>\n<p dir=\"auto\">Here is how i create my Gson object:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\tpublic static final Gson\t\t\t\tGSON\t= new GsonBuilder()\n\t\t.registerTypeHierarchyAdapter(IMyInterface.class, new MyInterfaceJsonSerializer())\n\t\t.registerTypeAdapter(BigDecimal.class, BigDecimalTypeAdapter.INSTANCE)\n\t\t.create();\"><pre>\t<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Gson</span>\t\t\t\t<span class=\"pl-c1\">GSON</span>\t= <span class=\"pl-k\">new</span> <span class=\"pl-smi\">GsonBuilder</span>()\n\t\t.<span class=\"pl-en\">registerTypeHierarchyAdapter</span>(<span class=\"pl-smi\">IMyInterface</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">MyInterfaceJsonSerializer</span>())\n\t\t.<span class=\"pl-en\">registerTypeAdapter</span>(<span class=\"pl-smi\">BigDecimal</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">BigDecimalTypeAdapter</span>.<span class=\"pl-c1\">INSTANCE</span>)\n\t\t.<span class=\"pl-en\">create</span>();</pre></div>\n<p dir=\"auto\">Am I missing something here ?</p>","resourcePath":"/google/gson/issues/1289","createdAt":"2018-04-16T14:56:31Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix TypeAdapterRuntimeTypeWrapper not detecting reflective TreeTypeAdapter","url":"https://github.com/google/gson/pull/1787","resourcePath":"/google/gson/pull/1787","createdAt":"2020-09-19T22:14:20Z","number":1787,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java"}},{"node":{"changeType":"ADDED","path":"gson/src/test/java/com/google/gson/functional/TypeAdapterRuntimeTypeWrapperTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDg5ODI4ODY4Ojc2NDI4NmE3NzljNmJhNjA0MWMzODg0Y2Q3MzliYjczYjk0YzcwMTk=","url":"https://github.com/google/gson/pull/1787/commits/764286a779c6ba6041c3884cd739bb73b94c7019"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":543,"url":"https://github.com/google/gson/issues/543","title":"Abstract classes are not serialized when adding a Deserializer (TESTCASE)","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Here is the test-case: https://gist.github.com/fab1an/7532478\"><pre class=\"notranslate\"><code>Here is the test-case: https://gist.github.com/fab1an/7532478\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">fabian.z...@gmail.com</code> on 18 Nov 2013 at 6:09</p>","resourcePath":"/google/gson/issues/543","createdAt":"2015-03-19T18:33:48Z","labels":{"edges":[]}}},{"node":{"number":2032,"url":"https://github.com/google/gson/issues/2032","title":"Registering a deserializer changes behavior of serialization","bodyHTML":"<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.8.9</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">Java SE 17 (OpenJDK)</p>\n<h1 dir=\"auto\">Used tools</h1>\n\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Maven; version:</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Gradle; version: 7.3.1</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ProGuard (attach the configuration file please); version:</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ...</li>\n</ul>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">Serialisation behaviour changes based on whether a custom deserialiser is set or not. More specifically, my objects are not serialised in their entirety if a custom deserialiser is provided.</p>\n<p dir=\"auto\">Here is a case to illustrate:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public static abstract class A {\n    private String x = &quot;hello&quot;;\n}\npublic static class B extends A {\n    private int y = 12;\n}\npublic static class C extends A {\n    private double z = 231.2;\n}\npublic static class Foo {\n    private A a;\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">A</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">x</span> = <span class=\"pl-s\">\"hello\"</span>;\n}\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">B</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">A</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">y</span> = <span class=\"pl-c1\">12</span>;\n}\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">C</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">A</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">double</span> <span class=\"pl-s1\">z</span> = <span class=\"pl-c1\">231.2</span>;\n}\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Foo</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">A</span> <span class=\"pl-s1\">a</span>;\n}</pre></div>\n<p dir=\"auto\">Creating a <code class=\"notranslate\">Foo</code> object, assigning its <code class=\"notranslate\">a</code> field to <code class=\"notranslate\">new B()</code> or <code class=\"notranslate\">new C()</code> results in the intuitive behaviour when serialising the <code class=\"notranslate\">Foo</code> object:</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;a&quot;: {\n    &quot;y&quot;: 12,\n    &quot;x&quot;: &quot;hello&quot;\n  }\n}\"><pre>{\n  <span class=\"pl-ent\">\"a\"</span>: {\n    <span class=\"pl-ent\">\"y\"</span>: <span class=\"pl-c1\">12</span>,\n    <span class=\"pl-ent\">\"x\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello<span class=\"pl-pds\">\"</span></span>\n  }\n}</pre></div>\n<p dir=\"auto\">However, when a custom deserialiser for <code class=\"notranslate\">A</code> is set using <code class=\"notranslate\">registerTypeAdapter</code>, this changes to</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;a&quot;: {\n    &quot;x&quot;: &quot;hello&quot;\n  }\n}\"><pre>{\n  <span class=\"pl-ent\">\"a\"</span>: {\n    <span class=\"pl-ent\">\"x\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>hello<span class=\"pl-pds\">\"</span></span>\n  }\n}</pre></div>\n<h2 dir=\"auto\">Expected behavior</h2>\n<p dir=\"auto\">I expect the behaviour to stay the same, whether a custom deserialiser is registered or not.</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n<p dir=\"auto\">The behaviour changes and fields of sub classes are omitted in the result.</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n\n\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class Demo {\n    static void caseOne() {\n        Gson gson = new GsonBuilder().setPrettyPrinting().create();\n        Foo src = new Foo();\n        src.a = new B();\n        String out = gson.toJson(src);\n        System.out.println(out);\n    }\n    static void caseTwo() {\n        JsonDeserializer&lt;A&gt; deserializer = (elem, t, c) -&gt; new B();\n        Gson gson = new GsonBuilder().setPrettyPrinting()\n                .registerTypeAdapter(A.class, deserializer)\n                .create();\n        Foo src = new Foo();\n        src.a = new B();\n        String out = gson.toJson(src);\n        System.out.println(out);\n    }\n    public static abstract class A {\n        private String x = &quot;hello&quot;;\n    }\n    public static class B extends A {\n        private int y = 12;\n    }\n    public static class C extends A {\n        private double z = 231.2;\n    }\n    public static class Foo {\n        private A a;\n    }\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Demo</span> {\n    <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">caseOne</span>() {\n        <span class=\"pl-smi\">Gson</span> <span class=\"pl-s1\">gson</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">GsonBuilder</span>().<span class=\"pl-en\">setPrettyPrinting</span>().<span class=\"pl-en\">create</span>();\n        <span class=\"pl-smi\">Foo</span> <span class=\"pl-s1\">src</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Foo</span>();\n        <span class=\"pl-s1\">src</span>.<span class=\"pl-s1\">a</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">B</span>();\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">out</span> = <span class=\"pl-s1\">gson</span>.<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">src</span>);\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">out</span>);\n    }\n    <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">caseTwo</span>() {\n        <span class=\"pl-smi\">JsonDeserializer</span>&lt;<span class=\"pl-smi\">A</span>&gt; <span class=\"pl-s1\">deserializer</span> = (<span class=\"pl-s1\">elem</span>, <span class=\"pl-s1\">t</span>, <span class=\"pl-s1\">c</span>) -&gt; <span class=\"pl-k\">new</span> <span class=\"pl-smi\">B</span>();\n        <span class=\"pl-smi\">Gson</span> <span class=\"pl-s1\">gson</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">GsonBuilder</span>().<span class=\"pl-en\">setPrettyPrinting</span>()\n                .<span class=\"pl-en\">registerTypeAdapter</span>(<span class=\"pl-smi\">A</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-s1\">deserializer</span>)\n                .<span class=\"pl-en\">create</span>();\n        <span class=\"pl-smi\">Foo</span> <span class=\"pl-s1\">src</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Foo</span>();\n        <span class=\"pl-s1\">src</span>.<span class=\"pl-s1\">a</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">B</span>();\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">out</span> = <span class=\"pl-s1\">gson</span>.<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">src</span>);\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">out</span>);\n    }\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">A</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">x</span> = <span class=\"pl-s\">\"hello\"</span>;\n    }\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">B</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">A</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">y</span> = <span class=\"pl-c1\">12</span>;\n    }\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">C</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">A</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">double</span> <span class=\"pl-s1\">z</span> = <span class=\"pl-c1\">231.2</span>;\n    }\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Foo</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">A</span> <span class=\"pl-s1\">a</span>;\n    }\n}</pre></div>\n<p dir=\"auto\">The above class can be used to reproduce this behaviour.</p>\n<h1 dir=\"auto\">Exception stack trace</h1>\n<p dir=\"auto\">/</p>\n<h1 dir=\"auto\">Additional notes</h1>\n<p dir=\"auto\">This issue seems similar to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"511894082\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1599\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/1599/hovercard\" href=\"https://github.com/google/gson/issues/1599\">#1599</a> , however I am not satisfied with the answer provided there. If the intent behind this behaviour was to be able to guarantee that any serialised object can be deserialised again, why does <code class=\"notranslate\">caseOne</code> work although the result can obviously not be deserialised using Gson defaults anymore?</p>\n<p dir=\"auto\">I am also aware that using <code class=\"notranslate\">registerTypeHierarchyAdapter</code> instead \"fixes\" the problem. However I don't consider this a fix because it changes the entire semantics of the custom deserialiser. For instance, I can't use the deserialisation context anymore to delegate deserialisation. E.g. <code class=\"notranslate\">context.deserialize(something, B.class)</code> doesn't work anymore because it's recursive.</p>","resourcePath":"/google/gson/issues/2032","createdAt":"2021-12-13T01:02:41Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix non-threadsafe creation of adapter for type with cyclic dependency","url":"https://github.com/google/gson/pull/1832","resourcePath":"/google/gson/pull/1832","createdAt":"2020-12-01T23:40:11Z","number":1832,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/Gson.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/GsonTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984foPZM2gAoMWJiMTI5ZGYxYmVlNWU3MmRmNTZlMTU4ZTRiOGYyNWExMmYzN2U5NQ","url":"https://github.com/google/gson/pull/1832/commits/1bb129df1bee5e72df56e158e4b8f25a12f37e95"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":625,"url":"https://github.com/google/gson/issues/625","title":"FutureTypeAdapter.read() throws unhelpful exception","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"What steps will reproduce the problem?\nWhen FutureTypeAdapter's delegate is null, the read() method throws an \nIllegalStateException with no message.  This then gets turned into a \nJsonSyntaxException\n\nThese two exceptions don't make it easy to diagnose what went wrong, and you \ncan't easily tell if the issue is caused by a programming error, a bug in Gson, \nor with the json being parsed.  There's also no indication of what the \ndeveloper can do to avoid hitting this exception. Adding javasdoc and a helpful \nmethod to the exception woudl be very nice. \n\nBelow is a sample stack trace. \n\nE/Timber  ( 3055): Caused by: retrofit.converter.ConversionException: \ncom.google.gson.JsonSyntaxException: java.lang.IllegalStateException\nE/Timber  ( 3055):  at \nretrofit.converter.GsonConverter.fromBody(GsonConverter.java:67)\nE/Timber  ( 3055):  at \nretrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:362)\nE/Timber  ( 3055):  ... 9 more\nE/Timber  ( 3055): Caused by: com.google.gson.JsonSyntaxException: \njava.lang.IllegalStateException\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(Reflecti\nveTypeAdapterFactory.java:187)\nE/Timber  ( 3055):  at com.google.gson.Gson.fromJson(Gson.java:805)\nE/Timber  ( 3055):  at com.google.gson.Gson.fromJson(Gson.java:770)\nE/Timber  ( 3055):  at \nretrofit.converter.GsonConverter.fromBody(GsonConverter.java:63)\nE/Timber  ( 3055):  ... 10 more\nE/Timber  ( 3055): Caused by: java.lang.IllegalStateException\nE/Timber  ( 3055):  at \ncom.google.gson.Gson$FutureTypeAdapter.read(Gson.java:885)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRunt\nimeTypeWrapper.java:40)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(Collecti\nonTypeAdapterFactory.java:81)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(Collecti\nonTypeAdapterFactory.java:60)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveType\nAdapterFactory.java:95)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(Reflecti\nveTypeAdapterFactory.java:183)\nE/Timber  ( 3055):  ... 13 more\n\"><pre class=\"notranslate\"><code>What steps will reproduce the problem?\nWhen FutureTypeAdapter's delegate is null, the read() method throws an \nIllegalStateException with no message.  This then gets turned into a \nJsonSyntaxException\n\nThese two exceptions don't make it easy to diagnose what went wrong, and you \ncan't easily tell if the issue is caused by a programming error, a bug in Gson, \nor with the json being parsed.  There's also no indication of what the \ndeveloper can do to avoid hitting this exception. Adding javasdoc and a helpful \nmethod to the exception woudl be very nice. \n\nBelow is a sample stack trace. \n\nE/Timber  ( 3055): Caused by: retrofit.converter.ConversionException: \ncom.google.gson.JsonSyntaxException: java.lang.IllegalStateException\nE/Timber  ( 3055):  at \nretrofit.converter.GsonConverter.fromBody(GsonConverter.java:67)\nE/Timber  ( 3055):  at \nretrofit.RestAdapter$RestHandler.invokeRequest(RestAdapter.java:362)\nE/Timber  ( 3055):  ... 9 more\nE/Timber  ( 3055): Caused by: com.google.gson.JsonSyntaxException: \njava.lang.IllegalStateException\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(Reflecti\nveTypeAdapterFactory.java:187)\nE/Timber  ( 3055):  at com.google.gson.Gson.fromJson(Gson.java:805)\nE/Timber  ( 3055):  at com.google.gson.Gson.fromJson(Gson.java:770)\nE/Timber  ( 3055):  at \nretrofit.converter.GsonConverter.fromBody(GsonConverter.java:63)\nE/Timber  ( 3055):  ... 10 more\nE/Timber  ( 3055): Caused by: java.lang.IllegalStateException\nE/Timber  ( 3055):  at \ncom.google.gson.Gson$FutureTypeAdapter.read(Gson.java:885)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.read(TypeAdapterRunt\nimeTypeWrapper.java:40)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(Collecti\nonTypeAdapterFactory.java:81)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.CollectionTypeAdapterFactory$Adapter.read(Collecti\nonTypeAdapterFactory.java:60)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveType\nAdapterFactory.java:95)\nE/Timber  ( 3055):  at \ncom.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(Reflecti\nveTypeAdapterFactory.java:183)\nE/Timber  ( 3055):  ... 13 more\n\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">MhaleK...@gmail.com</code> on 29 Jan 2015 at 5:26</p>","resourcePath":"/google/gson/issues/625","createdAt":"2015-03-19T18:34:32Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix `RuntimeTypeAdapterFactory` depending on internal `Streams` class","url":"https://github.com/google/gson/pull/1959","resourcePath":"/google/gson/pull/1959","createdAt":"2021-09-11T04:11:14Z","number":1959,"mergeCommit":{"oid":"26a1928277f7eba70609f02697509ba9258dd8ef","message":"Fix `RuntimeTypeAdapterFactory` depending on internal `Streams` class (#1959)\n\n* Fix RuntimeTypeAdapterFactory depending on internal Streams class\r\n\r\n* Clean up gson-extras project, make it Maven module of gson-parent\r\n\r\n* Remove broken test from GraphAdapterBuilderTest","commitUrl":"https://github.com/google/gson/commit/26a1928277f7eba70609f02697509ba9258dd8ef","parents":{"nodes":[{"oid":"f1f90313fc22c122a28716e7ecac1543e6fa253e","message":"Improve Maven build (#1964)\n\n- Specify missing plugin versions\r\n- Fix or suppress ProGuard notes and warnings"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"extras/pom.xml"}},{"node":{"changeType":"MODIFIED","path":"extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java"}},{"node":{"changeType":"MODIFIED","path":"extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java"}},{"node":{"changeType":"MODIFIED","path":"pom.xml"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984rn23i2gAoOWQ3YmE5ZWI4MzUyMGMyMGRkODI3NWM2ZWMyNzlhYTIyM2ExM2Y2MA","url":"https://github.com/google/gson/pull/1959/commits/9d7ba9eb83520c20dd8275c6ec279aa223a13f60"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1931,"url":"https://github.com/google/gson/issues/1931","title":"RuntimeTypeAdapterFactory depends on internal API (JPMS, Java 9+)","bodyHTML":"<p dir=\"auto\">The RuntimeTypeAdapterFactory code example (<a href=\"https://github.com/google/gson/blob/master/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java\">https://github.com/google/gson/blob/master/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java</a>) depends on the internal API class <code class=\"notranslate\">com.google.gson.internal.Streams</code>, which is not exported when depending on gson in a JPMS project using module path.</p>\n<p dir=\"auto\">Unless there's some easy fix available, currently one has to make a copy of Streams, LazilyParsedNumber, and TypeAdapters classes from the internal packages in order to use this provided class.</p>","resourcePath":"/google/gson/issues/1931","createdAt":"2021-08-06T10:07:50Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add `GsonBuilder.disableJdkUnsafe()`","url":"https://github.com/google/gson/pull/1904","resourcePath":"/google/gson/pull/1904","createdAt":"2021-06-04T14:56:02Z","number":1904,"mergeCommit":{"oid":"615c8835d309e1be512dd98809b48332ce70250d","message":"Add `GsonBuilder.disableJdkUnsafe()` (#1904)\n\n* Add GsonBuilder.disableJdkUnsafe()\r\n\r\n* Address review feedback","commitUrl":"https://github.com/google/gson/commit/615c8835d309e1be512dd98809b48332ce70250d","parents":{"nodes":[{"oid":"97938283a77707cdf231a7ebdcbee937f289ad31","message":"Remove explicit ProGuard plugin dependencies (#2041)\n\nExplicitly specifying dependencies only seems to be necessary when using\r\n`<proguardVersion>` config element to override version (and even that might\r\nnot be necessary; only adding explicit dependencies might suffice). However,\r\nwhen omitting it, plugin uses a recent ProGuard version on its own."}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"extras/src/main/java/com/google/gson/graph/GraphAdapterBuilder.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/Gson.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/GsonBuilder.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/UnsafeAllocator.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/GsonBuilderTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/GsonTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984nctBf2gAoMDRkYmZlYWJmNzdkMGNmMTY2N2Q0NTRlNTIwODViNzljNWFiOTY3MQ","url":"https://github.com/google/gson/pull/1904/commits/04dbfeabf77d0cf1667d454e52085b79c5ab9671"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":445,"url":"https://github.com/google/gson/issues/445","title":"GsonBuilder.disableUnsafe","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"While it is nice to know that Unsafe is only used when no-arg ctors or instance \ncreators are not present, it would be better to have a means to enforce it \ncannot be used.  Particularly in google app engine, I'd like to know that the \ncode I use offline is safe inside GAE, rather than a delayed \nUnsupportedOperationException\n\nCan you add GsonBuilder.disableUnsafe or similar?\n\"><pre class=\"notranslate\"><code>While it is nice to know that Unsafe is only used when no-arg ctors or instance \ncreators are not present, it would be better to have a means to enforce it \ncannot be used.  Particularly in google app engine, I'd like to know that the \ncode I use offline is safe inside GAE, rather than a delayed \nUnsupportedOperationException\n\nCan you add GsonBuilder.disableUnsafe or similar?\n\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">adrian.f...@gmail.com</code> on 16 May 2012 at 5:58</p>","resourcePath":"/google/gson/issues/445","createdAt":"2015-03-19T18:32:36Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix failing to serialize Collection or Map with inaccessible constructor","url":"https://github.com/google/gson/pull/1902","resourcePath":"/google/gson/pull/1902","createdAt":"2021-06-04T00:09:24Z","number":1902,"mergeCommit":{"oid":"b0595c595bd2c052cd05e0283bb37b67c02bd06f","message":"Fix failing to serialize Collection or Map with inaccessible constructor (#1902)\n\n* Remove UnsafeReflectionAccessor\r\n\r\nRevert #1218\r\n\r\nUsage of sun.misc.Unsafe to change internal AccessibleObject.override field\r\nto suppress JPMS warnings goes against the intentions of the JPMS and does not\r\nwork anymore in newer versions, see #1540.\r\nTherefore remove it and instead create a descriptive exception when making a\r\nmember accessible fails. If necessary users can also still use `java` command\r\nline flags to open external modules.\r\n\r\n* Fix failing to serialize Collection or Map with inaccessible constructor\r\n\r\nAlso remove tests which rely on Java implementation details.\r\n\r\n* Don't keep reference to access exception of ConstructorConstructor\r\n\r\nThis also avoids a confusing stack trace, since the previously caught\r\nexception might have had a complete unrelated stack trace.\r\n\r\n* Remove Maven toolchain requirement\r\n\r\n* Address review feedback\r\n\r\n* Add back test for Security Manager","commitUrl":"https://github.com/google/gson/commit/b0595c595bd2c052cd05e0283bb37b67c02bd06f","parents":{"nodes":[{"oid":"0d9f6b677ae67cbd749ebca817139041d1977831","message":"Bump guava from 30.1.1-jre to 31.0.1-jre (#2016)\n\nBumps [guava](https://github.com/google/guava) from 30.1.1-jre to 31.0.1-jre.\r\n- [Release notes](https://github.com/google/guava/releases)\r\n- [Commits](https://github.com/google/guava/commits)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: com.google.guava:guava\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-major\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"DELETED","path":"gson/src/main/java/com/google/gson/internal/reflect/PreJava9ReflectionAccessor.java"}},{"node":{"changeType":"DELETED","path":"gson/src/main/java/com/google/gson/internal/reflect/ReflectionAccessor.java"}},{"node":{"changeType":"ADDED","path":"gson/src/main/java/com/google/gson/internal/reflect/ReflectionHelper.java"}},{"node":{"changeType":"DELETED","path":"gson/src/main/java/com/google/gson/internal/reflect/UnsafeReflectionAccessor.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/EnumTest.java"}},{"node":{"changeType":"ADDED","path":"gson/src/test/java/com/google/gson/functional/ReflectionAccessTest.java"}},{"node":{"changeType":"DELETED","path":"gson/src/test/java/com/google/gson/functional/ThrowableFunctionalTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/bind/RecursiveTypesResolveTest.java"}},{"node":{"changeType":"DELETED","path":"gson/src/test/java/com/google/gson/internal/reflect/UnsafeReflectionAccessorTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984naphU2gAoOTE0MDQ2MGJkNWU1Nzc0MjczNjlkNDdiNzBlNDE0MTFhOGYxY2I0Nw","url":"https://github.com/google/gson/pull/1902/commits/9140460bd5e577427369d47b70e41411a8f1cb47"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1875,"url":"https://github.com/google/gson/issues/1875","title":"InaccessibleObjectException with JDK 16 ","bodyHTML":"<p dir=\"auto\">GSon (2.8.6) has trouble with JDK 16, seemingly due to <a href=\"https://bugs.openjdk.java.net/browse/JDK-8256358\" rel=\"nofollow\">https://bugs.openjdk.java.net/browse/JDK-8256358</a> and <a href=\"https://bugs.openjdk.java.net/browse/JDK-8260600\" rel=\"nofollow\">https://bugs.openjdk.java.net/browse/JDK-8260600</a> which prevent access through reflection to JDK internals.</p>\n<p dir=\"auto\">This leads to these errors (for example when trying to serialize an empty list constructed with <code class=\"notranslate\">Collections.emptyList()</code>) :</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.reflect.InaccessibleObjectException: Unable to make private java.util.Collections$EmptyList() accessible: module java.base does not &quot;opens java.util&quot; to unnamed module @ffaa6af\n\tat com.google.gson.internal.reflect.UnsafeReflectionAccessor.makeAccessible(UnsafeReflectionAccessor.java:44)\n\tat com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:103)\n\tat com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:85)\n\tat com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:54)\n\tat com.google.gson.Gson.getDelegateAdapter(Gson.java:541)\n\tat io.gsonfire.gson.WrapTypeAdapterFactory.create(WrapTypeAdapterFactory.java:26)\n\tat com.google.gson.Gson.getAdapter(Gson.java:458)\n\tat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:56)\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:208)\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)\n\tat com.google.gson.Gson.toJson(Gson.java:704)\n\tat com.google.gson.Gson.toJson(Gson.java:683)\n...\"><pre class=\"notranslate\"><code>java.lang.reflect.InaccessibleObjectException: Unable to make private java.util.Collections$EmptyList() accessible: module java.base does not \"opens java.util\" to unnamed module @ffaa6af\n\tat com.google.gson.internal.reflect.UnsafeReflectionAccessor.makeAccessible(UnsafeReflectionAccessor.java:44)\n\tat com.google.gson.internal.ConstructorConstructor.newDefaultConstructor(ConstructorConstructor.java:103)\n\tat com.google.gson.internal.ConstructorConstructor.get(ConstructorConstructor.java:85)\n\tat com.google.gson.internal.bind.CollectionTypeAdapterFactory.create(CollectionTypeAdapterFactory.java:54)\n\tat com.google.gson.Gson.getDelegateAdapter(Gson.java:541)\n\tat io.gsonfire.gson.WrapTypeAdapterFactory.create(WrapTypeAdapterFactory.java:26)\n\tat com.google.gson.Gson.getAdapter(Gson.java:458)\n\tat com.google.gson.internal.bind.TypeAdapterRuntimeTypeWrapper.write(TypeAdapterRuntimeTypeWrapper.java:56)\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:208)\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.write(MapTypeAdapterFactory.java:145)\n\tat com.google.gson.Gson.toJson(Gson.java:704)\n\tat com.google.gson.Gson.toJson(Gson.java:683)\n...\n</code></pre></div>\n<p dir=\"auto\">I would be happy to contribute but I do not even know how to fix this in Gson. Any ideas ?</p>","resourcePath":"/google/gson/issues/1875","createdAt":"2021-03-19T15:20:28Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add `GsonBuilder.disallowDuplicateProperties()`","url":"https://github.com/google/gson/pull/1958","resourcePath":"/google/gson/pull/1958","createdAt":"2021-09-11T00:15:40Z","number":1958,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonReader.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/GsonTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/JsonObjectTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/JsonParserTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/ObjectTypeAdapterTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/DefaultTypeAdaptersTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/MapTest.java"}},{"node":{"changeType":"ADDED","path":"gson/src/test/java/com/google/gson/functional/ReflectionDeserializationDuplicatePropertyTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzMxODMyNTI3OmFkMDUxNmIwMDBmNDVmNDkzY2I3MjFmMDMwYWJlYjJlZTIxMGEzOWE=","url":"https://github.com/google/gson/pull/1958/commits/ad0516b000f45f493cb721f030abeb2ee210a39a"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":386,"url":"https://github.com/google/gson/issues/386","title":"Fail if a JSON object has a duplicated property name","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"What steps will reproduce the problem?\n1. Instantiate a JSONReader(Reader in) where the specified input stream \nincludes an object where a given object in the structure has a repeated \nproperty name.\n  - This can be done directly, or indirectly via, say, Gson.fromJson()\n2. Examine the object as parsed from the JSON.\n\nWhat is the expected output? What do you see instead?\n\nThe observed result is that of the multiple specifications of the value for a \ngiven property name, only the last actually ends up applying.\n\nPer http://www.ietf.org/rfc/rfc4627.txt, there's some implementation \nflexibility on what the expected result should be:\n\n2.2.  Objects\n\n   An object structure is represented as a pair of curly brackets\n   surrounding zero or more name/value pairs (or members).  A name is a\n   string.  A single colon comes after each name, separating the name\n   from the value.  A single comma separates a value from a following\n   name.  The names within an object SHOULD be unique.\n\n--\n\nSo the implementation doesn't seem to be _incorrect_ with respect to the RFC in \nhow it handles this situation, which SHOULD not arise, when it happens. \nHowever, it would be nice if an issue with repeated names in the object caused \nan exception to be thrown or otherwise brought the issue to the user's \nattention. At least optionally. Silently letting the latest-specified version \nof a name win is a bit surprising.\n\nThe issue is particularly acute if the JSON data comes from an outside source \nnot directly under the programmer's control.\n\nWhat version of the product are you using? On what operating system?\n\nv2_0_RC1, Linux\"><pre class=\"notranslate\"><code>What steps will reproduce the problem?\n1. Instantiate a JSONReader(Reader in) where the specified input stream \nincludes an object where a given object in the structure has a repeated \nproperty name.\n  - This can be done directly, or indirectly via, say, Gson.fromJson()\n2. Examine the object as parsed from the JSON.\n\nWhat is the expected output? What do you see instead?\n\nThe observed result is that of the multiple specifications of the value for a \ngiven property name, only the last actually ends up applying.\n\nPer http://www.ietf.org/rfc/rfc4627.txt, there's some implementation \nflexibility on what the expected result should be:\n\n2.2.  Objects\n\n   An object structure is represented as a pair of curly brackets\n   surrounding zero or more name/value pairs (or members).  A name is a\n   string.  A single colon comes after each name, separating the name\n   from the value.  A single comma separates a value from a following\n   name.  The names within an object SHOULD be unique.\n\n--\n\nSo the implementation doesn't seem to be _incorrect_ with respect to the RFC in \nhow it handles this situation, which SHOULD not arise, when it happens. \nHowever, it would be nice if an issue with repeated names in the object caused \nan exception to be thrown or otherwise brought the issue to the user's \nattention. At least optionally. Silently letting the latest-specified version \nof a name win is a bit surprising.\n\nThe issue is particularly acute if the JSON data comes from an outside source \nnot directly under the programmer's control.\n\nWhat version of the product are you using? On what operating system?\n\nv2_0_RC1, Linux\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">hil...@google.com</code> on 6 Dec 2011 at 4:55</p>","resourcePath":"/google/gson/issues/386","createdAt":"2015-03-19T18:31:19Z","labels":{"edges":[{"node":{"name":"enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add API for retrieving type arguments of parameterized type","url":"https://github.com/google/gson/pull/1952","resourcePath":"/google/gson/pull/1952","createdAt":"2021-09-06T20:14:10Z","number":1952,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"UserGuide.md"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/TypeAdapter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/TypeAdapterFactory.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/$Gson$Types.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/reflect/TypeToken.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/CollectionTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/reflect/TypeTokenTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI4MTYzNTUzOmRmMjQzNmZkOTE1YTNlYjhjNDMyNDZmNDcyMzMzMTBmMTM5YWQzYmY=","url":"https://github.com/google/gson/pull/1952/commits/df2436fd915a3eb8c43246f47233310f139ad3bf"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":333,"url":"https://github.com/google/gson/issues/333","title":"Public APIs for type introspection","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"In order to write type adapters for parameterized types, it would be very \nuseful to have machinery for getting the parameter types, as in \n$Gson$Types#getCollectionElementType.  The attached patch provides just such a \ngeneralization that can be used by authors of type adapters.\"><pre class=\"notranslate\"><code>In order to write type adapters for parameterized types, it would be very \nuseful to have machinery for getting the parameter types, as in \n$Gson$Types#getCollectionElementType.  The attached patch provides just such a \ngeneralization that can be used by authors of type adapters.\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">c...@google.com</code> on 17 Jun 2011 at 10:09</p>\n<p dir=\"auto\">Attachments:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://storage.googleapis.com/google-code-attachments/google-gson/issue-333/comment-0/foo.diff\" rel=\"nofollow\">foo.diff</a></li>\n</ul>","resourcePath":"/google/gson/issues/333","createdAt":"2015-03-19T18:30:12Z","labels":{"edges":[]}}},{"node":{"number":1334,"url":"https://github.com/google/gson/issues/1334","title":"Extract getContainerElementType() method in $Gson$Types","bodyHTML":"<p dir=\"auto\">Currently, <code class=\"notranslate\">$Gson$Types</code> class contains the following public method:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public static Type getCollectionElementType(Type context, Class&lt;?&gt; contextRawType)\"><pre class=\"notranslate\"><code>public static Type getCollectionElementType(Type context, Class&lt;?&gt; contextRawType)\n</code></pre></div>\n<p dir=\"auto\">This method works like a charm for all kind of <code class=\"notranslate\">Collection</code>s but it is unnecessarily fixed to work only on <code class=\"notranslate\">Collection</code>s, and it cannot be applied to work on other <code class=\"notranslate\">Iterable</code>s (e.g. on <code class=\"notranslate\">Stream</code>s, or any other type of containers that do not implement <code class=\"notranslate\">Collection</code>).</p>\n<p dir=\"auto\">I suggest extracting from this method a method like:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public static Type getContainerElementType(Type context, Class&lt;?&gt; contextRawType, Class&lt;?&gt; containerSupertype) {\n  Type containerType = getSupertype(context, contextRawType, containerSupertype);\n\n  if (containerType instanceof WildcardType) {\n    containerType = ((WildcardType) containerType).getUpperBounds()[0];\n  }\n  if (containerType instanceof ParameterizedType) {\n    return ((ParameterizedType) containerType).getActualTypeArguments()[0];\n  }\n  return Object.class;\n}\"><pre class=\"notranslate\"><code>public static Type getContainerElementType(Type context, Class&lt;?&gt; contextRawType, Class&lt;?&gt; containerSupertype) {\n  Type containerType = getSupertype(context, contextRawType, containerSupertype);\n\n  if (containerType instanceof WildcardType) {\n    containerType = ((WildcardType) containerType).getUpperBounds()[0];\n  }\n  if (containerType instanceof ParameterizedType) {\n    return ((ParameterizedType) containerType).getActualTypeArguments()[0];\n  }\n  return Object.class;\n}\n</code></pre></div>\n<p dir=\"auto\">and rewrite <code class=\"notranslate\">getCollectionElementType</code> as:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public static Type getCollectionElementType(Type context, Class&lt;?&gt; contextRawType) {\n  return getContainerElementType(context, contextRawType, Collection.class);\n}\"><pre class=\"notranslate\"><code>public static Type getCollectionElementType(Type context, Class&lt;?&gt; contextRawType) {\n  return getContainerElementType(context, contextRawType, Collection.class);\n}\n</code></pre></div>\n<p dir=\"auto\">PS. I came upon this issue when trying to implement a <code class=\"notranslate\">TypeAdapterFactory</code> for <code class=\"notranslate\">Stream</code>s - see <a href=\"https://stackoverflow.com/questions/50881488/is-it-possible-to-pass-a-java-util-stream-to-gson/50895699#50895699\" rel=\"nofollow\">https://stackoverflow.com/questions/50881488/is-it-possible-to-pass-a-java-util-stream-to-gson/50895699#50895699</a></p>","resourcePath":"/google/gson/issues/1334","createdAt":"2018-06-17T10:19:10Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Update dependencies in proto/pom.xml.","url":"https://github.com/google/gson/pull/1949","resourcePath":"/google/gson/pull/1949","createdAt":"2021-09-01T15:17:59Z","number":1949,"mergeCommit":{"oid":"4bb67483f926a5a49d173e2fef1be5cfe58f1ea3","message":"Update dependencies in proto/pom.xml. (#1949)\n\nAlso use GeneratedMessageV3 rather than GeneratedMessage, consistent with recent versions of protoc.","commitUrl":"https://github.com/google/gson/commit/4bb67483f926a5a49d173e2fef1be5cfe58f1ea3","parents":{"nodes":[{"oid":"c8f26dc907515b40dd2ddb471ee1d6cc097d0e8b","message":"Add missing  calls when testing for exceptions. (#1948)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"proto/pom.xml"}},{"node":{"changeType":"MODIFIED","path":"proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithAnnotationsTest.java"}},{"node":{"changeType":"MODIFIED","path":"proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java"}},{"node":{"changeType":"MODIFIED","path":"proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI0NjAzODMwOjg0ODA2ZWFkODQ2MmI3MzZkY2U1NzBmYjRiZDI3NzY1MTJiZDBhODc=","url":"https://github.com/google/gson/pull/1949/commits/84806ead8462b736dce570fb4bd2776512bd0a87"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1797,"url":"https://github.com/google/gson/issues/1797","title":"There is a vulnerability in Guava: Google Core Libraries for Java(18.0) ,upgrade recommended","bodyHTML":"<p dir=\"auto\"><div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/proto/pom.xml#L69-L74\">gson/proto/pom.xml</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 69 to 74\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/google/gson/commit/ceae88bd6667f4263bbe02e6b3710b8a683906a2\">ceae88b</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L69\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"69\"></td>\n          <td id=\"LC69\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> &lt;<span class=\"pl-ent\">dependency</span>&gt; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L70\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"70\"></td>\n          <td id=\"LC70\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   &lt;<span class=\"pl-ent\">groupId</span>&gt;com.google.guava&lt;/<span class=\"pl-ent\">groupId</span>&gt; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L71\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"71\"></td>\n          <td id=\"LC71\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   &lt;<span class=\"pl-ent\">artifactId</span>&gt;guava&lt;/<span class=\"pl-ent\">artifactId</span>&gt; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L72\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"72\"></td>\n          <td id=\"LC72\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   &lt;<span class=\"pl-ent\">version</span>&gt;18.0&lt;/<span class=\"pl-ent\">version</span>&gt; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L73\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"73\"></td>\n          <td id=\"LC73\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   &lt;<span class=\"pl-ent\">scope</span>&gt;compile&lt;/<span class=\"pl-ent\">scope</span>&gt; </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L74\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"74\"></td>\n          <td id=\"LC74\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> &lt;/<span class=\"pl-ent\">dependency</span>&gt; </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\"><a title=\"CVE-2018-10237\" data-hovercard-type=\"advisory\" data-hovercard-url=\"/advisories/GHSA-mvr2-9pj6-7w5j/hovercard\" href=\"https://github.com/advisories/GHSA-mvr2-9pj6-7w5j\">CVE-2018-10237</a></p>\n<p dir=\"auto\">Recommended upgrade version：1.0.1<br>\nlatest version：29.0-jre</p>","resourcePath":"/google/gson/issues/1797","createdAt":"2020-10-10T07:01:57Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add TypeAdapter methods for custom property name conversion","url":"https://github.com/google/gson/pull/1961","resourcePath":"/google/gson/pull/1961","createdAt":"2021-09-12T21:39:33Z","number":1961,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/TypeAdapter.java"}},{"node":{"changeType":"DELETED","path":"gson/src/main/java/com/google/gson/internal/JsonReaderInternalAccess.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/TreeTypeAdapter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/TypeAdapterRuntimeTypeWrapper.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonReader.java"}},{"node":{"changeType":"ADDED","path":"gson/src/test/java/com/google/gson/TypeAdapterTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/MapTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzMyMjU2OTMxOjk4ZGZhODc2MmM3NmEwNjIyNDNiNjQ2M2VmZjU3NDVmYWE4YTY1M2I=","url":"https://github.com/google/gson/pull/1961/commits/98dfa8762c76a062243b6463eff5745faa8a653b"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":127,"url":"https://github.com/google/gson/issues/127","title":"Should support custom serializers for map keys","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"This is actually a RFE for supporting custom serializers for map keys, the \ncurrent implementation \nrelies on result of String.valueOf for map keys, but if I've registered a \ncustom serialization type \nadapter for the type of map key it (obviously) doesn't get called\n\nWhat steps will reproduce the problem?\ncreate any class with toString method and register a JsonSerializer for it, try \nto serialize to JSON, \nyou'll see the toString method beeing called instead of the registered \nserializer\n\nWhat is the expected output? What do you see instead?\na call to JsonSerializer instead to toString method, and result from the \nserializer in the JSON \noutput\n\nWhat version of the product are you using? On what operating system?\ngson 1.4 on OSX Leopard 10.5.7\n\nPlease provide any additional information below.\npatch is attached, with a possible solution that calls into serialization \ncontext while honoring \ncurrent implementation's behavior for keys without registered serializers, and \na unit test for the \nspecific situation\n\"><pre class=\"notranslate\"><code>This is actually a RFE for supporting custom serializers for map keys, the \ncurrent implementation \nrelies on result of String.valueOf for map keys, but if I've registered a \ncustom serialization type \nadapter for the type of map key it (obviously) doesn't get called\n\nWhat steps will reproduce the problem?\ncreate any class with toString method and register a JsonSerializer for it, try \nto serialize to JSON, \nyou'll see the toString method beeing called instead of the registered \nserializer\n\nWhat is the expected output? What do you see instead?\na call to JsonSerializer instead to toString method, and result from the \nserializer in the JSON \noutput\n\nWhat version of the product are you using? On what operating system?\ngson 1.4 on OSX Leopard 10.5.7\n\nPlease provide any additional information below.\npatch is attached, with a possible solution that calls into serialization \ncontext while honoring \ncurrent implementation's behavior for keys without registered serializers, and \na unit test for the \nspecific situation\n\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">zregv...@gmail.com</code> on 31 May 2009 at 6:30</p>\n<p dir=\"auto\">Attachments:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://storage.googleapis.com/google-code-attachments/google-gson/issue-127/comment-0/map_key.patch\" rel=\"nofollow\">map_key.patch</a></li>\n</ul>","resourcePath":"/google/gson/issues/127","createdAt":"2015-03-19T18:24:19Z","labels":{"edges":[{"node":{"name":"Type-Defect"}},{"node":{"name":"Priority-Medium"}},{"node":{"name":"auto-migrated"}}]}}},{"node":{"number":1722,"url":"https://github.com/google/gson/issues/1722","title":"TypeAdapters don't apply to map keys","bodyHTML":"<p dir=\"auto\">When converting a Map to Json, <code class=\"notranslate\">TypeAdapters</code> are not being used to generate the keys. Here is a minimal repro:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.google.gson.Gson;\nimport com.google.gson.GsonBuilder;\nimport com.google.gson.TypeAdapter;\nimport com.google.gson.stream.JsonReader;\nimport com.google.gson.stream.JsonWriter;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\nclass Main {\n\n    /** An example class that just wraps a String. */\n    static class Thinger {\n        public final String key;\n\n        Thinger(String key) {\n            this.key = key;\n        }\n\n        @Override\n        public String toString() {\n            return &quot;Thinger(&quot; + key + &quot;)&quot;;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Thinger that = (Thinger) o;\n            return Objects.equals(key, that.key);\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(key);\n        }\n    }\n\n    /** A TypeAdapter that can encode and decode a Thinger */\n    static class ThingerAdapter extends TypeAdapter&lt;Thinger&gt; {\n\n        @Override\n        public void write(JsonWriter out, Thinger value) throws IOException {\n            out.value(value.key);\n        }\n\n        @Override\n        public Thinger read(JsonReader in) throws IOException {\n            return new Thinger(in.nextString());\n        }\n    }\n\n    public static void main(String[] args) {\n\n        // Sample data with custom keys and values\n        final Map&lt;Thinger, Thinger&gt; map = new HashMap&lt;&gt;();\n        map.put(new Thinger(&quot;Foo&quot;), new Thinger(&quot;Bar&quot;));\n        map.put(new Thinger(&quot;Baz&quot;), new Thinger( &quot;Qux&quot;));\n\n        // Register the adapter we defined above\n        final Gson gson = new GsonBuilder().registerTypeAdapter(Thinger.class, new ThingerAdapter()).create();\n\n        // Print the encoded JSON\n        System.out.println(gson.toJson(map));\n    }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">google</span>.<span class=\"pl-s1\">gson</span>.<span class=\"pl-s1\">Gson</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">google</span>.<span class=\"pl-s1\">gson</span>.<span class=\"pl-s1\">GsonBuilder</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">google</span>.<span class=\"pl-s1\">gson</span>.<span class=\"pl-s1\">TypeAdapter</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">google</span>.<span class=\"pl-s1\">gson</span>.<span class=\"pl-s1\">stream</span>.<span class=\"pl-s1\">JsonReader</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">google</span>.<span class=\"pl-s1\">gson</span>.<span class=\"pl-s1\">stream</span>.<span class=\"pl-s1\">JsonWriter</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">io</span>.<span class=\"pl-c1\">IOException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">HashMap</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Map</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Objects</span>;\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">Main</span> {\n\n    <span class=\"pl-c\">/** An example class that just wraps a String. */</span>\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Thinger</span> {\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">key</span>;\n\n        <span class=\"pl-smi\">Thinger</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">key</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">key</span> = <span class=\"pl-s1\">key</span>;\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">toString</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s\">\"Thinger(\"</span> + <span class=\"pl-s1\">key</span> + <span class=\"pl-s\">\")\"</span>;\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">equals</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">o</span>) {\n            <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">this</span> == <span class=\"pl-s1\">o</span>) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;\n            <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">o</span> == <span class=\"pl-c1\">null</span> || <span class=\"pl-en\">getClass</span>() != <span class=\"pl-s1\">o</span>.<span class=\"pl-en\">getClass</span>()) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n            <span class=\"pl-smi\">Thinger</span> <span class=\"pl-s1\">that</span> = (<span class=\"pl-smi\">Thinger</span>) <span class=\"pl-s1\">o</span>;\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">Objects</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">key</span>, <span class=\"pl-s1\">that</span>.<span class=\"pl-s1\">key</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">hashCode</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">Objects</span>.<span class=\"pl-en\">hash</span>(<span class=\"pl-s1\">key</span>);\n        }\n    }\n\n    <span class=\"pl-c\">/** A TypeAdapter that can encode and decode a Thinger */</span>\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ThingerAdapter</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">TypeAdapter</span>&lt;<span class=\"pl-smi\">Thinger</span>&gt; {\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">write</span>(<span class=\"pl-smi\">JsonWriter</span> <span class=\"pl-s1\">out</span>, <span class=\"pl-smi\">Thinger</span> <span class=\"pl-s1\">value</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n            <span class=\"pl-s1\">out</span>.<span class=\"pl-en\">value</span>(<span class=\"pl-s1\">value</span>.<span class=\"pl-s1\">key</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Thinger</span> <span class=\"pl-en\">read</span>(<span class=\"pl-smi\">JsonReader</span> <span class=\"pl-s1\">in</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">IOException</span> {\n            <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Thinger</span>(<span class=\"pl-s1\">in</span>.<span class=\"pl-en\">nextString</span>());\n        }\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">args</span>) {\n\n        <span class=\"pl-c\">// Sample data with custom keys and values</span>\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">Thinger</span>, <span class=\"pl-smi\">Thinger</span>&gt; <span class=\"pl-s1\">map</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span>&lt;&gt;();\n        <span class=\"pl-s1\">map</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Thinger</span>(<span class=\"pl-s\">\"Foo\"</span>), <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Thinger</span>(<span class=\"pl-s\">\"Bar\"</span>));\n        <span class=\"pl-s1\">map</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Thinger</span>(<span class=\"pl-s\">\"Baz\"</span>), <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Thinger</span>( <span class=\"pl-s\">\"Qux\"</span>));\n\n        <span class=\"pl-c\">// Register the adapter we defined above</span>\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Gson</span> <span class=\"pl-s1\">gson</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">GsonBuilder</span>().<span class=\"pl-en\">registerTypeAdapter</span>(<span class=\"pl-smi\">Thinger</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ThingerAdapter</span>()).<span class=\"pl-en\">create</span>();\n\n        <span class=\"pl-c\">// Print the encoded JSON</span>\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">gson</span>.<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">map</span>));\n    }\n}</pre></div>\n<p dir=\"auto\">I expect this to print:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{&quot;Foo&quot;:&quot;Bar&quot;,&quot;Baz&quot;:&quot;Qux&quot;}\"><pre class=\"notranslate\"><code>{\"Foo\":\"Bar\",\"Baz\":\"Qux\"}\n</code></pre></div>\n<p dir=\"auto\">But it actually calls the <code class=\"notranslate\">toString</code> method and prints:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{&quot;Thinger(Foo)&quot;:&quot;Bar&quot;,&quot;Thinger(Baz)&quot;:&quot;Qux&quot;}\"><pre class=\"notranslate\"><code>{\"Thinger(Foo)\":\"Bar\",\"Thinger(Baz)\":\"Qux\"}\n</code></pre></div>\n<p dir=\"auto\">I'm not familiar with your code base, but it looks like the problem is related to <a href=\"https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java#L207\">this line of code</a></p>","resourcePath":"/google/gson/issues/1722","createdAt":"2020-06-13T04:59:43Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix `FieldNamingPolicy.upperCaseFirstLetter` uppercasing non-letter","url":"https://github.com/google/gson/pull/2004","resourcePath":"/google/gson/pull/2004","createdAt":"2021-10-29T15:49:11Z","number":2004,"mergeCommit":{"oid":"b3188c113205bb41a980b09917b7f6b242cd32fc","message":"Fix `FieldNamingPolicy.upperCaseFirstLetter` uppercasing non-letter (#2004)","commitUrl":"https://github.com/google/gson/commit/b3188c113205bb41a980b09917b7f6b242cd32fc","parents":{"nodes":[{"oid":"466ca729167662b72beb0b952a7819b71547eaec","message":"Update version number in UserGuide.md and proto/pom.xml."}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/FieldNamingPolicy.java"}},{"node":{"changeType":"ADDED","path":"gson/src/test/java/com/google/gson/FieldNamingPolicyTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984t24bB2gAoMDFjZTE4MWZiOWNlNzkxMzBlYTdmMWZmODZmMGVlMDliNzMzYjE4MQ","url":"https://github.com/google/gson/pull/2004/commits/01ce181fb9ce79130ea7f1ff86f0ee09b733b181"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1965,"url":"https://github.com/google/gson/issues/1965","title":"`FieldNamingPolicy.upperCaseFirstLetter` uppercases trailing non-letters","bodyHTML":"<p dir=\"auto\">The internal method <code class=\"notranslate\">FieldNamingPolicy.upperCaseFirstLetter(String)</code> which is used by some of the <code class=\"notranslate\">FieldNamingPolicy</code> constants erroneously uppercases trailing non-letters. The reason for this is that for the last character it is not checked whether it is a letter or not.<br>\nThere are some Unicode characters which are not letters, but for which <code class=\"notranslate\">toUpperCase</code> returns a different character. An example for this is <code class=\"notranslate\">U+0345</code> for which the uppercase character is <code class=\"notranslate\">U+0399</code>.</p>\n<p dir=\"auto\">Example:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Remains unchanged when it is not trailing\nInteger.toHexString(upperCaseFirstLetter(&quot;\\u0345_&quot;).charAt(0))\n// Erroneously uppercased when trailing\nInteger.toHexString(upperCaseFirstLetter(&quot;\\u0345&quot;).charAt(0))\"><pre><span class=\"pl-c\">// Remains unchanged when it is not trailing</span>\n<span class=\"pl-s1\">Integer</span>.<span class=\"pl-en\">toHexString</span>(<span class=\"pl-en\">upperCaseFirstLetter</span>(<span class=\"pl-s\">\"\\u0345_\"</span>).<span class=\"pl-en\">charAt</span>(<span class=\"pl-c1\">0</span>))\n<span class=\"pl-c\">// Erroneously uppercased when trailing</span>\n<span class=\"pl-s1\">Integer</span>.<span class=\"pl-en\">toHexString</span>(<span class=\"pl-en\">upperCaseFirstLetter</span>(<span class=\"pl-s\">\"\\u0345\"</span>).<span class=\"pl-en\">charAt</span>(<span class=\"pl-c1\">0</span>))</pre></div>\n<p dir=\"auto\">However, despite this character being allowed in a field name (<code class=\"notranslate\">Character.isJavaIdentifierPart('\\u0345')</code> is <code class=\"notranslate\">true</code>), this only affects non-ASCII characters and it is therefore rather unlikely that this issue ever occurs in reality.</p>","resourcePath":"/google/gson/issues/1965","createdAt":"2021-09-16T23:32:00Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"feat: added UPPER_CASE_WITH_UNDERSCORES in FieldNamingPolicy","url":"https://github.com/google/gson/pull/2024","resourcePath":"/google/gson/pull/2024","createdAt":"2021-11-22T03:35:03Z","number":2024,"mergeCommit":{"oid":"eaf9a0342d69b4cbbfb3644ce42e196453ce164a","message":"feat: added UPPER_CASE_WITH_UNDERSCORES in FieldNamingPolicy (#2024)","commitUrl":"https://github.com/google/gson/commit/eaf9a0342d69b4cbbfb3644ce42e196453ce164a","parents":{"nodes":[{"oid":"16b42ff5805074126c2e5484450c182773e408a2","message":"Update Caliper dependency; disable automatic result upload (#2019)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/FieldNamingPolicy.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/FieldNamingPolicyTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/FieldNamingTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/NamingPolicyTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984u00MP2gAoYjYzZTUyYzMyODg4YTlhN2E0YWFhMmEyMDg1ZWZiODJmYTk1NDVjOA","url":"https://github.com/google/gson/pull/2024/commits/b63e52c32888a9a7a4aaa2a2085efb82fa9545c8"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1886,"url":"https://github.com/google/gson/issues/1886","title":"New FieldNamingPolicy: UPPER_CASE_WITH_UNDERSCORES","bodyHTML":"<p dir=\"auto\">Hi,</p>\n<p dir=\"auto\">currently, I do try to integrate a service that uses a UPPER_CASE_WITH_UNDERSCORES naming scheme for their field names, e.g.:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;PRODUCT_LIST&quot; : {\n    &quot;PRODUCT&quot; : [\n      {\n      &quot;APPLICATION_CODE&quot; : &quot;secret application code&quot;,\n      &quot;PRODUCT_TYPE&quot; : &quot;product type value&quot;,\n      &quot;PRODUCT_NAME&quot; : &quot;product name&quot;\n      }\n    ]\n  }\n}\"><pre class=\"notranslate\"><code>{\n  \"PRODUCT_LIST\" : {\n    \"PRODUCT\" : [\n      {\n      \"APPLICATION_CODE\" : \"secret application code\",\n      \"PRODUCT_TYPE\" : \"product type value\",\n      \"PRODUCT_NAME\" : \"product name\"\n      }\n    ]\n  }\n}\n</code></pre></div>\n<p dir=\"auto\">Currently, GSON only supports LOWER_CASE_WITH_UNDERSCORES by default, so I would have to implement my own FieldNamingStategy class and possibly duplicate some code, like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"this.gson = new GsonBuilder()\n                .setFieldNamingStrategy(\n                        f -&gt; FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES.translateName(f).toUpperCase(Locale.ENGLISH))\n                .create();\"><pre class=\"notranslate\"><code>this.gson = new GsonBuilder()\n                .setFieldNamingStrategy(\n                        f -&gt; FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES.translateName(f).toUpperCase(Locale.ENGLISH))\n                .create();\n</code></pre></div>\n<p dir=\"auto\">So, ideally, something like this would be supported by GSON itself and I could use a new enum value.</p>","resourcePath":"/google/gson/issues/1886","createdAt":"2021-05-03T11:48:50Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Switch to JUnit 5","url":"https://github.com/google/gson/pull/2048","resourcePath":"/google/gson/pull/2048","createdAt":"2022-01-05T22:09:30Z","number":2048,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonReaderTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/resources/testcases-proguard.conf"}},{"node":{"changeType":"MODIFIED","path":"pom.xml"}},{"node":{"changeType":"MODIFIED","path":"proto/pom.xml"}},{"node":{"changeType":"MODIFIED","path":"proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithAnnotationsTest.java"}},{"node":{"changeType":"MODIFIED","path":"proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithComplexAndRepeatedFieldsTest.java"}},{"node":{"changeType":"MODIFIED","path":"proto/src/test/java/com/google/gson/protobuf/functional/ProtosWithPrimitiveTypesTest.java"}},{"node":{"changeType":"DELETED","path":"settings.gradle"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984wlRTO2gAoY2U4ZmRmYjlhOWNjNTY0ODQzYzg3MzFlMmFhYjdjNjhiNDljZDcwMg","url":"https://github.com/google/gson/pull/2048/commits/ce8fdfb9a9cc564843c8731e2aab7c68b49cd702"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1896,"url":"https://github.com/google/gson/issues/1896","title":"`build.gradle` project version is outdated","bodyHTML":"<p dir=\"auto\">The version specified by <code class=\"notranslate\">build.gradle</code> is outdated:<br>\n<div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/gson/blob/f5fcb0f4cbe554a237459db96f2aebd41ca3f394/gson/build.gradle#L5\">gson/gson/build.gradle</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 5\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/google/gson/commit/f5fcb0f4cbe554a237459db96f2aebd41ca3f394\">f5fcb0f</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L5\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"5\"></td>\n          <td id=\"LC5\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> version <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>2.8.6-SNAPSHOT<span class=\"pl-pds\">'</span></span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">Currently the correct version would be <code class=\"notranslate\">2.8.8-SNAPSHOT</code>.</p>\n<p dir=\"auto\">However in general it might be good to drop Gradle as build tool, or only use Gradle (instead of Maven) in the future. Having to maintain two build tools increases maintenance work. For example Gradle builds currently do not seem to correctly include the project version in <code class=\"notranslate\">GsonBuildConfig.java</code>, see:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"469242254\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1554\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/1554/hovercard\" href=\"https://github.com/google/gson/pull/1554\">#1554</a> (not sure if that pull request actually tries to fix that issue)</li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"743526321\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1820\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/1820/hovercard\" href=\"https://github.com/google/gson/pull/1820\">#1820</a></li>\n</ul>\n<p dir=\"auto\">In case support for Gradle is dropped, the corresponding GitHub workflow (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"559846814\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1648\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/1648/hovercard\" href=\"https://github.com/google/gson/pull/1648\">#1648</a>) can be removed again.</p>","resourcePath":"/google/gson/issues/1896","createdAt":"2021-05-25T01:28:45Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Change target Java version to 7","url":"https://github.com/google/gson/pull/2043","resourcePath":"/google/gson/pull/2043","createdAt":"2021-12-30T23:00:26Z","number":2043,"mergeCommit":{"oid":"dc28951fa7e7112f0e229e0a4665ad27a1891d79","message":"Change target Java version to 7 (#2043)\n\n* Change target Java version to 7\r\n\r\n* Document Gson requirements\r\n\r\n* Add package-info.java for `stream` package","commitUrl":"https://github.com/google/gson/commit/dc28951fa7e7112f0e229e0a4665ad27a1891d79","parents":{"nodes":[{"oid":"bc8858a3d9a79a7d091474b436767b73e8338ac1","message":"Bump maven-deploy-plugin from 3.0.0-M1 to 3.0.0-M2 (#2044)\n\nBumps [maven-deploy-plugin](https://github.com/apache/maven-deploy-plugin) from 3.0.0-M1 to 3.0.0-M2.\r\n- [Release notes](https://github.com/apache/maven-deploy-plugin/releases)\r\n- [Commits](https://github.com/apache/maven-deploy-plugin/compare/maven-deploy-plugin-3.0.0-M1...maven-deploy-plugin-3.0.0-M2)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.apache.maven.plugins:maven-deploy-plugin\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"README.md"}},{"node":{"changeType":"MODIFIED","path":"codegen/README.md"}},{"node":{"changeType":"MODIFIED","path":"gson/bnd.bnd"}},{"node":{"changeType":"MODIFIED","path":"gson/build.gradle"}},{"node":{"changeType":"MODIFIED","path":"gson/pom.xml"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/$Gson$Types.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/MalformedJsonException.java"}},{"node":{"changeType":"ADDED","path":"gson/src/main/java/com/google/gson/stream/package-info.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java"}},{"node":{"changeType":"MODIFIED","path":"pom.xml"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984waMsP2gAoMWZiNzE5ZDA5MTRiNDI3NDE5NjA0ODc1YjM3NzJjZTQ1ZDJmNDc0OA","url":"https://github.com/google/gson/pull/2043/commits/1fb719d0914b427419604875b3772ce45d2f4748"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2018,"url":"https://github.com/google/gson/issues/2018","title":"Drop support for Java 6","bodyHTML":"<p dir=\"auto\">Continuing to support Java 6 causes considerable headaches. Building with <code class=\"notranslate\">-source 6 -target 6</code> is not supported in JDK versions after 11. I don't think we need to support further back than Java 7 even for the most ancient Android devices still in use.</p>","resourcePath":"/google/gson/issues/2018","createdAt":"2021-11-09T21:51:33Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add LazilyParsedNumber default adapter","url":"https://github.com/google/gson/pull/2060","resourcePath":"/google/gson/pull/2060","createdAt":"2022-01-23T00:40:11Z","number":2060,"mergeCommit":{"oid":"e2e851c9bc692cec68ba7b0cbb002f82b4a229e4","message":"Add LazilyParsedNumber default adapter (#2060)\n\n* Add LazilyParsedNumber default adapter\r\n\r\n* Validate JsonWriter.value(Number) argument\r\n\r\n* Fix incorrect JSON number pattern, extend tests","commitUrl":"https://github.com/google/gson/commit/e2e851c9bc692cec68ba7b0cbb002f82b4a229e4","parents":{"nodes":[{"oid":"710a76c8b8835e36935c62024001ba6b91ceee01","message":"Fix JsonReader.hasNext() returning true at end of document (#2061)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/Gson.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonWriter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/PrimitiveTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonReaderTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984xc1ea2gAoMzkxMjEzMzc0ZWU0MTQxYmI1NDYyNDk4OGNiM2U4N2I3N2M5ZDE1Zg","url":"https://github.com/google/gson/pull/2060/commits/391213374ee4141bb54624988cb3e87b77c9d15f"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":847,"url":"https://github.com/google/gson/issues/847","title":"LazilyParsedNumber being serialised as JsonObject","bodyHTML":"<p dir=\"auto\">When I deserialise a JSON object into a map and back into JSON it seems to serialise the <code class=\"notranslate\">LazilyParsedNumber</code> as an object.</p>\n<p dir=\"auto\">JSON being parsed:</p>\n<div class=\"highlight highlight-source-js notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n    &quot;class&quot;: &quot;Setting&quot;,\n    &quot;event&quot;: 4,\n    &quot;severity&quot;: 2,\n    &quot;notify&quot;: true,\n    &quot;sound&quot;: false,\n    &quot;feeds&quot;: [\n        {\n            &quot;code&quot;: &quot;USGS&quot;,\n            &quot;language&quot;: &quot;eng&quot;\n        }\n    ]\n}\"><pre><span class=\"pl-kos\">{</span>\n    <span class=\"pl-s\">\"class\"</span>: <span class=\"pl-s\">\"Setting\"</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"event\"</span>: <span class=\"pl-c1\">4</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"severity\"</span>: <span class=\"pl-c1\">2</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"notify\"</span>: <span class=\"pl-c1\">true</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"sound\"</span>: <span class=\"pl-c1\">false</span><span class=\"pl-kos\">,</span>\n    <span class=\"pl-s\">\"feeds\"</span>: <span class=\"pl-kos\">[</span>\n        <span class=\"pl-kos\">{</span>\n            <span class=\"pl-s\">\"code\"</span>: <span class=\"pl-s\">\"USGS\"</span><span class=\"pl-kos\">,</span>\n            <span class=\"pl-s\">\"language\"</span>: <span class=\"pl-s\">\"eng\"</span>\n        <span class=\"pl-kos\">}</span>\n    <span class=\"pl-kos\">]</span>\n<span class=\"pl-kos\">}</span></pre></div>\n<p dir=\"auto\">Class JSON is being parsed into</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@NoArgsConstructor\n@AllArgsConstructor(suppressConstructorProperties = true)\n@Accessors(chain = true) @Data\npublic class MonitoredLocationSetting\n{\n    @SerializedName(&quot;class&quot;) private final String className = &quot;Setting&quot;;\n\n    protected int event = -1;\n    protected Map&lt;String, Object&gt; settings = new HashMap&lt;&gt;();\n    protected List&lt;LocationSettingFeed&gt; feeds = new ArrayList&lt;&gt;();\n}\"><pre><span class=\"pl-c1\">@</span><span class=\"pl-c1\">NoArgsConstructor</span>\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">AllArgsConstructor</span>(<span class=\"pl-s1\">suppressConstructorProperties</span> = <span class=\"pl-c1\">true</span>)\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Accessors</span>(<span class=\"pl-s1\">chain</span> = <span class=\"pl-c1\">true</span>) <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Data</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">MonitoredLocationSetting</span>\n{\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">SerializedName</span>(<span class=\"pl-s\">\"class\"</span>) <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">className</span> = <span class=\"pl-s\">\"Setting\"</span>;\n\n    <span class=\"pl-k\">protected</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">event</span> = -<span class=\"pl-c1\">1</span>;\n    <span class=\"pl-k\">protected</span> <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">settings</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span>&lt;&gt;();\n    <span class=\"pl-k\">protected</span> <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">LocationSettingFeed</span>&gt; <span class=\"pl-s1\">feeds</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ArrayList</span>&lt;&gt;();\n}</pre></div>\n<p dir=\"auto\">Basically all im doing is deserialising all fields except \"event\", \"feeds\", and \"class\" into the <code class=\"notranslate\">settings</code> map using the following adapters</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"builder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonDeserializer&lt;MonitoredLocationSetting&gt;()\n{\n    @Override public MonitoredLocationSetting deserialize(JsonElement json, Type typeOfT, JsonDeserializationContext context) throws JsonParseException\n    {\n        MonitoredLocationSetting setting = new Gson().fromJson(json, typeOfT);\n\n        if (setting != null)\n        {\n            // Ignore for setting.settings\n            List&lt;String&gt; fieldsToIgnore = new ArrayList&lt;String&gt;(Arrays.asList(new String[]{&quot;event&quot;, &quot;feeds&quot;, &quot;class&quot;}));\n            Iterator&lt;Map.Entry&lt;String, JsonElement&gt;&gt; entries = json.getAsJsonObject().entrySet().iterator();\n            while (entries.hasNext())\n            {\n                Map.Entry&lt;String, JsonElement&gt; next = entries.next();\n\n                if (!fieldsToIgnore.contains(next.getKey()))\n                {\n                    if (next.getValue().isJsonPrimitive())\n                    {\n                        if (next.getValue().getAsJsonPrimitive().isBoolean())\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsBoolean());\n                        }\n                        else if (next.getValue().getAsJsonPrimitive().isNumber())\n                        {\n                            // This deserialises as LazilyParsedNumber\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsNumber());\n                        }\n                        else if (next.getValue().getAsJsonPrimitive().isString())\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue().getAsString());\n                        }\n                        else\n                        {\n                            setting.getSettings().put(next.getKey(), next.getValue());\n                        }\n                    }\n                }\n            }\n        }\n\n        return setting;\n    }\n});\nbuilder.registerTypeAdapter(MonitoredLocationSetting.class, new JsonSerializer&lt;MonitoredLocationSetting&gt;()\n{\n    @Override public JsonElement serialize(MonitoredLocationSetting src, Type typeOfSrc, JsonSerializationContext context)\n    {\n        JsonObject serialised = (JsonObject)new Gson().toJsonTree(src);\n        // After the above line is called the following JSON is produced\n        /*\n                {\n                    &quot;class&quot;: &quot;Setting&quot;,\n                    &quot;event&quot;: 4,\n                    &quot;feeds&quot;: [\n                        {\n                            &quot;code&quot;: &quot;USGS&quot;,\n                            &quot;language&quot;: &quot;eng&quot;\n                        }\n                    ],\n                    &quot;settings&quot;: {\n                        &quot;notify&quot;: true,\n                        &quot;severity&quot;: {  &lt;-- Issue here\n                            &quot;value&quot;: &quot;2&quot;\n                        },\n                        &quot;sound&quot;: false\n                    }\n                }\n        */\n        JsonObject setting = serialised.get(&quot;settings&quot;).getAsJsonObject();\n\n        // Ignore for setting.settings\n        Iterator&lt;Map.Entry&lt;String, JsonElement&gt;&gt; entries = setting.entrySet().iterator();\n        while (entries.hasNext())\n        {\n            Map.Entry&lt;String, JsonElement&gt; next = entries.next();\n            serialised.add(next.getKey(), next.getValue());\n        }\n\n        serialised.remove(&quot;settings&quot;);\n        return serialised;\n    }\n});\"><pre><span class=\"pl-s1\">builder</span>.<span class=\"pl-en\">registerTypeAdapter</span>(<span class=\"pl-smi\">MonitoredLocationSetting</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonDeserializer</span>&lt;<span class=\"pl-smi\">MonitoredLocationSetting</span>&gt;()\n{\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span> <span class=\"pl-k\">public</span> <span class=\"pl-smi\">MonitoredLocationSetting</span> <span class=\"pl-en\">deserialize</span>(<span class=\"pl-smi\">JsonElement</span> <span class=\"pl-s1\">json</span>, <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">typeOfT</span>, <span class=\"pl-smi\">JsonDeserializationContext</span> <span class=\"pl-s1\">context</span>) <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonParseException</span>\n    {\n        <span class=\"pl-smi\">MonitoredLocationSetting</span> <span class=\"pl-s1\">setting</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">fromJson</span>(<span class=\"pl-s1\">json</span>, <span class=\"pl-s1\">typeOfT</span>);\n\n        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">setting</span> != <span class=\"pl-c1\">null</span>)\n        {\n            <span class=\"pl-c\">// Ignore for setting.settings</span>\n            <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">fieldsToIgnore</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ArrayList</span>&lt;<span class=\"pl-smi\">String</span>&gt;(<span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">String</span>[]{<span class=\"pl-s\">\"event\"</span>, <span class=\"pl-s\">\"feeds\"</span>, <span class=\"pl-s\">\"class\"</span>}));\n            <span class=\"pl-smi\">Iterator</span>&lt;<span class=\"pl-smi\">Map</span>.<span class=\"pl-smi\">Entry</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">JsonElement</span>&gt;&gt; <span class=\"pl-s1\">entries</span> = <span class=\"pl-s1\">json</span>.<span class=\"pl-en\">getAsJsonObject</span>().<span class=\"pl-en\">entrySet</span>().<span class=\"pl-en\">iterator</span>();\n            <span class=\"pl-k\">while</span> (<span class=\"pl-s1\">entries</span>.<span class=\"pl-en\">hasNext</span>())\n            {\n                <span class=\"pl-smi\">Map</span>.<span class=\"pl-smi\">Entry</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">JsonElement</span>&gt; <span class=\"pl-s1\">next</span> = <span class=\"pl-s1\">entries</span>.<span class=\"pl-en\">next</span>();\n\n                <span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">fieldsToIgnore</span>.<span class=\"pl-en\">contains</span>(<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getKey</span>()))\n                {\n                    <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">isJsonPrimitive</span>())\n                    {\n                        <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">getAsJsonPrimitive</span>().<span class=\"pl-en\">isBoolean</span>())\n                        {\n                            <span class=\"pl-s1\">setting</span>.<span class=\"pl-en\">getSettings</span>().<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getKey</span>(), <span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">getAsBoolean</span>());\n                        }\n                        <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">getAsJsonPrimitive</span>().<span class=\"pl-en\">isNumber</span>())\n                        {\n                            <span class=\"pl-c\">// This deserialises as LazilyParsedNumber</span>\n                            <span class=\"pl-s1\">setting</span>.<span class=\"pl-en\">getSettings</span>().<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getKey</span>(), <span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">getAsNumber</span>());\n                        }\n                        <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">getAsJsonPrimitive</span>().<span class=\"pl-en\">isString</span>())\n                        {\n                            <span class=\"pl-s1\">setting</span>.<span class=\"pl-en\">getSettings</span>().<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getKey</span>(), <span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>().<span class=\"pl-en\">getAsString</span>());\n                        }\n                        <span class=\"pl-k\">else</span>\n                        {\n                            <span class=\"pl-s1\">setting</span>.<span class=\"pl-en\">getSettings</span>().<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getKey</span>(), <span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>());\n                        }\n                    }\n                }\n            }\n        }\n\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">setting</span>;\n    }\n});\n<span class=\"pl-s1\">builder</span>.<span class=\"pl-en\">registerTypeAdapter</span>(<span class=\"pl-smi\">MonitoredLocationSetting</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonSerializer</span>&lt;<span class=\"pl-smi\">MonitoredLocationSetting</span>&gt;()\n{\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span> <span class=\"pl-k\">public</span> <span class=\"pl-smi\">JsonElement</span> <span class=\"pl-en\">serialize</span>(<span class=\"pl-smi\">MonitoredLocationSetting</span> <span class=\"pl-s1\">src</span>, <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">typeOfSrc</span>, <span class=\"pl-smi\">JsonSerializationContext</span> <span class=\"pl-s1\">context</span>)\n    {\n        <span class=\"pl-smi\">JsonObject</span> <span class=\"pl-s1\">serialised</span> = (<span class=\"pl-smi\">JsonObject</span>)<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">toJsonTree</span>(<span class=\"pl-s1\">src</span>);\n        <span class=\"pl-c\">// After the above line is called the following JSON is produced</span>\n        <span class=\"pl-c\">/*</span>\n<span class=\"pl-c\">                {</span>\n<span class=\"pl-c\">                    \"class\": \"Setting\",</span>\n<span class=\"pl-c\">                    \"event\": 4,</span>\n<span class=\"pl-c\">                    \"feeds\": [</span>\n<span class=\"pl-c\">                        {</span>\n<span class=\"pl-c\">                            \"code\": \"USGS\",</span>\n<span class=\"pl-c\">                            \"language\": \"eng\"</span>\n<span class=\"pl-c\">                        }</span>\n<span class=\"pl-c\">                    ],</span>\n<span class=\"pl-c\">                    \"settings\": {</span>\n<span class=\"pl-c\">                        \"notify\": true,</span>\n<span class=\"pl-c\">                        \"severity\": {  &lt;-- Issue here</span>\n<span class=\"pl-c\">                            \"value\": \"2\"</span>\n<span class=\"pl-c\">                        },</span>\n<span class=\"pl-c\">                        \"sound\": false</span>\n<span class=\"pl-c\">                    }</span>\n<span class=\"pl-c\">                }</span>\n<span class=\"pl-c\">        */</span>\n        <span class=\"pl-smi\">JsonObject</span> <span class=\"pl-s1\">setting</span> = <span class=\"pl-s1\">serialised</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s\">\"settings\"</span>).<span class=\"pl-en\">getAsJsonObject</span>();\n\n        <span class=\"pl-c\">// Ignore for setting.settings</span>\n        <span class=\"pl-smi\">Iterator</span>&lt;<span class=\"pl-smi\">Map</span>.<span class=\"pl-smi\">Entry</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">JsonElement</span>&gt;&gt; <span class=\"pl-s1\">entries</span> = <span class=\"pl-s1\">setting</span>.<span class=\"pl-en\">entrySet</span>().<span class=\"pl-en\">iterator</span>();\n        <span class=\"pl-k\">while</span> (<span class=\"pl-s1\">entries</span>.<span class=\"pl-en\">hasNext</span>())\n        {\n            <span class=\"pl-smi\">Map</span>.<span class=\"pl-smi\">Entry</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">JsonElement</span>&gt; <span class=\"pl-s1\">next</span> = <span class=\"pl-s1\">entries</span>.<span class=\"pl-en\">next</span>();\n            <span class=\"pl-s1\">serialised</span>.<span class=\"pl-en\">add</span>(<span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getKey</span>(), <span class=\"pl-s1\">next</span>.<span class=\"pl-en\">getValue</span>());\n        }\n\n        <span class=\"pl-s1\">serialised</span>.<span class=\"pl-en\">remove</span>(<span class=\"pl-s\">\"settings\"</span>);\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">serialised</span>;\n    }\n});</pre></div>\n<p dir=\"auto\">From what I can see, <em>technically</em> this is correct because as far as Gson is concerned <code class=\"notranslate\">LazilyParsedNumber</code> IS an object and not a 'primitive', however, doing a straight convert from and then back to json causes a problem because the object isnt parsed back as a primitive after being read as a primitive (Number)</p>","resourcePath":"/google/gson/issues/847","createdAt":"2016-05-06T13:47:41Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Specify optional dependency on `sun.misc.Unsafe`","url":"https://github.com/google/gson/pull/1999","resourcePath":"/google/gson/pull/1999","createdAt":"2021-10-21T23:36:37Z","number":1999,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/bnd.bnd"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/module-info.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984thZ8h2gAoOTFhNzgwYTNmZmMzNjhiZmVjMTVlYjU2NjIzYTUxNjg2M2RmNjA0ZQ","url":"https://github.com/google/gson/pull/1999/commits/91a780a3ffc368bfec15eb56623a516863df604e"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1695,"url":"https://github.com/google/gson/issues/1695","title":"Undeclared module dependency for Java 9","bodyHTML":"<p dir=\"auto\">Hello, I was using GSON 2.8.6 to save some data received from a device over a TCP connection, using simply<br>\n<code class=\"notranslate\">Gson gson = new Gson() return gson.toJson(this);</code><br>\nto serialize my custom class (and then save it into a text file), and<br>\n<code class=\"notranslate\"> gson.fromJson(input, Analysis.class);</code><br>\nto de-serialize the saved file, so no special configuration or custom serialization involved.<br>\nThe issue appeared when I built a custom JRE9 using jdeps and jlink and ran my program using that JRE9: when deserializing, I got the exception<br>\n<code class=\"notranslate\">Caused by: java.lang.UnsupportedOperationException: Cannot allocate class LocalDateTime at com.google.gson.internal.UnsafeAllocator$4.newInstance(UnsafeAllocator.java:104) at com.google.gson.internal.ConstructorConstructor$14.construct(ConstructorConstructor.java:225) ... 88 common frames omitted</code><br>\nI implemented a custom de-serializer for the classes that caused the exception (just two, LocalDateTime and a custom class), and the issue was solved, but, as was pointed out <a href=\"https://stackoverflow.com/questions/61727613/unexpected-behaviour-from-gson\" rel=\"nofollow\">here</a> , seems that there's an undeclared dependence on the module 'jdk.unsupported' that throws this exception.<br>\nProbably it's not a major issue, but I thought you'd like to know. Let me know if you need more code or details</p>","resourcePath":"/google/gson/issues/1695","createdAt":"2020-05-19T10:11:27Z","labels":{"edges":[]}}},{"node":{"number":1981,"url":"https://github.com/google/gson/issues/1981","title":"Missing Constraint: Import-Package: sun.misc","bodyHTML":"<h1 dir=\"auto\">Gson version</h1>\n\n<p dir=\"auto\">The Apache NetBeans project has just tried to migrate from version <code class=\"notranslate\">2.8.5</code> to version <code class=\"notranslate\">2.8.8</code> in the pull request <a href=\"https://github.com/apache/netbeans/pull/3200/files\">PR-3200</a> and the update fails with unsatisfied OSGi missing constraint: <code class=\"notranslate\">Import-Package: sun.misc</code>.</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n\n<p dir=\"auto\">NetBeans project builds &amp; runs primarily on JDK8.</p>\n<h1 dir=\"auto\">Used tools</h1>\n\n<p dir=\"auto\">NetBeans is using home-made Ant based build system. I don't think it matters for this bug report.</p>\n<h1 dir=\"auto\">Description</h1>\n\n<p dir=\"auto\">As <a href=\"https://github.com/apache/netbeans/pull/3200/files\">PR-3200</a> states: The start of NetBeans fails with exception coming from an OSGi container (Apache NetBeans project is using OSGi behind the scene):</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"SEVERE [org.netbeans.modules.netbinox]: framework event com.google.gson type 2\norg.osgi.framework.BundleException: The bundle &quot;com.google.gson_2.8.8 [111]&quot; could not be resolved. Reason: Missing Constraint: Import-Package: sun.misc; version=&quot;0.0.0&quot;\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolverError(AbstractBundle.java:1332)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureException(AbstractBundle.java:1316)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:323)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:390)\n\tat org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1184)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:559)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:544)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:457)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:243)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.internalStart(EquinoxLauncher.java:271)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher$2.run(EquinoxLauncher.java:246)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.start(EquinoxLauncher.java:244)\n\tat org.eclipse.osgi.launch.Equinox.start(Equinox.java:258)\n\tat org.netbeans.core.netigso.Netigso.start(Netigso.java:184)\n\tat org.netbeans.NetigsoHandle.startFramework(NetigsoHandle.java:188)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1458)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1254)\n\tat org.netbeans.core.startup.ModuleList.installNew(ModuleList.java:315)\n\tat org.netbeans.core.startup.ModuleList.trigger(ModuleList.java:251)\n\tat org.netbeans.core.startup.ModuleSystem.restore(ModuleSystem.java:298)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:156)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:125)\n\tat org.netbeans.core.startup.Main.start(Main.java:282)\n\tat org.netbeans.core.startup.TopThreadGroup.run(TopThreadGroup.java:98)\"><pre class=\"notranslate\"><code>SEVERE [org.netbeans.modules.netbinox]: framework event com.google.gson type 2\norg.osgi.framework.BundleException: The bundle \"com.google.gson_2.8.8 [111]\" could not be resolved. Reason: Missing Constraint: Import-Package: sun.misc; version=\"0.0.0\"\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolverError(AbstractBundle.java:1332)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureException(AbstractBundle.java:1316)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:323)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:390)\n\tat org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1184)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:559)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:544)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:457)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:243)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.internalStart(EquinoxLauncher.java:271)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher$2.run(EquinoxLauncher.java:246)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.start(EquinoxLauncher.java:244)\n\tat org.eclipse.osgi.launch.Equinox.start(Equinox.java:258)\n\tat org.netbeans.core.netigso.Netigso.start(Netigso.java:184)\n\tat org.netbeans.NetigsoHandle.startFramework(NetigsoHandle.java:188)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1458)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1254)\n\tat org.netbeans.core.startup.ModuleList.installNew(ModuleList.java:315)\n\tat org.netbeans.core.startup.ModuleList.trigger(ModuleList.java:251)\n\tat org.netbeans.core.startup.ModuleSystem.restore(ModuleSystem.java:298)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:156)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:125)\n\tat org.netbeans.core.startup.Main.start(Main.java:282)\n\tat org.netbeans.core.startup.TopThreadGroup.run(TopThreadGroup.java:98)\n</code></pre></div>\n<h2 dir=\"auto\">Expected behavior</h2>\n\n<p dir=\"auto\">Version 2.8.5 starts. It's manifest doesn't have any unavoidable dependency on <code class=\"notranslate\">sun.misc</code> package. There is</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"unzip -p netbeans/ide/modules/com-google-gson.jar META*MAN* | grep Import.*Package\nImport-Package: com.google.gson.annotations\"><pre class=\"notranslate\"><code>unzip -p netbeans/ide/modules/com-google-gson.jar META*MAN* | grep Import.*Package\nImport-Package: com.google.gson.annotations\n</code></pre></div>\n<p dir=\"auto\">in NetBeans 12.5.</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n\n<p dir=\"auto\">However the new, 2.8.8 version contains explicit dependency on <code class=\"notranslate\">sun.misc</code>:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Import-Package: com.google.gson.annotations,sun.misc\"><pre class=\"notranslate\"><code>Import-Package: com.google.gson.annotations,sun.misc\n</code></pre></div>\n<p dir=\"auto\">The Apache NetBeans project doesn't allow OSGi bundles to access <code class=\"notranslate\">sun.misc</code> package and as such the OSGi container refuses to launch the GSON 2.8.8 bundle.</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n\n\n<p dir=\"auto\">To reproduce I would:</p>\n<ul dir=\"auto\">\n<li>apply <a href=\"https://github.com/apache/netbeans/pull/3200/files\">PR-3200</a></li>\n<li><code class=\"notranslate\">ant build</code> to build NetBeans</li>\n<li><code class=\"notranslate\">ant tryme</code> to launch it</li>\n</ul>\n<p dir=\"auto\">However I assume the problem is clear from the printed error. The <code class=\"notranslate\">sun.misc</code> imported package is causing it. Any compliant OSGi container shall fail on similar error.</p>\n<h1 dir=\"auto\">Exception stack trace</h1>\n\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"SEVERE [org.netbeans.modules.netbinox]: framework event com.google.gson type 2\norg.osgi.framework.BundleException: The bundle &quot;com.google.gson_2.8.8 [111]&quot; could not be resolved. Reason: Missing Constraint: Import-Package: sun.misc; version=&quot;0.0.0&quot;\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolverError(AbstractBundle.java:1332)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureException(AbstractBundle.java:1316)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:323)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:390)\n\tat org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1184)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:559)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:544)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:457)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:243)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.internalStart(EquinoxLauncher.java:271)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher$2.run(EquinoxLauncher.java:246)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.start(EquinoxLauncher.java:244)\n\tat org.eclipse.osgi.launch.Equinox.start(Equinox.java:258)\n\tat org.netbeans.core.netigso.Netigso.start(Netigso.java:184)\n\tat org.netbeans.NetigsoHandle.startFramework(NetigsoHandle.java:188)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1458)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1254)\n\tat org.netbeans.core.startup.ModuleList.installNew(ModuleList.java:315)\n\tat org.netbeans.core.startup.ModuleList.trigger(ModuleList.java:251)\n\tat org.netbeans.core.startup.ModuleSystem.restore(ModuleSystem.java:298)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:156)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:125)\n\tat org.netbeans.core.startup.Main.start(Main.java:282)\n\tat org.netbeans.core.startup.TopThreadGroup.run(TopThreadGroup.java:98)\n\"><pre class=\"notranslate\"><code>SEVERE [org.netbeans.modules.netbinox]: framework event com.google.gson type 2\norg.osgi.framework.BundleException: The bundle \"com.google.gson_2.8.8 [111]\" could not be resolved. Reason: Missing Constraint: Import-Package: sun.misc; version=\"0.0.0\"\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolverError(AbstractBundle.java:1332)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureException(AbstractBundle.java:1316)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:323)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:390)\n\tat org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1184)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:559)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:544)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:457)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:243)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.internalStart(EquinoxLauncher.java:271)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher$2.run(EquinoxLauncher.java:246)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.start(EquinoxLauncher.java:244)\n\tat org.eclipse.osgi.launch.Equinox.start(Equinox.java:258)\n\tat org.netbeans.core.netigso.Netigso.start(Netigso.java:184)\n\tat org.netbeans.NetigsoHandle.startFramework(NetigsoHandle.java:188)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1458)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1254)\n\tat org.netbeans.core.startup.ModuleList.installNew(ModuleList.java:315)\n\tat org.netbeans.core.startup.ModuleList.trigger(ModuleList.java:251)\n\tat org.netbeans.core.startup.ModuleSystem.restore(ModuleSystem.java:298)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:156)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:125)\n\tat org.netbeans.core.startup.Main.start(Main.java:282)\n\tat org.netbeans.core.startup.TopThreadGroup.run(TopThreadGroup.java:98)\n\n</code></pre></div>\n<h1 dir=\"auto\">Workaround</h1>\n<p dir=\"auto\">OSGi specification defines a special property <code class=\"notranslate\">org.osgi.framework.system.packages.extra</code> which makes additional boot classpath packages available to the OSGi bundles. Yes, setting it to:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ netbeans/bin/netbeans -J-Dorg.osgi.framework.system.packages.extra=sun.misc\"><pre class=\"notranslate\"><code>$ netbeans/bin/netbeans -J-Dorg.osgi.framework.system.packages.extra=sun.misc\n</code></pre></div>\n<p dir=\"auto\">works. Yes, we can use it, if necessary. But it puzzles me:</p>\n<p dir=\"auto\">Have you introduced the dependency intentionally? Or is it just an accidental by-product of other changes? I can see that the new version of GSON is built with JDK11 from its JAR manifest. Also the BND tools got upgraded to <code class=\"notranslate\">Bnd-5.3.0.202102221516</code> - maybe the added dependency on <code class=\"notranslate\">sun.misc</code> is just a by-product of one of the build changes? It seems the <code class=\"notranslate\">sun.misc</code> code is used just conditionally - e.g. the dependency could be <code class=\"notranslate\">optional:=true</code>. Maybe specifying the optional dependency explicitly to BND is all that's needed to eliminate it?</p>\n<p dir=\"auto\">Thanks for taking a look and helping Apache NetBeans (possibly others) resolve the upgrade issue.</p>","resourcePath":"/google/gson/issues/1981","createdAt":"2021-09-30T12:47:11Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Deprecate `Gson.excluder()` exposing internal `Excluder` class","url":"https://github.com/google/gson/pull/1986","resourcePath":"/google/gson/pull/1986","createdAt":"2021-10-11T02:08:25Z","number":1986,"mergeCommit":{"oid":"c54caf308c3f7d4a6088cf3085c2caa9617e0458","message":"Deprecate `Gson.excluder()` exposing internal `Excluder` class (#1986)","commitUrl":"https://github.com/google/gson/commit/c54caf308c3f7d4a6088cf3085c2caa9617e0458","parents":{"nodes":[{"oid":"e6fae590cf2a758c47cd5a17f9bf3780ce62c986","message":"Prevent Java deserialization of internal classes (#1991)\n\nAdversaries might be able to forge data which can be abused for DoS attacks.\r\nThese classes are already writing a replacement JDK object during serialization\r\nfor a long time, so this change should not cause any issues."}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/Gson.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/GsonTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984s_hjG2gAoZTk5MjFkOGE5MWJlMzM0NTE0YjFiZTU2NjNhNGNiM2M2YWViNGM1MQ","url":"https://github.com/google/gson/pull/1986/commits/e9921d8a91be334514b1be5663a4cb3c6aeb4c51"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1903,"url":"https://github.com/google/gson/issues/1903","title":"`Gson.excluder()` exposes internal `Excluder`","bodyHTML":"<p dir=\"auto\">The method <code class=\"notranslate\">Gson.excluder()</code> exposes the internal <code class=\"notranslate\">Excluder</code> class, see also Javadoc:<br>\n<a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/11685886/120818044-88520980-c552-11eb-8131-9aaf2c6fea4f.png\"><img src=\"https://user-images.githubusercontent.com/11685886/120818044-88520980-c552-11eb-8131-9aaf2c6fea4f.png\" alt=\"Javadoc screenshot\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">The method should be package-private, or be removed completely.</p>\n<p dir=\"auto\">(Method was added by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"150899198\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/838\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/838/hovercard\" href=\"https://github.com/google/gson/pull/838\">#838</a>)</p>\n<p dir=\"auto\">It looks like <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"421717888\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1492\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/1492/hovercard\" href=\"https://github.com/google/gson/pull/1492\">#1492</a> tried to fix this, but no follow-up pull request for that was created.</p>","resourcePath":"/google/gson/issues/1903","createdAt":"2021-06-04T14:33:40Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Remove Gradle build support","url":"https://github.com/google/gson/pull/2063","resourcePath":"/google/gson/pull/2063","createdAt":"2022-01-23T02:26:58Z","number":2063,"mergeCommit":{"oid":"be0a1f4ff74bcd01580887cc9f3ec592d773f24c","message":"Remove Gradle build support (#2063)\n\nBuild script was outdated and not actively maintained anymore.","commitUrl":"https://github.com/google/gson/commit/be0a1f4ff74bcd01580887cc9f3ec592d773f24c","parents":{"nodes":[{"oid":"8e01b54682612471a9ab40c73911dfbf6b5be036","message":"Bump maven-compiler-plugin from 3.8.1 to 3.9.0 (#2055)\n\nBumps [maven-compiler-plugin](https://github.com/apache/maven-compiler-plugin) from 3.8.1 to 3.9.0.\r\n- [Release notes](https://github.com/apache/maven-compiler-plugin/releases)\r\n- [Commits](https://github.com/apache/maven-compiler-plugin/compare/maven-compiler-plugin-3.8.1...maven-compiler-plugin-3.9.0)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.apache.maven.plugins:maven-compiler-plugin\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-minor\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"DELETED","path":".github/workflows/gradle-wrapper-validation.yml"}},{"node":{"changeType":"DELETED","path":"build.gradle"}},{"node":{"changeType":"DELETED","path":"gradle/wrapper/gradle-wrapper.jar"}},{"node":{"changeType":"DELETED","path":"gradle/wrapper/gradle-wrapper.properties"}},{"node":{"changeType":"DELETED","path":"gradlew"}},{"node":{"changeType":"DELETED","path":"gradlew.bat"}},{"node":{"changeType":"DELETED","path":"settings.gradle"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984xc5Ht2gAoZmNjMjQ4NmZhODc2NGQ5YTU5MTYyMzM5MDZkZjc5MTMxMjIyMzZmMg","url":"https://github.com/google/gson/pull/2063/commits/fcc2486fa8764d9a5916233906df7913122236f2"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1896,"url":"https://github.com/google/gson/issues/1896","title":"`build.gradle` project version is outdated","bodyHTML":"<p dir=\"auto\">The version specified by <code class=\"notranslate\">build.gradle</code> is outdated:<br>\n<div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/gson/blob/f5fcb0f4cbe554a237459db96f2aebd41ca3f394/gson/build.gradle#L5\">gson/gson/build.gradle</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 5\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/google/gson/commit/f5fcb0f4cbe554a237459db96f2aebd41ca3f394\">f5fcb0f</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L5\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"5\"></td>\n          <td id=\"LC5\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> version <span class=\"pl-k\">=</span> <span class=\"pl-s\"><span class=\"pl-pds\">'</span>2.8.6-SNAPSHOT<span class=\"pl-pds\">'</span></span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">Currently the correct version would be <code class=\"notranslate\">2.8.8-SNAPSHOT</code>.</p>\n<p dir=\"auto\">However in general it might be good to drop Gradle as build tool, or only use Gradle (instead of Maven) in the future. Having to maintain two build tools increases maintenance work. For example Gradle builds currently do not seem to correctly include the project version in <code class=\"notranslate\">GsonBuildConfig.java</code>, see:</p>\n<ul dir=\"auto\">\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"469242254\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1554\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/1554/hovercard\" href=\"https://github.com/google/gson/pull/1554\">#1554</a> (not sure if that pull request actually tries to fix that issue)</li>\n<li><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"743526321\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1820\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/1820/hovercard\" href=\"https://github.com/google/gson/pull/1820\">#1820</a></li>\n</ul>\n<p dir=\"auto\">In case support for Gradle is dropped, the corresponding GitHub workflow (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"559846814\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1648\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/1648/hovercard\" href=\"https://github.com/google/gson/pull/1648\">#1648</a>) can be removed again.</p>","resourcePath":"/google/gson/issues/1896","createdAt":"2021-05-25T01:28:45Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"#1981: Optional OSGi bundle's dependency on sun.misc package","url":"https://github.com/google/gson/pull/1993","resourcePath":"/google/gson/pull/1993","createdAt":"2021-10-14T09:17:09Z","number":1993,"mergeCommit":{"oid":"ca1df7f7e09f6b1a763882029dd7057f475b31de","message":"#1981: Optional OSGi bundle's dependency on sun.misc package (#1993)\n\n* #1981: Avoid OSGi bundle's dependency on sun.misc package\r\n\r\n* Specify optional dependency on sun.misc.Unsafe\r\n\r\n* Adjusting the test to sun.misc import being optional\r\n\r\n* Using Collections.list and for loop\r\n\r\n* Let the fail message include name of package\r\n\r\nCo-authored-by: Marcono1234 <Marcono1234@users.noreply.github.com>\r\n\r\n* Closing the input stream\r\n\r\n* Dedicated assertSubstring method\r\n\r\nCo-authored-by: Marcono1234 <Marcono1234@users.noreply.github.com>","commitUrl":"https://github.com/google/gson/commit/ca1df7f7e09f6b1a763882029dd7057f475b31de","parents":{"nodes":[{"oid":"c54caf308c3f7d4a6088cf3085c2caa9617e0458","message":"Deprecate `Gson.excluder()` exposing internal `Excluder` class (#1986)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/bnd.bnd"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/module-info.java"}},{"node":{"changeType":"ADDED","path":"gson/src/test/java/com/google/gson/regression/OSGiTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984tMHeK2gAoM2MxYzVmZjdmOTQ0N2M1NWRmNGZhOTlmMjljNDQ1NTdlYmQ2OTY4OQ","url":"https://github.com/google/gson/pull/1993/commits/3c1c5ff7f9447c55df4fa99f29c44557ebd69689"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1695,"url":"https://github.com/google/gson/issues/1695","title":"Undeclared module dependency for Java 9","bodyHTML":"<p dir=\"auto\">Hello, I was using GSON 2.8.6 to save some data received from a device over a TCP connection, using simply<br>\n<code class=\"notranslate\">Gson gson = new Gson() return gson.toJson(this);</code><br>\nto serialize my custom class (and then save it into a text file), and<br>\n<code class=\"notranslate\"> gson.fromJson(input, Analysis.class);</code><br>\nto de-serialize the saved file, so no special configuration or custom serialization involved.<br>\nThe issue appeared when I built a custom JRE9 using jdeps and jlink and ran my program using that JRE9: when deserializing, I got the exception<br>\n<code class=\"notranslate\">Caused by: java.lang.UnsupportedOperationException: Cannot allocate class LocalDateTime at com.google.gson.internal.UnsafeAllocator$4.newInstance(UnsafeAllocator.java:104) at com.google.gson.internal.ConstructorConstructor$14.construct(ConstructorConstructor.java:225) ... 88 common frames omitted</code><br>\nI implemented a custom de-serializer for the classes that caused the exception (just two, LocalDateTime and a custom class), and the issue was solved, but, as was pointed out <a href=\"https://stackoverflow.com/questions/61727613/unexpected-behaviour-from-gson\" rel=\"nofollow\">here</a> , seems that there's an undeclared dependence on the module 'jdk.unsupported' that throws this exception.<br>\nProbably it's not a major issue, but I thought you'd like to know. Let me know if you need more code or details</p>","resourcePath":"/google/gson/issues/1695","createdAt":"2020-05-19T10:11:27Z","labels":{"edges":[]}}},{"node":{"number":1981,"url":"https://github.com/google/gson/issues/1981","title":"Missing Constraint: Import-Package: sun.misc","bodyHTML":"<h1 dir=\"auto\">Gson version</h1>\n\n<p dir=\"auto\">The Apache NetBeans project has just tried to migrate from version <code class=\"notranslate\">2.8.5</code> to version <code class=\"notranslate\">2.8.8</code> in the pull request <a href=\"https://github.com/apache/netbeans/pull/3200/files\">PR-3200</a> and the update fails with unsatisfied OSGi missing constraint: <code class=\"notranslate\">Import-Package: sun.misc</code>.</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n\n<p dir=\"auto\">NetBeans project builds &amp; runs primarily on JDK8.</p>\n<h1 dir=\"auto\">Used tools</h1>\n\n<p dir=\"auto\">NetBeans is using home-made Ant based build system. I don't think it matters for this bug report.</p>\n<h1 dir=\"auto\">Description</h1>\n\n<p dir=\"auto\">As <a href=\"https://github.com/apache/netbeans/pull/3200/files\">PR-3200</a> states: The start of NetBeans fails with exception coming from an OSGi container (Apache NetBeans project is using OSGi behind the scene):</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"SEVERE [org.netbeans.modules.netbinox]: framework event com.google.gson type 2\norg.osgi.framework.BundleException: The bundle &quot;com.google.gson_2.8.8 [111]&quot; could not be resolved. Reason: Missing Constraint: Import-Package: sun.misc; version=&quot;0.0.0&quot;\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolverError(AbstractBundle.java:1332)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureException(AbstractBundle.java:1316)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:323)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:390)\n\tat org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1184)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:559)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:544)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:457)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:243)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.internalStart(EquinoxLauncher.java:271)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher$2.run(EquinoxLauncher.java:246)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.start(EquinoxLauncher.java:244)\n\tat org.eclipse.osgi.launch.Equinox.start(Equinox.java:258)\n\tat org.netbeans.core.netigso.Netigso.start(Netigso.java:184)\n\tat org.netbeans.NetigsoHandle.startFramework(NetigsoHandle.java:188)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1458)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1254)\n\tat org.netbeans.core.startup.ModuleList.installNew(ModuleList.java:315)\n\tat org.netbeans.core.startup.ModuleList.trigger(ModuleList.java:251)\n\tat org.netbeans.core.startup.ModuleSystem.restore(ModuleSystem.java:298)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:156)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:125)\n\tat org.netbeans.core.startup.Main.start(Main.java:282)\n\tat org.netbeans.core.startup.TopThreadGroup.run(TopThreadGroup.java:98)\"><pre class=\"notranslate\"><code>SEVERE [org.netbeans.modules.netbinox]: framework event com.google.gson type 2\norg.osgi.framework.BundleException: The bundle \"com.google.gson_2.8.8 [111]\" could not be resolved. Reason: Missing Constraint: Import-Package: sun.misc; version=\"0.0.0\"\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolverError(AbstractBundle.java:1332)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureException(AbstractBundle.java:1316)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:323)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:390)\n\tat org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1184)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:559)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:544)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:457)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:243)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.internalStart(EquinoxLauncher.java:271)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher$2.run(EquinoxLauncher.java:246)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.start(EquinoxLauncher.java:244)\n\tat org.eclipse.osgi.launch.Equinox.start(Equinox.java:258)\n\tat org.netbeans.core.netigso.Netigso.start(Netigso.java:184)\n\tat org.netbeans.NetigsoHandle.startFramework(NetigsoHandle.java:188)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1458)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1254)\n\tat org.netbeans.core.startup.ModuleList.installNew(ModuleList.java:315)\n\tat org.netbeans.core.startup.ModuleList.trigger(ModuleList.java:251)\n\tat org.netbeans.core.startup.ModuleSystem.restore(ModuleSystem.java:298)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:156)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:125)\n\tat org.netbeans.core.startup.Main.start(Main.java:282)\n\tat org.netbeans.core.startup.TopThreadGroup.run(TopThreadGroup.java:98)\n</code></pre></div>\n<h2 dir=\"auto\">Expected behavior</h2>\n\n<p dir=\"auto\">Version 2.8.5 starts. It's manifest doesn't have any unavoidable dependency on <code class=\"notranslate\">sun.misc</code> package. There is</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"unzip -p netbeans/ide/modules/com-google-gson.jar META*MAN* | grep Import.*Package\nImport-Package: com.google.gson.annotations\"><pre class=\"notranslate\"><code>unzip -p netbeans/ide/modules/com-google-gson.jar META*MAN* | grep Import.*Package\nImport-Package: com.google.gson.annotations\n</code></pre></div>\n<p dir=\"auto\">in NetBeans 12.5.</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n\n<p dir=\"auto\">However the new, 2.8.8 version contains explicit dependency on <code class=\"notranslate\">sun.misc</code>:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Import-Package: com.google.gson.annotations,sun.misc\"><pre class=\"notranslate\"><code>Import-Package: com.google.gson.annotations,sun.misc\n</code></pre></div>\n<p dir=\"auto\">The Apache NetBeans project doesn't allow OSGi bundles to access <code class=\"notranslate\">sun.misc</code> package and as such the OSGi container refuses to launch the GSON 2.8.8 bundle.</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n\n\n<p dir=\"auto\">To reproduce I would:</p>\n<ul dir=\"auto\">\n<li>apply <a href=\"https://github.com/apache/netbeans/pull/3200/files\">PR-3200</a></li>\n<li><code class=\"notranslate\">ant build</code> to build NetBeans</li>\n<li><code class=\"notranslate\">ant tryme</code> to launch it</li>\n</ul>\n<p dir=\"auto\">However I assume the problem is clear from the printed error. The <code class=\"notranslate\">sun.misc</code> imported package is causing it. Any compliant OSGi container shall fail on similar error.</p>\n<h1 dir=\"auto\">Exception stack trace</h1>\n\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"SEVERE [org.netbeans.modules.netbinox]: framework event com.google.gson type 2\norg.osgi.framework.BundleException: The bundle &quot;com.google.gson_2.8.8 [111]&quot; could not be resolved. Reason: Missing Constraint: Import-Package: sun.misc; version=&quot;0.0.0&quot;\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolverError(AbstractBundle.java:1332)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureException(AbstractBundle.java:1316)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:323)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:390)\n\tat org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1184)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:559)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:544)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:457)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:243)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.internalStart(EquinoxLauncher.java:271)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher$2.run(EquinoxLauncher.java:246)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.start(EquinoxLauncher.java:244)\n\tat org.eclipse.osgi.launch.Equinox.start(Equinox.java:258)\n\tat org.netbeans.core.netigso.Netigso.start(Netigso.java:184)\n\tat org.netbeans.NetigsoHandle.startFramework(NetigsoHandle.java:188)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1458)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1254)\n\tat org.netbeans.core.startup.ModuleList.installNew(ModuleList.java:315)\n\tat org.netbeans.core.startup.ModuleList.trigger(ModuleList.java:251)\n\tat org.netbeans.core.startup.ModuleSystem.restore(ModuleSystem.java:298)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:156)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:125)\n\tat org.netbeans.core.startup.Main.start(Main.java:282)\n\tat org.netbeans.core.startup.TopThreadGroup.run(TopThreadGroup.java:98)\n\"><pre class=\"notranslate\"><code>SEVERE [org.netbeans.modules.netbinox]: framework event com.google.gson type 2\norg.osgi.framework.BundleException: The bundle \"com.google.gson_2.8.8 [111]\" could not be resolved. Reason: Missing Constraint: Import-Package: sun.misc; version=\"0.0.0\"\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolverError(AbstractBundle.java:1332)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.getResolutionFailureException(AbstractBundle.java:1316)\n\tat org.eclipse.osgi.framework.internal.core.BundleHost.startWorker(BundleHost.java:323)\n\tat org.eclipse.osgi.framework.internal.core.AbstractBundle.resume(AbstractBundle.java:390)\n\tat org.eclipse.osgi.framework.internal.core.Framework.resumeBundle(Framework.java:1184)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:559)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.resumeBundles(StartLevelManager.java:544)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.incFWSL(StartLevelManager.java:457)\n\tat org.eclipse.osgi.framework.internal.core.StartLevelManager.doSetStartLevel(StartLevelManager.java:243)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.internalStart(EquinoxLauncher.java:271)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher$2.run(EquinoxLauncher.java:246)\n\tat java.security.AccessController.doPrivileged(Native Method)\n\tat org.eclipse.osgi.framework.internal.core.EquinoxLauncher.start(EquinoxLauncher.java:244)\n\tat org.eclipse.osgi.launch.Equinox.start(Equinox.java:258)\n\tat org.netbeans.core.netigso.Netigso.start(Netigso.java:184)\n\tat org.netbeans.NetigsoHandle.startFramework(NetigsoHandle.java:188)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1458)\n\tat org.netbeans.ModuleManager.enable(ModuleManager.java:1254)\n\tat org.netbeans.core.startup.ModuleList.installNew(ModuleList.java:315)\n\tat org.netbeans.core.startup.ModuleList.trigger(ModuleList.java:251)\n\tat org.netbeans.core.startup.ModuleSystem.restore(ModuleSystem.java:298)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:156)\n\tat org.netbeans.core.startup.Main.getModuleSystem(Main.java:125)\n\tat org.netbeans.core.startup.Main.start(Main.java:282)\n\tat org.netbeans.core.startup.TopThreadGroup.run(TopThreadGroup.java:98)\n\n</code></pre></div>\n<h1 dir=\"auto\">Workaround</h1>\n<p dir=\"auto\">OSGi specification defines a special property <code class=\"notranslate\">org.osgi.framework.system.packages.extra</code> which makes additional boot classpath packages available to the OSGi bundles. Yes, setting it to:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"$ netbeans/bin/netbeans -J-Dorg.osgi.framework.system.packages.extra=sun.misc\"><pre class=\"notranslate\"><code>$ netbeans/bin/netbeans -J-Dorg.osgi.framework.system.packages.extra=sun.misc\n</code></pre></div>\n<p dir=\"auto\">works. Yes, we can use it, if necessary. But it puzzles me:</p>\n<p dir=\"auto\">Have you introduced the dependency intentionally? Or is it just an accidental by-product of other changes? I can see that the new version of GSON is built with JDK11 from its JAR manifest. Also the BND tools got upgraded to <code class=\"notranslate\">Bnd-5.3.0.202102221516</code> - maybe the added dependency on <code class=\"notranslate\">sun.misc</code> is just a by-product of one of the build changes? It seems the <code class=\"notranslate\">sun.misc</code> code is used just conditionally - e.g. the dependency could be <code class=\"notranslate\">optional:=true</code>. Maybe specifying the optional dependency explicitly to BND is all that's needed to eliminate it?</p>\n<p dir=\"auto\">Thanks for taking a look and helping Apache NetBeans (possibly others) resolve the upgrade issue.</p>","resourcePath":"/google/gson/issues/1981","createdAt":"2021-09-30T12:47:11Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add `JsonWriter` methods `setEscapeNonAsciiChars` and `setEscapeAllControlChars`","url":"https://github.com/google/gson/pull/1984","resourcePath":"/google/gson/pull/1984","createdAt":"2021-10-03T16:43:23Z","number":1984,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonWriter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"}},{"node":{"changeType":"MODIFIED","path":"pom.xml"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984smw1P2gAoYTY3ZDNiMzhjYTdiMWI0Njc4MTZlODQ2MTZkMWMwYzFmNDkyMTc0MA","url":"https://github.com/google/gson/pull/1984/commits/a67d3b38ca7b1b467816e84616d1c0c1f4921740"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":388,"url":"https://github.com/google/gson/issues/388","title":"Enable Escape All Non Ascii chars","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Enable Escape All Non Ascii chars\nlike php json_encode\"><pre class=\"notranslate\"><code>Enable Escape All Non Ascii chars\nlike php json_encode\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">farmer1...@gmail.com</code> on 10 Dec 2011 at 5:22</p>\n<p dir=\"auto\">Attachments:</p>\n<ul dir=\"auto\">\n<li><a href=\"https://storage.googleapis.com/google-code-attachments/google-gson/issue-388/comment-0/escapeNonAscii.patch.diff\" rel=\"nofollow\">escapeNonAscii.patch.diff</a></li>\n</ul>","resourcePath":"/google/gson/issues/388","createdAt":"2015-03-19T18:31:20Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Improve `JsonReader.skipValue()`","url":"https://github.com/google/gson/pull/2062","resourcePath":"/google/gson/pull/2062","createdAt":"2022-01-23T01:54:42Z","number":2062,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonReader.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonReaderPathTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonReaderTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984xc4NZ2gAoMWQ0M2VjZmE4NzAzZTY0YTA4MmRhM2U3YTA2ZTJhZjMwYjY3YjY4YQ","url":"https://github.com/google/gson/pull/2062/commits/1d43ecfa8703e64a082da3e7a06e2af30b67b68a"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":605,"url":"https://github.com/google/gson/issues/605","title":"JsonReader skipValue() can cause an infinite loop","bodyHTML":"<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"What steps will reproduce the problem?\n2. run reader.beginObject() to start reading the stream\n\n3. run reader.skipValue() repeatedly until you try and skip over the &quot;}&quot; to end \nthe json stream.  the last skip will cause an infinite loop.\n\n\nWhat is the expected output? What do you see instead?\nI would expect an exception to be thrown indicating EOF was hit, or that you \ncannot skip over an object/array closing.  Even silently ignoring would be \nbetter then an infinite loop.\n\n\n\nWhat version of the product are you using? On what operating system?\n2.3 w/ Java 1.7.0_67\n\n\n\nPlease provide any additional information below.\n\nJsonReader line 1249 decrements the count to -1 because PEEKED_END_OBJECT is \nencountered on the last skip, but since the next item is EOF, it forever \ninfinite loops waiting for the counter to get incremented back to 0, which \nnever occurs.\n\nI put in a quick hack for my problem by adding an extra if condition\n\n} else if (p == PEEKED_EOF) {\n    count = 0;\n}\n\nProbably a better fix would be to check for count&gt;0 instead of !=0 (assuming \nthat doesn't cause a problem somewhere else, but I am not familiar enough with \nthe code base to try this).\n\nThis code snippet can reproduce the problem:\n\n   public void testEarlyEOF() throws Exception {\n        String json = &quot;{ \\&quot;errors\\&quot;:[ { \\&quot;field\\&quot;:null,\\&quot;code\\&quot;:\\&quot;loanId-not-found\\&quot; } ] }&quot;;\n\n        final InputStream is = new ByteArrayInputStream(json.getBytes());\n\n        Thread t = new Thread() {\n            @Override\n            public void run() {\n                JsonReader reader = new JsonReader(new InputStreamReader(is));\n\n                try {\n                    reader.beginObject();     // start of overall json object\n                    reader.skipValue();       // skip &quot;errors&quot; label\n                    reader.skipValue();       // skip array value for &quot;errors&quot;\n                    reader.skipValue();       // try and skip the closing &quot;}&quot;\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n\n        t.setDaemon(true);\n        t.start();\n\n        t.join(10000);\n        boolean alive = t.isAlive();\n        if (alive) t.interrupt();\n        assertFalse(&quot;should have finished by now, we must be hung&quot;, alive);\n    }\n\n\n\"><pre class=\"notranslate\"><code>What steps will reproduce the problem?\n2. run reader.beginObject() to start reading the stream\n\n3. run reader.skipValue() repeatedly until you try and skip over the \"}\" to end \nthe json stream.  the last skip will cause an infinite loop.\n\n\nWhat is the expected output? What do you see instead?\nI would expect an exception to be thrown indicating EOF was hit, or that you \ncannot skip over an object/array closing.  Even silently ignoring would be \nbetter then an infinite loop.\n\n\n\nWhat version of the product are you using? On what operating system?\n2.3 w/ Java 1.7.0_67\n\n\n\nPlease provide any additional information below.\n\nJsonReader line 1249 decrements the count to -1 because PEEKED_END_OBJECT is \nencountered on the last skip, but since the next item is EOF, it forever \ninfinite loops waiting for the counter to get incremented back to 0, which \nnever occurs.\n\nI put in a quick hack for my problem by adding an extra if condition\n\n} else if (p == PEEKED_EOF) {\n    count = 0;\n}\n\nProbably a better fix would be to check for count&gt;0 instead of !=0 (assuming \nthat doesn't cause a problem somewhere else, but I am not familiar enough with \nthe code base to try this).\n\nThis code snippet can reproduce the problem:\n\n   public void testEarlyEOF() throws Exception {\n        String json = \"{ \\\"errors\\\":[ { \\\"field\\\":null,\\\"code\\\":\\\"loanId-not-found\\\" } ] }\";\n\n        final InputStream is = new ByteArrayInputStream(json.getBytes());\n\n        Thread t = new Thread() {\n            @Override\n            public void run() {\n                JsonReader reader = new JsonReader(new InputStreamReader(is));\n\n                try {\n                    reader.beginObject();     // start of overall json object\n                    reader.skipValue();       // skip \"errors\" label\n                    reader.skipValue();       // skip array value for \"errors\"\n                    reader.skipValue();       // try and skip the closing \"}\"\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n            }\n        };\n\n        t.setDaemon(true);\n        t.start();\n\n        t.join(10000);\n        boolean alive = t.isAlive();\n        if (alive) t.interrupt();\n        assertFalse(\"should have finished by now, we must be hung\", alive);\n    }\n\n\n\n</code></pre></div>\n<p dir=\"auto\">Original issue reported on code.google.com by <code class=\"notranslate\">rocco.ga...@gmail.com</code> on 3 Nov 2014 at 2:15</p>","resourcePath":"/google/gson/issues/605","createdAt":"2015-03-19T18:34:26Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix JsonReader.hasNext() returning true at end of document","url":"https://github.com/google/gson/pull/2061","resourcePath":"/google/gson/pull/2061","createdAt":"2022-01-23T01:03:06Z","number":2061,"mergeCommit":{"oid":"710a76c8b8835e36935c62024001ba6b91ceee01","message":"Fix JsonReader.hasNext() returning true at end of document (#2061)","commitUrl":"https://github.com/google/gson/commit/710a76c8b8835e36935c62024001ba6b91ceee01","parents":{"nodes":[{"oid":"be0a1f4ff74bcd01580887cc9f3ec592d773f24c","message":"Remove Gradle build support (#2063)\n\nBuild script was outdated and not actively maintained anymore."}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonReader.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/bind/JsonTreeReaderTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonReaderTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984xc2Rp2gAoZTYwMTk3MzcwNzM5MmQ5NWI4ZTllOTI3ZWNjNjQwMzdkZWU3ZjE1YQ","url":"https://github.com/google/gson/pull/2061/commits/e601973707392d95b8e9e927ecc64037dee7f15a"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1049,"url":"https://github.com/google/gson/issues/1049","title":"JsonReader.hasNext() returns true at END_DOCUMENT","bodyHTML":"<p dir=\"auto\">JsonReader.hasNext() will return true if we are at the end of the document<br>\n(reader.peek() == JsonToken.END_DOCUMENT)</p>","resourcePath":"/google/gson/issues/1049","createdAt":"2017-03-23T12:51:30Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Issue 1994","url":"https://github.com/google/gson/pull/2031","resourcePath":"/google/gson/pull/2031","createdAt":"2021-12-04T19:32:19Z","number":2031,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/JsonPrimitive.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/JsonParserTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984vZRSq2gAoZjVhYWVjYjRmMzY5MTJlZjM1MzA0MWUyM2I2YzA1MGNkZjIwYzRiNg","url":"https://github.com/google/gson/pull/2031/commits/f5aaecb4f36912ef353041e23b6c050cdf20c4b6"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1994,"url":"https://github.com/google/gson/issues/1994","title":"Integer overflow when calling `fromJson()` on `JsonObject`","bodyHTML":"<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.8.8</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">11</p>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">I'm using <code class=\"notranslate\">fromJson()</code> to convert between a <code class=\"notranslate\">JsonObject</code> and a POJO. When the <code class=\"notranslate\">JsonObject</code> has a <code class=\"notranslate\">long</code> primitive property, and I convert to an <code class=\"notranslate\">int</code> on the POJO, an overflow occurs.</p>\n<p dir=\"auto\">On the other hand, when I convert from string to the POJO, an exception gets thrown (as expected).</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n<p dir=\"auto\">Exception when putting a <code class=\"notranslate\">long</code> primitive value in an <code class=\"notranslate\">int</code> property in <code class=\"notranslate\">fromJson()</code>.</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n<p dir=\"auto\">No exception, but incorrectly set <code class=\"notranslate\">int</code> property.</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package domain.drawing;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\npublic class MyClass {\n\n    public int foo;\n\n    public static void main(String[] args) {\n        JsonObject jsonObject = new JsonObject();\n        jsonObject.addProperty(&quot;foo&quot;, 10000000000L);\n        System.out.println(&quot;-- fromJson on JsonObject: &quot;);\n        System.out.println(new Gson().fromJson(jsonObject, MyClass.class));\n\n        System.out.println(&quot;&quot;);\n        System.out.println(&quot;-- fromJson on string: &quot;);\n        System.out.println(new Gson().fromJson(&quot;{foo: 10000000000}&quot;, MyClass.class));\n    }\n\n    @Override\n    public String toString() {\n        return Integer.toString(foo);\n    }\n}\"><pre class=\"notranslate\"><code>package domain.drawing;\n\nimport com.google.gson.Gson;\nimport com.google.gson.JsonObject;\n\npublic class MyClass {\n\n    public int foo;\n\n    public static void main(String[] args) {\n        JsonObject jsonObject = new JsonObject();\n        jsonObject.addProperty(\"foo\", 10000000000L);\n        System.out.println(\"-- fromJson on JsonObject: \");\n        System.out.println(new Gson().fromJson(jsonObject, MyClass.class));\n\n        System.out.println(\"\");\n        System.out.println(\"-- fromJson on string: \");\n        System.out.println(new Gson().fromJson(\"{foo: 10000000000}\", MyClass.class));\n    }\n\n    @Override\n    public String toString() {\n        return Integer.toString(foo);\n    }\n}\n</code></pre></div>\n<p dir=\"auto\">Running this main method outputs:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"-- fromJson on JsonObject: \n1410065408\n\n-- fromJson on string: \nException in thread &quot;main&quot; com.google.gson.JsonSyntaxException: java.lang.NumberFormatException: Expected an int but was 10000000000 at line 1 column 18 path $.foo\n\tat com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:231)\n\tat com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:221)\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)\n\tat com.google.gson.Gson.fromJson(Gson.java:932)\n\tat com.google.gson.Gson.fromJson(Gson.java:897)\n\tat com.google.gson.Gson.fromJson(Gson.java:846)\n\tat com.google.gson.Gson.fromJson(Gson.java:817)\n\tat domain.drawing.MyClass.main(MyClass.java:18)\nCaused by: java.lang.NumberFormatException: Expected an int but was 10000000000 at line 1 column 18 path $.foo\n\tat com.google.gson.stream.JsonReader.nextInt(JsonReader.java:1171)\n\tat com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:229)\n\t... 8 more\n\nProcess finished with exit code 1\"><pre class=\"notranslate\"><code>-- fromJson on JsonObject: \n1410065408\n\n-- fromJson on string: \nException in thread \"main\" com.google.gson.JsonSyntaxException: java.lang.NumberFormatException: Expected an int but was 10000000000 at line 1 column 18 path $.foo\n\tat com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:231)\n\tat com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:221)\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:131)\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:222)\n\tat com.google.gson.Gson.fromJson(Gson.java:932)\n\tat com.google.gson.Gson.fromJson(Gson.java:897)\n\tat com.google.gson.Gson.fromJson(Gson.java:846)\n\tat com.google.gson.Gson.fromJson(Gson.java:817)\n\tat domain.drawing.MyClass.main(MyClass.java:18)\nCaused by: java.lang.NumberFormatException: Expected an int but was 10000000000 at line 1 column 18 path $.foo\n\tat com.google.gson.stream.JsonReader.nextInt(JsonReader.java:1171)\n\tat com.google.gson.internal.bind.TypeAdapters$7.read(TypeAdapters.java:229)\n\t... 8 more\n\nProcess finished with exit code 1\n</code></pre></div>","resourcePath":"/google/gson/issues/1994","createdAt":"2021-10-15T12:12:33Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix `Gson.newJsonWriter` ignoring lenient and HTML-safe setting","url":"https://github.com/google/gson/pull/1989","resourcePath":"/google/gson/pull/1989","createdAt":"2021-10-11T13:33:25Z","number":1989,"mergeCommit":{"oid":"deaa3a6cd9f4676e0c826eadadd2f3d6dc857096","message":"Fix `Gson.newJsonWriter` ignoring lenient and HTML-safe setting (#1989)\n\n* Improve Gson newJsonWriter and newJsonReader documentation\r\n\r\n* Consider lenient and HTML-safe setting for Gson.newJsonWriter\r\n\r\n* Remove empty line between imports","commitUrl":"https://github.com/google/gson/commit/deaa3a6cd9f4676e0c826eadadd2f3d6dc857096","parents":{"nodes":[{"oid":"e0de45ff69ba3daacc3b7623cc74fc69a4eaf6d0","message":"Delete unused LinkedHashTreeMap (#1992)\n\nClass seems to be unused since commit f29d5bc37b52c4b8d2ad15a10bb0c7f684c1d45d.\r\nGson currently only uses LinkedTreeMap."}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/Gson.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/GsonTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984tBNb42gAoMzBkOWFlMGRjZjE0ODc3ZDY5YjVmYTNjMTZjZjFkMGM3ZTMzOGM5ZA","url":"https://github.com/google/gson/pull/1989/commits/30d9ae0dcf14877d69b5fa3c16cf1d0c7e338c9d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1452,"url":"https://github.com/google/gson/issues/1452","title":"newJsonWriter not return a new JSON writer configured for the settings on this Gson instance!","bodyHTML":"<p dir=\"auto\">Hi,</p>\n<p dir=\"auto\">while working on my project with Retrofit, I found an issue with <code class=\"notranslate\">newJsonWriter</code> method in Gson class.</p>\n<p dir=\"auto\">I used <code class=\"notranslate\">GsonConverterFactory</code> which is a wrapper class of Gson in Retrofit.</p>\n<p dir=\"auto\">Gson enables to escape HTML characters as a default.</p>\n<p dir=\"auto\">However, Retrofit doesn't encode the request body as the same as Gson does.</p>\n<p dir=\"auto\">Here is GsonConverterFactory code from Retrofit. I can see there is no any other options it gives to gson.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public final class GsonConverterFactory extends Converter.Factory {\n  /**\n   * Create an instance using a default {@link Gson} instance for conversion. Encoding to JSON and\n   * decoding from JSON (when no charset is specified by a header) will use UTF-8.\n   */\n  public static GsonConverterFactory create() {\n    return create(new Gson());\n  }\n\n  /**\n   * Create an instance using {@code gson} for conversion. Encoding to JSON and\n   * decoding from JSON (when no charset is specified by a header) will use UTF-8.\n   */\n  @SuppressWarnings(&quot;ConstantConditions&quot;) // Guarding public API nullability.\n  public static GsonConverterFactory create(Gson gson) {\n    if (gson == null) throw new NullPointerException(&quot;gson == null&quot;);\n    return new GsonConverterFactory(gson);\n  }\n\n  private final Gson gson;\n\n  private GsonConverterFactory(Gson gson) {\n    this.gson = gson;\n  }\n\n  @Override\n  public Converter&lt;ResponseBody, ?&gt; responseBodyConverter(Type type, Annotation[] annotations,\n      Retrofit retrofit) {\n    TypeAdapter&lt;?&gt; adapter = gson.getAdapter(TypeToken.get(type));\n    return new GsonResponseBodyConverter&lt;&gt;(gson, adapter);\n  }\n\n  @Override\n  public Converter&lt;?, RequestBody&gt; requestBodyConverter(Type type,\n      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {\n    TypeAdapter&lt;?&gt; adapter = gson.getAdapter(TypeToken.get(type));\n    return new GsonRequestBodyConverter&lt;&gt;(gson, adapter);\n  }\n}\"><pre class=\"notranslate\"><code>public final class GsonConverterFactory extends Converter.Factory {\n  /**\n   * Create an instance using a default {@link Gson} instance for conversion. Encoding to JSON and\n   * decoding from JSON (when no charset is specified by a header) will use UTF-8.\n   */\n  public static GsonConverterFactory create() {\n    return create(new Gson());\n  }\n\n  /**\n   * Create an instance using {@code gson} for conversion. Encoding to JSON and\n   * decoding from JSON (when no charset is specified by a header) will use UTF-8.\n   */\n  @SuppressWarnings(\"ConstantConditions\") // Guarding public API nullability.\n  public static GsonConverterFactory create(Gson gson) {\n    if (gson == null) throw new NullPointerException(\"gson == null\");\n    return new GsonConverterFactory(gson);\n  }\n\n  private final Gson gson;\n\n  private GsonConverterFactory(Gson gson) {\n    this.gson = gson;\n  }\n\n  @Override\n  public Converter&lt;ResponseBody, ?&gt; responseBodyConverter(Type type, Annotation[] annotations,\n      Retrofit retrofit) {\n    TypeAdapter&lt;?&gt; adapter = gson.getAdapter(TypeToken.get(type));\n    return new GsonResponseBodyConverter&lt;&gt;(gson, adapter);\n  }\n\n  @Override\n  public Converter&lt;?, RequestBody&gt; requestBodyConverter(Type type,\n      Annotation[] parameterAnnotations, Annotation[] methodAnnotations, Retrofit retrofit) {\n    TypeAdapter&lt;?&gt; adapter = gson.getAdapter(TypeToken.get(type));\n    return new GsonRequestBodyConverter&lt;&gt;(gson, adapter);\n  }\n}\n</code></pre></div>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final class GsonRequestBodyConverter&lt;T&gt; implements Converter&lt;T, RequestBody&gt; {\n  private static final MediaType MEDIA_TYPE = MediaType.get(&quot;application/json; charset=UTF-8&quot;);\n  private static final Charset UTF_8 = Charset.forName(&quot;UTF-8&quot;);\n\n  private final Gson gson;\n  private final TypeAdapter&lt;T&gt; adapter;\n\n  GsonRequestBodyConverter(Gson gson, TypeAdapter&lt;T&gt; adapter) {\n    this.gson = gson;\n    this.adapter = adapter;\n  }\n\n  @Override public RequestBody convert(T value) throws IOException {\n    Buffer buffer = new Buffer();\n    Writer writer = new OutputStreamWriter(buffer.outputStream(), UTF_8);\n    JsonWriter jsonWriter = gson.newJsonWriter(writer);\n    adapter.write(jsonWriter, value);\n    jsonWriter.close();\n    return RequestBody.create(MEDIA_TYPE, buffer.readByteString());\n  }\n}\n\"><pre class=\"notranslate\"><code>final class GsonRequestBodyConverter&lt;T&gt; implements Converter&lt;T, RequestBody&gt; {\n  private static final MediaType MEDIA_TYPE = MediaType.get(\"application/json; charset=UTF-8\");\n  private static final Charset UTF_8 = Charset.forName(\"UTF-8\");\n\n  private final Gson gson;\n  private final TypeAdapter&lt;T&gt; adapter;\n\n  GsonRequestBodyConverter(Gson gson, TypeAdapter&lt;T&gt; adapter) {\n    this.gson = gson;\n    this.adapter = adapter;\n  }\n\n  @Override public RequestBody convert(T value) throws IOException {\n    Buffer buffer = new Buffer();\n    Writer writer = new OutputStreamWriter(buffer.outputStream(), UTF_8);\n    JsonWriter jsonWriter = gson.newJsonWriter(writer);\n    adapter.write(jsonWriter, value);\n    jsonWriter.close();\n    return RequestBody.create(MEDIA_TYPE, buffer.readByteString());\n  }\n}\n\n</code></pre></div>\n<p dir=\"auto\">As above, it uses <code class=\"notranslate\">gson.newJsonWriter(writer)</code>.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  /**\n   * Returns a new JSON writer configured for the settings on this Gson instance.\n   */\n  public JsonWriter newJsonWriter(Writer writer) throws IOException {\n    if (generateNonExecutableJson) {\n      writer.write(JSON_NON_EXECUTABLE_PREFIX);\n    }\n    JsonWriter jsonWriter = new JsonWriter(writer);\n    if (prettyPrinting) {\n      jsonWriter.setIndent(&quot;  &quot;);\n    }\n    jsonWriter.setSerializeNulls(serializeNulls);\n    return jsonWriter;\n  }\"><pre class=\"notranslate\"><code>  /**\n   * Returns a new JSON writer configured for the settings on this Gson instance.\n   */\n  public JsonWriter newJsonWriter(Writer writer) throws IOException {\n    if (generateNonExecutableJson) {\n      writer.write(JSON_NON_EXECUTABLE_PREFIX);\n    }\n    JsonWriter jsonWriter = new JsonWriter(writer);\n    if (prettyPrinting) {\n      jsonWriter.setIndent(\"  \");\n    }\n    jsonWriter.setSerializeNulls(serializeNulls);\n    return jsonWriter;\n  }\n</code></pre></div>\n<p dir=\"auto\">I look through <code class=\"notranslate\">newJsonWriter</code>, but it does not apparently configure whole settings from Gson.</p>\n<p dir=\"auto\">For example, it is <code class=\"notranslate\">HtmlSafe</code> option in my case.</p>\n<p dir=\"auto\">I guess HtmlSafe is garanteed as true in Gson, though, it can be false in JsonWriter when not using `setHtmlSafe(true)'.</p>\n<p dir=\"auto\">Could you check this issue?</p>","resourcePath":"/google/gson/issues/1452","createdAt":"2019-01-08T01:58:58Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Switch to GitHub Actions","url":"https://github.com/google/gson/pull/1974","resourcePath":"/google/gson/pull/1974","createdAt":"2021-09-24T14:47:06Z","number":1974,"mergeCommit":{"oid":"3b7835a18b7ce999fe79ad12cd85014642f30968","message":"Switch to GitHub Actions (#1974)","commitUrl":"https://github.com/google/gson/commit/3b7835a18b7ce999fe79ad12cd85014642f30968","parents":{"nodes":[{"oid":"aa5554e69a2d5ee7e557b3cc1f5d68275fd4c1ab","message":"Don't exclude static local classes (#1969)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":".github/workflows/build.yml"}},{"node":{"changeType":"DELETED","path":".travis.yml"}},{"node":{"changeType":"MODIFIED","path":"README.md"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984sPlOT2gAoZjVhMjg5Y2Y5ZDllMzEzNjk2YTI1MjViNGZmZWRmNTQ1MmRiYjk4Yg","url":"https://github.com/google/gson/pull/1974/commits/f5a289cf9d9e313696a2525b4ffedf5452dbb98b"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1971,"url":"https://github.com/google/gson/issues/1971","title":"Travis CI is not running / switch to GitHub Actions","bodyHTML":"<p dir=\"auto\">It appears Travis CI has not been running for the latest commits, the last run was on September 1st, see <a href=\"https://travis-ci.org/github/google/gson/builds\" rel=\"nofollow\">build history</a>. Maybe this is related to the migration from travis-ci.org to travis-ci.com?</p>\n<p dir=\"auto\">What do you think about switching to GitHub Actions instead? Its syntax is also pretty simple and the build commands for this project are not complex.<br>\nShould I create a pull request for that?</p>\n<p dir=\"auto\">The only question is why Travis CI currently runs <code class=\"notranslate\">mvn install</code> without tests and then <code class=\"notranslate\">mvn test</code>:<br>\n<div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/gson/blob/aa5554e69a2d5ee7e557b3cc1f5d68275fd4c1ab/.travis.yml#L6-L7\">gson/.travis.yml</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 6 to 7\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/google/gson/commit/aa5554e69a2d5ee7e557b3cc1f5d68275fd4c1ab\">aa5554e</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L6\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"6\"></td>\n          <td id=\"LC6\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-ent\">install</span>: <span class=\"pl-s\">mvn -f gson install -DskipTests=true</span> </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L7\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"7\"></td>\n          <td id=\"LC7\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-ent\">script</span>: <span class=\"pl-s\">mvn -f gson test</span> </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">We could keep that, but it might make sense to simplify this to just run <code class=\"notranslate\">mvn install</code> in the root directory of this repository.</p>","resourcePath":"/google/gson/issues/1971","createdAt":"2021-09-18T01:26:40Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Prefer existing adapter for concurrent `Gson.getAdapter` calls","url":"https://github.com/google/gson/pull/2153","resourcePath":"/google/gson/pull/2153","createdAt":"2022-07-25T19:12:13Z","number":2153,"mergeCommit":{"oid":"4552db2630b6d506ac7e212b337f818169f3c03b","message":"Prefer existing adapter for concurrent `Gson.getAdapter` calls (#2153)\n\nAdditionally fail fast for null as type (previous null support was broken\r\nand would have thrown NullPointerException further below anyways).","commitUrl":"https://github.com/google/gson/commit/4552db2630b6d506ac7e212b337f818169f3c03b","parents":{"nodes":[{"oid":"a45c55739f4e5eb25e9b67a8b7e2bfad25851fb6","message":"Improve ArrayTypeAdapter for Object[] (#1716)\n\n* Improve ArrayTypeAdapter for Object[]\r\n\r\n* Fix typo in test method names"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/Gson.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/GsonTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA9848D9Wo2gAoNmIwYjhlN2FiMjJlMzY4MjRmNWU4YzVlNzI2YzFmOGQ2YjY1OGM1Zg","url":"https://github.com/google/gson/pull/2153/commits/6b0b8e7ab22e36824f5e8c5e726c1f8d6b658c5f"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1831,"url":"https://github.com/google/gson/issues/1831","title":"Gson.getAdapter((TypeToken) null) throws exception","bodyHTML":"<p dir=\"auto\">The <code class=\"notranslate\">Gson</code> class has logic for handling <code class=\"notranslate\">null</code> arguments for <code class=\"notranslate\">getAdapter(TypeToken)</code>, see:<br>\n<div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/gson/src/main/java/com/google/gson/Gson.java#L434\">gson/gson/src/main/java/com/google/gson/Gson.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n         Line 434\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/google/gson/commit/ceae88bd6667f4263bbe02e6b3710b8a683906a2\">ceae88b</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L434\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"434\"></td>\n          <td id=\"LC434\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-smi\">TypeAdapter</span>&lt;?&gt; <span class=\"pl-s1\">cached</span> = <span class=\"pl-s1\">typeTokenCache</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s1\">type</span> == <span class=\"pl-c1\">null</span> ? <span class=\"pl-c1\">NULL_KEY_SURROGATE</span> : <span class=\"pl-s1\">type</span>); </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">However, it appears the pull request which tried to keep the support for <code class=\"notranslate\">null</code> arguments also broke it due to commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/google/gson/commit/31dcfa3ad6fff0ee64f0fc5b8a1712c3ef3dcf95/hovercard\" href=\"https://github.com/google/gson/commit/31dcfa3ad6fff0ee64f0fc5b8a1712c3ef3dcf95\"><tt>31dcfa3</tt></a> because it does not reassign a non-<code class=\"notranslate\">null</code> value to the <code class=\"notranslate\">type</code> argument anymore which later on in the method causes a <code class=\"notranslate\">NullPointerException</code>.</p>\n<p dir=\"auto\">However that was 4 years ago and it appears support for <code class=\"notranslate\">null</code> arguments might not have been used much (if at all; I did not find existing issues about this here on GitHub). Therefore maybe it would be better instead of fixing this issue to simply remove <code class=\"notranslate\">null</code> handling for <code class=\"notranslate\">getAdapter(TypeToken)</code> completely and to throw an exception on purpose.</p>","resourcePath":"/google/gson/issues/1831","createdAt":"2020-12-01T23:27:26Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Support EnumMap deserialization","url":"https://github.com/google/gson/pull/2071","resourcePath":"/google/gson/pull/2071","createdAt":"2022-02-03T23:01:50Z","number":2071,"mergeCommit":{"oid":"565b7a198e026596c3fd18304f86537ae20f9a3f","message":"Support EnumMap deserialization (#2071)","commitUrl":"https://github.com/google/gson/commit/565b7a198e026596c3fd18304f86537ae20f9a3f","parents":{"nodes":[{"oid":"e2e851c9bc692cec68ba7b0cbb002f82b4a229e4","message":"Add LazilyParsedNumber default adapter (#2060)\n\n* Add LazilyParsedNumber default adapter\r\n\r\n* Validate JsonWriter.value(Number) argument\r\n\r\n* Fix incorrect JSON number pattern, extend tests"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/EnumTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984yDgLZ2gAoZjYxN2Q1ODIzNjNiZjc2M2Q1OGYxODI5YzU4NmQ4OTgzYzdlM2IyZA","url":"https://github.com/google/gson/pull/2071/commits/f617d582363bf763d58f1829c586d8983c7e3b2d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2067,"url":"https://github.com/google/gson/issues/2067","title":"`EnumMap` deserialization fails with `ClassCastException`","bodyHTML":"<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\"><a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/google/gson/commit/e2e851c9bc692cec68ba7b0cbb002f82b4a229e4/hovercard\" href=\"https://github.com/google/gson/commit/e2e851c9bc692cec68ba7b0cbb002f82b4a229e4\"><tt>e2e851c</tt></a></p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">openjdk version \"11.0.13\" 2021-10-19<br>\nOpenJDK Runtime Environment Temurin-11.0.13+8 (build 11.0.13+8)<br>\nOpenJDK 64-Bit Server VM Temurin-11.0.13+8 (build 11.0.13+8, mixed mode)</p>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\"><code class=\"notranslate\">EnumMap</code> deserialization fails with <code class=\"notranslate\">ClassCastException</code>:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.ClassCastException: class java.util.LinkedHashMap cannot be cast to class java.util.EnumMap\"><pre class=\"notranslate\"><code>java.lang.ClassCastException: class java.util.LinkedHashMap cannot be cast to class java.util.EnumMap\n</code></pre></div>\n<p dir=\"auto\">The underlying issue is related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"624353159\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1708\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/1708/hovercard\" href=\"https://github.com/google/gson/issues/1708\">#1708</a>, it appears special handling for <code class=\"notranslate\">EnumMap</code> is missing.<br>\n(I am a bit surprised that this issue has not been mentioned here anywhere before.)</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n<p dir=\"auto\">Test case:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private static enum MyEnum {\n  VALUE1, VALUE2\n}\n\npublic void testEnumMap() throws Exception {\n  EnumMap&lt;MyEnum, String&gt; map = new EnumMap&lt;MyEnum, String&gt;(MyEnum.class);\n  map.put(MyEnum.VALUE1, &quot;test&quot;);\n  String json = gson.toJson(map);\n  assertEquals(&quot;{\\&quot;VALUE1\\&quot;:\\&quot;test\\&quot;}&quot;, json);\n\n  Type type = new TypeToken&lt;EnumMap&lt;MyEnum, String&gt;&gt;() {}.getType();\n  EnumMap&lt;?, ?&gt; actualMap = gson.fromJson(&quot;{\\&quot;VALUE1\\&quot;:\\&quot;test\\&quot;}&quot;, type);\n  Map&lt;?, ?&gt; expectedMap = Collections.singletonMap(MyEnum.VALUE1, &quot;test&quot;);\n  assertEquals(expectedMap, actualMap);\n}\"><pre><span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">enum</span> <span class=\"pl-smi\">MyEnum</span> {\n  <span class=\"pl-c1\">VALUE1</span>, <span class=\"pl-c1\">VALUE2</span>\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testEnumMap</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">Exception</span> {\n  <span class=\"pl-smi\">EnumMap</span>&lt;<span class=\"pl-smi\">MyEnum</span>, <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">map</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">EnumMap</span>&lt;<span class=\"pl-smi\">MyEnum</span>, <span class=\"pl-smi\">String</span>&gt;(<span class=\"pl-smi\">MyEnum</span>.<span class=\"pl-s1\">class</span>);\n  <span class=\"pl-s1\">map</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-smi\">MyEnum</span>.<span class=\"pl-c1\">VALUE1</span>, <span class=\"pl-s\">\"test\"</span>);\n  <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s1\">gson</span>.<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">map</span>);\n  <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s\">\"{\\\"VALUE1\\\":\\\"test\\\"}\"</span>, <span class=\"pl-s1\">json</span>);\n\n  <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">type</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeToken</span>&lt;<span class=\"pl-smi\">EnumMap</span>&lt;<span class=\"pl-smi\">MyEnum</span>, <span class=\"pl-smi\">String</span>&gt;&gt;() {}.<span class=\"pl-en\">getType</span>();\n  <span class=\"pl-smi\">EnumMap</span>&lt;?, ?&gt; <span class=\"pl-s1\">actualMap</span> = <span class=\"pl-s1\">gson</span>.<span class=\"pl-en\">fromJson</span>(<span class=\"pl-s\">\"{\\\"VALUE1\\\":\\\"test\\\"}\"</span>, <span class=\"pl-s1\">type</span>);\n  <span class=\"pl-smi\">Map</span>&lt;?, ?&gt; <span class=\"pl-s1\">expectedMap</span> = <span class=\"pl-s1\">Collections</span>.<span class=\"pl-en\">singletonMap</span>(<span class=\"pl-smi\">MyEnum</span>.<span class=\"pl-c1\">VALUE1</span>, <span class=\"pl-s\">\"test\"</span>);\n  <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s1\">expectedMap</span>, <span class=\"pl-s1\">actualMap</span>);\n}</pre></div>\n<h1 dir=\"auto\">Exception stack trace</h1>\n<p dir=\"auto\">Not really useful because <code class=\"notranslate\">ClassCastException</code> occurs in user code.</p>","resourcePath":"/google/gson/issues/2067","createdAt":"2022-01-29T19:10:34Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Perform numeric conversion for primitive numeric type adapters","url":"https://github.com/google/gson/pull/2158","resourcePath":"/google/gson/pull/2158","createdAt":"2022-07-26T15:20:13Z","number":2158,"mergeCommit":null,"potentialMergeCommit":{"oid":"77e5c51fb01a68b4eab128dd4e5fea8b1f7451bf","message":"Merge 0b6937f6963774b7a86195948e9542698171b9bb into a1d2ebc8b51a3a0df8b15c98f47d5ac95cf7f7b0","commitUrl":"https://github.com/google/gson/commit/77e5c51fb01a68b4eab128dd4e5fea8b1f7451bf","parents":{"nodes":[{"oid":"a1d2ebc8b51a3a0df8b15c98f47d5ac95cf7f7b0","message":"Fix #1702: Gson.toJson creates CharSequence which does not implement toString (#1703)\n\n* Gson.toJson creates CharSequence which does not implement toString\r\n\r\n* Improve Streams.AppendableWriter.CurrentWrite test\r\n\r\n* Make setChars package-private"},{"oid":"0b6937f6963774b7a86195948e9542698171b9bb","message":"Perform numeric conversion for primitive numeric type adapters\n\nThis should probably not be visible to the user unless they use the\nnon-typesafe `Gson.toJson(Object, Type)` where unrelated number types can\nbe used, or when malformed generic containers are used. For example a\n`List<Byte>` containing a Float.\n\nThis change also has the advantage of avoiding `JsonWriter.value(Number)`\nfor primitive type adapters. That method has some overhead because it needs\nto make sure that the value is a valid JSON number. However, for primitive\nnumbers this check is redundant."}]}},"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/Gson.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/TypeAdapters.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/PrimitiveTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA9848Hu9F2gAoMGI2OTM3ZjY5NjM3NzRiN2E4NjE5NTk0OGU5NTQyNjk4MTcxYjliYg","url":"https://github.com/google/gson/pull/2158/commits/0b6937f6963774b7a86195948e9542698171b9bb"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2156,"url":"https://github.com/google/gson/issues/2156","title":"Primitive type adapters don't perform numeric conversion during serialization","bodyHTML":"<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.9.0</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">Java 17</p>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">The built-in adapters for primitive types don't perform numeric conversion for serialization. This is most obvious when using Gson's non-typesafe method <code class=\"notranslate\">Gson.toJson(Object, Type)</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"System.out.println(new Gson().toJson(1.5, byte.class));\"><pre><span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">toJson</span>(<span class=\"pl-c1\">1.5</span>, <span class=\"pl-smi\">byte</span>.<span class=\"pl-k\">class</span>));</pre></div>\n<p dir=\"auto\">Even though the adapter for <code class=\"notranslate\">byte</code> should be used, Gson nonetheless emits <code class=\"notranslate\">1.5</code> as output.</p>\n<p dir=\"auto\">I noticed that while trying to refactor the primitive type adapters to directly call the primitive <code class=\"notranslate\">JsonWriter.value</code> methods instead of <code class=\"notranslate\">JsonWriter.value(Number)</code> due to the overhead for checking if the string representation is a valid JSON number.</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n<p dir=\"auto\">Either narrowing / widening conversion should be performed or an exception should be thrown.<br>\n(Or are there legit use cases for this?)</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n<p dir=\"auto\">Gson just emits the <code class=\"notranslate\">Number.toString()</code> result, even if that does not match the type of the requested adapter.</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"System.out.println(new Gson().toJson(1.5, byte.class));\"><pre><span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>().<span class=\"pl-en\">toJson</span>(<span class=\"pl-c1\">1.5</span>, <span class=\"pl-smi\">byte</span>.<span class=\"pl-k\">class</span>));</pre></div>","resourcePath":"/google/gson/issues/2156","createdAt":"2022-07-25T21:34:00Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add explicit support for floats in JsonWriter.","url":"https://github.com/google/gson/pull/2130","resourcePath":"/google/gson/pull/2130","createdAt":"2022-06-08T21:40:03Z","number":2130,"mergeCommit":{"oid":"96ab171eb48dcea94fd9b8f425f65c531e6c3aad","message":"Add explicit support for floats in JsonWriter. (#2130)\n\nThis avoids floats being treated as doubles and having an unwarranted level of precision.\r\n\r\nFixes #1127.","commitUrl":"https://github.com/google/gson/commit/96ab171eb48dcea94fd9b8f425f65c531e6c3aad","parents":{"nodes":[{"oid":"15b9fa9c31d4137ad6d46f746524a5aa43eefd28","message":"Bump maven-surefire-plugin from 3.0.0-M6 to 3.0.0-M7 (#2128)\n\nBumps [maven-surefire-plugin](https://github.com/apache/maven-surefire) from 3.0.0-M6 to 3.0.0-M7.\r\n- [Release notes](https://github.com/apache/maven-surefire/releases)\r\n- [Commits](https://github.com/apache/maven-surefire/compare/surefire-3.0.0-M6...surefire-3.0.0-M7)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.apache.maven.plugins:maven-surefire-plugin\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonWriter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/stream/JsonWriterTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA9845WeIo2gAoYzdkYmM1NTI4NDhiNGZhYzlhMGE4YzIxZTUxMzUzNTEyN2IxZjkwNQ","url":"https://github.com/google/gson/pull/2130/commits/c7dbc552848b4fac9a0a8c21e513535127b1f905"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1127,"url":"https://github.com/google/gson/issues/1127","title":"JsonWriter don't work correctly with float","bodyHTML":"<p dir=\"auto\">float x = 3.723379;<br>\nJsonWriter writer = ...<br>\nwriter.value(x); //is will call value(double value), so it will wrong<br>\nresult is 3.723378896713257</p>\n<p dir=\"auto\">Please add new function for float.<br>\nThank you.</p>","resourcePath":"/google/gson/issues/1127","createdAt":"2017-07-29T05:33:46Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Remove usage of oss-parent Maven parent and update `ReleaseProcess.md`","url":"https://github.com/google/gson/pull/2159","resourcePath":"/google/gson/pull/2159","createdAt":"2022-07-26T21:54:34Z","number":2159,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":".github/workflows/build.yml"}},{"node":{"changeType":"MODIFIED","path":"ReleaseProcess.md"}},{"node":{"changeType":"MODIFIED","path":"extras/pom.xml"}},{"node":{"changeType":"MODIFIED","path":"gson/pom.xml"}},{"node":{"changeType":"MODIFIED","path":"metrics/pom.xml"}},{"node":{"changeType":"MODIFIED","path":"pom.xml"}},{"node":{"changeType":"MODIFIED","path":"proto/pom.xml"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA9848JBFN2gAoNTEwM2MzMGU4ODY2NzMxYzE3OTYzZTg4ZTAxOGM0Njk1MjRhYjdmYg","url":"https://github.com/google/gson/pull/2159/commits/5103c30e8866731c17963e88e018c469524ab7fb"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1605,"url":"https://github.com/google/gson/issues/1605","title":"Remove oss-parent pom","bodyHTML":"<p dir=\"auto\">It's <a href=\"https://github.com/sonatype/oss-parents\">deprecated</a> and a source of flakes:</p>\n<p dir=\"auto\">[FATAL] Non-resolvable parent POM for com.google.code.gson:gson-parent:2.8.7-SNAPSHOT: Could not transfer artifact org.sonatype.oss:oss-parent:pom:7 from/to google-maven-central (<a href=\"https://maven-central.storage-download.googleapis.com/repos/central/data/\" rel=\"nofollow\">https://maven-central.storage-download.googleapis.com/repos/central/data/</a>): sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target and 'parent.relativePath' points at wrong local POM @ com.google.code.gson:gson-parent:2.8.7-SNAPSHOT, /home/travis/build/google/gson/pom.xml, line 6, column 11<br>\n@</p>","resourcePath":"/google/gson/issues/1605","createdAt":"2019-11-02T13:57:19Z","labels":{"edges":[{"node":{"name":"enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Improve settings propagation for temporary `JsonTreeReader` and `JsonTreeWriter`","url":"https://github.com/google/gson/pull/2151","resourcePath":"/google/gson/pull/2151","createdAt":"2022-07-24T19:59:26Z","number":2151,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"extras/src/test/java/com/google/gson/graph/GraphAdapterBuilderTest.java"}},{"node":{"changeType":"MODIFIED","path":"extras/src/test/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactoryTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/TypeAdapter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/JsonTreeReader.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/JsonTreeWriter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonReader.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonWriter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/TypeAdapterTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/MapAsArrayTypeAdapterTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA9847_7i_2gAoNTYxNWI4ODA0OGFhMjUyNjE4YWM4ZmRkZWYyNmI4M2QzYjFmNmJhYg","url":"https://github.com/google/gson/pull/2151/commits/5615b88048aa252618ac8fddef26b83d3b1f6bab"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":676,"url":"https://github.com/google/gson/issues/676","title":"`RuntimeTypeAdapterFactory` overrides explicit control over `serializeNulls` behavior of contained objects","bodyHTML":"<p dir=\"auto\">By default <code class=\"notranslate\">serializeNulls</code> behavior is off for GSON which is useful for building compact JSON. However, for specific types of objects its necessary to switch this on to make a distinction between (a) properties for which no explicit value has been assigned vs (b) properties for which a <code class=\"notranslate\">null</code> value has been explicitly assigned.</p>\n<p dir=\"auto\">One way this is achieved is to use a <code class=\"notranslate\">TypeAdapter</code> implementation to temporarily override the setting of this behavior on the <code class=\"notranslate\">JsonWriter</code>.</p>\n<p dir=\"auto\">E.g.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"static class TypeAdapterForSomeObject extends TypeAdapter&lt;SomeObject&gt; {\n\n    @Override\n    public void write(JsonWriter out, SomeObject value) throws IOException {\n        boolean oldSerializeNulls = out.getSerializeNulls();\n        try {\n            out.setSerializeNulls(true);\n            // serialization impl...\n        } finally {\n            out.setSerializeNulls(oldSerializeNulls);\n        }\n    }\n\n    // ...\n\n}\"><pre class=\"notranslate\"><code>static class TypeAdapterForSomeObject extends TypeAdapter&lt;SomeObject&gt; {\n\n    @Override\n    public void write(JsonWriter out, SomeObject value) throws IOException {\n        boolean oldSerializeNulls = out.getSerializeNulls();\n        try {\n            out.setSerializeNulls(true);\n            // serialization impl...\n        } finally {\n            out.setSerializeNulls(oldSerializeNulls);\n        }\n    }\n\n    // ...\n\n}\n</code></pre></div>\n<p dir=\"auto\">However, when such a type is part of another class which is serialized within another wrapper object which relies on a <code class=\"notranslate\">RuntimeTypeAdapterFactory</code>, these explicit null override behavior can be lost. That is because, the implementation of <code class=\"notranslate\">TypeAdapter.write</code> initially serializes the outer value using a temporary <code class=\"notranslate\">JsonTreeWriter</code> into a <code class=\"notranslate\">JsonElement</code>. This temporary writer invokes the custom TypeAdapter and thus accurately collects the explicit <code class=\"notranslate\">null</code> values. However, <code class=\"notranslate\">RuntimeTypeAdapterFactory</code> then serializes the <code class=\"notranslate\">JsonElement</code> using the externally provided <code class=\"notranslate\">JsonWriter</code> using its own <code class=\"notranslate\">serializeNulls</code> configuration and therefore the explicit <code class=\"notranslate\">null</code> values in the element are discarded.</p>\n<p dir=\"auto\">A full test is included below:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class Tests {\n\n     // define value requiring explicit nulls\n    static class Inner {\n        String prop;\n        Inner(String prop) {\n            this.prop = prop;\n        }\n    }\n\n    // define adapter to switch on explicit null\n    static class TypeAdapterForInner extends TypeAdapter&lt;Inner&gt; {\n\n        @Override\n        public void write(JsonWriter out, Inner value) throws IOException {\n            boolean oldSerializeNulls = out.getSerializeNulls();\n            try {\n                out.setSerializeNulls(true);\n                out.beginObject().name(&quot;prop&quot;).value(value.prop).endObject();\n            } finally {\n                out.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n\n        @Override\n        public Inner read(JsonReader in) throws IOException {\n            in.beginObject();\n            in.nextName();\n            String value = null;\n            if (in.peek() == JsonToken.STRING) {\n                value = in.nextString();\n            } else {\n                in.nextNull();\n            }\n            in.endObject();\n            return new Inner(value);\n        }\n\n    }\n\n    // define wrapper type hierarchy for use  by RuntimeTypeAdapterFactory\n    static abstract class Outer {\n        Inner wrapped;\n        Outer(Inner wrapped) {\n            this.wrapped = wrapped;\n        }\n    }\n\n    static class OuterA extends Outer {\n        OuterA(Inner wrapped) {\n            super(wrapped);\n        }\n    }\n\n    static class OuterB extends Outer {\n        OuterB(Inner wrapped) {\n            super(wrapped);\n        }\n    }\n\n    @Test\n    public void testSerializingToPreserveNullsInEmbeddedObjects() {\n        TypeAdapterFactory metaWrapperAdapter = RuntimeTypeAdapterFactory.of(Outer.class, &quot;kind&quot;)\n                .registerSubtype(OuterA.class, &quot;a&quot;)\n                .registerSubtype(OuterB.class, &quot;b&quot;);\n\n        Gson gson = new GsonBuilder()\n                .registerTypeAdapterFactory(metaWrapperAdapter)\n                .registerTypeAdapter(Inner.class, new TypeAdapterForInner().nullSafe())\n                .create();\n\n        // verify, null serialization works for unwrapped, inner value\n        Inner inner = new Inner(null);        \n        assertJsonEquivalent(\n                &quot;{ prop: null }&quot;,\n                gson.toJson(inner));\n\n        OuterB outer = new OuterB(inner); \n        // will fail; actual = &quot;{ type: 'b', wrapped: {} }&quot;\n        assertJsonEquivalent(\n                &quot;{ type: 'b', wrapped: { prop: null } }&quot;,\n                gson.toJson(outer, Outer.class));\n    }\n\n    private static void assertJsonEquivalent(String expected, String actual) {\n        JsonElement expectedElem = new JsonParser().parse(expected);\n        JsonElement actualElem = new JsonParser().parse(actual);\n        assertEquals(expectedElem, actualElem);\n    }\n\n}\"><pre class=\"notranslate\"><code>public class Tests {\n\n     // define value requiring explicit nulls\n    static class Inner {\n        String prop;\n        Inner(String prop) {\n            this.prop = prop;\n        }\n    }\n\n    // define adapter to switch on explicit null\n    static class TypeAdapterForInner extends TypeAdapter&lt;Inner&gt; {\n\n        @Override\n        public void write(JsonWriter out, Inner value) throws IOException {\n            boolean oldSerializeNulls = out.getSerializeNulls();\n            try {\n                out.setSerializeNulls(true);\n                out.beginObject().name(\"prop\").value(value.prop).endObject();\n            } finally {\n                out.setSerializeNulls(oldSerializeNulls);\n            }\n        }\n\n        @Override\n        public Inner read(JsonReader in) throws IOException {\n            in.beginObject();\n            in.nextName();\n            String value = null;\n            if (in.peek() == JsonToken.STRING) {\n                value = in.nextString();\n            } else {\n                in.nextNull();\n            }\n            in.endObject();\n            return new Inner(value);\n        }\n\n    }\n\n    // define wrapper type hierarchy for use  by RuntimeTypeAdapterFactory\n    static abstract class Outer {\n        Inner wrapped;\n        Outer(Inner wrapped) {\n            this.wrapped = wrapped;\n        }\n    }\n\n    static class OuterA extends Outer {\n        OuterA(Inner wrapped) {\n            super(wrapped);\n        }\n    }\n\n    static class OuterB extends Outer {\n        OuterB(Inner wrapped) {\n            super(wrapped);\n        }\n    }\n\n    @Test\n    public void testSerializingToPreserveNullsInEmbeddedObjects() {\n        TypeAdapterFactory metaWrapperAdapter = RuntimeTypeAdapterFactory.of(Outer.class, \"kind\")\n                .registerSubtype(OuterA.class, \"a\")\n                .registerSubtype(OuterB.class, \"b\");\n\n        Gson gson = new GsonBuilder()\n                .registerTypeAdapterFactory(metaWrapperAdapter)\n                .registerTypeAdapter(Inner.class, new TypeAdapterForInner().nullSafe())\n                .create();\n\n        // verify, null serialization works for unwrapped, inner value\n        Inner inner = new Inner(null);        \n        assertJsonEquivalent(\n                \"{ prop: null }\",\n                gson.toJson(inner));\n\n        OuterB outer = new OuterB(inner); \n        // will fail; actual = \"{ type: 'b', wrapped: {} }\"\n        assertJsonEquivalent(\n                \"{ type: 'b', wrapped: { prop: null } }\",\n                gson.toJson(outer, Outer.class));\n    }\n\n    private static void assertJsonEquivalent(String expected, String actual) {\n        JsonElement expectedElem = new JsonParser().parse(expected);\n        JsonElement actualElem = new JsonParser().parse(actual);\n        assertEquals(expectedElem, actualElem);\n    }\n\n}\n</code></pre></div>","resourcePath":"/google/gson/issues/676","createdAt":"2015-08-04T22:39:31Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Improve lenient mode documentation","url":"https://github.com/google/gson/pull/2122","resourcePath":"/google/gson/pull/2122","createdAt":"2022-05-22T16:09:21Z","number":2122,"mergeCommit":{"oid":"cbc0af867b898d9e8244f268f4ffe37dfcaf8ea7","message":"Improve lenient mode documentation (#2122)","commitUrl":"https://github.com/google/gson/commit/cbc0af867b898d9e8244f268f4ffe37dfcaf8ea7","parents":{"nodes":[{"oid":"3f1d4fb65f7f6f2aabb6997e46c6a0100c25d0af","message":"Document Map serialization in user guide (#2138)\n\n* Document Map serialization in user guide\r\n\r\n* Improve user guide formatting and update links\r\n\r\n* Address review feedback"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/Gson.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/GsonBuilder.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/JsonParser.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/TypeAdapter.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/stream/JsonReader.java"}},{"node":{"changeType":"ADDED","path":"gson/src/test/java/com/google/gson/TypeAdapterTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA9844P48_2gAoY2JkMmY4NDRkNmU3NDc5OWIzOWJiMTFkYjM5MGEzNTEyNWMxZDJmNQ","url":"https://github.com/google/gson/pull/2122/commits/cbd2f844d6e74799b39bb11db390a35125c1d2f5"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1720,"url":"https://github.com/google/gson/issues/1720","title":"Gson.assertFullConsumption should throw JsonSyntaxException if JSON was not fully consumed","bodyHTML":"<p dir=\"auto\">Currently <code class=\"notranslate\">Gson.assertFullConsumption</code> throws a <code class=\"notranslate\">JsonIOException</code> if the JSON was not fully consumed:<br>\n<div class=\"Box Box--condensed my-2\">\n  <div class=\"Box-header f6\">\n    <p class=\"mb-0 text-bold\">\n      <a href=\"https://github.com/google/gson/blob/ceae88bd6667f4263bbe02e6b3710b8a683906a2/gson/src/main/java/com/google/gson/Gson.java#L902-L906\">gson/gson/src/main/java/com/google/gson/Gson.java</a>\n    </p>\n    <p class=\"mb-0 color-fg-muted\">\n        Lines 902 to 906\n      in\n      <a data-pjax=\"true\" class=\"commit-tease-sha\" href=\"/google/gson/commit/ceae88bd6667f4263bbe02e6b3710b8a683906a2\">ceae88b</a>\n    </p>\n  </div>\n  <div itemprop=\"text\" class=\"Box-body p-0 blob-wrapper blob-wrapper-embedded data\">\n    <table class=\"highlight tab-size mb-0 js-file-line-container\" data-tab-size=\"8\" data-paste-markdown-skip=\"\">\n\n        <tbody><tr class=\"border-0\">\n          <td id=\"L902\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"902\"></td>\n          <td id=\"LC902\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\"> <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">assertFullConsumption</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">obj</span>, <span class=\"pl-smi\">JsonReader</span> <span class=\"pl-s1\">reader</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L903\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"903\"></td>\n          <td id=\"LC903\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">   <span class=\"pl-k\">try</span> { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L904\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"904\"></td>\n          <td id=\"LC904\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">obj</span> != <span class=\"pl-c1\">null</span> &amp;&amp; <span class=\"pl-s1\">reader</span>.<span class=\"pl-en\">peek</span>() != <span class=\"pl-smi\">JsonToken</span>.<span class=\"pl-c1\">END_DOCUMENT</span>) { </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L905\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"905\"></td>\n          <td id=\"LC905\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">       <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonIOException</span>(<span class=\"pl-s\">\"JSON document was not fully consumed.\"</span>); </td>\n        </tr>\n\n        <tr class=\"border-0\">\n          <td id=\"L906\" class=\"blob-num border-0 px-3 py-0 color-bg-default\" data-line-number=\"906\"></td>\n          <td id=\"LC906\" class=\"blob-code border-0 px-3 py-0 color-bg-default blob-code-inner js-file-line\">     } </td>\n        </tr>\n    </tbody></table>\n  </div>\n</div>\n</p>\n<p dir=\"auto\">Maybe it would be better to throw a <code class=\"notranslate\">JsonSyntaxException</code> instead, because:</p>\n<ul dir=\"auto\">\n<li>The problem is not really IO related because reading worked without issues (no <code class=\"notranslate\">IOException</code> was thrown)</li>\n<li>This code is also called by <code class=\"notranslate\">fromJson(String, ...)</code> which does not declare that it can throw a <code class=\"notranslate\">JsonIOException</code></li>\n</ul>\n<p dir=\"auto\">For the case where a type adapter is not properly consuming all input (see also <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"150444804\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/835\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/835/hovercard\" href=\"https://github.com/google/gson/issues/835\">#835</a>) neither would match perfectly though that might be acceptable.</p>","resourcePath":"/google/gson/issues/1720","createdAt":"2020-06-10T14:03:22Z","labels":{"edges":[]}}},{"node":{"number":1923,"url":"https://github.com/google/gson/issues/1923","title":"Mistake on Javadoc method description (?)","bodyHTML":"<p dir=\"auto\"><strong>It appears to me that you've made a mistake on the description of the <code class=\"notranslate\">parseReader​(Reader reader)</code> method of the JsonObject class.</strong></p>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/65634520/126888891-55d791bc-8464-4a6d-a5df-a3d3e93848c0.png\"><img src=\"https://user-images.githubusercontent.com/65634520/126888891-55d791bc-8464-4a6d-a5df-a3d3e93848c0.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<p dir=\"auto\">You can check said method's doc yourself <a href=\"https://javadoc.io/static/com.google.code.gson/gson/2.8.7/com.google.gson/com/google/gson/JsonParser.html\" rel=\"nofollow\">here</a></p>\n<p dir=\"auto\"><strong>I believe it should be <em>\"Parses the specified stream/reader into a parse tree\".</em></strong></p>\n<p dir=\"auto\">I hope that my lack of English/Java knowledge isn't the problem here and I'm not wasting your time.</p>","resourcePath":"/google/gson/issues/1923","createdAt":"2021-07-25T05:46:26Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Document Map serialization in user guide","url":"https://github.com/google/gson/pull/2138","resourcePath":"/google/gson/pull/2138","createdAt":"2022-06-27T10:10:49Z","number":2138,"mergeCommit":{"oid":"3f1d4fb65f7f6f2aabb6997e46c6a0100c25d0af","message":"Document Map serialization in user guide (#2138)\n\n* Document Map serialization in user guide\r\n\r\n* Improve user guide formatting and update links\r\n\r\n* Address review feedback","commitUrl":"https://github.com/google/gson/commit/3f1d4fb65f7f6f2aabb6997e46c6a0100c25d0af","parents":{"nodes":[{"oid":"2d01d6a20f39881c692977564c1ea591d9f39027","message":"Make `Object` and `JsonElement` deserialization iterative (#1912)\n\n* Make Object and JsonElement deserialization iterative\r\n\r\nOften when Object and JsonElement are deserialized the format of the JSON\r\ndata is unknown and it might come from an untrusted source. To avoid a\r\nStackOverflowError from maliciously crafted JSON, deserialize Object and\r\nJsonElement iteratively instead of recursively.\r\n\r\nConcept based on https://github.com/FasterXML/jackson-databind/commit/51fd2faab70c9c8eb7ae43c200f8480f24ba74d8\r\nBut implementation is not based on it.\r\n\r\n* Improve imports grouping\r\n\r\n* Address review feedback"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"UserGuide.md"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA9846Z2da2gAoN2MzMzU5NzU1NDhjY2UxYmUzZGJmNDVmNDUzN2YyNDFjZjY5NzIxMg","url":"https://github.com/google/gson/pull/2138/commits/7c335975548cce1be3dbf45f4537f241cf697212"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2131,"url":"https://github.com/google/gson/issues/2131","title":"Can't deserialized EnumMap with override toString()","bodyHTML":"<h1 dir=\"auto\">Gson version</h1>\n\n<p dir=\"auto\">2.9.0</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n\n<p dir=\"auto\">JDK 17.0.2</p>\n<h1 dir=\"auto\">Used tools</h1>\n\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Maven; version: 3.8.5</li>\n</ul>\n<h1 dir=\"auto\">Description</h1>\n\n<p dir=\"auto\">When serialize EnumMap to Json, it has strange behavior that calls <code class=\"notranslate\">toString()</code> instead of <code class=\"notranslate\">name()</code> of enum key unlike when serialize the normal enum type do.</p>\n<h2 dir=\"auto\">Expected behavior</h2>\n\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{&quot;single_fruit&quot;:&quot;APPLE&quot;,&quot;multi_fruit&quot;:{&quot;APPLE&quot;:3,&quot;BANANA&quot;:2}}\"><pre>{<span class=\"pl-ent\">\"single_fruit\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>APPLE<span class=\"pl-pds\">\"</span></span>,<span class=\"pl-ent\">\"multi_fruit\"</span>:{<span class=\"pl-ent\">\"APPLE\"</span>:<span class=\"pl-c1\">3</span>,<span class=\"pl-ent\">\"BANANA\"</span>:<span class=\"pl-c1\">2</span>}}</pre></div>\n<h2 dir=\"auto\">Actual behavior</h2>\n\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{&quot;single_fruit&quot;:&quot;APPLE&quot;,&quot;multi_fruit&quot;:{&quot;Golden Apple&quot;:3,&quot;Green Banana&quot;:2}}\"><pre>{<span class=\"pl-ent\">\"single_fruit\"</span>:<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>APPLE<span class=\"pl-pds\">\"</span></span>,<span class=\"pl-ent\">\"multi_fruit\"</span>:{<span class=\"pl-ent\">\"Golden Apple\"</span>:<span class=\"pl-c1\">3</span>,<span class=\"pl-ent\">\"Green Banana\"</span>:<span class=\"pl-c1\">2</span>}}</pre></div>\n<h1 dir=\"auto\">Reproduction steps</h1>\n\n\n<p dir=\"auto\">See this simple program below.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.google.gson.Gson;\n\nimport java.util.EnumMap;\nimport java.util.ResourceBundle;\n\n\npublic class Main {\n\n    public enum Fruit {\n        APPLE,\n        BANANA;\n        private final ResourceBundle bundle = ResourceBundle.getBundle(&quot;Main&quot;);\n\n        @Override\n        public String toString() {\n            return bundle.getString(this.name());\n        }\n    }\n    public static class FruitData {\n        public Fruit single_fruit;\n        public EnumMap&lt;Fruit, Integer&gt; multi_fruit;\n    }\n    public static void main(String[] args) {\n        Gson jsonParser = new Gson();\n        FruitData f = new FruitData();\n        f.single_fruit = Fruit.APPLE;\n        f.multi_fruit = new EnumMap&lt;&gt;(Fruit.class);\n        f.multi_fruit.put(Fruit.APPLE, 3);\n        f.multi_fruit.put(Fruit.BANANA, 2);\n\n        System.out.println(jsonParser.toJson(f));\n\n        // it should be successful\n        // System.out.println(jsonParser.fromJson(jsonParser.toJson(f), FruitData.class));\n    }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">google</span>.<span class=\"pl-s1\">gson</span>.<span class=\"pl-s1\">Gson</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">EnumMap</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ResourceBundle</span>;\n\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Main</span> {\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">enum</span> <span class=\"pl-smi\">Fruit</span> {\n        <span class=\"pl-c1\">APPLE</span>,\n        <span class=\"pl-c1\">BANANA</span>;\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ResourceBundle</span> <span class=\"pl-s1\">bundle</span> = <span class=\"pl-s1\">ResourceBundle</span>.<span class=\"pl-en\">getBundle</span>(<span class=\"pl-s\">\"Main\"</span>);\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">toString</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">bundle</span>.<span class=\"pl-en\">getString</span>(<span class=\"pl-smi\">this</span>.<span class=\"pl-en\">name</span>());\n        }\n    }\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">FruitData</span> {\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Fruit</span> <span class=\"pl-s1\">single_fruit</span>;\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">EnumMap</span>&lt;<span class=\"pl-smi\">Fruit</span>, <span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">multi_fruit</span>;\n    }\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">main</span>(<span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">args</span>) {\n        <span class=\"pl-smi\">Gson</span> <span class=\"pl-s1\">jsonParser</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Gson</span>();\n        <span class=\"pl-smi\">FruitData</span> <span class=\"pl-s1\">f</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">FruitData</span>();\n        <span class=\"pl-s1\">f</span>.<span class=\"pl-s1\">single_fruit</span> = <span class=\"pl-smi\">Fruit</span>.<span class=\"pl-c1\">APPLE</span>;\n        <span class=\"pl-s1\">f</span>.<span class=\"pl-s1\">multi_fruit</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">EnumMap</span>&lt;&gt;(<span class=\"pl-smi\">Fruit</span>.<span class=\"pl-s1\">class</span>);\n        <span class=\"pl-s1\">f</span>.<span class=\"pl-s1\">multi_fruit</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-smi\">Fruit</span>.<span class=\"pl-c1\">APPLE</span>, <span class=\"pl-c1\">3</span>);\n        <span class=\"pl-s1\">f</span>.<span class=\"pl-s1\">multi_fruit</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-smi\">Fruit</span>.<span class=\"pl-c1\">BANANA</span>, <span class=\"pl-c1\">2</span>);\n\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">jsonParser</span>.<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">f</span>));\n\n        <span class=\"pl-c\">// it should be successful</span>\n        <span class=\"pl-c\">// System.out.println(jsonParser.fromJson(jsonParser.toJson(f), FruitData.class));</span>\n    }\n}</pre></div>\n<p dir=\"auto\">Main.properties</p>\n<div class=\"highlight highlight-source-ini notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"APPLE=Golden Apple\nBANANA=Green Banana\"><pre><span class=\"pl-k\">APPLE</span>=Golden Apple\n<span class=\"pl-k\">BANANA</span>=Green Banana</pre></div>\n<h1 dir=\"auto\">Exception stack trace</h1>\n\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Exception in thread &quot;main&quot; java.lang.NullPointerException: Cannot invoke &quot;Object.getClass()&quot; because &quot;key&quot; is null\n\tat java.base/java.util.EnumMap.typeCheck(EnumMap.java:736)\n\tat java.base/java.util.EnumMap.put(EnumMap.java:264)\n\tat java.base/java.util.EnumMap.put(EnumMap.java:78)\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:188)\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:145)\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:130)\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:221)\n\tat com.google.gson.Gson.fromJson(Gson.java:991)\n\tat com.google.gson.Gson.fromJson(Gson.java:956)\n\tat com.google.gson.Gson.fromJson(Gson.java:905)\n\tat com.google.gson.Gson.fromJson(Gson.java:876)\n\tat Main.main(Main.java:35)\"><pre class=\"notranslate\"><code>Exception in thread \"main\" java.lang.NullPointerException: Cannot invoke \"Object.getClass()\" because \"key\" is null\n\tat java.base/java.util.EnumMap.typeCheck(EnumMap.java:736)\n\tat java.base/java.util.EnumMap.put(EnumMap.java:264)\n\tat java.base/java.util.EnumMap.put(EnumMap.java:78)\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:188)\n\tat com.google.gson.internal.bind.MapTypeAdapterFactory$Adapter.read(MapTypeAdapterFactory.java:145)\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$1.read(ReflectiveTypeAdapterFactory.java:130)\n\tat com.google.gson.internal.bind.ReflectiveTypeAdapterFactory$Adapter.read(ReflectiveTypeAdapterFactory.java:221)\n\tat com.google.gson.Gson.fromJson(Gson.java:991)\n\tat com.google.gson.Gson.fromJson(Gson.java:956)\n\tat com.google.gson.Gson.fromJson(Gson.java:905)\n\tat com.google.gson.Gson.fromJson(Gson.java:876)\n\tat Main.main(Main.java:35)\n</code></pre></div>\n<h2 dir=\"auto\">TODO List</h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> Update README/User Guide to add <code class=\"notranslate\">enableComplexMapKeySerialization()</code> things. (Fixed by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1285571075\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/2138\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/2138/hovercard\" href=\"https://github.com/google/gson/pull/2138\">#2138</a> )</li>\n</ul>","resourcePath":"/google/gson/issues/2131","createdAt":"2022-06-09T05:11:00Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Rename ReflectiveTypeAdapterFactory field inclusion check method","url":"https://github.com/google/gson/pull/2121","resourcePath":"/google/gson/pull/2121","createdAt":"2022-05-22T13:38:03Z","number":2121,"mergeCommit":{"oid":"503c20bb392e10fd6ffa9a12afdc33d2ba2d2c38","message":"Rename ReflectiveTypeAdapterFactory field inclusion check method (#2121)","commitUrl":"https://github.com/google/gson/commit/503c20bb392e10fd6ffa9a12afdc33d2ba2d2c38","parents":{"nodes":[{"oid":"010624730b5b66a3bc6d20417013ce5d317169fa","message":"Bump maven-deploy-plugin from 3.0.0-M2 to 3.0.0 (#2148)\n\nBumps [maven-deploy-plugin](https://github.com/apache/maven-deploy-plugin) from 3.0.0-M2 to 3.0.0.\r\n- [Release notes](https://github.com/apache/maven-deploy-plugin/releases)\r\n- [Commits](https://github.com/apache/maven-deploy-plugin/compare/maven-deploy-plugin-3.0.0-M2...maven-deploy-plugin-3.0.0)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.apache.maven.plugins:maven-deploy-plugin\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA9844Pwmv2gAoOTllNzk0ZGE4NGRkYTNiZTgwNDQ2NDE4MzUzMGI5MDhmNGZlNzA2MQ","url":"https://github.com/google/gson/pull/2121/commits/99e794da84dda3be804464183530b908f4fe7061"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2066,"url":"https://github.com/google/gson/issues/2066","title":"Exclude field condition","bodyHTML":"<p dir=\"auto\"><a href=\"https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L68\">https://github.com/google/gson/blob/master/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java#L68</a></p>\n<p dir=\"auto\">Is it ok? If follow that logic, the field going to be excluded when<br>\nA. <strong>NOT</strong> exclude a class<br>\n<strong>AND</strong><br>\nB. <strong>NOT</strong> exclude a field</p>\n<p dir=\"auto\">I guess it should be <code class=\"notranslate\">return excluder.excludeClass(f.getType(), serialize) || excluder.excludeField(f, serialize)</code></p>\n<p dir=\"auto\">that means, that, the field going to be excluded when<br>\nA. exclude a class<br>\nOR<br>\nB. exclude a field</p>\n<p dir=\"auto\">Correct me if I wrong</p>","resourcePath":"/google/gson/issues/2066","createdAt":"2022-01-27T14:18:53Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fail when parsing invalid local date","url":"https://github.com/google/gson/pull/2134","resourcePath":"/google/gson/pull/2134","createdAt":"2022-06-12T20:12:27Z","number":2134,"mergeCommit":{"oid":"57225c6741ff14db049ebe793ff3d423f2950ac7","message":"Fail when parsing invalid local date (#2134)\n\n* Fail when parsing invalid local date\r\n\r\n* Improve invalid date tests","commitUrl":"https://github.com/google/gson/commit/57225c6741ff14db049ebe793ff3d423f2950ac7","parents":{"nodes":[{"oid":"96ab171eb48dcea94fd9b8f425f65c531e6c3aad","message":"Add explicit support for floats in JsonWriter. (#2130)\n\nThis avoids floats being treated as doubles and having an unwarranted level of precision.\r\n\r\nFixes #1127."}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/util/ISO8601Utils.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/bind/util/ISO8601UtilsTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA9845hfyr2gAoMjVlOTJiNjA3MzdkYWE3ZGIxOWU3Y2FmOTc3MWM2NTZjMjRiMGE5MA","url":"https://github.com/google/gson/pull/2134/commits/25e92b60737daa7db19e7caf9771c656c24b0a90"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2133,"url":"https://github.com/google/gson/issues/2133","title":"ISO8061Utils.parse() accepts non-existent dates","bodyHTML":"<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\">2.9.0</p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java 16 2021-03-16\nJava(TM) SE Runtime Environment (build 16+36-2231)\nJava HotSpot(TM) 64-Bit Server VM (build 16+36-2231, mixed mode, sharing)\"><pre class=\"notranslate\"><code>java 16 2021-03-16\nJava(TM) SE Runtime Environment (build 16+36-2231)\nJava HotSpot(TM) 64-Bit Server VM (build 16+36-2231, mixed mode, sharing)\n</code></pre></div>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\">Apparently <code class=\"notranslate\">ISO8061Utils.parse()</code> works in a very lenient manner when dealing with dates that do not exist (for instance <code class=\"notranslate\">2022-14-30</code>), generating valid <code class=\"notranslate\">Date</code> objects.</p>\n<p dir=\"auto\">Given this unit test:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" @Test\n    public void testDateParseNonExistentDate() throws ParseException {\n        String dateStr = &quot;2022-14-30&quot;;\n        try {\n            Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n            fail(&quot;Should've thrown exception&quot;);\n        } catch (Exception expected) {\n\n        }\n    }\"><pre> <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testDateParseNonExistentDate</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">ParseException</span> {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">dateStr</span> = <span class=\"pl-s\">\"2022-14-30\"</span>;\n        <span class=\"pl-k\">try</span> {\n            <span class=\"pl-smi\">Date</span> <span class=\"pl-s1\">date</span> = <span class=\"pl-c1\">ISO8601Utils</span>.<span class=\"pl-en\">parse</span>(<span class=\"pl-s1\">dateStr</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParsePosition</span>(<span class=\"pl-c1\">0</span>));\n            <span class=\"pl-en\">fail</span>(<span class=\"pl-s\">\"Should've thrown exception\"</span>);\n        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> <span class=\"pl-s1\">expected</span>) {\n\n        }\n    }</pre></div>\n<p dir=\"auto\">It fails and produces a <code class=\"notranslate\">Date</code> object whose <code class=\"notranslate\">toString()</code> yields:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Thu Mar 02 00:00:00 BRT 2023\"><pre class=\"notranslate\"><code>Thu Mar 02 00:00:00 BRT 2023\n</code></pre></div>\n<p dir=\"auto\">This also applies for instances where the day is invalid as well.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" @Test\n    public void testDateParseNonExistentDate() throws ParseException {\n        String dateStr = &quot;2022-12-33&quot;;\n        try {\n            Date date = ISO8601Utils.parse(dateStr, new ParsePosition(0));\n            fail(&quot;Should've thrown exception&quot;);\n        } catch (Exception expected) {\n\n        }\n    }\"><pre> <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testDateParseNonExistentDate</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">ParseException</span> {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">dateStr</span> = <span class=\"pl-s\">\"2022-12-33\"</span>;\n        <span class=\"pl-k\">try</span> {\n            <span class=\"pl-smi\">Date</span> <span class=\"pl-s1\">date</span> = <span class=\"pl-c1\">ISO8601Utils</span>.<span class=\"pl-en\">parse</span>(<span class=\"pl-s1\">dateStr</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ParsePosition</span>(<span class=\"pl-c1\">0</span>));\n            <span class=\"pl-en\">fail</span>(<span class=\"pl-s\">\"Should've thrown exception\"</span>);\n        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> <span class=\"pl-s1\">expected</span>) {\n\n        }\n    }</pre></div>\n<p dir=\"auto\">It fails and produces a <code class=\"notranslate\">Date</code> object whose <code class=\"notranslate\">toString()</code> yields:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Mon Jan 02 00:00:00 BRT 2023\"><pre class=\"notranslate\"><code>Mon Jan 02 00:00:00 BRT 2023\n</code></pre></div>\n<h2 dir=\"auto\">Expected behavior</h2>\n<p dir=\"auto\">An exception to be thrown, likely <code class=\"notranslate\">IllegalArgumentException</code>.</p>\n<h2 dir=\"auto\">Actual behavior</h2>\n<p dir=\"auto\">A valid <code class=\"notranslate\">Date</code> object was generated that \"absorbed\" the surplus from the illegal argument.</p>\n<h2 dir=\"auto\">Note</h2>\n<p dir=\"auto\">If this is expected behavior, let me know and I'll close the issue.</p>","resourcePath":"/google/gson/issues/2133","createdAt":"2022-06-12T00:36:10Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Improve ConstructorConstructor","url":"https://github.com/google/gson/pull/2068","resourcePath":"/google/gson/pull/2068","createdAt":"2022-01-29T22:04:04Z","number":2068,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/Gson.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/CollectionTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/MapTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/ReflectionAccessTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/ConstructorConstructorTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA984xyG822gAoNmE2MzYxMWE1NzYyMzA0YTU5MmZlYjAwYTlmZmE4ZjVmNWE4YjUwOA","url":"https://github.com/google/gson/pull/2068/commits/6a63611a5762304a592feb00a9ffa8f5f5a8b508"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1708,"url":"https://github.com/google/gson/issues/1708","title":"ConstructorConstructor.newDefaultImplementationConstructor(Type, Class<? super T>) breaks symmetry","bodyHTML":"<p dir=\"auto\">The method <code class=\"notranslate\">com.google.gson.internal.ConstructorConstructor.newDefaultImplementationConstructor(Type, Class&lt;? super T&gt;)</code> breaks symmetry.</p>\n<p dir=\"auto\">Normally it is desired that if you can serialize <code class=\"notranslate\">obj</code> as <code class=\"notranslate\">A</code>, then you should be able to deserialize it as <code class=\"notranslate\">A</code> again. This is however not possible if <code class=\"notranslate\">A</code> extends / implements one of the types checked in <code class=\"notranslate\">newDefaultImplementationConstructor</code> and does not have a no-arg constructor.<br>\nExample:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"static class MyList extends ArrayList&lt;Integer&gt;{\n  // Any constructor with parameters to prevent default constructor\n  public MyList(int i) {}\n}\npublic void testCustomList() {\n  Gson gson = new Gson();\n  MyList list = new MyList(1);\n  list.add(1);\n  String json = gson.toJson(list);\n  // java.lang.ClassCastException: Cannot cast java.util.ArrayList to MyList\n  gson.fromJson(json, MyList.class);\n}\"><pre class=\"notranslate\"><code>static class MyList extends ArrayList&lt;Integer&gt;{\n  // Any constructor with parameters to prevent default constructor\n  public MyList(int i) {}\n}\npublic void testCustomList() {\n  Gson gson = new Gson();\n  MyList list = new MyList(1);\n  list.add(1);\n  String json = gson.toJson(list);\n  // java.lang.ClassCastException: Cannot cast java.util.ArrayList to MyList\n  gson.fromJson(json, MyList.class);\n}\n</code></pre></div>\n<p dir=\"auto\">The proper fix would be to have <code class=\"notranslate\">newDefaultImplementationConstructor</code> only create instances if the requested type is the type it creates (e.g. it creates <code class=\"notranslate\">ArrayList</code> and <code class=\"notranslate\">ArrayList</code> is requested) or if the requested type is a supertype of the created one (e.g. it creates <code class=\"notranslate\">ArrayList</code> and <code class=\"notranslate\">List</code> is requested).<br>\nSimilarly <code class=\"notranslate\">CollectionTypeAdapterFactory</code> would have to be adjusted to only support these types and types for which a constructor has been registered or types which have a default (= no-arg) constructor.</p>\n<p dir=\"auto\">This would in theory not cause any issues if people already serialized <strong>and</strong> deserialized their objects and therefore the types they are using are matching the above stated requirements.</p>\n<p dir=\"auto\">However, there might be cases where people only serialize objects (such as <code class=\"notranslate\">MyList</code> in the example above), which would break with such a change.</p>\n<p dir=\"auto\">Would it make sense to instead introduce an option to <code class=\"notranslate\">GsonBuilder</code> to prevent serialization which is not symmetric? So people can catch such issues early?</p>","resourcePath":"/google/gson/issues/1708","createdAt":"2020-05-25T15:03:11Z","labels":{"edges":[{"node":{"name":"bug"}}]}}},{"node":{"number":2067,"url":"https://github.com/google/gson/issues/2067","title":"`EnumMap` deserialization fails with `ClassCastException`","bodyHTML":"<h1 dir=\"auto\">Gson version</h1>\n<p dir=\"auto\"><a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/google/gson/commit/e2e851c9bc692cec68ba7b0cbb002f82b4a229e4/hovercard\" href=\"https://github.com/google/gson/commit/e2e851c9bc692cec68ba7b0cbb002f82b4a229e4\"><tt>e2e851c</tt></a></p>\n<h1 dir=\"auto\">Java / Android version</h1>\n<p dir=\"auto\">openjdk version \"11.0.13\" 2021-10-19<br>\nOpenJDK Runtime Environment Temurin-11.0.13+8 (build 11.0.13+8)<br>\nOpenJDK 64-Bit Server VM Temurin-11.0.13+8 (build 11.0.13+8, mixed mode)</p>\n<h1 dir=\"auto\">Description</h1>\n<p dir=\"auto\"><code class=\"notranslate\">EnumMap</code> deserialization fails with <code class=\"notranslate\">ClassCastException</code>:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.ClassCastException: class java.util.LinkedHashMap cannot be cast to class java.util.EnumMap\"><pre class=\"notranslate\"><code>java.lang.ClassCastException: class java.util.LinkedHashMap cannot be cast to class java.util.EnumMap\n</code></pre></div>\n<p dir=\"auto\">The underlying issue is related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"624353159\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1708\" data-hovercard-type=\"issue\" data-hovercard-url=\"/google/gson/issues/1708/hovercard\" href=\"https://github.com/google/gson/issues/1708\">#1708</a>, it appears special handling for <code class=\"notranslate\">EnumMap</code> is missing.<br>\n(I am a bit surprised that this issue has not been mentioned here anywhere before.)</p>\n<h1 dir=\"auto\">Reproduction steps</h1>\n<p dir=\"auto\">Test case:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private static enum MyEnum {\n  VALUE1, VALUE2\n}\n\npublic void testEnumMap() throws Exception {\n  EnumMap&lt;MyEnum, String&gt; map = new EnumMap&lt;MyEnum, String&gt;(MyEnum.class);\n  map.put(MyEnum.VALUE1, &quot;test&quot;);\n  String json = gson.toJson(map);\n  assertEquals(&quot;{\\&quot;VALUE1\\&quot;:\\&quot;test\\&quot;}&quot;, json);\n\n  Type type = new TypeToken&lt;EnumMap&lt;MyEnum, String&gt;&gt;() {}.getType();\n  EnumMap&lt;?, ?&gt; actualMap = gson.fromJson(&quot;{\\&quot;VALUE1\\&quot;:\\&quot;test\\&quot;}&quot;, type);\n  Map&lt;?, ?&gt; expectedMap = Collections.singletonMap(MyEnum.VALUE1, &quot;test&quot;);\n  assertEquals(expectedMap, actualMap);\n}\"><pre><span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">enum</span> <span class=\"pl-smi\">MyEnum</span> {\n  <span class=\"pl-c1\">VALUE1</span>, <span class=\"pl-c1\">VALUE2</span>\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testEnumMap</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">Exception</span> {\n  <span class=\"pl-smi\">EnumMap</span>&lt;<span class=\"pl-smi\">MyEnum</span>, <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">map</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">EnumMap</span>&lt;<span class=\"pl-smi\">MyEnum</span>, <span class=\"pl-smi\">String</span>&gt;(<span class=\"pl-smi\">MyEnum</span>.<span class=\"pl-s1\">class</span>);\n  <span class=\"pl-s1\">map</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-smi\">MyEnum</span>.<span class=\"pl-c1\">VALUE1</span>, <span class=\"pl-s\">\"test\"</span>);\n  <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s1\">gson</span>.<span class=\"pl-en\">toJson</span>(<span class=\"pl-s1\">map</span>);\n  <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s\">\"{\\\"VALUE1\\\":\\\"test\\\"}\"</span>, <span class=\"pl-s1\">json</span>);\n\n  <span class=\"pl-smi\">Type</span> <span class=\"pl-s1\">type</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeToken</span>&lt;<span class=\"pl-smi\">EnumMap</span>&lt;<span class=\"pl-smi\">MyEnum</span>, <span class=\"pl-smi\">String</span>&gt;&gt;() {}.<span class=\"pl-en\">getType</span>();\n  <span class=\"pl-smi\">EnumMap</span>&lt;?, ?&gt; <span class=\"pl-s1\">actualMap</span> = <span class=\"pl-s1\">gson</span>.<span class=\"pl-en\">fromJson</span>(<span class=\"pl-s\">\"{\\\"VALUE1\\\":\\\"test\\\"}\"</span>, <span class=\"pl-s1\">type</span>);\n  <span class=\"pl-smi\">Map</span>&lt;?, ?&gt; <span class=\"pl-s1\">expectedMap</span> = <span class=\"pl-s1\">Collections</span>.<span class=\"pl-en\">singletonMap</span>(<span class=\"pl-smi\">MyEnum</span>.<span class=\"pl-c1\">VALUE1</span>, <span class=\"pl-s\">\"test\"</span>);\n  <span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s1\">expectedMap</span>, <span class=\"pl-s1\">actualMap</span>);\n}</pre></div>\n<h1 dir=\"auto\">Exception stack trace</h1>\n<p dir=\"auto\">Not really useful because <code class=\"notranslate\">ClassCastException</code> occurs in user code.</p>","resourcePath":"/google/gson/issues/2067","createdAt":"2022-01-29T19:10:34Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix LinkedTreeMap being used for non-Comparable keys","url":"https://github.com/google/gson/pull/2152","resourcePath":"/google/gson/pull/2152","createdAt":"2022-07-25T00:28:24Z","number":2152,"mergeCommit":null,"potentialMergeCommit":{"oid":"d502bab996f7136bb7cf7e402ba95f6906a64ae1","message":"Merge 3a308a941edc194ae4cd4db33bcc93a220b33525 into a1d2ebc8b51a3a0df8b15c98f47d5ac95cf7f7b0","commitUrl":"https://github.com/google/gson/commit/d502bab996f7136bb7cf7e402ba95f6906a64ae1","parents":{"nodes":[{"oid":"a1d2ebc8b51a3a0df8b15c98f47d5ac95cf7f7b0","message":"Fix #1702: Gson.toJson creates CharSequence which does not implement toString (#1703)\n\n* Gson.toJson creates CharSequence which does not implement toString\r\n\r\n* Improve Streams.AppendableWriter.CurrentWrite test\r\n\r\n* Make setChars package-private"},{"oid":"3a308a941edc194ae4cd4db33bcc93a220b33525","message":"Use LinkedHashMap(Map) constructor"}]}},"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/JsonObject.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/ConstructorConstructor.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/bind/MapTypeAdapterFactory.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/functional/MapTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA9848AHAp2gAoM2EzMDhhOTQxZWRjMTk0YWU0Y2Q0ZGIzM2JjYzkzYTIyMGIzMzUyNQ","url":"https://github.com/google/gson/pull/2152/commits/3a308a941edc194ae4cd4db33bcc93a220b33525"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1247,"url":"https://github.com/google/gson/issues/1247","title":"Confusing Exceptions","bodyHTML":"<p dir=\"auto\">When trying to deserialize the values <code class=\"notranslate\">[[{},null],false,false]</code> and <code class=\"notranslate\">[[null,false],null,true]</code> with the code <code class=\"notranslate\">(new Gson()).fromJson(x, Map.class);</code> two confusing exceptions are thrown:<br>\n<code class=\"notranslate\">java.lang.ClassCastException: com.google.gson.internal.LinkedTreeMap is not Comparable</code> and<br>\n<code class=\"notranslate\">java.lang.NullPointerException: key == null</code>, respectively.</p>\n<p dir=\"auto\">Such exceptions should not be thrown to the user. Instead, one would expect these cases to be reported with an <code class=\"notranslate\">IllegalArgumentException</code>.</p>","resourcePath":"/google/gson/issues/1247","createdAt":"2018-02-03T16:23:57Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Disallow `JsonObject` `Entry.setValue(null)`","url":"https://github.com/google/gson/pull/2167","resourcePath":"/google/gson/pull/2167","createdAt":"2022-08-03T23:01:35Z","number":2167,"mergeCommit":null,"potentialMergeCommit":{"oid":"c65d0b6bab47b8fe811af05fa9e0bf2770e5e79b","message":"Merge 3df6bc7b571f5048bc3eba6bb9491d8363ff819d into a1d2ebc8b51a3a0df8b15c98f47d5ac95cf7f7b0","commitUrl":"https://github.com/google/gson/commit/c65d0b6bab47b8fe811af05fa9e0bf2770e5e79b","parents":{"nodes":[{"oid":"a1d2ebc8b51a3a0df8b15c98f47d5ac95cf7f7b0","message":"Fix #1702: Gson.toJson creates CharSequence which does not implement toString (#1703)\n\n* Gson.toJson creates CharSequence which does not implement toString\r\n\r\n* Improve Streams.AppendableWriter.CurrentWrite test\r\n\r\n* Make setChars package-private"},{"oid":"3df6bc7b571f5048bc3eba6bb9491d8363ff819d","message":"Disallow JsonObject Entry.setValue(null)"}]}},"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/JsonObject.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/main/java/com/google/gson/internal/LinkedTreeMap.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/JsonObjectTest.java"}},{"node":{"changeType":"MODIFIED","path":"gson/src/test/java/com/google/gson/internal/LinkedTreeMapTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAfCA9848nGEa2gAoM2RmNmJjN2I1NzFmNTA0OGJjM2ViYTZiYjk0OTFkODM2M2ZmODE5ZA","url":"https://github.com/google/gson/pull/2167/commits/3df6bc7b571f5048bc3eba6bb9491d8363ff819d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1771,"url":"https://github.com/google/gson/issues/1771","title":"JsonObject.entrySet() Entry.setValue(...) does not prevent null values","bodyHTML":"<p dir=\"auto\">The Map.Entry objects in the Set returned by <code class=\"notranslate\">JsonObject.entrySet()</code> do not validate the value passed to their <code class=\"notranslate\">Entry.setValue(...)</code> method, allowing Java <code class=\"notranslate\">null</code>s. This can cause runtime exceptions when the user of the JsonObject later expects that the values returned by JsonObject are never <code class=\"notranslate\">null</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"JsonObject jsonObject = new JsonObject();\njsonObject.addProperty(&quot;test&quot;, 1);\njsonObject.entrySet().iterator().next().setValue(null);\n\nSystem.out.println(&quot;has=&quot; + jsonObject.has(&quot;test&quot;));\njsonObject.getAsJsonPrimitive(&quot;test&quot;).toString(); // NullPointerException\"><pre><span class=\"pl-smi\">JsonObject</span> <span class=\"pl-s1\">jsonObject</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">JsonObject</span>();\n<span class=\"pl-s1\">jsonObject</span>.<span class=\"pl-en\">addProperty</span>(<span class=\"pl-s\">\"test\"</span>, <span class=\"pl-c1\">1</span>);\n<span class=\"pl-s1\">jsonObject</span>.<span class=\"pl-en\">entrySet</span>().<span class=\"pl-en\">iterator</span>().<span class=\"pl-en\">next</span>().<span class=\"pl-en\">setValue</span>(<span class=\"pl-c1\">null</span>);\n\n<span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s\">\"has=\"</span> + <span class=\"pl-s1\">jsonObject</span>.<span class=\"pl-en\">has</span>(<span class=\"pl-s\">\"test\"</span>));\n<span class=\"pl-s1\">jsonObject</span>.<span class=\"pl-en\">getAsJsonPrimitive</span>(<span class=\"pl-s\">\"test\"</span>).<span class=\"pl-en\">toString</span>(); <span class=\"pl-c\">// NullPointerException</span></pre></div>\n<p dir=\"auto\">The Map.Entry objects should instead throw a NullPointerException when their <code class=\"notranslate\">setValue(...)</code> method is called with <code class=\"notranslate\">null</code> (as permitted by the <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Map.Entry.html#setValue(V)\" rel=\"nofollow\">documentation</a>).</p>","resourcePath":"/google/gson/issues/1771","createdAt":"2020-08-29T02:23:32Z","labels":{"edges":[{"node":{"name":"bug"}}]}}}]}}}}]