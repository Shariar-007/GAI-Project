[{"repository":{"pullRequest":{"title":"Restructure to allow combining soft assertions entry points","url":"https://github.com/assertj/assertj/pull/1817","resourcePath":"/assertj/assertj/pull/1817","createdAt":"2020-03-30T04:13:16Z","number":1817,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Java6JUnitBDDSoftAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Java6JUnitSoftAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Java6SoftAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/SoftAssertions.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/SoftAssertionsProvider.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/SoftAssertionsRule.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/SoftAssertionsStatement.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/SoftProxies.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/SoftAssertionsErrorsCollectedTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/abstract_/SoftAssertionsMultipleProjectsTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0Mzk1MzkzNDQwOjFmZmFjMDQ4NjMxMzY5ODU3OWM3ZGVhNGJmYzJiZDAwY2Y5MTY0ZDU=","url":"https://github.com/assertj/assertj/pull/1817/commits/1ffac0486313698579c7dea4bfc2bd00cf9164d5"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1569,"url":"https://github.com/assertj/assertj/issues/1569","title":"Composable SoftAssertions entry-point classes","bodyHTML":"<h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Soft assertions are good.</p>\n<p dir=\"auto\">I like being able to use soft assertions with my custom exceptions in my code.</p>\n<p dir=\"auto\">One of the selling points of AssertJ is the single entry point, which makes it easy to simply type assertThat() in your IDE and have it automatically give you the list of applicable assertions.</p>\n<p dir=\"auto\">I'd like to be able to easily combine soft assertions entry classes from multiple sources. This is not currently possible as Java doesn't support multiple inheritance for classes. The workaround is clunky - each project must maintain its own soft assertions entry point with all of the assertThats in it that they want.</p>\n<p dir=\"auto\">Switching to a model based on interfaces and Java 8 default methods would make multiple inheritance possible.</p>\n<h3 dir=\"auto\">Example</h3>\n<h4 dir=\"auto\">Current situation</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class Project1SoftAssertions extends SoftAssertions {\n    public MyCustomAssert assertThat(MyCustom a) {\n        return proxy(MyCustomAssert.class, MyCustom.class, a);\n    }\n}\n\npublic class Project2SoftAssertions extends SoftAssertions {\n    public MyCustom2Assert assertThat(MyCustom2 a) {\n        return proxy(MyCustom2Assert.class, MyCustom2.class, a);\n    }\n}\n\n// Can't do this - multiple inheritance not permitted for classes\npublic class UberSoftAssertions extends Project1SoftAssertions, Project2SoftAssertions {\n}\n\n// Have to do this - lots of repetition if you've got lots of assertions!\npublic class UberSoftAssertions extends SoftAssertions {\n    public MyCustomAssert assertThat(MyCustom a) {\n        return proxy(MyCustomAssert.class, MyCustom.class, a);\n    }\n    public MyCustom2Assert assertThat(MyCustom2 a) {\n        return proxy(MyCustom2Assert.class, MyCustom2.class, a);\n    }\n}\n\n// Also can't do this:\npublic class JUnitJupiterUberSoftAssertions\n    extends JUnitJupiterSoftAssertions,\n        Project1SoftAssertions, Project2SoftAssertions {}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Project1SoftAssertions</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">SoftAssertions</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">MyCustomAssert</span> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyCustom</span> <span class=\"pl-s1\">a</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">proxy</span>(<span class=\"pl-smi\">MyCustomAssert</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">MyCustom</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-s1\">a</span>);\n    }\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Project2SoftAssertions</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">SoftAssertions</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">MyCustom2Assert</span> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyCustom2</span> <span class=\"pl-s1\">a</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">proxy</span>(<span class=\"pl-smi\">MyCustom2Assert</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">MyCustom2</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-s1\">a</span>);\n    }\n}\n\n<span class=\"pl-c\">// Can't do this - multiple inheritance not permitted for classes</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">UberSoftAssertions</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">Project1SoftAssertions</span>, <span class=\"pl-s1\">Project2SoftAssertions</span> {\n}\n\n<span class=\"pl-c\">// Have to do this - lots of repetition if you've got lots of assertions!</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">UberSoftAssertions</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">SoftAssertions</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">MyCustomAssert</span> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyCustom</span> <span class=\"pl-s1\">a</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">proxy</span>(<span class=\"pl-smi\">MyCustomAssert</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">MyCustom</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-s1\">a</span>);\n    }\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">MyCustom2Assert</span> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyCustom2</span> <span class=\"pl-s1\">a</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">proxy</span>(<span class=\"pl-smi\">MyCustom2Assert</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">MyCustom2</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-s1\">a</span>);\n    }\n}\n\n<span class=\"pl-c\">// Also can't do this:</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">JUnitJupiterUberSoftAssertions</span>\n    <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">JUnitJupiterSoftAssertions</span>,\n        <span class=\"pl-s1\">Project1SoftAssertions</span>, <span class=\"pl-s1\">Project2SoftAssertions</span> {}</pre></div>\n<h4 dir=\"auto\">Proposed</h4>\n<p dir=\"auto\">There will be a single functional interface that all soft assertions classes must implement. This has one default method that is used to generate the proxy classes. Then subinterfaces of this interface can call this method in their <code class=\"notranslate\">default assertThat()</code> implementations. Because the soft assertion entry points can be interfaces, you can combine several of them into a single class.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\npublic interface SoftAssertionsBase {\n    &lt;V extends Assert&lt;V, T&gt;, T&gt; V proxy(Class&lt;V&gt; assertClass, Class&lt;T&gt; actualClass, T actual);\n}\n\n// Existing implementation with the SoftAssertionsBase implementation added\npublic class AbstractSoftAssertions implements SoftAssertionsBase {\n    // Note that there is also a TODO in the source for proxy() that adds the bound on V,\n    // as per below.\n    public &lt;V extends Assert&lt;V, T&gt;, T&gt; V proxy(Class&lt;V&gt; assertClass, Class&lt;T&gt; actualClass, T actual) {\n        return proxies.createSoftAssertionProxy(assertClass, actualClass, actual);\n    }\n    ....\n}\n\npublic interface StandardSoftAssertions extends SoftAssertionsBase {\n    // All of the standard assertThat assertions go in here as default methods.\n}\n\npublic interface Project1SoftAssertions extends SoftAssertionsBase {\n    default MyCustomAssert assertThat(MyCustom a) {\n        return proxy(MyCustomAssert.class, MyCustom.class, a);\n    }\n}\n\npublic class Project2SoftAssertions extends SoftAssertionsBase {\n    public MyCustom2Assert assertThat(MyCustom2 a) {\n        return proxy(MyCustom2Assert.class, MyCustom2.class, a);\n    }\n}\n\n// Now we can do this\npublic class UberSoftAssertions extends AbstractStandardSoftAssertions\n    implements Project1SoftAssertions, Project2SoftAssertions {\n}\n\n// And this\npublic class JUnitJupiterUberSoftAssertions\n    extends JUnitJupiterSoftAssertions\n    implements Project1SoftAssertions, Project2SoftAssertions {}\n\n// And this, which allows us to get rid of that annoying &quot;softly.&quot; prefix on all assertions:\npublic class MyTest extends SoftAssertions implements Project1SoftAssertions, Project2SoftAssertions {\n\n    @AfterAll\n    public void after() {\n        assertAll();\n    }\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">SoftAssertionsBase</span> {\n    &lt;<span class=\"pl-s1\">V</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">Assert</span>&lt;<span class=\"pl-smi\">V</span>, <span class=\"pl-smi\">T</span>&gt;, <span class=\"pl-s1\">T</span>&gt; <span class=\"pl-smi\">V</span> <span class=\"pl-en\">proxy</span>(<span class=\"pl-smi\">Class</span>&lt;<span class=\"pl-smi\">V</span>&gt; <span class=\"pl-s1\">assertClass</span>, <span class=\"pl-smi\">Class</span>&lt;<span class=\"pl-smi\">T</span>&gt; <span class=\"pl-s1\">actualClass</span>, <span class=\"pl-smi\">T</span> <span class=\"pl-s1\">actual</span>);\n}\n\n<span class=\"pl-c\">// Existing implementation with the SoftAssertionsBase implementation added</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">AbstractSoftAssertions</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">SoftAssertionsBase</span> {\n    <span class=\"pl-c\">// Note that there is also a TODO in the source for proxy() that adds the bound on V,</span>\n    <span class=\"pl-c\">// as per below.</span>\n    <span class=\"pl-k\">public</span> &lt;<span class=\"pl-s1\">V</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">Assert</span>&lt;<span class=\"pl-smi\">V</span>, <span class=\"pl-smi\">T</span>&gt;, <span class=\"pl-s1\">T</span>&gt; <span class=\"pl-smi\">V</span> <span class=\"pl-en\">proxy</span>(<span class=\"pl-smi\">Class</span>&lt;<span class=\"pl-smi\">V</span>&gt; <span class=\"pl-s1\">assertClass</span>, <span class=\"pl-smi\">Class</span>&lt;<span class=\"pl-smi\">T</span>&gt; <span class=\"pl-s1\">actualClass</span>, <span class=\"pl-smi\">T</span> <span class=\"pl-s1\">actual</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">proxies</span>.<span class=\"pl-en\">createSoftAssertionProxy</span>(<span class=\"pl-s1\">assertClass</span>, <span class=\"pl-s1\">actualClass</span>, <span class=\"pl-s1\">actual</span>);\n    }\n    ....\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">StandardSoftAssertions</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">SoftAssertionsBase</span> {\n    <span class=\"pl-c\">// All of the standard assertThat assertions go in here as default methods.</span>\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">Project1SoftAssertions</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">SoftAssertionsBase</span> {\n    <span class=\"pl-k\">default</span> <span class=\"pl-smi\">MyCustomAssert</span> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyCustom</span> <span class=\"pl-s1\">a</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">proxy</span>(<span class=\"pl-smi\">MyCustomAssert</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">MyCustom</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-s1\">a</span>);\n    }\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Project2SoftAssertions</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">SoftAssertionsBase</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">MyCustom2Assert</span> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyCustom2</span> <span class=\"pl-s1\">a</span>) {\n        <span class=\"pl-k\">return</span> <span class=\"pl-en\">proxy</span>(<span class=\"pl-smi\">MyCustom2Assert</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">MyCustom2</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-s1\">a</span>);\n    }\n}\n\n<span class=\"pl-c\">// Now we can do this</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">UberSoftAssertions</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">AbstractStandardSoftAssertions</span>\n    <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Project1SoftAssertions</span>, <span class=\"pl-smi\">Project2SoftAssertions</span> {\n}\n\n<span class=\"pl-c\">// And this</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">JUnitJupiterUberSoftAssertions</span>\n    <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">JUnitJupiterSoftAssertions</span>\n    <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Project1SoftAssertions</span>, <span class=\"pl-smi\">Project2SoftAssertions</span> {}\n\n<span class=\"pl-c\">// And this, which allows us to get rid of that annoying \"softly.\" prefix on all assertions:</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyTest</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">SoftAssertions</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Project1SoftAssertions</span>, <span class=\"pl-smi\">Project2SoftAssertions</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">AfterAll</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">after</span>() {\n        <span class=\"pl-en\">assertAll</span>();\n    }\n}</pre></div>\n<p dir=\"auto\">Please note that, although JDK &lt; 1.8 is dying rapidly, nonetheless the above is still JDK &lt;1.8 compatible because it's only the custom extension entry points that need to be interfaces with default methods. If you're pre JDK 1.8, simply define your custom extension entry points as classes (as you always have) and you're back where we started.</p>","resourcePath":"/assertj/assertj/issues/1569","createdAt":"2019-08-01T06:57:04Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Adding hasSameBinaryContentAs","url":"https://github.com/assertj/assertj/pull/1732","resourcePath":"/assertj/assertj/pull/1732","createdAt":"2019-12-16T14:47:18Z","number":1732,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractFileAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Files.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/file/FileAssert_hasSameBinaryContentAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/file/FileAssert_hasSameContentAs_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/file/FileAssert_hasSameTextualContentAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/path/PathAssert_hasSameContentAs_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/util/TempFileUtil.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzUzNjAwODU1OmRlMmJkZjJjMWVhNGRkOTQ4NTJmZTllMmQ3MzE4ODQ3Y2Y0Y2RjYzQ=","url":"https://github.com/assertj/assertj/pull/1732/commits/de2bdf2c1ea4dd94852fe9e2d7318847cf4cdcc4"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1059,"url":"https://github.com/assertj/assertj/issues/1059","title":"Comparing equal binary files fails with java.nio.charset.MalformedInputException","bodyHTML":"<p dir=\"auto\">Comparing equal binary files fails with a \"java.nio.charset.MalformedInputException: Input length = 1\" exception. Method that fails: \"FileAssert.hasSameContentAs(java.io.File)\".</p>\n<p dir=\"auto\">This is actually caused by a wrong 'fall back' in the 'org.assertj.core.internal.Files' class:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"BinaryDiffResult binaryDiffResult = binaryDiff.diff(actual, readAllBytes(expected.toPath()));\nif (binaryDiffResult.hasNoDiff()) {\n    // fall back to the RuntimeIOException : not throwing an error is wrong as there was one in the first place.\n   throw e;\n}\"><pre><span class=\"pl-smi\">BinaryDiffResult</span> <span class=\"pl-s1\">binaryDiffResult</span> = <span class=\"pl-s1\">binaryDiff</span>.<span class=\"pl-en\">diff</span>(<span class=\"pl-s1\">actual</span>, <span class=\"pl-en\">readAllBytes</span>(<span class=\"pl-s1\">expected</span>.<span class=\"pl-en\">toPath</span>()));\n<span class=\"pl-k\">if</span> (<span class=\"pl-s1\">binaryDiffResult</span>.<span class=\"pl-en\">hasNoDiff</span>()) {\n    <span class=\"pl-c\">// fall back to the RuntimeIOException : not throwing an error is wrong as there was one in the first place.</span>\n   <span class=\"pl-k\">throw</span> <span class=\"pl-s1\">e</span>;\n}</pre></div>\n<p dir=\"auto\">In fact this only means the both files are binary qual and it should be:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"BinaryDiffResult binaryDiffResult = binaryDiff.diff(actual, readAllBytes(expected.toPath()));\nif (binaryDiffResult.hasNoDiff()) {\n   // Both files are binary equal\n   return;\n}\"><pre><span class=\"pl-smi\">BinaryDiffResult</span> <span class=\"pl-s1\">binaryDiffResult</span> = <span class=\"pl-s1\">binaryDiff</span>.<span class=\"pl-en\">diff</span>(<span class=\"pl-s1\">actual</span>, <span class=\"pl-en\">readAllBytes</span>(<span class=\"pl-s1\">expected</span>.<span class=\"pl-en\">toPath</span>()));\n<span class=\"pl-k\">if</span> (<span class=\"pl-s1\">binaryDiffResult</span>.<span class=\"pl-en\">hasNoDiff</span>()) {\n   <span class=\"pl-c\">// Both files are binary equal</span>\n   <span class=\"pl-k\">return</span>;\n}</pre></div>\n<p dir=\"auto\">I added a <a href=\"https://github.com/joel-costigliola/assertj-core/pull/1060\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/assertj/assertj/pull/1060/hovercard\">pull request</a> with the fix and added a test.</p>","resourcePath":"/assertj/assertj/issues/1059","createdAt":"2017-08-20T08:33:33Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add hasSuperclass(Class<?>) to AbstractClassAssert","url":"https://github.com/assertj/assertj/pull/1743","resourcePath":"/assertj/assertj/pull/1743","createdAt":"2020-01-02T08:43:16Z","number":1743,"mergeCommit":{"oid":"a8f949828fc32a786acdbb610027317df63cb789","message":"Add hasSuperclass(Class<?>) to AbstractClassAssert (#1743)","commitUrl":"https://github.com/assertj/assertj/commit/a8f949828fc32a786acdbb610027317df63cb789","parents":{"nodes":[{"oid":"4e0456389e509f00559e6a20a44a4111490d80e0","message":"Use Objects#requireNonNull instead of manually created NullPointerExceptions."}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractClassAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveAnnotations.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldHaveSuperclass.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Classes.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_hasSuperclass_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldHaveSuperclass_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/classes/Classes_assertHasSuperclass_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/classes/Classes_assertIsPackagePrivate_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzU4NTg3NDI0OjQ5ZjMxNzU3YjRkZGUyY2NjMDAwYTUxNDY3NjkyYTU0ZjM2NGJlNDY=","url":"https://github.com/assertj/assertj/pull/1743/commits/49f31757b4dde2ccc000a51467692a54f364be46"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1512,"url":"https://github.com/assertj/assertj/issues/1512","title":"Add hasSuperclass(Class<?>) to AbstractClassAssert","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Sometimes I feel the lack of <code class=\"notranslate\">isNotAssignableFrom()</code> in <code class=\"notranslate\">AbstractClassAssert</code>.<br>\nRecently I needed a defensive test to enforce an exception class staying \"checked\" (i.e., not inheriting from <code class=\"notranslate\">RuntimeException</code>). To do that, I created a custom condition:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"private static Condition&lt;Class&lt;?&gt;&gt; runtimeException = new Condition&lt;&gt;(RuntimeException.class::isAssignableFrom, RuntimeException.class.getSimpleName());\"><pre><span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Condition</span>&lt;<span class=\"pl-smi\">Class</span>&lt;?&gt;&gt; <span class=\"pl-s1\">runtimeException</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Condition</span>&lt;&gt;(<span class=\"pl-smi\">RuntimeException</span>.<span class=\"pl-s1\">class</span>::<span class=\"pl-s1\">isAssignableFrom</span>, <span class=\"pl-smi\">RuntimeException</span>.<span class=\"pl-s1\">class</span>.<span class=\"pl-en\">getSimpleName</span>());</pre></div>\n<p dir=\"auto\">used in this way:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(MyException.class).isNot(runtimeException);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyException</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isNot</span>(<span class=\"pl-s1\">runtimeException</span>);</pre></div>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Following the behavior of the existing <code class=\"notranslate\">isAssignableFrom(Class&lt;?&gt;...)</code>, a new api could check that <code class=\"notranslate\">actual</code> is not assignable from any of the <code class=\"notranslate\">others</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public SELF isNotAssignableFrom(Class&lt;?&gt;... others)\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-smi\">SELF</span> <span class=\"pl-s1\">isNotAssignableFrom</span>(<span class=\"pl-smi\">Class</span>&lt;?&gt;... <span class=\"pl-s1\">others</span>)</pre></div>\n<p dir=\"auto\">With it, my example would not require a custom condition:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(RuntimeException.class).isNotAssignableFrom(MyException.class);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">RuntimeException</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isNotAssignableFrom</span>(<span class=\"pl-smi\">MyException</span>.<span class=\"pl-s1\">class</span>);</pre></div>\n<p dir=\"auto\">Would this new api make sense?</p>\n<h4 dir=\"auto\">Additional Thoughts</h4>\n<p dir=\"auto\">Would it make sense to have some assertions for <code class=\"notranslate\">Throwable</code> classes, for example to verify if the class is inheriting from <code class=\"notranslate\">Error</code>/<code class=\"notranslate\">Exception</code>/<code class=\"notranslate\">RuntimeException</code>? It would address the ugly backwards readability of <code class=\"notranslate\">isAssignableFrom</code> :-)<br>\nMaybe a new <code class=\"notranslate\">AbstractThrowableClassAssert</code> inheriting from <code class=\"notranslate\">AbstractClassAssert</code> could to the job.</p>","resourcePath":"/assertj/assertj/issues/1512","createdAt":"2019-05-26T20:20:14Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Do no treat Path as Iterable in MapAssert#containsOnlyKeys(Iterable)","url":"https://github.com/assertj/assertj/pull/1753","resourcePath":"/assertj/assertj/pull/1753","createdAt":"2020-01-12T14:46:38Z","number":1753,"mergeCommit":{"oid":"1693e5eac2bb26f64e234d581ab8e74a669fd641","message":"Do no treat Path as Iterable in MapAssert#containsOnlyKeys(Iterable) (#1753)","commitUrl":"https://github.com/assertj/assertj/commit/1693e5eac2bb26f64e234d581ab8e74a669fd641","parents":{"nodes":[{"oid":"11cb2727fb4afc0df9fe11996dde7cecc028bd2e","message":"Expose usingRecursiveComparison() to array assertions"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractMapAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/map/MapAssert_containsOnlyKeys_with_Path_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzYxODM3MTIwOjNlODdhYmQzYzE5N2FhM2Y1NjA3NGI0MDU0NjgzOWRkNTZhMjQ1NTI=","url":"https://github.com/assertj/assertj/pull/1753/commits/3e87abd3c197aa3f56074b40546839dd56a24552"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1751,"url":"https://github.com/assertj/assertj/issues/1751","title":"Updating from 3.11.1 to 3.14.0 breaks","bodyHTML":"<p dir=\"auto\">When I try to upgrade assertj-core from 3.11.1 to the latest version 3.14.0. The following code breaks.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import static org.assertj.core.api.Assertions.assertThat;\n\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.Test;\n\npublic class Testassertj {\n\n    @Test\n    public void demo() {\n        \n        Map&lt;Path, String&gt; test = new HashMap&lt;Path, String&gt;();\n        Path path = Paths.get(&quot;/tmp/test/file&quot;);\n        test.put(path, &quot;69bf414bf3c9e4a1f9b08bc1bdfbf758b2deb65225eed120e4ff80a065099bd3cfee2f8b815fa2e64206eb447fbd1690a3d196f344852df68f3d45dc820a2cad&quot;);\n        assertThat(test)\n        .containsOnlyKeys(path)\n        .containsValue(&quot;69bf414bf3c9e4a1f9b08bc1bdfbf758b2deb65225eed120e4ff80a065099bd3cfee2f8b815fa2e64206eb447fbd1690a3d196f344852df68f3d45dc820a2cad&quot;);\n    }\n}\"><pre class=\"notranslate\"><code>import static org.assertj.core.api.Assertions.assertThat;\n\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\nimport java.util.HashMap;\nimport java.util.Map;\n\nimport org.junit.Test;\n\npublic class Testassertj {\n\n    @Test\n    public void demo() {\n        \n        Map&lt;Path, String&gt; test = new HashMap&lt;Path, String&gt;();\n        Path path = Paths.get(\"/tmp/test/file\");\n        test.put(path, \"69bf414bf3c9e4a1f9b08bc1bdfbf758b2deb65225eed120e4ff80a065099bd3cfee2f8b815fa2e64206eb447fbd1690a3d196f344852df68f3d45dc820a2cad\");\n        assertThat(test)\n        .containsOnlyKeys(path)\n        .containsValue(\"69bf414bf3c9e4a1f9b08bc1bdfbf758b2deb65225eed120e4ff80a065099bd3cfee2f8b815fa2e64206eb447fbd1690a3d196f344852df68f3d45dc820a2cad\");\n    }\n}\n</code></pre></div>\n<p dir=\"auto\">The test should pass, but it failed with error:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Testassertj\ndemo(Testassertj)\njava.lang.AssertionError: \nExpecting:\n  &lt;{/tmp/test/file=&quot;69bf414bf3c9e4a1f9b08bc1bdfbf758b2deb65225eed120e4ff80a065099bd3cfee2f8b815fa2e64206eb447fbd1690a3d196f344852df68f3d45dc820a2cad&quot;}&gt;\nto contain only following keys:\n  &lt;[tmp, test, file]&gt;\nkeys not found:\n  &lt;[tmp, test, file]&gt;\nand keys not expected:\n  &lt;[/tmp/test/file]&gt;\n\n\tat Testassertj.demo(Testassertj.java:22)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)\"><pre class=\"notranslate\"><code>Testassertj\ndemo(Testassertj)\njava.lang.AssertionError: \nExpecting:\n  &lt;{/tmp/test/file=\"69bf414bf3c9e4a1f9b08bc1bdfbf758b2deb65225eed120e4ff80a065099bd3cfee2f8b815fa2e64206eb447fbd1690a3d196f344852df68f3d45dc820a2cad\"}&gt;\nto contain only following keys:\n  &lt;[tmp, test, file]&gt;\nkeys not found:\n  &lt;[tmp, test, file]&gt;\nand keys not expected:\n  &lt;[/tmp/test/file]&gt;\n\n\tat Testassertj.demo(Testassertj.java:22)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/1751","createdAt":"2020-01-12T03:37:11Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix issue 428","url":"https://github.com/assertj/assertj/pull/1780","resourcePath":"/assertj/assertj/pull/1780","createdAt":"2020-02-09T21:45:16Z","number":1780,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/inputstreams/Diff_diff_InputStream_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/inputstreams/InputStreams_assertHasContent_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/inputstreams/InputStreams_assertSameContentAs_BigText_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/inputstreams/InputStreams_assertSameContentAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertHasContent_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertHasSameContentAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/diff/DiffTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/util/diff/stream/DefaultCharSequenceSupplierTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/util/diff/stream/DefaultEndOfLineFinderTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/util/diff/stream/FileStreamViewTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzcyODc3NjUyOjgwM2Y4NWRhOWE1OWQ1ZjVkZjJiY2MwNzgyZDQyZDA2MWIzZGZkZmU=","url":"https://github.com/assertj/assertj/pull/1780/commits/803f85da9a59d5f5df2bcc0782d42d061b3dfdfe"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":428,"url":"https://github.com/assertj/assertj/issues/428","title":"Feature Request: compare inputstream without keeping everything in memory","bodyHTML":"<p dir=\"auto\">Currently org.assertj.core.internal.InputStreams.assertEqualContent reads everything into StringBuffers before doing a diff, which is prone to OutOfMemoryError when the inputs are large. It'd be nice to have a way to skip diff'ing and just compare equality without running out of memory.</p>\n<p dir=\"auto\">@andrewgaul also hit this problem before.</p>","resourcePath":"/assertj/assertj/issues/428","createdAt":"2015-06-01T22:41:48Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix trailing space when class is only package-private","url":"https://github.com/assertj/assertj/pull/1769","resourcePath":"/assertj/assertj/pull/1769","createdAt":"2020-01-30T00:50:43Z","number":1769,"mergeCommit":{"oid":"28a6c017a0b3ec2a9d0d959b4fc6dd59214c7b1a","message":"Fix trailing space when class is only package-private (#1769)","commitUrl":"https://github.com/assertj/assertj/commit/28a6c017a0b3ec2a9d0d959b4fc6dd59214c7b1a","parents":{"nodes":[{"oid":"309899557f4d905d1a48584eef1a455a5c632d57","message":"Add Linux OS and cross-version build for jdk 13, 14 and 15 (#1770)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ClassModifierShouldBe.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ClassModifierShouldBe_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzY4ODM3ODEyOjBiYjgwZDljODVkM2Y0MWFkNWY0NjlkNGQzZThlNDI1YTIwYTRhY2Q=","url":"https://github.com/assertj/assertj/pull/1769/commits/0bb80d9c85d3f41ad5f469d4d3e8e425a20a4acd"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1768,"url":"https://github.com/assertj/assertj/issues/1768","title":"Trailing space in the modifiers list for ClassModifierShouldBe","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">When a class is only <code class=\"notranslate\">package-private</code> and a <code class=\"notranslate\">ClassModifierShouldBe</code> message is created, the list of modifiers in the failure message contains a trailing space right after the <code class=\"notranslate\">package-private</code> value.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Given:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class PackagePrivate {\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">PackagePrivate</span> {\n}</pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">assertThat(PackagePrivate.class).isPublic()</code> yields:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting:\n  &lt;org.example.PackagePrivate&gt;\nto be a &quot;public&quot; class but was &quot;package-private &quot;.\"><pre class=\"notranslate\"><code>java.lang.AssertionError: \nExpecting:\n  &lt;org.example.PackagePrivate&gt;\nto be a \"public\" class but was \"package-private \".\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/1768","createdAt":"2020-01-30T00:36:11Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add ignoreFieldsForTypes to RecursiveComparisonConfiguration","url":"https://github.com/assertj/assertj/pull/1755","resourcePath":"/assertj/assertj/pull/1755","createdAt":"2020-01-14T23:25:25Z","number":1755,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/RecursiveComparisonAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonAssert_fluent_API_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonAssert_isEqualTo_ignoringFields_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration_multiLineDescription_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration_shouldIgnoreFields_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzYyODg2MTk4OjVkNTMzZjEyNGE5MzI4MWEzNGViMGQ3ODU2Njg4ZmUwYjk4ZjA2NzU=","url":"https://github.com/assertj/assertj/pull/1755/commits/5d533f124a93281a34eb0d7856688fe0b98f0675"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1749,"url":"https://github.com/assertj/assertj/issues/1749","title":"Recursive comparison that ignore fields by types","bodyHTML":"<p dir=\"auto\"><code class=\"notranslate\">.usingRecursiveComparison()</code> is really useful for objects that don't override equals and hashcode.</p>\n<p dir=\"auto\">In order to assert an object with fields that has random values, like id, uuid or datetime, I'll need to ignore them using this method:<br>\n<a href=\"https://github.com/joel-costigliola/assertj-core/blob/master/src/main/java/org/assertj/core/api/RecursiveComparisonAssert.java#L251\">https://github.com/joel-costigliola/assertj-core/blob/master/src/main/java/org/assertj/core/api/RecursiveComparisonAssert.java#L251</a></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"RecursiveComparisonConfiguration ignoreIdConfig = new RecursiveComparisonConfiguration();\nignoreIdConfig.ignoreFields(&quot;idFieldName&quot;);\nassertThat(actual)\n        .usingRecursiveComparison(ignoreIdConfig)\n        .isEqualTo(expected);\"><pre class=\"notranslate\"><code>RecursiveComparisonConfiguration ignoreIdConfig = new RecursiveComparisonConfiguration();\nignoreIdConfig.ignoreFields(\"idFieldName\");\nassertThat(actual)\n        .usingRecursiveComparison(ignoreIdConfig)\n        .isEqualTo(expected);\n</code></pre></div>\n<p dir=\"auto\">It works like a charm, but supplying the field name with a string is not type-safe, I wonder if it's possible to add a method that can take field type as arguments like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ignoreIdConfig.ignoreFields(ZonedDateTime.class, UUID.class);\"><pre class=\"notranslate\"><code>ignoreIdConfig.ignoreFields(ZonedDateTime.class, UUID.class);\n</code></pre></div>\n<p dir=\"auto\">So it will match and ignore any fields with the given types.</p>","resourcePath":"/assertj/assertj/issues/1749","createdAt":"2020-01-11T23:43:37Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Try map input as last attempt in PropertyOrFieldSupport","url":"https://github.com/assertj/assertj/pull/1763","resourcePath":"/assertj/assertj/pull/1763","createdAt":"2020-01-25T23:56:50Z","number":1763,"mergeCommit":{"oid":"a52f7d08317cf4bae7947508324885f5e2086d7e","message":"Try map input as last attempt in PropertyOrFieldSupport (#1763)","commitUrl":"https://github.com/assertj/assertj/commit/a52f7d08317cf4bae7947508324885f5e2086d7e","parents":{"nodes":[{"oid":"deab4c1489ed623ec83083c083d020cd480552b7","message":"Fix midnight issue on LocalTime assumption tests"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/util/introspection/PropertyOrFieldSupport.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/util/introspection/PropertyOrFieldSupport_getSimpleValue_with_Map_input_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzY3MTY2ODM1OjEzOTE3MGVlMjhhMmQxMTFhODAwY2EwNzNhOWVhOGVhYjEzNjkzOTI=","url":"https://github.com/assertj/assertj/pull/1763/commits/139170ee28a2d111a800ca073a9ea8eab1369392"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1759,"url":"https://github.com/assertj/assertj/issues/1759","title":"Assertion hasNoNullFieldsOrProperties() throw error for delegate Map implementation","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">We have some own classes with extra logic that implement Map interface but delegate invocation to backed HashMap. This is related commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/337f99eee5cdcab9270145c47b429cbc48fb0134/hovercard\" href=\"https://github.com/assertj/assertj/commit/337f99eee5cdcab9270145c47b429cbc48fb0134\"><tt>337f99e</tt></a></p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" @Test\n    void expectedHasNoNullFieldsOrProperties() {\n        DelegateMap map = new DelegateMap(new HashMap&lt;&gt;());\n        Assertions.assertThat(map).hasNoNullFieldsOrProperties();\n    }\n\n    static class DelegateMap implements Map&lt;String, String&gt; {\n\n        private final Map&lt;String, String&gt; delegate;\n\n        public DelegateMap(Map&lt;String, String&gt; delegate) {\n            this.delegate = delegate;\n        }\n\n        @Override\n        public int size() {\n            return delegate.size();\n        }\n\n        @Override\n        public boolean isEmpty() {\n            return delegate.isEmpty();\n        }\n\n        @Override\n        public boolean containsKey(Object key) {\n            return delegate.containsKey(key);\n        }\n\n        @Override\n        public boolean containsValue(Object value) {\n            return delegate.containsValue(value);\n        }\n\n        @Override\n        public String get(Object key) {\n            return delegate.get(key);\n        }\n\n        @Override\n        public String put(String key, String value) {\n            return delegate.put(key, value);\n        }\n\n        @Override\n        public String remove(Object key) {\n            return delegate.remove(key);\n        }\n\n        @Override\n        public void putAll(Map&lt;? extends String, ? extends String&gt; m) {\n            delegate.putAll(m);\n        }\n\n        @Override\n        public void clear() {\n            delegate.clear();\n        }\n\n        @Override\n        public Set&lt;String&gt; keySet() {\n            return delegate.keySet();\n        }\n\n        @Override\n        public Collection&lt;String&gt; values() {\n            return delegate.values();\n        }\n\n        @Override\n        public Set&lt;Entry&lt;String, String&gt;&gt; entrySet() {\n            return delegate.entrySet();\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            return delegate.equals(o);\n        }\n\n        @Override\n        public int hashCode() {\n            return delegate.hashCode();\n        }\n\n        @Override\n        public String getOrDefault(Object key, String defaultValue) {\n            return delegate.getOrDefault(key, defaultValue);\n        }\n\n        @Override\n        public void forEach(BiConsumer&lt;? super String, ? super String&gt; action) {\n            delegate.forEach(action);\n        }\n\n        @Override\n        public void replaceAll(BiFunction&lt;? super String, ? super String, ? extends String&gt; function) {\n            delegate.replaceAll(function);\n        }\n\n        @Override\n        public String putIfAbsent(String key, String value) {\n            return delegate.putIfAbsent(key, value);\n        }\n\n        @Override\n        public boolean remove(Object key, Object value) {\n            return delegate.remove(key, value);\n        }\n\n        @Override\n        public boolean replace(String key, String oldValue, String newValue) {\n            return delegate.replace(key, oldValue, newValue);\n        }\n\n        @Override\n        public String replace(String key, String value) {\n            return delegate.replace(key, value);\n        }\n\n        @Override\n        public String computeIfAbsent(String key, Function&lt;? super String, ? extends String&gt; mappingFunction) {\n            return delegate.computeIfAbsent(key, mappingFunction);\n        }\n\n        @Override\n        public String computeIfPresent(String key, BiFunction&lt;? super String, ? super String, ? extends String&gt; remappingFunction) {\n            return delegate.computeIfPresent(key, remappingFunction);\n        }\n\n        @Override\n        public String compute(String key, BiFunction&lt;? super String, ? super String, ? extends String&gt; remappingFunction) {\n            return delegate.compute(key, remappingFunction);\n        }\n\n        @Override\n        public String merge(String key, String value, BiFunction&lt;? super String, ? super String, ? extends String&gt; remappingFunction) {\n            return delegate.merge(key, value, remappingFunction);\n        }\n    }\"><pre> <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">expectedHasNoNullFieldsOrProperties</span>() {\n        <span class=\"pl-smi\">DelegateMap</span> <span class=\"pl-s1\">map</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">DelegateMap</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span>&lt;&gt;());\n        <span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">map</span>).<span class=\"pl-en\">hasNoNullFieldsOrProperties</span>();\n    }\n\n    <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">DelegateMap</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt; {\n\n        <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">delegate</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">DelegateMap</span>(<span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">delegate</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">delegate</span> = <span class=\"pl-s1\">delegate</span>;\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">size</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">size</span>();\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">isEmpty</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">isEmpty</span>();\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">containsKey</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">key</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">containsKey</span>(<span class=\"pl-s1\">key</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">containsValue</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">value</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">containsValue</span>(<span class=\"pl-s1\">value</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">get</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">key</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s1\">key</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">put</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">key</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">key</span>, <span class=\"pl-s1\">value</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">remove</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">key</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">remove</span>(<span class=\"pl-s1\">key</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">putAll</span>(<span class=\"pl-smi\">Map</span>&lt;? <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">String</span>, ? <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">m</span>) {\n            <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">putAll</span>(<span class=\"pl-s1\">m</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">clear</span>() {\n            <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">clear</span>();\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Set</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-en\">keySet</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">keySet</span>();\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Collection</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-en\">values</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">values</span>();\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Set</span>&lt;<span class=\"pl-smi\">Entry</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt;&gt; <span class=\"pl-en\">entrySet</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">entrySet</span>();\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">equals</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">o</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">o</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">hashCode</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">hashCode</span>();\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">getOrDefault</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">key</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">defaultValue</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">getOrDefault</span>(<span class=\"pl-s1\">key</span>, <span class=\"pl-s1\">defaultValue</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">forEach</span>(<span class=\"pl-smi\">BiConsumer</span>&lt;? <span class=\"pl-en\">super</span> <span class=\"pl-smi\">String</span>, ? <span class=\"pl-en\">super</span> <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">action</span>) {\n            <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-s1\">action</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">replaceAll</span>(<span class=\"pl-smi\">BiFunction</span>&lt;? <span class=\"pl-en\">super</span> <span class=\"pl-smi\">String</span>, ? <span class=\"pl-en\">super</span> <span class=\"pl-smi\">String</span>, ? <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">function</span>) {\n            <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">replaceAll</span>(<span class=\"pl-s1\">function</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">putIfAbsent</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">key</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">putIfAbsent</span>(<span class=\"pl-s1\">key</span>, <span class=\"pl-s1\">value</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">remove</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">key</span>, <span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">value</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">remove</span>(<span class=\"pl-s1\">key</span>, <span class=\"pl-s1\">value</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">replace</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">key</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">oldValue</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">newValue</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">replace</span>(<span class=\"pl-s1\">key</span>, <span class=\"pl-s1\">oldValue</span>, <span class=\"pl-s1\">newValue</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">replace</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">key</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">replace</span>(<span class=\"pl-s1\">key</span>, <span class=\"pl-s1\">value</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">computeIfAbsent</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">key</span>, <span class=\"pl-smi\">Function</span>&lt;? <span class=\"pl-en\">super</span> <span class=\"pl-smi\">String</span>, ? <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">mappingFunction</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">computeIfAbsent</span>(<span class=\"pl-s1\">key</span>, <span class=\"pl-s1\">mappingFunction</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">computeIfPresent</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">key</span>, <span class=\"pl-smi\">BiFunction</span>&lt;? <span class=\"pl-en\">super</span> <span class=\"pl-smi\">String</span>, ? <span class=\"pl-en\">super</span> <span class=\"pl-smi\">String</span>, ? <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">remappingFunction</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">computeIfPresent</span>(<span class=\"pl-s1\">key</span>, <span class=\"pl-s1\">remappingFunction</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">compute</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">key</span>, <span class=\"pl-smi\">BiFunction</span>&lt;? <span class=\"pl-en\">super</span> <span class=\"pl-smi\">String</span>, ? <span class=\"pl-en\">super</span> <span class=\"pl-smi\">String</span>, ? <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">remappingFunction</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">compute</span>(<span class=\"pl-s1\">key</span>, <span class=\"pl-s1\">remappingFunction</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">merge</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">key</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>, <span class=\"pl-smi\">BiFunction</span>&lt;? <span class=\"pl-en\">super</span> <span class=\"pl-smi\">String</span>, ? <span class=\"pl-en\">super</span> <span class=\"pl-smi\">String</span>, ? <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">remappingFunction</span>) {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">delegate</span>.<span class=\"pl-en\">merge</span>(<span class=\"pl-s1\">key</span>, <span class=\"pl-s1\">value</span>, <span class=\"pl-s1\">remappingFunction</span>);\n        }\n    }</pre></div>","resourcePath":"/assertj/assertj/issues/1759","createdAt":"2020-01-19T13:03:21Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Move internal extracting to AbstractAssert","url":"https://github.com/assertj/assertj/pull/1781","resourcePath":"/assertj/assertj/pull/1781","createdAt":"2020-02-10T07:21:20Z","number":1781,"mergeCommit":{"oid":"0ec343b98c7142f0ff755d17a8e11bbca52fcd70","message":"Move internal extracting to AbstractAssert (#1781)\n\nThis allows third party assertion classes to take advantage of the extracting() methods without having to inherit from AbstractObjectAssert.","commitUrl":"https://github.com/assertj/assertj/commit/0ec343b98c7142f0ff755d17a8e11bbca52fcd70","parents":{"nodes":[{"oid":"04c6d1020798ec71916a2f13b37577945b98db4b","message":"Use PredicateDescription.GIVEN consistently"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_asInstanceOf_with_InstanceOfAssertFactory_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_extracting_with_Function_and_AssertFactory_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_extracting_with_String_and_AssertFactory_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/map/MapAssert_extractingByKey_with_Key_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/map/MapAssert_extractingByKey_with_Key_and_InstanceOfAssertFactory_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/map/MapAssert_extractingByKeys_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/object/ObjectAssert_extracting_with_Function_and_InstanceOfAssertFactory_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/object/ObjectAssert_extracting_with_String_and_InstanceOfAssertFactory_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/optional/OptionalAssert_get_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/optional/OptionalAssert_get_with_InstanceOfAssertFactory_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzcyOTc3MjgyOmQ4Zjc2YWQ1MjYzYjA1NTEyZTlmMDU5YTQ1MDU2MmEzOGE0NGNlMzA=","url":"https://github.com/assertj/assertj/pull/1781/commits/d8f76ad5263b05512e9f059a450562a38a44ce30"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1731,"url":"https://github.com/assertj/assertj/issues/1731","title":"Custom Assertions and comparison failures","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Trying to write custom assertions. The examples given show the use of <code class=\"notranslate\">failWithMessage()</code>.</p>\n<p dir=\"auto\">The problem with <code class=\"notranslate\">failWithMessage()</code> is that it doesn't populate the \"expected\" and \"actual\" fields of the generated assertion. These fields are useful to have populated where it makes sense to do so (eg, equality assertions on individual fields) as the IDEs use them to support graphical diff.</p>\n<p dir=\"auto\">I can ignore <code class=\"notranslate\">failWithMessage()</code> and generate an <code class=\"notranslate\">org.opentest4j.AssertionFailedError</code> and populate these fields manually; however when I do so it is hard to honour the error reporting customisation interface of <code class=\"notranslate\">AbstractAssert</code>. Similarly, it is hard to inherit/honor things like comparison strategy.</p>\n<h4 dir=\"auto\">Possible solutions</h4>\n<p dir=\"auto\">-Introduce a new method in <code class=\"notranslate\">AbstractAssert</code> which provides functionality for generating a <code class=\"notranslate\">ComparisonFailure</code> or related assertion.<br>\n-AssertJ currently divides its packages into two types:<br>\n--Internal<br>\n--Consumer<br>\nI believe that AssertJ would benefit from the addition of a \"service provider interface\" (SPI) category of packages - comprised of classes and utilities that are intended for use by assertion <em>implementors</em> but not assertion users. At present, there are many classes in the \"internal\" package which understandably we wouldn't want to expose to assertion users, but could be really useful to implementors of custom assertions.<br>\n-It is possible that all of this is possible in AssertJ already and I simply don't know how to do it. If that is the case, it would be nice if the custom assertion doc page gave some examples of how to do this.</p>","resourcePath":"/assertj/assertj/issues/1731","createdAt":"2019-12-16T02:54:04Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Support custom soft assertions in SoftAssertionExtension","url":"https://github.com/assertj/assertj/pull/1820","resourcePath":"/assertj/assertj/pull/1820","createdAt":"2020-03-31T03:40:20Z","number":1820,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/junit/jupiter/SoftAssertionsExtension.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/junit/jupiter/BDDSoftAssertionsExtensionIntegrationTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/junit/jupiter/CustomSoftAssertionsExtensionIntegrationTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/junit/jupiter/SoftAssertionsExtensionIntegrationTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/junit/jupiter/SoftAssertionsExtensionUnitTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0Mzk2MDQ2MzE0OmY4NzIwNWQ1MjdhOGFkMmJhZTA2ZmMxYjJhNjNiNzJmNjFiZDNkMDE=","url":"https://github.com/assertj/assertj/pull/1820/commits/f87205d527a8ad2bae06fc1b2a63b72f61bd3d01"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1819,"url":"https://github.com/assertj/assertj/issues/1819","title":"SoftAssertionExtension to support custom soft assertions","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">The current implementation of <code class=\"notranslate\">SoftAssertionExtension</code> is hardcoded to support <code class=\"notranslate\">SoftAssertions</code> and <code class=\"notranslate\">BDDSoftAssertions</code>. If you have your own custom soft assertions entry point (with your own custom assertions), then you're out of luck.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MySoftAssertions extends SoftAssertions {\n  public CustomAssert assertThat(Custom actual) {\n    return proxy(CustomAssert.class, Custom.class, actual);\n  }\n}\n@ExtendWith(SoftAssertionsExtension.class)\npublic class MyTest {\n  @Test \n  void my_test_method(MySoftAssertions softly) {\n    // Parameter &quot;softly&quot; will not resolve\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">MySoftAssertions</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">SoftAssertions</span> {\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">CustomAssert</span> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">Custom</span> <span class=\"pl-s1\">actual</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-en\">proxy</span>(<span class=\"pl-smi\">CustomAssert</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">Custom</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-s1\">actual</span>);\n  }\n}\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">ExtendWith</span>(<span class=\"pl-smi\">SoftAssertionsExtension</span>.<span class=\"pl-s1\">class</span>)\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyTest</span> {\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span> \n  <span class=\"pl-smi\">void</span> <span class=\"pl-en\">my_test_method</span>(<span class=\"pl-smi\">MySoftAssertions</span> <span class=\"pl-s1\">softly</span>) {\n    <span class=\"pl-c\">// Parameter \"softly\" will not resolve</span>\n  }\n}</pre></div>","resourcePath":"/assertj/assertj/issues/1819","createdAt":"2020-03-31T03:25:46Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Feat new method is directory recursively containing","url":"https://github.com/assertj/assertj/pull/1806","resourcePath":"/assertj/assertj/pull/1806","createdAt":"2020-03-15T17:55:57Z","number":1806,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/file/FileAssert_isDirectoryRecursivelyContaining_Predicate_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/file/FileAssert_isDirectoryRecursivelyContaining_SyntaxAndPattern_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/FilesBaseTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/FilesSimpleBaseTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsDirectoryContaining_SyntaxAndPattern_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsDirectoryNotContaining_SyntaxAndPattern_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsDirectoryRecursivelyContaining_Predicate_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsDirectoryRecursivelyContaining_SyntaxAndPattern_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertIsDirectoryContaining_SyntaxAndPattern_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertIsDirectoryNotContaining_SyntaxAndPattern_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0Mzg4Nzc4MDk0OjMyNTMyN2M2Mjc1YzYxNDhlYTE4NjNmNzA5MGEzMTRiMTQ4ODM2OTE=","url":"https://github.com/assertj/assertj/pull/1806/commits/325327c6275c6148ea1863f7090a314b14883691"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1740,"url":"https://github.com/assertj/assertj/issues/1740","title":"How is isDirectoryContaining supposed to work?","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I don't understand how org.assertj.core.api.AbstractFileAssert.isDirectoryContaining(String) is supposed to work (or is its Javadoc wrong?): According to its Javadoc</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Verify that the actual File is a directory containing at least one file matching the given String interpreted as a path matcher (as per FileSystem.getPathMatcher(String)).\n\nNote that the actual File must exist and be a directory.\n\nGiven the following directory structure:\n\n /root/\n /root/sub-dir-1/\n /root/sub-dir-1/file-1.ext\n /root/sub-dir-1/file-2.ext\n /root/sub-file-1.ext\n /root/sub-file-2.ext\nHere are some assertions examples:\n File root = new File(&quot;root&quot;);\n\n // The following assertions succeed:\n assertThat(root).isDirectoryContaining(&quot;glob:**sub-dir*&quot;)\n                 .isDirectoryContaining(&quot;glob:**sub-file*&quot;)\n                 .isDirectoryContaining(&quot;glob:**.ext&quot;)\n                 .isDirectoryContaining(&quot;regex:.*ext&quot;)\n                 .isDirectoryContaining(&quot;glob:**.{ext,bin&quot;);\n\n // The following assertions fail:\n assertThat(root).isDirectoryContaining(&quot;glob:**dir&quot;);\n assertThat(root).isDirectoryContaining(&quot;glob:**.bin&quot;);\n assertThat(root).isDirectoryContaining(&quot;glob:**.{java,class}&quot;); \"><pre class=\"notranslate\"><code>Verify that the actual File is a directory containing at least one file matching the given String interpreted as a path matcher (as per FileSystem.getPathMatcher(String)).\n\nNote that the actual File must exist and be a directory.\n\nGiven the following directory structure:\n\n /root/\n /root/sub-dir-1/\n /root/sub-dir-1/file-1.ext\n /root/sub-dir-1/file-2.ext\n /root/sub-file-1.ext\n /root/sub-file-2.ext\nHere are some assertions examples:\n File root = new File(\"root\");\n\n // The following assertions succeed:\n assertThat(root).isDirectoryContaining(\"glob:**sub-dir*\")\n                 .isDirectoryContaining(\"glob:**sub-file*\")\n                 .isDirectoryContaining(\"glob:**.ext\")\n                 .isDirectoryContaining(\"regex:.*ext\")\n                 .isDirectoryContaining(\"glob:**.{ext,bin\");\n\n // The following assertions fail:\n assertThat(root).isDirectoryContaining(\"glob:**dir\");\n assertThat(root).isDirectoryContaining(\"glob:**.bin\");\n assertThat(root).isDirectoryContaining(\"glob:**.{java,class}\"); \n</code></pre></div>\n<p dir=\"auto\">If I have a directory \"root/com/example/Example.java\", then this assertion should succeed (where outputDirectory is \"root\"):</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(outputDirectory)\n\t\t\t.isDirectoryContaining(&quot;glob:**.java&quot;);\"><pre class=\"notranslate\"><code>assertThat(outputDirectory)\n\t\t\t.isDirectoryContaining(\"glob:**.java\");\n</code></pre></div>\n<p dir=\"auto\">But it fails saying that the directory contents is \"com\".</p>","resourcePath":"/assertj/assertj/issues/1740","createdAt":"2019-12-31T06:23:53Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"ByteArrayAssert.containsExactly(byte...) error message will mention …","url":"https://github.com/assertj/assertj/pull/1802","resourcePath":"/assertj/assertj/pull/1802","createdAt":"2020-03-06T15:35:19Z","number":1802,"mergeCommit":{"oid":"3dc400426359866bfef0c65c5e4cbd6d4eeaf9fb","message":"ByteArrayAssert.containsExactly(byte...) error message will mention not found and not expected items (#1801) (#1802)","commitUrl":"https://github.com/assertj/assertj/commit/3dc400426359866bfef0c65c5e4cbd6d4eeaf9fb","parents":{"nodes":[{"oid":"beceff0373b354c958943bc4501bf3f8117d45d3","message":"Remove unnecessary type parameters from extractors (#1799)\n\nAlso reduced visibility wherever possible and refactored the tests with\r\nBDD style."}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractByteArrayAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/bytearray/ByteArrayAssert_containsExactly_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0Mzg0ODg0MTQyOjExMTJiY2FhMWJhNzVhZmJjYTU0NzRjOGZlYmE3ZGM2MGU2YWJmNmM=","url":"https://github.com/assertj/assertj/pull/1802/commits/1112bcaa1ba75afbca5474c8feba7dc60e6abf6c"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1801,"url":"https://github.com/assertj/assertj/issues/1801","title":"ByteArrayAssert#containsExactly(byte...) error message should state which elements were not found and not expected","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\"><code class=\"notranslate\">AbstractByteArrayAssert#containsExactly(byte...)</code> produces a sub-optimal error message where the expected and actual values are printed out as memory addresses of those arrays, while I would expect a summary of which elements were not found and which were not expected within the potentially long array.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"org.opentest4j.AssertionFailedError: \nExpecting:\n &lt;[1, 2, 4]&gt;\nto be equal to:\n &lt;[1, 2, 3]&gt;\nbut was not.\nExpected :[B@764faa6\nActual   :[B@4c1f22f3\"><pre class=\"notranslate\"><code>org.opentest4j.AssertionFailedError: \nExpecting:\n &lt;[1, 2, 4]&gt;\nto be equal to:\n &lt;[1, 2, 3]&gt;\nbut was not.\nExpected :[B@764faa6\nActual   :[B@4c1f22f3\n</code></pre></div>\n<p dir=\"auto\">In case of <code class=\"notranslate\">int</code> arrays the error message is much more helpful:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting:\n  &lt;[1, 2, 4]&gt;\nto contain exactly (and in same order):\n  &lt;[1, 2, 3]&gt;\nbut some elements were not found:\n  &lt;[3]&gt;\nand others were not expected:\n  &lt;[4]&gt;\"><pre class=\"notranslate\"><code>java.lang.AssertionError: \nExpecting:\n  &lt;[1, 2, 4]&gt;\nto contain exactly (and in same order):\n  &lt;[1, 2, 3]&gt;\nbut some elements were not found:\n  &lt;[3]&gt;\nand others were not expected:\n  &lt;[4]&gt;\n</code></pre></div>\n<p dir=\"auto\">From the source code it's visible that the <code class=\"notranslate\">byte</code> array specific <code class=\"notranslate\">containsExactly</code> method calls  <code class=\"notranslate\">objects.assertEqual(info, actual, values)</code>, but the <code class=\"notranslate\">int</code> array specific <code class=\"notranslate\">containsExactly</code> method calls <code class=\"notranslate\">arrays.assertContainsExactly(info, actual, arrays.toByteArray(values))</code>.</p>\n<p dir=\"auto\">It hints that the <code class=\"notranslate\">byte</code> array specific <code class=\"notranslate\">containsExactly</code> method should have also called  <code class=\"notranslate\">arrays.assertContainsExactly(info, actual, values);</code></p>\n<h4 dir=\"auto\">Reproduction steps:</h4>\n<p dir=\"auto\">AssertJ version 3.15.0</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(new byte[] { 1, 2, 4 }).containsExactly((byte) 1, (byte) 2, (byte) 3);\"><pre class=\"notranslate\"><code>assertThat(new byte[] { 1, 2, 4 }).containsExactly((byte) 1, (byte) 2, (byte) 3);\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/1801","createdAt":"2020-03-06T15:06:57Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Stream has binary content","url":"https://github.com/assertj/assertj/pull/1822","resourcePath":"/assertj/assertj/pull/1822","createdAt":"2020-04-02T20:02:40Z","number":1822,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractInputStreamAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveBinaryContent.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/BinaryDiff.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/InputStreams.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/inputstream/InputStreamAssert_hasBinaryContent_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldHaveBinaryContent_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/InputStreamsBaseTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/inputstreams/BinaryDiff_diff_InputStream_bytes_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/inputstreams/InputStreams_assertHasBinaryContent_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0Mzk3Nzg4NjAyOmZmMmI4MDc3ZjE1NjhhYzE4Yjc2OWM0ZTA0NTlmYWZhNGEyMzhiNzY=","url":"https://github.com/assertj/assertj/pull/1822/commits/ff2b8077f1568ac18b769c4e0459fafa4a238b76"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1395,"url":"https://github.com/assertj/assertj/issues/1395","title":"Add hasBinaryContent for InputStream","bodyHTML":"<p dir=\"auto\">I would like to assert that a given input string returns a given binary content.<br>\nSince <code class=\"notranslate\">InputStream</code> contains bytes, I'd suggest to provide the method <code class=\"notranslate\">hasBinaryContent</code> that is also available for <code class=\"notranslate\">File</code>. I'm currently using <code class=\"notranslate\">hasSameContentAs</code> as a workaround, but that's not optimal.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"byte[] expected = TEST_CONTENT;\n\nInputStream inputStream = storage.getDownloadStream(TEST_URI);\n\n// currently not supported:\nassertThat(inputStream).hasBinaryContent(expected);\n// workaround:\nassertThat(inputStream).hasSameContentAs(new ByteArrayInputStream(expected));\"><pre><span class=\"pl-smi\">byte</span>[] <span class=\"pl-s1\">expected</span> = <span class=\"pl-c1\">TEST_CONTENT</span>;\n\n<span class=\"pl-smi\">InputStream</span> <span class=\"pl-s1\">inputStream</span> = <span class=\"pl-s1\">storage</span>.<span class=\"pl-en\">getDownloadStream</span>(<span class=\"pl-c1\">TEST_URI</span>);\n\n<span class=\"pl-c\">// currently not supported:</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">inputStream</span>).<span class=\"pl-en\">hasBinaryContent</span>(<span class=\"pl-s1\">expected</span>);\n<span class=\"pl-c\">// workaround:</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">inputStream</span>).<span class=\"pl-en\">hasSameContentAs</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ByteArrayInputStream</span>(<span class=\"pl-s1\">expected</span>));</pre></div>","resourcePath":"/assertj/assertj/issues/1395","createdAt":"2019-01-14T12:35:57Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Allow assertions on the (root) cause message","url":"https://github.com/assertj/assertj/pull/1782","resourcePath":"/assertj/assertj/pull/1782","createdAt":"2020-02-10T13:29:55Z","number":1782,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveCause.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveRootCause.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Throwables.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/SoftAssertionsTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/ThrowableAssertAlternative_havingCause_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/ThrowableAssertAlternative_havingRootCause_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/throwable/ThrowableAssert_hasCause_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/throwable/ThrowableAssert_hasRootCause_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldHaveCause_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldHaveRootCause_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzczMTM0ODQyOjljZmYyYzhhY2RmNWUxMzAxZTg4YzE5MmNiNjIzY2VmYWNkNDAyY2Q=","url":"https://github.com/assertj/assertj/pull/1782/commits/9cff2c8acdf5e1301e88c192cb623cefacd402cd"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1776,"url":"https://github.com/assertj/assertj/issues/1776","title":"Allow assertion on the root cause message","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">It is currently not directly possible to assert on the root cause message. There is a workaround possible by using <code class=\"notranslate\">hasStackTraceContaining</code>, but it would be nice if this was supported directly.</p>\n<p dir=\"auto\">See also <a href=\"https://stackoverflow.com/questions/38943346/assertj-assert-on-the-cause-message\" rel=\"nofollow\">https://stackoverflow.com/questions/38943346/assertj-assert-on-the-cause-message</a></p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">I would like to be able to do this:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThatExceptionOfType(PersistenceException.class)\n    .isThrownBy(() -&gt; {\n        // test code here\n    })\n   .withRootCauseInstanceOf(PSQLException.class)\n   .withRootCauseMessageMatching(&quot;Key (user_id)=(.*) is not present in table \\&quot;book\\&quot;&quot;);\"><pre><span class=\"pl-en\">assertThatExceptionOfType</span>(<span class=\"pl-smi\">PersistenceException</span>.<span class=\"pl-s1\">class</span>)\n    .<span class=\"pl-en\">isThrownBy</span>(() -&gt; {\n        <span class=\"pl-c\">// test code here</span>\n    })\n   .<span class=\"pl-en\">withRootCauseInstanceOf</span>(<span class=\"pl-smi\">PSQLException</span>.<span class=\"pl-s1\">class</span>)\n   .<span class=\"pl-en\">withRootCauseMessageMatching</span>(<span class=\"pl-s\">\"Key (user_id)=(.*) is not present in table \\\"book\\\"\"</span>);</pre></div>\n<p dir=\"auto\">So to be consistent, probably the following new methods are needed:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">withRootCauseMessageStartingWith(String description)</code></li>\n<li><code class=\"notranslate\">withRootCauseMessageContaining(String description)</code></li>\n<li><code class=\"notranslate\">withRootCauseMessageContainingAll(CharSequence... values)</code></li>\n<li><code class=\"notranslate\">withRootCauseMessageNotContaining(String content)</code></li>\n<li><code class=\"notranslate\">withRootCauseMessageNotContainingAny(CharSequence... values)</code></li>\n<li><code class=\"notranslate\">withRootCauseMessageMatching(String regex)</code></li>\n<li><code class=\"notranslate\">withRootCauseMessageEndingWith(String description)</code></li>\n</ul>","resourcePath":"/assertj/assertj/issues/1776","createdAt":"2020-02-06T10:49:06Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix ShouldContain/ShouldContainOnly use a more specific name in error message","url":"https://github.com/assertj/assertj/pull/1829","resourcePath":"/assertj/assertj/pull/1829","createdAt":"2020-04-11T17:15:28Z","number":1829,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/SoftAssertionsTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/atomic/referencearray/AtomicReferenceArrayAssert_usingComparatorForType_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_usingComparatorForType_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_usingComparatorForType_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/AssertJMultipleFailuresError_getMessage_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/GroupTypeDescription_getGroupTypeDescription_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldContainOnly_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldContain_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/spliterator/Spliterators_assertHasCharacteristics_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/spliterator/Spliterators_assertHasOnlyCharacteristics_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDAyMjE5OTYyOjk0NDU5NzFkZTczZmIwNzdiYTIyYzhmODdlMmE3M2IxMmVlYjBhM2Q=","url":"https://github.com/assertj/assertj/pull/1829/commits/9445971de73fb077ba22c8f87e2a73b12eeb0a3d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1645,"url":"https://github.com/assertj/assertj/issues/1645","title":"ShouldContainXXX: allow to replace \"elements\" by a more specific name","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\"><code class=\"notranslate\">ShouldContainOnly</code> is used in a few places where we know what kind of elements we are dealing with, in this case instead of using the term element we could use a more descriptive name.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Spliterator&lt;?&gt; actual = createSpliterator(SORTED | ORDERED);\nspliterators.assertHasOnlyCharacteristics(INFO, actual, DISTINCT, SORTED);\"><pre><span class=\"pl-smi\">Spliterator</span>&lt;?&gt; <span class=\"pl-s1\">actual</span> = <span class=\"pl-en\">createSpliterator</span>(<span class=\"pl-c1\">SORTED</span> | <span class=\"pl-c1\">ORDERED</span>);\n<span class=\"pl-s1\">spliterators</span>.<span class=\"pl-en\">assertHasOnlyCharacteristics</span>(<span class=\"pl-c1\">INFO</span>, <span class=\"pl-s1\">actual</span>, <span class=\"pl-c1\">DISTINCT</span>, <span class=\"pl-c1\">SORTED</span>);</pre></div>\n<p dir=\"auto\">fails with this error</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Expecting:\n  &lt;[&quot;ORDERED&quot;, &quot;SORTED&quot;]&gt;\nto contain only:\n  &lt;[&quot;DISTINCT&quot;, &quot;SORTED&quot;]&gt;\nelements not found:\n  &lt;[&quot;DISTINCT&quot;]&gt;\nand elements not expected:\n  &lt;[&quot;ORDERED&quot;]&gt;\"><pre class=\"notranslate\"><code>Expecting:\n  &lt;[\"ORDERED\", \"SORTED\"]&gt;\nto contain only:\n  &lt;[\"DISTINCT\", \"SORTED\"]&gt;\nelements not found:\n  &lt;[\"DISTINCT\"]&gt;\nand elements not expected:\n  &lt;[\"ORDERED\"]&gt;\n</code></pre></div>\n<p dir=\"auto\">but we could have</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Expecting spliterator characteristics:\n  &lt;[&quot;ORDERED&quot;, &quot;SORTED&quot;]&gt;\nto contain only:\n  &lt;[&quot;DISTINCT&quot;, &quot;SORTED&quot;]&gt;\ncharacteristics not found:\n  &lt;[&quot;DISTINCT&quot;]&gt;\nand characteristics not expected:\n  &lt;[&quot;ORDERED&quot;]&gt;\"><pre class=\"notranslate\"><code>Expecting spliterator characteristics:\n  &lt;[\"ORDERED\", \"SORTED\"]&gt;\nto contain only:\n  &lt;[\"DISTINCT\", \"SORTED\"]&gt;\ncharacteristics not found:\n  &lt;[\"DISTINCT\"]&gt;\nand characteristics not expected:\n  &lt;[\"ORDERED\"]&gt;\n</code></pre></div>\n<p dir=\"auto\">Same thing for <code class=\"notranslate\">ShouldContain</code>.</p>","resourcePath":"/assertj/assertj/issues/1645","createdAt":"2019-10-19T05:36:37Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"throw AssertionError if XML is bad format when running XML comparisons","url":"https://github.com/assertj/assertj/pull/1852","resourcePath":"/assertj/assertj/pull/1852","createdAt":"2020-04-25T13:57:43Z","number":1852,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/AssertionErrorCreator.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldBeCorrectFormat.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Failures.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Strings.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDA4OTExOTk2OmYyMGM5N2ExOGM1NTk5NDY1YTA3ZmZlMGM3YjQ5MjhlNDU5MmMwYjk=","url":"https://github.com/assertj/assertj/pull/1852/commits/f20c97a18c5599465a07ffe0c7b4928e4592c0b9"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1286,"url":"https://github.com/assertj/assertj/issues/1286","title":"isXmlEqualToContentOf and similar checks should enable description on parse exception","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">When running xml comparisons, it would be useful to be able to print the xml on parse exceptions using as().</p>\n<p dir=\"auto\">Currently a RuntimeException is thrown instead of an assertion error.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;&lt;foo&gt;&lt;/bar&gt;&quot;).as(&quot;show me&quot;).isXmlEqualTo(&quot;&lt;foo&gt;&lt;/foo&gt;&quot;);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"&lt;foo&gt;&lt;/bar&gt;\"</span>).<span class=\"pl-en\">as</span>(<span class=\"pl-s\">\"show me\"</span>).<span class=\"pl-en\">isXmlEqualTo</span>(<span class=\"pl-s\">\"&lt;foo&gt;&lt;/foo&gt;\"</span>);</pre></div>\n<p dir=\"auto\">causes \"show me\" not to be printed</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[Fatal Error] :1:8: The element type &quot;foo&quot; must be terminated by the matching end-tag &quot;&lt;/foo&gt;&quot;.\n\njava.lang.RuntimeException: Unable to format XML string\n\n\tat org.assertj.core.util.xml.XmlStringPrettyFormatter.toXmlDocument(XmlStringPrettyFormatter.java:73)\n\tat org.assertj.core.util.xml.XmlStringPrettyFormatter.xmlPrettyFormat(XmlStringPrettyFormatter.java:45)\n\tat org.assertj.core.internal.Strings.assertXmlEqualsTo(Strings.java:877)\n\tat org.assertj.core.api.AbstractCharSequenceAssert.isXmlEqualTo(AbstractCharSequenceAssert.java:980)\n\tat com.example.Example.testExample(Example.java:19)\nCaused by: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 8; The element type &quot;foo&quot; must be terminated by the matching end-tag &quot;&lt;/foo&gt;&quot;.\n\tat org.apache.xerces.parsers.DOMParser.parse(Unknown Source)\n\tat org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)\n\tat org.assertj.core.util.xml.XmlStringPrettyFormatter.toXmlDocument(XmlStringPrettyFormatter.java:71)\n\t... 32 more```\"><pre class=\"notranslate\"><code>[Fatal Error] :1:8: The element type \"foo\" must be terminated by the matching end-tag \"&lt;/foo&gt;\".\n\njava.lang.RuntimeException: Unable to format XML string\n\n\tat org.assertj.core.util.xml.XmlStringPrettyFormatter.toXmlDocument(XmlStringPrettyFormatter.java:73)\n\tat org.assertj.core.util.xml.XmlStringPrettyFormatter.xmlPrettyFormat(XmlStringPrettyFormatter.java:45)\n\tat org.assertj.core.internal.Strings.assertXmlEqualsTo(Strings.java:877)\n\tat org.assertj.core.api.AbstractCharSequenceAssert.isXmlEqualTo(AbstractCharSequenceAssert.java:980)\n\tat com.example.Example.testExample(Example.java:19)\nCaused by: org.xml.sax.SAXParseException; lineNumber: 1; columnNumber: 8; The element type \"foo\" must be terminated by the matching end-tag \"&lt;/foo&gt;\".\n\tat org.apache.xerces.parsers.DOMParser.parse(Unknown Source)\n\tat org.apache.xerces.jaxp.DocumentBuilderImpl.parse(Unknown Source)\n\tat org.assertj.core.util.xml.XmlStringPrettyFormatter.toXmlDocument(XmlStringPrettyFormatter.java:71)\n\t... 32 more```\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/1286","createdAt":"2018-08-02T02:17:14Z","labels":{"edges":[{"node":{"name":"3rd-party: XMLUnit"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Added asHexString() in AbstractByteArrayAssert","url":"https://github.com/assertj/assertj/pull/1849","resourcePath":"/assertj/assertj/pull/1849","createdAt":"2020-04-22T13:21:41Z","number":1849,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractByteArrayAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/SoftProxies.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/util/Hexadecimals.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/bytearray/ByteArrayAssert_asHexString_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDA3Mjg2NzQwOjNjODkzYjdkMjQyNzFiMTg2ZjQwM2FiMTRkMzU2NTc5M2FlMzg2YTU=","url":"https://github.com/assertj/assertj/pull/1849/commits/3c893b7d24271b186f403ab14d3565793ae386a5"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1839,"url":"https://github.com/assertj/assertj/issues/1839","title":"ByteArrayAssert with Hex-Strings","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Hi i am using a lot of hexadecimal strings in my byte[] Tests. I think the code and the dependency tree could be nicer.<br>\nWhat do you think about this method?</p>\n<p dir=\"auto\">I will write a pull request if this improvement is welcome.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Usage of the new method:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\" assertThat(new byte[] { (byte) 255 , 2  }).asHexString().isEqualTo(&quot;FF02&quot;);\n\n assertThat(new byte[] { (byte) 255 , 2  }).asHexString().isEqualTo(&quot;AF02&quot;);\norg.opentest4j.AssertionFailedError: \nExpecting:\n &lt;&quot;FF02&quot;&gt;\nto be equal to:\n &lt;&quot;AF02&quot;&gt;\nbut was not.\"><pre> <span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[] { (<span class=\"pl-smi\">byte</span>) <span class=\"pl-c1\">255</span> , <span class=\"pl-c1\">2</span>  }).<span class=\"pl-en\">asHexString</span>().<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"FF02\"</span>);\n\n <span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[] { (<span class=\"pl-smi\">byte</span>) <span class=\"pl-c1\">255</span> , <span class=\"pl-c1\">2</span>  }).<span class=\"pl-en\">asHexString</span>().<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"AF02\"</span>);\n<span class=\"pl-smi\">org</span>.<span class=\"pl-smi\">opentest4j</span>.<span class=\"pl-smi\">AssertionFailedError</span>: \n<span class=\"pl-s1\">Expecting</span>:\n &lt;<span class=\"pl-s\">\"FF02\"</span>&gt;\n<span class=\"pl-smi\">to</span> <span class=\"pl-s1\">be</span> <span class=\"pl-smi\">equal</span> <span class=\"pl-s1\">to</span>:\n &lt;<span class=\"pl-s\">\"AF02\"</span>&gt;\n<span class=\"pl-smi\">but</span> <span class=\"pl-s1\">was</span> <span class=\"pl-s1\">not</span>.</pre></div>\n<p dir=\"auto\">Implementation suggestion:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public abstract class AbstractByteArrayAssert&lt;SELF extends AbstractByteArrayAssert&lt;SELF&gt;&gt;\n    extends AbstractArrayAssert&lt;SELF, byte[], Byte&gt; {\n....\n  public AbstractStringAssert&lt;?&gt; asHexString() {\n    objects.assertNotNull(info, actual);\n    return Assertions.assertThat(Hexadecimals.toHexString(actual));\n  }\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">abstract</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">AbstractByteArrayAssert</span>&lt;<span class=\"pl-c1\">SELF</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">AbstractByteArrayAssert</span>&lt;<span class=\"pl-smi\">SELF</span>&gt;&gt;\n    <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">AbstractArrayAssert</span>&lt;<span class=\"pl-smi\">SELF</span>, <span class=\"pl-smi\">byte</span>[], <span class=\"pl-smi\">Byte</span>&gt; {\n....\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">AbstractStringAssert</span>&lt;?&gt; <span class=\"pl-en\">asHexString</span>() {\n    <span class=\"pl-s1\">objects</span>.<span class=\"pl-en\">assertNotNull</span>(<span class=\"pl-s1\">info</span>, <span class=\"pl-s1\">actual</span>);\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Hexadecimals</span>.<span class=\"pl-en\">toHexString</span>(<span class=\"pl-s1\">actual</span>));\n  }</pre></div>","resourcePath":"/assertj/assertj/issues/1839","createdAt":"2020-04-17T14:53:34Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix issue #1289 by adding the annotation @deprecated to method temporaryFolder","url":"https://github.com/assertj/assertj/pull/1856","resourcePath":"/assertj/assertj/pull/1856","createdAt":"2020-04-29T15:38:03Z","number":1856,"mergeCommit":{"oid":"c9c68c354756bd5c4c3f2bc2fa34401879f01a28","message":"Deprecate temporaryFolder() in Files (#1856)","commitUrl":"https://github.com/assertj/assertj/commit/c9c68c354756bd5c4c3f2bc2fa34401879f01a28","parents":{"nodes":[{"oid":"41a66178fb94dc946966a4d619cd7e112f65a74a","message":"Replace lambda with a method reference"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/util/Files.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDEwNzkxODEzOjk0ZTA2NzYzM2FiNzVjMmM2M2UxODZmZGE4NzY2ZmVjNjBmMmQ3OWY=","url":"https://github.com/assertj/assertj/pull/1856/commits/94e067633ab75c2c63e186fda8766fec60f2d79f"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1289,"url":"https://github.com/assertj/assertj/issues/1289","title":"Files#temporaryFolder() will fail if System temporary folder does not exist","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">We noticed this issue when working on a docker based build. We found that the Java defined property for <code class=\"notranslate\">java.io.tmpdir</code> was defined but the folder did <em>not exist</em>. This caused calls to Files#temporaryFolder to fail with the exception:</p>\n<p dir=\"auto\"><code class=\"notranslate\">org.assertj.core.api.exception.RuntimeIOException: Unable to find temporary directory</code></p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    public static void main(String ... args) {\n        System.setProperty(&quot;java.io.tmpdir&quot;, &quot;badger&quot;);\n        assertThat(new File(System.getProperty(&quot;java.io.tmpdir&quot;))).doesNotExist();\n        Files.temporaryFolder(); // Will fail\n    }\"><pre>    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">main</span>(<span class=\"pl-smi\">String</span> ... <span class=\"pl-s1\">args</span>) {\n        <span class=\"pl-s1\">System</span>.<span class=\"pl-en\">setProperty</span>(<span class=\"pl-s\">\"java.io.tmpdir\"</span>, <span class=\"pl-s\">\"badger\"</span>);\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(<span class=\"pl-s1\">System</span>.<span class=\"pl-en\">getProperty</span>(<span class=\"pl-s\">\"java.io.tmpdir\"</span>))).<span class=\"pl-en\">doesNotExist</span>();\n        <span class=\"pl-s1\">Files</span>.<span class=\"pl-en\">temporaryFolder</span>(); <span class=\"pl-c\">// Will fail</span>\n    }</pre></div>\n<p dir=\"auto\">The following code sample would resolve this issue. I am happy to raise this as a pull request if this issue is considered valid.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    public static File temporaryFolder() {\n        File temp = new File(Files.temporaryFolderPath());\n        if (!temp.isDirectory()) {\n            throw new RuntimeIOException(&quot;Unable to find temporary directory&quot;);\n        }\n        if (!temp.exists() &amp;&amp; !temp.mkdirs()) {\n            throw new RuntimeIOException(&quot;Failed to create temporary directory&quot;);\n        }\n        return temp;\n    }\"><pre>    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">File</span> <span class=\"pl-s1\">temporaryFolder</span>() {\n        <span class=\"pl-smi\">File</span> <span class=\"pl-s1\">temp</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(<span class=\"pl-s1\">Files</span>.<span class=\"pl-en\">temporaryFolderPath</span>());\n        <span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">temp</span>.<span class=\"pl-en\">isDirectory</span>()) {\n            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeIOException</span>(<span class=\"pl-s\">\"Unable to find temporary directory\"</span>);\n        }\n        <span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">temp</span>.<span class=\"pl-en\">exists</span>() &amp;&amp; !<span class=\"pl-s1\">temp</span>.<span class=\"pl-en\">mkdirs</span>()) {\n            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeIOException</span>(<span class=\"pl-s\">\"Failed to create temporary directory\"</span>);\n        }\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">temp</span>;\n    }</pre></div>","resourcePath":"/assertj/assertj/issues/1289","createdAt":"2018-08-06T13:37:21Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add method for custom failures with actual/expected","url":"https://github.com/assertj/assertj/pull/1833","resourcePath":"/assertj/assertj/pull/1833","createdAt":"2020-04-14T05:22:46Z","number":1833,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/ConcreteAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_failWithActualExpectedAndMessage_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDAyOTc1NzAzOjdlNzQzYzUzYWYxZjRkMjRmZjJjZjE4OWQ1NmYxMzczY2FiZTZhYzU=","url":"https://github.com/assertj/assertj/pull/1833/commits/7e743c53af1f4d24ff2cf189d56f1373cabe6ac5"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1826,"url":"https://github.com/assertj/assertj/issues/1826","title":"AbstractAssert method for asserting with expected/actual","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I think that <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"538156990\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1731\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/1731/hovercard\" href=\"https://github.com/assertj/assertj/issues/1731\">#1731</a> was great for a certain class of custom assertions. However, i think it would also be a useful addition to <code class=\"notranslate\">AbstractAssert</code> if it had a variant of the <code class=\"notranslate\">failWithMessage()</code> method that you could call directly that would populate expected and actual in the generated <code class=\"notranslate\">AssertionError</code> (where available).</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"failWithExpectedActual(expected,  actual, &quot;My message %d&quot;, myArg);\"><pre><span class=\"pl-en\">failWithExpectedActual</span>(<span class=\"pl-s1\">expected</span>,  <span class=\"pl-s1\">actual</span>, <span class=\"pl-s\">\"My message %d\"</span>, <span class=\"pl-s1\">myArg</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1826","createdAt":"2020-04-11T14:36:23Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add tests for hasNoPath methods in abstractUrlAssert and abstractUriAssert ","url":"https://github.com/assertj/assertj/pull/1890","resourcePath":"/assertj/assertj/pull/1890","createdAt":"2020-05-29T07:34:58Z","number":1890,"mergeCommit":{"oid":"146e4deb043d4654f23b5e0a789a5775ab00ce67","message":"Add tests for hasNoPath methods in abstractUrlAssert and abstractUriAssert  (#1890)\n\n* add tests\r\n\r\n* delect my note\r\n\r\n* delete my note\r\n\r\nCo-authored-by: SuntCrick <43040147+SuntCrick@users.noreply.github.com>","commitUrl":"https://github.com/assertj/assertj/commit/146e4deb043d4654f23b5e0a789a5775ab00ce67","parents":{"nodes":[{"oid":"c77c79b0eac3475a6767c41733547aa23e9183fe","message":"In the event that an iterable is only singly-passable, ie can only be read once (and is destroyed after reading) then the assertion was failing because the iterable was first read into a list and secondly parsed for equal order. Instead read the copied list as the original iterable may have been destroyed."}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractUrlAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/uri/UriAssert_hasNoPath_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/url/UrlAssert_hasNoPath_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDI0OTM3ODQ1OmI2ZGFlOWUyMjNiMTRiYWExNzE2MTA1Yjc2ZjI5YzliMTBiYmQ4N2U=","url":"https://github.com/assertj/assertj/pull/1890/commits/b6dae9e223b14baa1716105b76f29c9b10bbd87e"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1887,"url":"https://github.com/assertj/assertj/issues/1887","title":"Some APIs have no test","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">When I run the coverage test, I find:</p>\n<ul dir=\"auto\">\n<li>in <code class=\"notranslate\">AbstractUrlAssert</code>: <code class=\"notranslate\">hasNoPath()</code> and <code class=\"notranslate\">hasNoParameters()</code> have no test.</li>\n<li>in <code class=\"notranslate\">AbstractUriAssert</code>:<code class=\"notranslate\">hasNoPath()</code> has no test.</li>\n</ul>\n<p dir=\"auto\">Actually, Intellij IDEA tells me that they are never used.</p>\n<p dir=\"auto\">I am happy to raise this as a PR if this issue is considered valid.</p>","resourcePath":"/assertj/assertj/issues/1887","createdAt":"2020-05-27T16:14:18Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"feature: add isNotEqualTo() in RecursiveComparisonAssert","url":"https://github.com/assertj/assertj/pull/1846","resourcePath":"/assertj/assertj/pull/1846","createdAt":"2020-04-21T03:56:19Z","number":1846,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/RecursiveComparisonAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldNotBeEqualComparingFieldByFieldRecursively.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/RecursiveComparisonAssert_isNotEqualTo_BaseTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonAssert_isNotEqualTo_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldNotBeEqualComparingFieldByFieldRecursively_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDA2NDIyMjEyOjRiNzJmZTUwODZjMGJjY2IzNDQ0ZjhjYjNmMzljZWQ3MWJlOTFhZWU=","url":"https://github.com/assertj/assertj/pull/1846/commits/4b72fe5086c0bccb3444f8cb3f39ced71be91aee"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1643,"url":"https://github.com/assertj/assertj/issues/1643","title":"Add reverse of isEqualToComparingFieldByField","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I'd like do check if Object's fields were updated sucessfully, therefore does not contain old data, and <code class=\"notranslate\">isNotEqualToComparingFieldByField</code> could be handy.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"//given\nfinal User user = User();\nuser.setAddress(oldAddress);\n\n//when\nupdateUserAddress(user, newAddressDto);\n\n//then\nassertThat(user.getAddress())\n  .isEqualToComparingFieldByField(newAddressDto)\n  .isNotEqualToComparingFieldByField(oldAddress); //&lt;-please add this\"><pre><span class=\"pl-c\">//given</span>\n<span class=\"pl-k\">final</span> <span class=\"pl-smi\">User</span> <span class=\"pl-s1\">user</span> = <span class=\"pl-en\">User</span>();\n<span class=\"pl-s1\">user</span>.<span class=\"pl-en\">setAddress</span>(<span class=\"pl-s1\">oldAddress</span>);\n\n<span class=\"pl-c\">//when</span>\n<span class=\"pl-en\">updateUserAddress</span>(<span class=\"pl-s1\">user</span>, <span class=\"pl-s1\">newAddressDto</span>);\n\n<span class=\"pl-c\">//then</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">user</span>.<span class=\"pl-en\">getAddress</span>())\n  .<span class=\"pl-en\">isEqualToComparingFieldByField</span>(<span class=\"pl-s1\">newAddressDto</span>)\n  .<span class=\"pl-en\">isNotEqualToComparingFieldByField</span>(<span class=\"pl-s1\">oldAddress</span>); <span class=\"pl-c\">//&lt;-please add this</span></pre></div>\n<p dir=\"auto\">I can not use <code class=\"notranslate\">isNotEqualTo</code>, because <code class=\"notranslate\">address</code> reference did not change (its fields were updated by mapper)</p>","resourcePath":"/assertj/assertj/issues/1643","createdAt":"2019-10-17T22:27:57Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"#1505 Be more descriptive in assertThat(Throwable) by including the stacktrace","url":"https://github.com/assertj/assertj/pull/1861","resourcePath":"/assertj/assertj/pull/1861","createdAt":"2020-05-04T15:36:09Z","number":1861,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Java6Assertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WithAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/configuration/Configuration.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/presentation/StandardRepresentation.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/configuration/Configuration_apply_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/configuration/Configuration_describe_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/configuration/NonDefaultConfiguration.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/presentation/StandardRepresentation_throwable_format_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDEzMDI2NDExOjZlNTI1MzY4ZmZjMDU0ZDg5MDJiZGVmNzg5OTA2Y2E1MDQ2MzZjZDQ=","url":"https://github.com/assertj/assertj/pull/1861/commits/6e525368ffc054d8902bdef789906ca504636cd4"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1505,"url":"https://github.com/assertj/assertj/issues/1505","title":"Be more descriptive in assertThat(Throwable) by including the stacktrace","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I was happy to find an assertThat specifically for <code class=\"notranslate\">Throwable</code>, but it ignores the stacktrace contained within. It should describe the value using the stacktrace instead of simply <code class=\"notranslate\">.toString()</code>.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    public static void main(String[] args) {\n        Exception e;\n        try {\n            throw new RuntimeException();\n        } catch (RuntimeException e2) {\n            e = e2;\n        }\n\n        assertThat(e).isNull();\n    }\"><pre>    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">main</span>(<span class=\"pl-smi\">String</span>[] <span class=\"pl-s1\">args</span>) {\n        <span class=\"pl-smi\">Exception</span> <span class=\"pl-s1\">e</span>;\n        <span class=\"pl-k\">try</span> {\n            <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RuntimeException</span>();\n        } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">RuntimeException</span> <span class=\"pl-s1\">e2</span>) {\n            <span class=\"pl-s1\">e</span> = <span class=\"pl-s1\">e2</span>;\n        }\n\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">e</span>).<span class=\"pl-en\">isNull</span>();\n    }</pre></div>\n<p dir=\"auto\">Output:</p>\n<blockquote>\n<p dir=\"auto\">Exception in thread \"main\" org.junit.ComparisonFailure: expected: but was:&lt;java.lang.RuntimeException&gt;<br>\nat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)<br>\nat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)<br>\nat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)<br>\nat Test.main(Test.java:35)</p>\n</blockquote>\n<h4 dir=\"auto\">Workaround</h4>\n<p dir=\"auto\">To work around it I have to manually describe it using a custom utility (in this case I used Apache Commons Lang):</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(e).as(ExceptionUtils.getStackTrace(e)).isNull();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">e</span>).<span class=\"pl-en\">as</span>(<span class=\"pl-s1\">ExceptionUtils</span>.<span class=\"pl-en\">getStackTrace</span>(<span class=\"pl-s1\">e</span>)).<span class=\"pl-en\">isNull</span>();</pre></div>\n<p dir=\"auto\">Output:</p>\n<blockquote>\n<p dir=\"auto\">Exception in thread \"main\" org.junit.ComparisonFailure: [Exception:<br>\njava.lang.RuntimeException<br>\nat Test.main(Test.java:30)<br>\n] expected: but was:&lt;java.lang.RuntimeException&gt;<br>\nat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)<br>\nat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)<br>\nat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)<br>\nat Test.main(Test.java:35)</p>\n</blockquote>","resourcePath":"/assertj/assertj/issues/1505","createdAt":"2019-05-16T09:13:03Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add assertion HasOnlyFields","url":"https://github.com/assertj/assertj/pull/1857","resourcePath":"/assertj/assertj/pull/1857","createdAt":"2020-04-30T16:37:32Z","number":1857,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractObjectAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldHaveOnlyFieldsOrProperties.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Objects.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/object/ObjectAssert_hasOnlyFieldsOrProperties_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDExNzA2MTQ4OmNhNjlmMjNlMTYwNzE0YjlkY2VmMWQwNGFkMzZmMDJlMzAyOTI1MmY=","url":"https://github.com/assertj/assertj/pull/1857/commits/ca69f23e160714b9dcef1d04ad36f02e3029252f"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1496,"url":"https://github.com/assertj/assertj/issues/1496","title":"Provide a way to assert all the fields a given class can contain","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">It would be nice if <code class=\"notranslate\">AssertJ</code> provides a way to <em>check</em> that a given class contains <strong>only</strong> a certain set of fields/members. I (and probably others) usually test creation/instantiation workflows for POJOs; for instance:</p>\n<div class=\"highlight highlight-source-kotlin notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import nl.jqno.equalsverifier.EqualsVerifier\nimport org.assertj.core.api.Assertions\nimport org.junit.jupiter.api.Test\nimport java.time.Clock\nimport java.time.ZonedDateTime\n\ninternal class IssueTest {\n  @Test\n  fun `create proper instance`() {\n    val start = ZonedDateTime.now(Clock.systemUTC())\n    val instance = Issue(&quot;the title&quot;, &quot;some description&quot;, &quot;full content&quot;)\n    val end = ZonedDateTime.now(Clock.systemUTC())\n    Assertions.assertThat(instance)\n        .hasNoNullFieldsOrPropertiesExcept(&quot;id&quot;)\n        .satisfies {\n          Assertions.assertThat(it.title).isEqualTo(&quot;the title&quot;)\n          Assertions.assertThat(it.description).isEqualTo(&quot;some description&quot;)\n          Assertions.assertThat(it.content).isEqualTo(&quot;full content&quot;)\n          Assertions.assertThat(it.status).isEqualTo(Issue.Status.CREATED)\n          Assertions.assertThat(it.createdAt).isBetween(start, end)\n          Assertions.assertThat(it.modifiedAt).isBetween(start, end)\n          Assertions.assertThat(it.version).isEqualTo(0)\n        }\n  }\n\n  @Test\n  fun `contract between equals and hashCode must be fulfilled`() {\n    EqualsVerifier.forClass(Issue::class.java)\n        .withIgnoredFields(&quot;createdAt&quot;, &quot;modifiedAt&quot;, &quot;id&quot;, &quot;version&quot;)\n        .verify()\n  }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-smi\">nl.jqno.equalsverifier.EqualsVerifier</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.assertj.core.api.Assertions</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">org.junit.jupiter.api.Test</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.time.Clock</span>\n<span class=\"pl-k\">import</span> <span class=\"pl-smi\">java.time.ZonedDateTime</span>\n\n<span class=\"pl-k\">internal</span> <span class=\"pl-k\">class</span> <span class=\"pl-en\">IssueTest</span> {\n  @Test\n  <span class=\"pl-k\">fun</span> <span class=\"pl-en\"><span class=\"pl-s\">`create proper instance`</span></span>() {\n    <span class=\"pl-k\">val</span> start <span class=\"pl-k\">=</span> <span class=\"pl-en\">ZonedDateTime</span>.now(<span class=\"pl-en\">Clock</span>.systemUTC())\n    <span class=\"pl-k\">val</span> instance <span class=\"pl-k\">=</span> <span class=\"pl-en\">Issue</span>(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>the title<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>some description<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>full content<span class=\"pl-pds\">\"</span></span>)\n    <span class=\"pl-k\">val</span> end <span class=\"pl-k\">=</span> <span class=\"pl-en\">ZonedDateTime</span>.now(<span class=\"pl-en\">Clock</span>.systemUTC())\n    <span class=\"pl-en\">Assertions</span>.assertThat(instance)\n        .hasNoNullFieldsOrPropertiesExcept(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>)\n        .satisfies {\n          <span class=\"pl-en\">Assertions</span>.assertThat(it.title).isEqualTo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>the title<span class=\"pl-pds\">\"</span></span>)\n          <span class=\"pl-en\">Assertions</span>.assertThat(it.description).isEqualTo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>some description<span class=\"pl-pds\">\"</span></span>)\n          <span class=\"pl-en\">Assertions</span>.assertThat(it.content).isEqualTo(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>full content<span class=\"pl-pds\">\"</span></span>)\n          <span class=\"pl-en\">Assertions</span>.assertThat(it.status).isEqualTo(<span class=\"pl-en\">Issue</span>.<span class=\"pl-en\">Status</span>.<span class=\"pl-en\">CREATED</span>)\n          <span class=\"pl-en\">Assertions</span>.assertThat(it.createdAt).isBetween(start, end)\n          <span class=\"pl-en\">Assertions</span>.assertThat(it.modifiedAt).isBetween(start, end)\n          <span class=\"pl-en\">Assertions</span>.assertThat(it.version).isEqualTo(<span class=\"pl-c1\">0</span>)\n        }\n  }\n\n  @Test\n  <span class=\"pl-k\">fun</span> <span class=\"pl-en\"><span class=\"pl-s\">`contract between equals and hashCode must be fulfilled`</span></span>() {\n    <span class=\"pl-en\">EqualsVerifier</span>.forClass(<span class=\"pl-en\">Issue</span>::<span class=\"pl-c1\">class</span>.java)\n        .withIgnoredFields(<span class=\"pl-s\"><span class=\"pl-pds\">\"</span>createdAt<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>modifiedAt<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>id<span class=\"pl-pds\">\"</span></span>, <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>version<span class=\"pl-pds\">\"</span></span>)\n        .verify()\n  }\n}</pre></div>\n<p dir=\"auto\">In that realm, we keep adding/removing/updating/modifying members, so having that kind of assertion(s) will let you have more confidence when you do such things.</p>\n<p dir=\"auto\">I see there is already a <code class=\"notranslate\">hasFieldOrProperty(\"fieldName\")</code>, so I'm thinking about something like <code class=\"notranslate\">hasOnlyFieldsOrProperties(\"field1\", \"field2\", ..., \"fieldN\")</code>.</p>\n<p dir=\"auto\">In the end, I'm not sure if this is super useful for some others, but I thought I would start somewhere <g-emoji class=\"g-emoji\" alias=\"sunglasses\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f60e.png\">😎</g-emoji></p>","resourcePath":"/assertj/assertj/issues/1496","createdAt":"2019-04-30T21:45:09Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Added two-dimensional arrays assertions","url":"https://github.com/assertj/assertj/pull/1883","resourcePath":"/assertj/assertj/pull/1883","createdAt":"2020-05-24T16:39:57Z","number":1883,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/long2darrays/Long2DArrays_assertNotEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/long2darrays/Long2DArrays_assertNullOrEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertContains_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertDoesNotContain_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertHasSameSizeAs_with_Array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertHasSize_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertNotEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertNullOrEmpty_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/IterableUtil_toArray_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDIyNDM4MzA3OjFiZWQ0NjIwOGY2OTNiZjNjOGVhYmQ2NjQzZGZhZWVhODA3NmRkYjk=","url":"https://github.com/assertj/assertj/pull/1883/commits/1bed46208f693bf3c8eabd6643dfaeea8076ddb9"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1182,"url":"https://github.com/assertj/assertj/issues/1182","title":"Multidimensional arrays assertion","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Pursuing SO question <a href=\"https://stackoverflow.com/questions/48652678/assertj-multidimensional-arrays-assertion-deep-equals/\" rel=\"nofollow\">AssertJ multidimensional arrays assertion (deep equals)<br>\n</a> i'd like to try to make an assertion for multidimensional arrays.</p>\n<p dir=\"auto\">I think i'd implement it similar to native Java <code class=\"notranslate\">Arrays#deepEquals()</code>, just \"extending\" it with nicer assertion exceptions, including indexes and actual/expected values.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int[][] expected = {\n    new int[]{1, 0, 1},\n    new int[]{0, 0, 0},\n    new int[]{1, 1, 1}\n};\n \nint[][] actual = gameOfLife.play(board);\n\nassertThat(actual).isDeepEqualTo(expected);\"><pre><span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">expected</span> = {\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>}\n};\n \n<span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">gameOfLife</span>.<span class=\"pl-en\">play</span>(<span class=\"pl-s1\">board</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">isDeepEqualTo</span>(<span class=\"pl-s1\">expected</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1182","createdAt":"2018-02-12T21:20:48Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix issue: #1862 refactor test classes in `internal/urls/`","url":"https://github.com/assertj/assertj/pull/1874","resourcePath":"/assertj/assertj/pull/1874","createdAt":"2020-05-16T11:29:47Z","number":1874,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasAnchor_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasAuthority_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasHost_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasNoParameter_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasParameter_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasPath_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasPort_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasProtocol_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasQuery_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasUserInfo_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDE4OTU1MDY3OmNlZmFhZWI2ZmYyNWQ0NmNiYjA1NDBkZTc3ZDFiYWY4ZTBiOWJmMDQ=","url":"https://github.com/assertj/assertj/pull/1874/commits/cefaaeb6ff25d46cbb0540de77d1baf8e0b9bf04"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1862,"url":"https://github.com/assertj/assertj/issues/1862","title":"Two inappropriate test samples","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I think there are two inappropriate test samples in <code class=\"notranslate\">Urls_assertHasQuery_Test</code> and <code class=\"notranslate\">Uris_assertHasQuery_Test</code>.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">In <code class=\"notranslate\">Urls_assertHasQuery_Test</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  public void should_fail_if_actual_is_null() {\n    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -&gt; urls.assertHasQuery(info, null, \n                                                                                         &quot;http://www.helloworld.org/index.html?type=test&quot;)).withMessage(actualIsNull());\n  }\"><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">should_fail_if_actual_is_null</span>() {\n    <span class=\"pl-en\">assertThatExceptionOfType</span>(<span class=\"pl-smi\">AssertionError</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isThrownBy</span>(() -&gt; <span class=\"pl-s1\">urls</span>.<span class=\"pl-en\">assertHasQuery</span>(<span class=\"pl-s1\">info</span>, <span class=\"pl-c1\">null</span>, \n                                                                                         <span class=\"pl-s\">\"http://www.helloworld.org/index.html?type=test\"</span>)).<span class=\"pl-en\">withMessage</span>(<span class=\"pl-en\">actualIsNull</span>());\n  }</pre></div>\n<p dir=\"auto\">should be:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  public void should_fail_if_actual_is_null() {\n    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -&gt; urls.assertHasQuery(info, null, \n                                                                                         &quot;type=test&quot;)).withMessage(actualIsNull());\n  }\"><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">should_fail_if_actual_is_null</span>() {\n    <span class=\"pl-en\">assertThatExceptionOfType</span>(<span class=\"pl-smi\">AssertionError</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isThrownBy</span>(() -&gt; <span class=\"pl-s1\">urls</span>.<span class=\"pl-en\">assertHasQuery</span>(<span class=\"pl-s1\">info</span>, <span class=\"pl-c1\">null</span>, \n                                                                                         <span class=\"pl-s\">\"type=test\"</span>)).<span class=\"pl-en\">withMessage</span>(<span class=\"pl-en\">actualIsNull</span>());\n  }</pre></div>\n<p dir=\"auto\">And in <code class=\"notranslate\">Uris_assertHasQuery_Test</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  public void should_fail_if_actual_is_null() {\n    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -&gt; uris.assertHasQuery(info, null, \n                                                                                         &quot;http://www.helloworld.org/index.html?type=test&quot;)).withMessage(actualIsNull());\n  }\"><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">should_fail_if_actual_is_null</span>() {\n    <span class=\"pl-en\">assertThatExceptionOfType</span>(<span class=\"pl-smi\">AssertionError</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isThrownBy</span>(() -&gt; <span class=\"pl-s1\">uris</span>.<span class=\"pl-en\">assertHasQuery</span>(<span class=\"pl-s1\">info</span>, <span class=\"pl-c1\">null</span>, \n                                                                                         <span class=\"pl-s\">\"http://www.helloworld.org/index.html?type=test\"</span>)).<span class=\"pl-en\">withMessage</span>(<span class=\"pl-en\">actualIsNull</span>());\n  }</pre></div>\n<p dir=\"auto\">should be:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  public void should_fail_if_actual_is_null() {\n    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -&gt; uris.assertHasQuery(info, null, \n                                                                                         &quot;type=test&quot;)).withMessage(actualIsNull());\n  }\"><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">should_fail_if_actual_is_null</span>() {\n    <span class=\"pl-en\">assertThatExceptionOfType</span>(<span class=\"pl-smi\">AssertionError</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isThrownBy</span>(() -&gt; <span class=\"pl-s1\">uris</span>.<span class=\"pl-en\">assertHasQuery</span>(<span class=\"pl-s1\">info</span>, <span class=\"pl-c1\">null</span>, \n                                                                                         <span class=\"pl-s\">\"type=test\"</span>)).<span class=\"pl-en\">withMessage</span>(<span class=\"pl-en\">actualIsNull</span>());\n  }</pre></div>\n<p dir=\"auto\">If this issue is valid, I'd like to create a PR for it.</p>","resourcePath":"/assertj/assertj/issues/1862","createdAt":"2020-05-05T01:37:03Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Assertions for two-dimensional arrays of byte","url":"https://github.com/assertj/assertj/pull/1917","resourcePath":"/assertj/assertj/pull/1917","createdAt":"2020-06-16T19:53:12Z","number":1917,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/byte2darray/Byte2DArrayAssert_isNullOrEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/byte2darray/Byte2DArrayAssert_usingCustomComparator_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/Byte2DArraysBaseTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/byte2darrays/Byte2DArrays_assertContains_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/byte2darrays/Byte2DArrays_assertDoesNotContain_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/byte2darrays/Byte2DArrays_assertEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/byte2darrays/Byte2DArrays_assertHasDimensions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/byte2darrays/Byte2DArrays_assertHasSameDimensionsAs_with_Array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/byte2darrays/Byte2DArrays_assertNotEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/byte2darrays/Byte2DArrays_assertNullOrEmpty_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDM1NDMzNjkzOmM4OGI4Yzc3ZWM2NWYwMGFjNGYyMWQ1YjI2OTQ3NGEwODhmOWZiYTM=","url":"https://github.com/assertj/assertj/pull/1917/commits/c88b8c77ec65f00ac4f21d5b269474a088f9fba3"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1182,"url":"https://github.com/assertj/assertj/issues/1182","title":"Multidimensional arrays assertion","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Pursuing SO question <a href=\"https://stackoverflow.com/questions/48652678/assertj-multidimensional-arrays-assertion-deep-equals/\" rel=\"nofollow\">AssertJ multidimensional arrays assertion (deep equals)<br>\n</a> i'd like to try to make an assertion for multidimensional arrays.</p>\n<p dir=\"auto\">I think i'd implement it similar to native Java <code class=\"notranslate\">Arrays#deepEquals()</code>, just \"extending\" it with nicer assertion exceptions, including indexes and actual/expected values.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int[][] expected = {\n    new int[]{1, 0, 1},\n    new int[]{0, 0, 0},\n    new int[]{1, 1, 1}\n};\n \nint[][] actual = gameOfLife.play(board);\n\nassertThat(actual).isDeepEqualTo(expected);\"><pre><span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">expected</span> = {\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>}\n};\n \n<span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">gameOfLife</span>.<span class=\"pl-en\">play</span>(<span class=\"pl-s1\">board</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">isDeepEqualTo</span>(<span class=\"pl-s1\">expected</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1182","createdAt":"2018-02-12T21:20:48Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Renamed hasSize(int, int) to hasDimensions(int, int) for two-dimensio…","url":"https://github.com/assertj/assertj/pull/1928","resourcePath":"/assertj/assertj/pull/1928","createdAt":"2020-06-21T09:01:36Z","number":1928,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Array2DAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Char2DArrayAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Int2DArrayAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Char2DArrays.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Int2DArrays.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/InstanceOfAssertFactoriesTest.java"}},{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/api/char2darray/Char2DArrayAssert_hasDimensions_Test.java"}},{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/api/int2darray/Int2DArrayAssert_hasDimensions_Test.java"}},{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/internal/char2darrays/Char2DArrays_assertHasDimensions_Test.java"}},{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/internal/int2darrays/Int2DArrays_assertHasDimensions_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDM3NTE3NjEzOmIwNjI0NDc1Mzc4MGU3NDAwNTJlMDMxYTE3MzFlNWRhYjg3OTI1OWM=","url":"https://github.com/assertj/assertj/pull/1928/commits/b06244753780e740052e031a1731e5dab879259c"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1182,"url":"https://github.com/assertj/assertj/issues/1182","title":"Multidimensional arrays assertion","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Pursuing SO question <a href=\"https://stackoverflow.com/questions/48652678/assertj-multidimensional-arrays-assertion-deep-equals/\" rel=\"nofollow\">AssertJ multidimensional arrays assertion (deep equals)<br>\n</a> i'd like to try to make an assertion for multidimensional arrays.</p>\n<p dir=\"auto\">I think i'd implement it similar to native Java <code class=\"notranslate\">Arrays#deepEquals()</code>, just \"extending\" it with nicer assertion exceptions, including indexes and actual/expected values.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int[][] expected = {\n    new int[]{1, 0, 1},\n    new int[]{0, 0, 0},\n    new int[]{1, 1, 1}\n};\n \nint[][] actual = gameOfLife.play(board);\n\nassertThat(actual).isDeepEqualTo(expected);\"><pre><span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">expected</span> = {\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>}\n};\n \n<span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">gameOfLife</span>.<span class=\"pl-en\">play</span>(<span class=\"pl-s1\">board</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">isDeepEqualTo</span>(<span class=\"pl-s1\">expected</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1182","createdAt":"2018-02-12T21:20:48Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add isEmpty, isNotEmpty in AbstractInputStreamAssert ","url":"https://github.com/assertj/assertj/pull/1893","resourcePath":"/assertj/assertj/pull/1893","createdAt":"2020-05-30T16:12:59Z","number":1893,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractInputStreamAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/InputStreams.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/inputstream/InputStreamAssert_isEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/inputstream/InputStreamAssert_isNotEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/inputstreams/InputStreams_assertIsEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/inputstreams/InputStreams_assertIsNotEmpty_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDI1NDg4ODEyOmY2M2FmYzliNjFiYmUxYzlhZjBiMTNhYjViNGRmOWI4YjcyZjI3ZjE=","url":"https://github.com/assertj/assertj/pull/1893/commits/f63afc9b61bbe1c9af0b13ab5b4df9b8b72f27f1"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1284,"url":"https://github.com/assertj/assertj/issues/1284","title":"AbstractInputStreamAssert should assert isEmpty, isNotEmpty","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"       static Supplier&lt;InputStream&gt; getDocumentDataById( long id ) {...}\n\n        assertThat(  DocumentRepository.getDocumentDataById( 0 ).get() )\n            .hasSameContentAs( new ByteArrayInputStream( new byte[0] ) );\"><pre class=\"notranslate\"><code>       static Supplier&lt;InputStream&gt; getDocumentDataById( long id ) {...}\n\n        assertThat(  DocumentRepository.getDocumentDataById( 0 ).get() )\n            .hasSameContentAs( new ByteArrayInputStream( new byte[0] ) );\n</code></pre></div>\n<p dir=\"auto\">thinking it'd be nice to write</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        assertThat(  DocumentRepository.getDocumentDataById( 0 ).get() ).isEmpty();\"><pre class=\"notranslate\"><code>        assertThat(  DocumentRepository.getDocumentDataById( 0 ).get() ).isEmpty();\n</code></pre></div>\n<p dir=\"auto\">also looking at verifying that contents of some things aren't empty or maybe <code class=\"notranslate\">contentIsSize( int size )</code></p>\n<p dir=\"auto\">also, I don't appear to get at <code class=\"notranslate\">hasSameContentAs</code> when running in list context.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    assertThat( ids )\n        .extracting( DocumentRepository::getDocumentDataById )\n        .extracting( Supplier::get )\n        .doesNotContain( bais )\n        .isNotNull();\"><pre class=\"notranslate\"><code>    assertThat( ids )\n        .extracting( DocumentRepository::getDocumentDataById )\n        .extracting( Supplier::get )\n        .doesNotContain( bais )\n        .isNotNull();\n</code></pre></div>\n<p dir=\"auto\">also maybe a</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\".hasSize( bytes )\"><pre class=\"notranslate\"><code>.hasSize( bytes )\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/1284","createdAt":"2018-07-27T16:06:22Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Assertions for two-dimensional arrays of Object","url":"https://github.com/assertj/assertj/pull/1921","resourcePath":"/assertj/assertj/pull/1921","createdAt":"2020-06-16T21:18:58Z","number":1921,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/object2darray/Object2DArrayAssert_isNullOrEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/object2darray/Object2DArrayAssert_usingCustomComparator_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/Object2DArraysBaseTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/object2darrays/Object2DArrays_assertContains_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/object2darrays/Object2DArrays_assertDoesNotContain_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/object2darrays/Object2DArrays_assertEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/object2darrays/Object2DArrays_assertHasDimensions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/object2darrays/Object2DArrays_assertHasSameDimensionsAs_with_Array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/object2darrays/Object2DArrays_assertNotEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/object2darrays/Object2DArrays_assertNullOrEmpty_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDM1NDcyMjAyOjI3NWRkNjJjNzg2NzVlYzNkYTViMGUwYjE5MDE3YTJlOGNiMTU4ZTg=","url":"https://github.com/assertj/assertj/pull/1921/commits/275dd62c78675ec3da5b0e0b19017a2e8cb158e8"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1182,"url":"https://github.com/assertj/assertj/issues/1182","title":"Multidimensional arrays assertion","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Pursuing SO question <a href=\"https://stackoverflow.com/questions/48652678/assertj-multidimensional-arrays-assertion-deep-equals/\" rel=\"nofollow\">AssertJ multidimensional arrays assertion (deep equals)<br>\n</a> i'd like to try to make an assertion for multidimensional arrays.</p>\n<p dir=\"auto\">I think i'd implement it similar to native Java <code class=\"notranslate\">Arrays#deepEquals()</code>, just \"extending\" it with nicer assertion exceptions, including indexes and actual/expected values.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int[][] expected = {\n    new int[]{1, 0, 1},\n    new int[]{0, 0, 0},\n    new int[]{1, 1, 1}\n};\n \nint[][] actual = gameOfLife.play(board);\n\nassertThat(actual).isDeepEqualTo(expected);\"><pre><span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">expected</span> = {\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>}\n};\n \n<span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">gameOfLife</span>.<span class=\"pl-en\">play</span>(<span class=\"pl-s1\">board</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">isDeepEqualTo</span>(<span class=\"pl-s1\">expected</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1182","createdAt":"2018-02-12T21:20:48Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Added two-dimensional int arrays assertions","url":"https://github.com/assertj/assertj/pull/1886","resourcePath":"/assertj/assertj/pull/1886","createdAt":"2020-05-27T14:17:30Z","number":1886,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/int2darray/Int2DArrayAssert_isNullOrEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/Int2DArraysBaseTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/int2darrays/Int2DArrays_assertContains_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/int2darrays/Int2DArrays_assertDoesNotContain_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/int2darrays/Int2DArrays_assertEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/int2darrays/Int2DArrays_assertHasSameSizeAs_with_Array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/int2darrays/Int2DArrays_assertHasSize_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/int2darrays/Int2DArrays_assertNotEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/int2darrays/Int2DArrays_assertNullOrEmpty_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/IterableUtil_toArray_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDIzODgzNDc2Ojg2MTczMzU1YWNmZWY4MGZkNjllY2VkYWNmZDU1ZjZjYWEzOGRjNDA=","url":"https://github.com/assertj/assertj/pull/1886/commits/86173355acfef80fd69ecedacfd55f6caa38dc40"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1182,"url":"https://github.com/assertj/assertj/issues/1182","title":"Multidimensional arrays assertion","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Pursuing SO question <a href=\"https://stackoverflow.com/questions/48652678/assertj-multidimensional-arrays-assertion-deep-equals/\" rel=\"nofollow\">AssertJ multidimensional arrays assertion (deep equals)<br>\n</a> i'd like to try to make an assertion for multidimensional arrays.</p>\n<p dir=\"auto\">I think i'd implement it similar to native Java <code class=\"notranslate\">Arrays#deepEquals()</code>, just \"extending\" it with nicer assertion exceptions, including indexes and actual/expected values.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int[][] expected = {\n    new int[]{1, 0, 1},\n    new int[]{0, 0, 0},\n    new int[]{1, 1, 1}\n};\n \nint[][] actual = gameOfLife.play(board);\n\nassertThat(actual).isDeepEqualTo(expected);\"><pre><span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">expected</span> = {\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>}\n};\n \n<span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">gameOfLife</span>.<span class=\"pl-en\">play</span>(<span class=\"pl-s1\">board</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">isDeepEqualTo</span>(<span class=\"pl-s1\">expected</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1182","createdAt":"2018-02-12T21:20:48Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Assertions for two-dimensional arrays of float","url":"https://github.com/assertj/assertj/pull/1919","resourcePath":"/assertj/assertj/pull/1919","createdAt":"2020-06-16T20:55:41Z","number":1919,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/float2darray/Float2DArrayAssert_isNullOrEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/float2darray/Float2DArrayAssert_usingCustomComparator_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/Float2DArraysBaseTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/float2darrays/Float2DArrays_assertContains_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/float2darrays/Float2DArrays_assertDoesNotContain_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/float2darrays/Float2DArrays_assertEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/float2darrays/Float2DArrays_assertHasDimensions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/float2darrays/Float2DArrays_assertHasSameDimensionsAs_with_Array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/float2darrays/Float2DArrays_assertNotEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/float2darrays/Float2DArrays_assertNullOrEmpty_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDM1NDYxOTUzOjc3OTk1MGI2NWM3OTlmOTIzYTk4OTU2MzM4MzUzZjk0Yzk0ZDJjZTc=","url":"https://github.com/assertj/assertj/pull/1919/commits/779950b65c799f923a98956338353f94c94d2ce7"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1182,"url":"https://github.com/assertj/assertj/issues/1182","title":"Multidimensional arrays assertion","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Pursuing SO question <a href=\"https://stackoverflow.com/questions/48652678/assertj-multidimensional-arrays-assertion-deep-equals/\" rel=\"nofollow\">AssertJ multidimensional arrays assertion (deep equals)<br>\n</a> i'd like to try to make an assertion for multidimensional arrays.</p>\n<p dir=\"auto\">I think i'd implement it similar to native Java <code class=\"notranslate\">Arrays#deepEquals()</code>, just \"extending\" it with nicer assertion exceptions, including indexes and actual/expected values.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int[][] expected = {\n    new int[]{1, 0, 1},\n    new int[]{0, 0, 0},\n    new int[]{1, 1, 1}\n};\n \nint[][] actual = gameOfLife.play(board);\n\nassertThat(actual).isDeepEqualTo(expected);\"><pre><span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">expected</span> = {\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>}\n};\n \n<span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">gameOfLife</span>.<span class=\"pl-en\">play</span>(<span class=\"pl-s1\">board</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">isDeepEqualTo</span>(<span class=\"pl-s1\">expected</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1182","createdAt":"2018-02-12T21:20:48Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add usingConfigurableRecursiveFieldByFieldElementComparator.","url":"https://github.com/assertj/assertj/pull/1891","resourcePath":"/assertj/assertj/pull/1891","createdAt":"2020-05-29T22:36:56Z","number":1891,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractIterableAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/internal/ConfigurableRecursiveFieldByFieldComparator.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_usingAdvancedRecursiveFieldByFieldElementComparator_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration_builder_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/ConfigurableRecursiveFieldByFieldComparator_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDI1MzYyNDAxOmU5MmY3ZGNlNGU0MjZmMzAxYTZiNjM4ZjliMmRhM2JjYWY5OTY3NTU=","url":"https://github.com/assertj/assertj/pull/1891/commits/e92f7dce4e426f301a6b638f9b2da3bcaf996755"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1876,"url":"https://github.com/assertj/assertj/issues/1876","title":"usingRecursiveFieldByFieldElementComparator and usingComparatorForType unexpected behavior","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I faced an unexpected behavior (for me) with <code class=\"notranslate\">usingRecursiveFieldByFieldElementComparator</code> and <code class=\"notranslate\">usingComparatorForType </code>.</p>\n<p dir=\"auto\">I'd except them to go recursively through all fields and check each field value. But something seems to be checking for the hash/equals before doing so.</p>\n<p dir=\"auto\">In the example bellow the test that <code class=\"notranslate\">works()</code> uses <code class=\"notranslate\">@lombok.Getter</code> which does not override hash/equals, the test that <code class=\"notranslate\">fails()</code> uses <code class=\"notranslate\">@lombok.Value</code> which does override.</p>\n<p dir=\"auto\">If that's not a bug, It would be good to have something to add clarity to this issue.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"package com.example.hi;\n\nimport com.example.hi.ExampleTest.Foo.Bar;\nimport com.example.hi.ExampleTest.One.Two;\nimport lombok.AllArgsConstructor;\nimport lombok.Getter;\nimport lombok.Value;\nimport org.junit.jupiter.api.Test;\n\nimport java.time.LocalDateTime;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Map;\n\nimport static java.util.Collections.singletonList;\nimport static org.assertj.core.api.Assertions.assertThat;\n\npublic class ExampleTest {\n\n    Comparator&lt;LocalDateTime&gt; truncateSeconds = (a, exp) -&gt;\n        a.isAfter(exp.truncatedTo(ChronoUnit.SECONDS)) ? 0 : 1;\n\n    @Test\n    void works() {\n\n        var a = new Foo(Map.of(&quot;one&quot;, singletonList(new Bar(LocalDateTime.now()))));\n        var b = new Foo(Map.of(&quot;one&quot;, singletonList(new Bar(LocalDateTime.now()))));\n\n        assertThat(singletonList(a))\n            .usingRecursiveFieldByFieldElementComparator()\n            .usingComparatorForType(truncateSeconds, LocalDateTime.class)\n            .containsExactly(b);\n    }\n\n    @Test\n    void fails() {\n\n        var a = new One(Map.of(&quot;one&quot;, singletonList(new Two(LocalDateTime.now()))));\n        var b = new One(Map.of(&quot;one&quot;, singletonList(new Two(LocalDateTime.now()))));\n\n        assertThat(singletonList(a))\n            .usingRecursiveFieldByFieldElementComparator()\n            .usingComparatorForType(truncateSeconds, LocalDateTime.class)\n            .containsExactly(b);\n    }\n\n    @Getter\n    @AllArgsConstructor\n    public static class Foo {\n\n        Map&lt;String, List&lt;Bar&gt;&gt; values;\n\n        @Getter\n        @AllArgsConstructor\n        public static class Bar {\n\n            LocalDateTime date;\n        }\n    }\n\n    @Value\n    @AllArgsConstructor\n    public static class One {\n\n        Map&lt;String, List&lt;Two&gt;&gt; values;\n\n        @Value\n        @AllArgsConstructor\n        public static class Two {\n\n            LocalDateTime date;\n        }\n    }\n}\"><pre><span class=\"pl-k\">package</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">example</span>.<span class=\"pl-s1\">hi</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">example</span>.<span class=\"pl-s1\">hi</span>.<span class=\"pl-s1\">ExampleTest</span>.<span class=\"pl-s1\">Foo</span>.<span class=\"pl-s1\">Bar</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">example</span>.<span class=\"pl-s1\">hi</span>.<span class=\"pl-s1\">ExampleTest</span>.<span class=\"pl-s1\">One</span>.<span class=\"pl-s1\">Two</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">lombok</span>.<span class=\"pl-s1\">AllArgsConstructor</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">lombok</span>.<span class=\"pl-s1\">Getter</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">lombok</span>.<span class=\"pl-s1\">Value</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">time</span>.<span class=\"pl-s1\">LocalDateTime</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">time</span>.<span class=\"pl-s1\">temporal</span>.<span class=\"pl-s1\">ChronoUnit</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Comparator</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">List</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Map</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Collections</span>.<span class=\"pl-s1\">singletonList</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">assertj</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-s1\">assertThat</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ExampleTest</span> {\n\n    <span class=\"pl-smi\">Comparator</span>&lt;<span class=\"pl-smi\">LocalDateTime</span>&gt; <span class=\"pl-s1\">truncateSeconds</span> = (<span class=\"pl-s1\">a</span>, <span class=\"pl-s1\">exp</span>) -&gt;\n        <span class=\"pl-s1\">a</span>.<span class=\"pl-en\">isAfter</span>(<span class=\"pl-s1\">exp</span>.<span class=\"pl-en\">truncatedTo</span>(<span class=\"pl-smi\">ChronoUnit</span>.<span class=\"pl-c1\">SECONDS</span>)) ? <span class=\"pl-c1\">0</span> : <span class=\"pl-c1\">1</span>;\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">works</span>() {\n\n        <span class=\"pl-smi\">var</span> <span class=\"pl-s1\">a</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Foo</span>(<span class=\"pl-s1\">Map</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"one\"</span>, <span class=\"pl-en\">singletonList</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Bar</span>(<span class=\"pl-s1\">LocalDateTime</span>.<span class=\"pl-en\">now</span>()))));\n        <span class=\"pl-smi\">var</span> <span class=\"pl-s1\">b</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Foo</span>(<span class=\"pl-s1\">Map</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"one\"</span>, <span class=\"pl-en\">singletonList</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Bar</span>(<span class=\"pl-s1\">LocalDateTime</span>.<span class=\"pl-en\">now</span>()))));\n\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-en\">singletonList</span>(<span class=\"pl-s1\">a</span>))\n            .<span class=\"pl-en\">usingRecursiveFieldByFieldElementComparator</span>()\n            .<span class=\"pl-en\">usingComparatorForType</span>(<span class=\"pl-s1\">truncateSeconds</span>, <span class=\"pl-smi\">LocalDateTime</span>.<span class=\"pl-s1\">class</span>)\n            .<span class=\"pl-en\">containsExactly</span>(<span class=\"pl-s1\">b</span>);\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">fails</span>() {\n\n        <span class=\"pl-smi\">var</span> <span class=\"pl-s1\">a</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">One</span>(<span class=\"pl-s1\">Map</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"one\"</span>, <span class=\"pl-en\">singletonList</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Two</span>(<span class=\"pl-s1\">LocalDateTime</span>.<span class=\"pl-en\">now</span>()))));\n        <span class=\"pl-smi\">var</span> <span class=\"pl-s1\">b</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">One</span>(<span class=\"pl-s1\">Map</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"one\"</span>, <span class=\"pl-en\">singletonList</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Two</span>(<span class=\"pl-s1\">LocalDateTime</span>.<span class=\"pl-en\">now</span>()))));\n\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-en\">singletonList</span>(<span class=\"pl-s1\">a</span>))\n            .<span class=\"pl-en\">usingRecursiveFieldByFieldElementComparator</span>()\n            .<span class=\"pl-en\">usingComparatorForType</span>(<span class=\"pl-s1\">truncateSeconds</span>, <span class=\"pl-smi\">LocalDateTime</span>.<span class=\"pl-s1\">class</span>)\n            .<span class=\"pl-en\">containsExactly</span>(<span class=\"pl-s1\">b</span>);\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Getter</span>\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">AllArgsConstructor</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Foo</span> {\n\n        <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Bar</span>&gt;&gt; <span class=\"pl-s1\">values</span>;\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Getter</span>\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">AllArgsConstructor</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Bar</span> {\n\n            <span class=\"pl-smi\">LocalDateTime</span> <span class=\"pl-s1\">date</span>;\n        }\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Value</span>\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">AllArgsConstructor</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">One</span> {\n\n        <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Two</span>&gt;&gt; <span class=\"pl-s1\">values</span>;\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Value</span>\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">AllArgsConstructor</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Two</span> {\n\n            <span class=\"pl-smi\">LocalDateTime</span> <span class=\"pl-s1\">date</span>;\n        }\n    }\n}</pre></div>","resourcePath":"/assertj/assertj/issues/1876","createdAt":"2020-05-16T13:14:09Z","labels":{"edges":[]}}},{"node":{"number":1881,"url":"https://github.com/assertj/assertj/issues/1881","title":"Allow element comparator to use the new recursive comparison","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">The current <code class=\"notranslate\">usingRecursiveFieldByFieldElementComparator</code>is fairly rigid as it is not based on the new recursive comparison.</p>\n<p dir=\"auto\">Opening it to the new recursive comparison would make much more flexible allowing users to call iterable assertions (when the new recursive API only exposes <code class=\"notranslate\">isEqualTo</code> assertion).</p>\n<p dir=\"auto\">This approach does not expose a nice fluent API like <code class=\"notranslate\">RecursiveComparisonAssert</code>, users will have to build the <code class=\"notranslate\">RecursiveComparisonConfiguration</code> to use, this can be made more user friendly by adding a builder to <code class=\"notranslate\">RecursiveComparisonConfiguration</code>.</p>\n<p dir=\"auto\">Should we change to <code class=\"notranslate\">usingRecursiveFieldByFieldElementComparator</code>  to be <code class=\"notranslate\">usingConfigurableRecursiveFieldByFieldElementComparator(newRecursiveComparisonConfiguration())</code> ?</p>\n<p dir=\"auto\">That would be a breaking change and make methods like <code class=\"notranslate\">usingComparatorForElementFieldsWithNames</code>, <code class=\"notranslate\">usingComparatorForElementFieldsWithType</code>, <code class=\"notranslate\">usingElementComparatorOnFields</code> irrelevant.</p>\n<p dir=\"auto\">The API for recursive comparison should be cleaned as it exposes (too) many way to perform recursive comparison.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Foo actual = new Foo(&quot;1&quot;, new Bar(1));\nFoo other = new Foo(&quot;2&quot;, new Bar(1));\n\nRecursiveComparisonConfiguration configuration = new RecursiveComparisonConfiguration();\nconfiguration.ignoreFields(&quot;id&quot;);\n\n// succeeds as we ignore id which differs in \nassertThat(list(actual)).usingConfigurableRecursiveFieldByFieldElementComparator(configuration)\n                        .contains(other);\"><pre><span class=\"pl-smi\">Foo</span> <span class=\"pl-s1\">actual</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Foo</span>(<span class=\"pl-s\">\"1\"</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Bar</span>(<span class=\"pl-c1\">1</span>));\n<span class=\"pl-smi\">Foo</span> <span class=\"pl-s1\">other</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Foo</span>(<span class=\"pl-s\">\"2\"</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Bar</span>(<span class=\"pl-c1\">1</span>));\n\n<span class=\"pl-smi\">RecursiveComparisonConfiguration</span> <span class=\"pl-s1\">configuration</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">RecursiveComparisonConfiguration</span>();\n<span class=\"pl-s1\">configuration</span>.<span class=\"pl-en\">ignoreFields</span>(<span class=\"pl-s\">\"id\"</span>);\n\n<span class=\"pl-c\">// succeeds as we ignore id which differs in </span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-en\">list</span>(<span class=\"pl-s1\">actual</span>)).<span class=\"pl-en\">usingConfigurableRecursiveFieldByFieldElementComparator</span>(<span class=\"pl-s1\">configuration</span>)\n                        .<span class=\"pl-en\">contains</span>(<span class=\"pl-s1\">other</span>);</pre></div>\n<p dir=\"auto\">where <code class=\"notranslate\">Foo</code> and <code class=\"notranslate\">Bar</code> are defined like:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public static class Foo {\n  String id;\n  Bar bar;\n  public Foo(String id, Bar bar) {\n    this.id = id;\n    this.bar = bar;\n  }\n}\n\npublic static class Bar {\n  public int id;\n  public Bar(int id) {\n    this.id = id;\n  }\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Foo</span> {\n  <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">id</span>;\n  <span class=\"pl-smi\">Bar</span> <span class=\"pl-s1\">bar</span>;\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Foo</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">id</span>, <span class=\"pl-smi\">Bar</span> <span class=\"pl-s1\">bar</span>) {\n    <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">id</span> = <span class=\"pl-s1\">id</span>;\n    <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">bar</span> = <span class=\"pl-s1\">bar</span>;\n  }\n}\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Bar</span> {\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">id</span>;\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Bar</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">id</span>) {\n    <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">id</span> = <span class=\"pl-s1\">id</span>;\n  }\n}</pre></div>","resourcePath":"/assertj/assertj/issues/1881","createdAt":"2020-05-24T06:18:37Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"better failure message formats for long array and iterable","url":"https://github.com/assertj/assertj/pull/1884","resourcePath":"/assertj/assertj/pull/1884","createdAt":"2020-05-25T18:32:51Z","number":1884,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/presentation/StandardRepresentation.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/presentation/NumberGrouping_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/presentation/StandardRepresentation_array_format_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/presentation/StandardRepresentation_iterable_format_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/presentation/StandardRepresentation_map_format_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/presentation/StandardRepresentation_toStringOf_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/presentation/StandardRepresentation_unambiguousToStringOf_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDIyODU4Nzc4OmFmNWRmNjFlMTEyZDBiYmYwNGQ4MmVmNDQ2ZDE1YmFmZWRhNmI4ODk=","url":"https://github.com/assertj/assertj/pull/1884/commits/af5df61e112d0bbf04d82ef446d15bafeda6b889"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1473,"url":"https://github.com/assertj/assertj/issues/1473","title":"better failure message for endswith","bodyHTML":"<p dir=\"auto\">given a very long list, a ... is used to represent the end of the list, however this isn't really useful when calling <code class=\"notranslate\">.endsWith</code>, suggest displaying a tail of the list instead</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    2019-03-19T22:42:27.999,\n    ...]&gt;\nto end with:\n &lt;[2019-03-19T22:42:27.009990]&gt;\"><pre class=\"notranslate\"><code>    2019-03-19T22:42:27.999,\n    ...]&gt;\nto end with:\n &lt;[2019-03-19T22:42:27.009990]&gt;\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/1473","createdAt":"2019-03-20T03:45:27Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"refactor test classes in /internal/urls","url":"https://github.com/assertj/assertj/pull/1875","resourcePath":"/assertj/assertj/pull/1875","createdAt":"2020-05-16T11:44:51Z","number":1875,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasAnchor_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasAuthority_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasHost_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasNoParameter_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasParameter_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasPath_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasPort_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasProtocol_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasQuery_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertHasUserInfo_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDE4OTU2Njc2OmI3M2IwYWE0MjU1MTAxMWJjMzQ3OTcxZDI2OTY5OWU4ZDhjZWRiZmQ=","url":"https://github.com/assertj/assertj/pull/1875/commits/b73b0aa42551011bc347971d269699e8d8cedbfd"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1862,"url":"https://github.com/assertj/assertj/issues/1862","title":"Two inappropriate test samples","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I think there are two inappropriate test samples in <code class=\"notranslate\">Urls_assertHasQuery_Test</code> and <code class=\"notranslate\">Uris_assertHasQuery_Test</code>.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">In <code class=\"notranslate\">Urls_assertHasQuery_Test</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  public void should_fail_if_actual_is_null() {\n    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -&gt; urls.assertHasQuery(info, null, \n                                                                                         &quot;http://www.helloworld.org/index.html?type=test&quot;)).withMessage(actualIsNull());\n  }\"><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">should_fail_if_actual_is_null</span>() {\n    <span class=\"pl-en\">assertThatExceptionOfType</span>(<span class=\"pl-smi\">AssertionError</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isThrownBy</span>(() -&gt; <span class=\"pl-s1\">urls</span>.<span class=\"pl-en\">assertHasQuery</span>(<span class=\"pl-s1\">info</span>, <span class=\"pl-c1\">null</span>, \n                                                                                         <span class=\"pl-s\">\"http://www.helloworld.org/index.html?type=test\"</span>)).<span class=\"pl-en\">withMessage</span>(<span class=\"pl-en\">actualIsNull</span>());\n  }</pre></div>\n<p dir=\"auto\">should be:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  public void should_fail_if_actual_is_null() {\n    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -&gt; urls.assertHasQuery(info, null, \n                                                                                         &quot;type=test&quot;)).withMessage(actualIsNull());\n  }\"><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">should_fail_if_actual_is_null</span>() {\n    <span class=\"pl-en\">assertThatExceptionOfType</span>(<span class=\"pl-smi\">AssertionError</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isThrownBy</span>(() -&gt; <span class=\"pl-s1\">urls</span>.<span class=\"pl-en\">assertHasQuery</span>(<span class=\"pl-s1\">info</span>, <span class=\"pl-c1\">null</span>, \n                                                                                         <span class=\"pl-s\">\"type=test\"</span>)).<span class=\"pl-en\">withMessage</span>(<span class=\"pl-en\">actualIsNull</span>());\n  }</pre></div>\n<p dir=\"auto\">And in <code class=\"notranslate\">Uris_assertHasQuery_Test</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  public void should_fail_if_actual_is_null() {\n    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -&gt; uris.assertHasQuery(info, null, \n                                                                                         &quot;http://www.helloworld.org/index.html?type=test&quot;)).withMessage(actualIsNull());\n  }\"><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">should_fail_if_actual_is_null</span>() {\n    <span class=\"pl-en\">assertThatExceptionOfType</span>(<span class=\"pl-smi\">AssertionError</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isThrownBy</span>(() -&gt; <span class=\"pl-s1\">uris</span>.<span class=\"pl-en\">assertHasQuery</span>(<span class=\"pl-s1\">info</span>, <span class=\"pl-c1\">null</span>, \n                                                                                         <span class=\"pl-s\">\"http://www.helloworld.org/index.html?type=test\"</span>)).<span class=\"pl-en\">withMessage</span>(<span class=\"pl-en\">actualIsNull</span>());\n  }</pre></div>\n<p dir=\"auto\">should be:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  public void should_fail_if_actual_is_null() {\n    assertThatExceptionOfType(AssertionError.class).isThrownBy(() -&gt; uris.assertHasQuery(info, null, \n                                                                                         &quot;type=test&quot;)).withMessage(actualIsNull());\n  }\"><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">should_fail_if_actual_is_null</span>() {\n    <span class=\"pl-en\">assertThatExceptionOfType</span>(<span class=\"pl-smi\">AssertionError</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isThrownBy</span>(() -&gt; <span class=\"pl-s1\">uris</span>.<span class=\"pl-en\">assertHasQuery</span>(<span class=\"pl-s1\">info</span>, <span class=\"pl-c1\">null</span>, \n                                                                                         <span class=\"pl-s\">\"type=test\"</span>)).<span class=\"pl-en\">withMessage</span>(<span class=\"pl-en\">actualIsNull</span>());\n  }</pre></div>\n<p dir=\"auto\">If this issue is valid, I'd like to create a PR for it.</p>","resourcePath":"/assertj/assertj/issues/1862","createdAt":"2020-05-05T01:37:03Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Assertions for two-dimensional arrays of double","url":"https://github.com/assertj/assertj/pull/1920","resourcePath":"/assertj/assertj/pull/1920","createdAt":"2020-06-16T21:06:03Z","number":1920,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/double2darray/Double2DArrayAssert_isNullOrEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/double2darray/Double2DArrayAssert_usingCustomComparator_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/Double2DArraysBaseTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/double2darrays/Double2DArrays_assertContains_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/double2darrays/Double2DArrays_assertDoesNotContain_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/double2darrays/Double2DArrays_assertEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/double2darrays/Double2DArrays_assertHasDimensions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/double2darrays/Double2DArrays_assertHasSameDimensionsAs_with_Array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/double2darrays/Double2DArrays_assertNotEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/double2darrays/Double2DArrays_assertNullOrEmpty_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDM1NDY2NjUzOjMxNzJhZDMxNDVmZTE4NjlmODM3YjIwMjIzZjE0ZjI1NjgwNGQzNzc=","url":"https://github.com/assertj/assertj/pull/1920/commits/3172ad3145fe1869f837b20223f14f256804d377"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1182,"url":"https://github.com/assertj/assertj/issues/1182","title":"Multidimensional arrays assertion","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Pursuing SO question <a href=\"https://stackoverflow.com/questions/48652678/assertj-multidimensional-arrays-assertion-deep-equals/\" rel=\"nofollow\">AssertJ multidimensional arrays assertion (deep equals)<br>\n</a> i'd like to try to make an assertion for multidimensional arrays.</p>\n<p dir=\"auto\">I think i'd implement it similar to native Java <code class=\"notranslate\">Arrays#deepEquals()</code>, just \"extending\" it with nicer assertion exceptions, including indexes and actual/expected values.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int[][] expected = {\n    new int[]{1, 0, 1},\n    new int[]{0, 0, 0},\n    new int[]{1, 1, 1}\n};\n \nint[][] actual = gameOfLife.play(board);\n\nassertThat(actual).isDeepEqualTo(expected);\"><pre><span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">expected</span> = {\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>}\n};\n \n<span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">gameOfLife</span>.<span class=\"pl-en\">play</span>(<span class=\"pl-s1\">board</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">isDeepEqualTo</span>(<span class=\"pl-s1\">expected</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1182","createdAt":"2018-02-12T21:20:48Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Assertions for two-dimensional arrays of long","url":"https://github.com/assertj/assertj/pull/1913","resourcePath":"/assertj/assertj/pull/1913","createdAt":"2020-06-16T07:55:29Z","number":1913,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/long2darray/Long2DArrayAssert_isNullOrEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/long2darray/Long2DArrayAssert_usingCustomComparator_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/Long2DArraysBaseTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/long2darrays/Long2DArrays_assertContains_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/long2darrays/Long2DArrays_assertDoesNotContain_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/long2darrays/Long2DArrays_assertEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/long2darrays/Long2DArrays_assertHasDimensions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/long2darrays/Long2DArrays_assertHasSameDimensionsAs_with_Array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/long2darrays/Long2DArrays_assertNotEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/long2darrays/Long2DArrays_assertNullOrEmpty_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDM1MDM5ODMwOmE5ZDExNTU0NDcyMjIwYTdhNjhlYzc2YWQzNWQ3YjMzYzBlNzYxM2E=","url":"https://github.com/assertj/assertj/pull/1913/commits/a9d11554472220a7a68ec76ad35d7b33c0e7613a"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1182,"url":"https://github.com/assertj/assertj/issues/1182","title":"Multidimensional arrays assertion","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Pursuing SO question <a href=\"https://stackoverflow.com/questions/48652678/assertj-multidimensional-arrays-assertion-deep-equals/\" rel=\"nofollow\">AssertJ multidimensional arrays assertion (deep equals)<br>\n</a> i'd like to try to make an assertion for multidimensional arrays.</p>\n<p dir=\"auto\">I think i'd implement it similar to native Java <code class=\"notranslate\">Arrays#deepEquals()</code>, just \"extending\" it with nicer assertion exceptions, including indexes and actual/expected values.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int[][] expected = {\n    new int[]{1, 0, 1},\n    new int[]{0, 0, 0},\n    new int[]{1, 1, 1}\n};\n \nint[][] actual = gameOfLife.play(board);\n\nassertThat(actual).isDeepEqualTo(expected);\"><pre><span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">expected</span> = {\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>}\n};\n \n<span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">gameOfLife</span>.<span class=\"pl-en\">play</span>(<span class=\"pl-s1\">board</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">isDeepEqualTo</span>(<span class=\"pl-s1\">expected</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1182","createdAt":"2018-02-12T21:20:48Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix issue #1879: allow failures to be recorded from multiple threads","url":"https://github.com/assertj/assertj/pull/1880","resourcePath":"/assertj/assertj/pull/1880","createdAt":"2020-05-22T12:43:09Z","number":1880,"mergeCommit":{"oid":"433f57382bbb77e7c6154b9a60ca207ce84d8618","message":"Fix issue #1879: allow failures to be recorded from multiple threads (#1880)","commitUrl":"https://github.com/assertj/assertj/commit/433f57382bbb77e7c6154b9a60ca207ce84d8618","parents":{"nodes":[{"oid":"7d8872b9a2e25a927813212e2c861c74a43c83b5","message":"Replace orElseGet by orElseThrow to throw an error"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/ErrorCollector.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDIxODk4NDY0OjE2YjRiZGZmN2FlZGUyZjlkYzllN2Y3OTYyNzcwMTI1YTE0YjRkYTI=","url":"https://github.com/assertj/assertj/pull/1880/commits/16b4bdff7aede2f9dc9e7f7962770125a14b4da2"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1879,"url":"https://github.com/assertj/assertj/issues/1879","title":"There appears no way to add failures to SoftAssertions from multiple threads","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Consider I need to collect multiple failures produced in multiple threads. Currently, <code class=\"notranslate\">SoftAssertions</code> doesn't allow me to do so w/o extra synchronizers.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">For example, this code is broken because changes made to the <code class=\"notranslate\">SoftAssertions</code> instance from other threads might not be visible from the main thread:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        final SoftAssertions softly = new SoftAssertions();\n\n        final ForkJoinPool forkJoinPool = ForkJoinPool.commonPool();\n        forkJoinPool.execute(() -&gt; {\n            softly.assertThat(&quot;foo&quot;).hasToString(&quot;foo&quot;);\n        });\n        forkJoinPool.execute(() -&gt; {\n            softly.assertThat(&quot;bar&quot;).hasToString(&quot;bar&quot;);\n        });\n\n        softly.assertAll();\"><pre>        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">SoftAssertions</span> <span class=\"pl-s1\">softly</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">SoftAssertions</span>();\n\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ForkJoinPool</span> <span class=\"pl-s1\">forkJoinPool</span> = <span class=\"pl-s1\">ForkJoinPool</span>.<span class=\"pl-en\">commonPool</span>();\n        <span class=\"pl-s1\">forkJoinPool</span>.<span class=\"pl-en\">execute</span>(() -&gt; {\n            <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"foo\"</span>).<span class=\"pl-en\">hasToString</span>(<span class=\"pl-s\">\"foo\"</span>);\n        });\n        <span class=\"pl-s1\">forkJoinPool</span>.<span class=\"pl-en\">execute</span>(() -&gt; {\n            <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"bar\"</span>).<span class=\"pl-en\">hasToString</span>(<span class=\"pl-s\">\"bar\"</span>);\n        });\n\n        <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertAll</span>();</pre></div>\n<p dir=\"auto\">What is the best approach to solve the above problem?</p>\n<p dir=\"auto\">Guarding <code class=\"notranslate\">SoftAssertions</code> with a synchronized block wherever I'm accessing the instance doesn't seem like a good solution (especially from test readability standpoint).</p>\n<p dir=\"auto\">Probably you could introduce something like <code class=\"notranslate\">SynchronizedSoftAssertions</code> or least make the list of failures a <em>synchronized list</em>. At the same time, it's not clear how to guard the whole call chain like</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"softly.assertThat(&quot;foo&quot;).hasToString(&quot;foo&quot;);\"><pre><span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"foo\"</span>).<span class=\"pl-en\">hasToString</span>(<span class=\"pl-s\">\"foo\"</span>);</pre></div>\n<p dir=\"auto\">with a single lock.</p>","resourcePath":"/assertj/assertj/issues/1879","createdAt":"2020-05-21T11:25:12Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Added java.time.Period assertions","url":"https://github.com/assertj/assertj/pull/1901","resourcePath":"/assertj/assertj/pull/1901","createdAt":"2020-06-03T21:09:48Z","number":1901,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldBePeriod.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldHavePeriod.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/InstanceOfAssertFactoriesTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/SoftAssertionsTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/SoftAssertions_combined_with_asInstanceOf_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/period/PeriodAssert_hasDays_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/period/PeriodAssert_hasMonths_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/period/PeriodAssert_hasYears_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/period/PeriodAssert_isNegative_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/period/PeriodAssert_isPositive_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDI3NDU3OTAyOmZhMGI5YTkzMzdkZmNjNmIzZWM2YjMxOTgxMWNhMDlmODkwMDRhMGY=","url":"https://github.com/assertj/assertj/pull/1901/commits/fa0b9a9337dfcc6b3ec6b319811ca09f89004a0f"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1853,"url":"https://github.com/assertj/assertj/issues/1853","title":"Add assertThat for java.time.Period","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Similar to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"510748405\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1650\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/1650/hovercard\" href=\"https://github.com/assertj/assertj/issues/1650\">#1650</a> it would be great to support <code class=\"notranslate\">java.time.Period</code></p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Period period = Period.of(1,1,1)\nassertThat(period)\n    .hasYear(1)\n    .hasMonth(1)\n    .hasDays(1);\"><pre><span class=\"pl-smi\">Period</span> <span class=\"pl-s1\">period</span> = <span class=\"pl-s1\">Period</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>)\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">period</span>)\n    .<span class=\"pl-en\">hasYear</span>(<span class=\"pl-c1\">1</span>)\n    .<span class=\"pl-en\">hasMonth</span>(<span class=\"pl-c1\">1</span>)\n    .<span class=\"pl-en\">hasDays</span>(<span class=\"pl-c1\">1</span>);</pre></div>\n<p dir=\"auto\">If you are agree with this I can work on it.</p>","resourcePath":"/assertj/assertj/issues/1853","createdAt":"2020-04-26T23:43:40Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix #1643, add an api isNotEqualToComparingFieldByField()","url":"https://github.com/assertj/assertj/pull/1844","resourcePath":"/assertj/assertj/pull/1844","createdAt":"2020-04-20T07:10:08Z","number":1844,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[]},"commits":{"edges":[]},"closingIssuesReferences":{"edges":[{"node":{"number":1643,"url":"https://github.com/assertj/assertj/issues/1643","title":"Add reverse of isEqualToComparingFieldByField","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I'd like do check if Object's fields were updated sucessfully, therefore does not contain old data, and <code class=\"notranslate\">isNotEqualToComparingFieldByField</code> could be handy.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"//given\nfinal User user = User();\nuser.setAddress(oldAddress);\n\n//when\nupdateUserAddress(user, newAddressDto);\n\n//then\nassertThat(user.getAddress())\n  .isEqualToComparingFieldByField(newAddressDto)\n  .isNotEqualToComparingFieldByField(oldAddress); //&lt;-please add this\"><pre><span class=\"pl-c\">//given</span>\n<span class=\"pl-k\">final</span> <span class=\"pl-smi\">User</span> <span class=\"pl-s1\">user</span> = <span class=\"pl-en\">User</span>();\n<span class=\"pl-s1\">user</span>.<span class=\"pl-en\">setAddress</span>(<span class=\"pl-s1\">oldAddress</span>);\n\n<span class=\"pl-c\">//when</span>\n<span class=\"pl-en\">updateUserAddress</span>(<span class=\"pl-s1\">user</span>, <span class=\"pl-s1\">newAddressDto</span>);\n\n<span class=\"pl-c\">//then</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">user</span>.<span class=\"pl-en\">getAddress</span>())\n  .<span class=\"pl-en\">isEqualToComparingFieldByField</span>(<span class=\"pl-s1\">newAddressDto</span>)\n  .<span class=\"pl-en\">isNotEqualToComparingFieldByField</span>(<span class=\"pl-s1\">oldAddress</span>); <span class=\"pl-c\">//&lt;-please add this</span></pre></div>\n<p dir=\"auto\">I can not use <code class=\"notranslate\">isNotEqualTo</code>, because <code class=\"notranslate\">address</code> reference did not change (its fields were updated by mapper)</p>","resourcePath":"/assertj/assertj/issues/1643","createdAt":"2019-10-17T22:27:57Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix NPE when evaluating objects that can lead to cycle/infinite recur…","url":"https://github.com/assertj/assertj/pull/1868","resourcePath":"/assertj/assertj/pull/1868","createdAt":"2020-05-08T06:50:16Z","number":1868,"mergeCommit":{"oid":"11189e9fee21b00d88ddf42a9ba21a327874fc7c","message":"Fix NPE when evaluating objects that can lead to cycle/infinite recursion (#1868)","commitUrl":"https://github.com/assertj/assertj/commit/11189e9fee21b00d88ddf42a9ba21a327874fc7c","parents":{"nodes":[{"oid":"a64f3fb4e942d85a671fedc98eca3d8e262772ff","message":"Fix javadoc (#1865)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/recursive/comparison/DualValue.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/recursive/comparison/ColorWithCode.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/DualValue_hasPotentialCyclingValues_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonAssert_isEqualTo_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/objects/data/FriendlyPerson.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDE1MDc3ODY3OmE1M2Y3NjM0OWExNTM3NmU5N2YzMzlkNGZlMmIyYTdhNWZhOThjYWY=","url":"https://github.com/assertj/assertj/pull/1868/commits/a53f76349a15376e97f339d4fe2b2a7a5fa98caf"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1866,"url":"https://github.com/assertj/assertj/issues/1866","title":"NPE in DualValue.isPotentialCyclingValue while using recursive comparison","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.NullPointerException\n\tat org.assertj.core.api.recursive.comparison.DualValue.isPotentialCyclingValue(DualValue.java:225)\n\tat org.assertj.core.api.recursive.comparison.DualValue.hasPotentialCyclingValues(DualValue.java:218)\n\tat org.assertj.core.api.recursive.comparison.RecursiveComparisonDifferenceCalculator$ComparisonState.pickDualValueToCompare(RecursiveComparisonDifferenceCalculator.java:100)\n\tat org.assertj.core.api.recursive.comparison.RecursiveComparisonDifferenceCalculator.determineDifferences(RecursiveComparisonDifferenceCalculator.java:200)\n\tat org.assertj.core.api.recursive.comparison.RecursiveComparisonDifferenceCalculator.determineDifferences(RecursiveComparisonDifferenceCalculator.java:188)\n\tat org.assertj.core.api.RecursiveComparisonAssert.determineDifferencesWith(RecursiveComparisonAssert.java:970)\n\tat org.assertj.core.api.RecursiveComparisonAssert.isEqualTo(RecursiveComparisonAssert.java:159)\"><pre class=\"notranslate\"><code>java.lang.NullPointerException\n\tat org.assertj.core.api.recursive.comparison.DualValue.isPotentialCyclingValue(DualValue.java:225)\n\tat org.assertj.core.api.recursive.comparison.DualValue.hasPotentialCyclingValues(DualValue.java:218)\n\tat org.assertj.core.api.recursive.comparison.RecursiveComparisonDifferenceCalculator$ComparisonState.pickDualValueToCompare(RecursiveComparisonDifferenceCalculator.java:100)\n\tat org.assertj.core.api.recursive.comparison.RecursiveComparisonDifferenceCalculator.determineDifferences(RecursiveComparisonDifferenceCalculator.java:200)\n\tat org.assertj.core.api.recursive.comparison.RecursiveComparisonDifferenceCalculator.determineDifferences(RecursiveComparisonDifferenceCalculator.java:188)\n\tat org.assertj.core.api.RecursiveComparisonAssert.determineDifferencesWith(RecursiveComparisonAssert.java:970)\n\tat org.assertj.core.api.RecursiveComparisonAssert.isEqualTo(RecursiveComparisonAssert.java:159)\n</code></pre></div>\n<p dir=\"auto\">It looks like we should check if <code class=\"notranslate\">java.lang.Class#getCanonicalName</code> is <code class=\"notranslate\">null</code> as well. According to the java doc this can be the case, see <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#getCanonicalName--\" rel=\"nofollow\">javadoc</a>.</p>\n<p dir=\"auto\"><a href=\"https://github.com/joel-costigliola/assertj-core/blob/a64f3fb4e942d85a671fedc98eca3d8e262772ff/src/main/java/org/assertj/core/api/recursive/comparison/DualValue.java#L221-L226\">https://github.com/joel-costigliola/assertj-core/blob/a64f3fb4e942d85a671fedc98eca3d8e262772ff/src/main/java/org/assertj/core/api/recursive/comparison/DualValue.java#L221-L226</a></p>\n<p dir=\"auto\">I will add a sample later on.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;add example here&gt;\"><pre>&lt;<span class=\"pl-smi\">add</span> <span class=\"pl-s1\">example</span> <span class=\"pl-s1\">here</span>&gt;</pre></div>","resourcePath":"/assertj/assertj/issues/1866","createdAt":"2020-05-07T05:56:58Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Assertions for two-dimensional arrays of boolean","url":"https://github.com/assertj/assertj/pull/1916","resourcePath":"/assertj/assertj/pull/1916","createdAt":"2020-06-16T19:45:36Z","number":1916,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/boolean2darray/Boolean2DArrayAssert_isNullOrEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/boolean2darray/Boolean2DArrayAssert_usingCustomComparator_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/Boolean2DArraysBaseTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/boolean2darrays/Boolean2DArrays_assertContains_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/boolean2darrays/Boolean2DArrays_assertDoesNotContain_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/boolean2darrays/Boolean2DArrays_assertEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/boolean2darrays/Boolean2DArrays_assertHasDimensions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/boolean2darrays/Boolean2DArrays_assertHasSameDimensionsAs_with_Array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/boolean2darrays/Boolean2DArrays_assertNotEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/boolean2darrays/Boolean2DArrays_assertNullOrEmpty_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDM1NDMwNDI0OmU2ZmQzZjNlY2NiYjczYTgxZDU2MDA2MjJmZmM3ZjRlMzJjYTc2MmE=","url":"https://github.com/assertj/assertj/pull/1916/commits/e6fd3f3eccbb73a81d5600622ffc7f4e32ca762a"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1182,"url":"https://github.com/assertj/assertj/issues/1182","title":"Multidimensional arrays assertion","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Pursuing SO question <a href=\"https://stackoverflow.com/questions/48652678/assertj-multidimensional-arrays-assertion-deep-equals/\" rel=\"nofollow\">AssertJ multidimensional arrays assertion (deep equals)<br>\n</a> i'd like to try to make an assertion for multidimensional arrays.</p>\n<p dir=\"auto\">I think i'd implement it similar to native Java <code class=\"notranslate\">Arrays#deepEquals()</code>, just \"extending\" it with nicer assertion exceptions, including indexes and actual/expected values.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int[][] expected = {\n    new int[]{1, 0, 1},\n    new int[]{0, 0, 0},\n    new int[]{1, 1, 1}\n};\n \nint[][] actual = gameOfLife.play(board);\n\nassertThat(actual).isDeepEqualTo(expected);\"><pre><span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">expected</span> = {\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>}\n};\n \n<span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">gameOfLife</span>.<span class=\"pl-en\">play</span>(<span class=\"pl-s1\">board</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">isDeepEqualTo</span>(<span class=\"pl-s1\">expected</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1182","createdAt":"2018-02-12T21:20:48Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add containsOnlyOnceElementsOf()","url":"https://github.com/assertj/assertj/pull/1847","resourcePath":"/assertj/assertj/pull/1847","createdAt":"2020-04-21T12:54:36Z","number":1847,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractIterableAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractObjectArrayAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AtomicReferenceArrayAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/ObjectEnumerableAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/atomic/referencearray/AtomicReferenceArrayAssert_containsOnlyOnceElementsOf_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_containsOnlyOnceElementsOf_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_should_honor_SortedSet_comparator_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_containsOnlyOnceElementsOf_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDA2NjU1NjIwOmQwZWVlN2U0NjM4MzkwYzE5ODc4NjA0NzE2MjBmZTgyNGIzNDg1ZTM=","url":"https://github.com/assertj/assertj/pull/1847/commits/d0eee7e4638390c1987860471620fe824b3485e3"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1632,"url":"https://github.com/assertj/assertj/issues/1632","title":"Add containsOnlyElementsOfOnce","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Would be nice to have this method for completeness, in addition to <code class=\"notranslate\">containsOnlyElementsOf()</code> and <code class=\"notranslate\">containsOnlyOnce()</code>.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(myColl).containsOnlyElementsOfOnce(referenceColl);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">myColl</span>).<span class=\"pl-en\">containsOnlyElementsOfOnce</span>(<span class=\"pl-s1\">referenceColl</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1632","createdAt":"2019-10-08T18:05:17Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Assertions for two-dimensional arrays of short","url":"https://github.com/assertj/assertj/pull/1914","resourcePath":"/assertj/assertj/pull/1914","createdAt":"2020-06-16T08:27:03Z","number":1914,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/short2darray/Short2DArrayAssert_isNullOrEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/short2darray/Short2DArrayAssert_usingCustomComparator_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/Short2DArraysBaseTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertContains_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertDoesNotContain_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertHasDimensions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertHasSameDimensionsAs_with_Array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertNotEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertNullOrEmpty_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDM1MDU2Mjg0OjBjYmE4NmIxYTk3ZmQ4MTdjM2QyMWJiY2Q0ODY0YjY3ZDBhNzU4OWI=","url":"https://github.com/assertj/assertj/pull/1914/commits/0cba86b1a97fd817c3d21bbcd4864b67d0a7589b"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1182,"url":"https://github.com/assertj/assertj/issues/1182","title":"Multidimensional arrays assertion","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Pursuing SO question <a href=\"https://stackoverflow.com/questions/48652678/assertj-multidimensional-arrays-assertion-deep-equals/\" rel=\"nofollow\">AssertJ multidimensional arrays assertion (deep equals)<br>\n</a> i'd like to try to make an assertion for multidimensional arrays.</p>\n<p dir=\"auto\">I think i'd implement it similar to native Java <code class=\"notranslate\">Arrays#deepEquals()</code>, just \"extending\" it with nicer assertion exceptions, including indexes and actual/expected values.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int[][] expected = {\n    new int[]{1, 0, 1},\n    new int[]{0, 0, 0},\n    new int[]{1, 1, 1}\n};\n \nint[][] actual = gameOfLife.play(board);\n\nassertThat(actual).isDeepEqualTo(expected);\"><pre><span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">expected</span> = {\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>}\n};\n \n<span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">gameOfLife</span>.<span class=\"pl-en\">play</span>(<span class=\"pl-s1\">board</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">isDeepEqualTo</span>(<span class=\"pl-s1\">expected</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1182","createdAt":"2018-02-12T21:20:48Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add decodedAsBase64 to AbstractStringAssert","url":"https://github.com/assertj/assertj/pull/1830","resourcePath":"/assertj/assertj/pull/1830","createdAt":"2020-04-11T22:18:05Z","number":1830,"mergeCommit":{"oid":"391d6553bd6874beba6fedb4bb90d3733ff9aa71","message":"Add decodedAsBase64 to AbstractStringAssert (#1830)","commitUrl":"https://github.com/assertj/assertj/commit/391d6553bd6874beba6fedb4bb90d3733ff9aa71","parents":{"nodes":[{"oid":"a66b9562b0b10364ead666c9269e2555b7c4bfe6","message":"Cache maven repository to speed-up github actions builds. (#1832)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractStringAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/SoftProxies.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldBeEqual.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/SoftAssertionsTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/string_/StringAssert_decodedAsBase64_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDAyMjU0NzUxOjVhMTMxM2FkYzFjNjgzMGQ3NmE4NGQ5MDRmYjU1YjY2NTNkMjdjZTU=","url":"https://github.com/assertj/assertj/pull/1830/commits/5a1313adc1c6830d76a84d904fb55b6653d27ce5"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1805,"url":"https://github.com/assertj/assertj/issues/1805","title":"Base64 support for AbstractStringAssert","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Java 8 has built-in support for Base64 with <code class=\"notranslate\">java.util.Base64</code>.</p>\n<p dir=\"auto\">What about adding decoding assertions to <code class=\"notranslate\">AbstractStringAssert</code>?</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;THVrZSBTa3l3YWxrZXI=&quot;)\n  .isBase64()  // relies on java.util.Base64.getDecoder().decode(String) which throws IllegalArgumentException in case of wrong input\n  .decodedAsBase64() // Changes the object under assertion, returning a new ByteArrayAssert\n  ... // additional byte array assertions\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"THVrZSBTa3l3YWxrZXI=\"</span>)\n  .<span class=\"pl-en\">isBase64</span>()  <span class=\"pl-c\">// relies on java.util.Base64.getDecoder().decode(String) which throws IllegalArgumentException in case of wrong input</span>\n  .<span class=\"pl-en\">decodedAsBase64</span>() <span class=\"pl-c\">// Changes the object under assertion, returning a new ByteArrayAssert</span>\n  ... <span class=\"pl-c\">// additional byte array assertions</span></pre></div>","resourcePath":"/assertj/assertj/issues/1805","createdAt":"2020-03-14T09:49:26Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add satisfy in AbstractIterableAssert","url":"https://github.com/assertj/assertj/pull/1892","resourcePath":"/assertj/assertj/pull/1892","createdAt":"2020-05-30T03:06:43Z","number":1892,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractIterableAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldSatisfy.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Iterables.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldSatisfy_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/iterables/Iterables_assertSatisfy_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDI1NDA0OTkyOjk0ZjZmZjQwZTM1NzYyZGZkZWNlYTMwMjZmZmIwZTUxNWMxNmU4NGU=","url":"https://github.com/assertj/assertj/pull/1892/commits/94f6ff40e35762dfdecea3026ffb0e515c16e84e"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1621,"url":"https://github.com/assertj/assertj/issues/1621","title":"Consumer-based \"satisfy\" assertions for elements in arrays and iterables","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Consider extending the assertions API for arrays and iterables with <code class=\"notranslate\">satisfy*</code> methods accepting multiple  <code class=\"notranslate\">Consumer&lt;? super ELEMENT&gt;</code>s. The consumers probe the individual elements of the tested collection.</p>\n<p dir=\"auto\">The additional methods could be:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">satisfy(Consumer&lt;? super ELEMENT&gt;... consumers)</code>: For each element of the tested collection the (remaining) consumers are called; if a consumer accepts the element, then the element and that consumer are removed from their collections and the next element is probed.</li>\n<li><code class=\"notranslate\">satisfyExactly(Consumer&lt;? super ELEMENT&gt;... consumers)</code>: The tested collection must have the same size as the consumers. Each element of the tested collection is fed to the corresponding consumer.</li>\n<li><code class=\"notranslate\">satisfyExactlyInAnyOrder(Consumer&lt;? super ELEMENT&gt;... consumers)</code>: The tested collection must have the same size as the consumers. For each element of the tested collection the (remaining) consumers are called; if a consumer accepts the element, then the element and that consumer are removed from their collections and the next element is probed.</li>\n</ul>\n<p dir=\"auto\">This would allow more flexible assertions on arrays and iterables.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(trilogy).satisfy(movie -&gt; {\n    // the two Towers\n    assertThat(movie.getReleaseDate()).isEqualTo(parse(&quot;2002-12-18&quot;));\n    assertThat(movie.getTitle()).contains(&quot;Towers&quot;);\n  }, \n  movie -&gt; {\n    // the fellowship of the Ring\n    assertThat(movie.getReleaseDate()).isBefore(parse(&quot;2002-12-17&quot;));\n    assertThat(movie.xrated).isFalse();\n  }\n);\n\nassertThat(trilogy).satisfyExactly(movie -&gt; {\n    // the fellowship of the Ring\n    assertThat(movie.getReleaseDate()).isBefore(parse(&quot;2002-12-17&quot;));\n    assertThat(movie.xrated).isFalse();\n  }, \n  movie -&gt; {\n    // the two Towers\n     assertThat(movie.getReleaseDate()).isEqualTo(parse(&quot;2002-12-18&quot;));\n     assertThat(movie.getTitle()).contains(&quot;Towers&quot;);\n  }, \n  movie -&gt; {\n    // the Return of the King\n    assertThat(movie.getTitle()).endsWith(&quot;King&quot;);\n  }\n);\n\nassertThat(trilogy).satisfyExactlyInAnyOrder(movie -&gt; {\n    // the two Towers\n    assertThat(movie.getReleaseDate()).isEqualTo(parse(&quot;2002-12-18&quot;));\n    assertThat(movie.getTitle()).contains(&quot;Towers&quot;);\n  }, \n  movie -&gt; {\n    // the fellowship of the Ring\n    assertThat(movie.getReleaseDate()).isBefore(parse(&quot;2002-12-17&quot;));\n    assertThat(movie.xrated).isFalse();\n  }, \n  movie -&gt; {\n    // the Return of the King\n    assertThat(movie.getTitle()).endsWith(&quot;King&quot;);\n  }\n);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">trilogy</span>).<span class=\"pl-en\">satisfy</span>(<span class=\"pl-s1\">movie</span> -&gt; {\n    <span class=\"pl-c\">// the two Towers</span>\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getReleaseDate</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-en\">parse</span>(<span class=\"pl-s\">\"2002-12-18\"</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getTitle</span>()).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"Towers\"</span>);\n  }, \n  <span class=\"pl-s1\">movie</span> -&gt; {\n    <span class=\"pl-c\">// the fellowship of the Ring</span>\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getReleaseDate</span>()).<span class=\"pl-en\">isBefore</span>(<span class=\"pl-en\">parse</span>(<span class=\"pl-s\">\"2002-12-17\"</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-s1\">xrated</span>).<span class=\"pl-en\">isFalse</span>();\n  }\n);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">trilogy</span>).<span class=\"pl-en\">satisfyExactly</span>(<span class=\"pl-s1\">movie</span> -&gt; {\n    <span class=\"pl-c\">// the fellowship of the Ring</span>\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getReleaseDate</span>()).<span class=\"pl-en\">isBefore</span>(<span class=\"pl-en\">parse</span>(<span class=\"pl-s\">\"2002-12-17\"</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-s1\">xrated</span>).<span class=\"pl-en\">isFalse</span>();\n  }, \n  <span class=\"pl-s1\">movie</span> -&gt; {\n    <span class=\"pl-c\">// the two Towers</span>\n     <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getReleaseDate</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-en\">parse</span>(<span class=\"pl-s\">\"2002-12-18\"</span>));\n     <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getTitle</span>()).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"Towers\"</span>);\n  }, \n  <span class=\"pl-s1\">movie</span> -&gt; {\n    <span class=\"pl-c\">// the Return of the King</span>\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getTitle</span>()).<span class=\"pl-en\">endsWith</span>(<span class=\"pl-s\">\"King\"</span>);\n  }\n);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">trilogy</span>).<span class=\"pl-en\">satisfyExactlyInAnyOrder</span>(<span class=\"pl-s1\">movie</span> -&gt; {\n    <span class=\"pl-c\">// the two Towers</span>\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getReleaseDate</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-en\">parse</span>(<span class=\"pl-s\">\"2002-12-18\"</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getTitle</span>()).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"Towers\"</span>);\n  }, \n  <span class=\"pl-s1\">movie</span> -&gt; {\n    <span class=\"pl-c\">// the fellowship of the Ring</span>\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getReleaseDate</span>()).<span class=\"pl-en\">isBefore</span>(<span class=\"pl-en\">parse</span>(<span class=\"pl-s\">\"2002-12-17\"</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-s1\">xrated</span>).<span class=\"pl-en\">isFalse</span>();\n  }, \n  <span class=\"pl-s1\">movie</span> -&gt; {\n    <span class=\"pl-c\">// the Return of the King</span>\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getTitle</span>()).<span class=\"pl-en\">endsWith</span>(<span class=\"pl-s\">\"King\"</span>);\n  }\n);</pre></div>\n<h4 dir=\"auto\">Alternatives</h4>\n<p dir=\"auto\">The current API provides the following alternatives (for the proposed <code class=\"notranslate\">satisfyExactlyInAnyOrder</code> method):</p>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">extracting</code> multiple fields and assert matching <code class=\"notranslate\">tuple</code>s:</li>\n</ol>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(trilogy)\n  .extracting(Movie::getTitle, Movie::getReleaseDate, movie -&gt; movie.xrated)\n  .containsExactlyInAnyOrder(\n    tuple(&quot;the Return of the King&quot;, parse(&quot;2003-12-17&quot;), false),\n    tuple(&quot;the fellowship of the Ring&quot;, parse(&quot;2001-12-19&quot;), false), \n    tuple(&quot;the two Towers&quot;, parse(&quot;2002-12-18&quot;), false)\n  );\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">trilogy</span>)\n  .<span class=\"pl-en\">extracting</span>(<span class=\"pl-s1\">Movie</span>::<span class=\"pl-s1\">getTitle</span>, <span class=\"pl-s1\">Movie</span>::<span class=\"pl-s1\">getReleaseDate</span>, <span class=\"pl-s1\">movie</span> -&gt; <span class=\"pl-s1\">movie</span>.<span class=\"pl-s1\">xrated</span>)\n  .<span class=\"pl-en\">containsExactlyInAnyOrder</span>(\n    <span class=\"pl-en\">tuple</span>(<span class=\"pl-s\">\"the Return of the King\"</span>, <span class=\"pl-en\">parse</span>(<span class=\"pl-s\">\"2003-12-17\"</span>), <span class=\"pl-c1\">false</span>),\n    <span class=\"pl-en\">tuple</span>(<span class=\"pl-s\">\"the fellowship of the Ring\"</span>, <span class=\"pl-en\">parse</span>(<span class=\"pl-s\">\"2001-12-19\"</span>), <span class=\"pl-c1\">false</span>), \n    <span class=\"pl-en\">tuple</span>(<span class=\"pl-s\">\"the two Towers\"</span>, <span class=\"pl-en\">parse</span>(<span class=\"pl-s\">\"2002-12-18\"</span>), <span class=\"pl-c1\">false</span>)\n  );</pre></div>\n<p dir=\"auto\">This approach requires all values to match exactly, requires all elements to be tested for the same fields, is not type safe, and gets unreadable above three fields.</p>\n<ol start=\"2\" dir=\"auto\">\n<li>Individual <code class=\"notranslate\">assertThat</code> for each desired element with <code class=\"notranslate\">filterOn</code> distinguishing characteristic of that element:</li>\n</ol>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(trilogy).hasSize(3);\n\nassertThat(trilogy)\n  .filterOn(movie -&gt; parse(&quot;2002-12-17&quot;).compareTo(movie.getReleaseDate()) &gt; 0)\n  .hasSize(1)\n  .element(0)\n  .satisfies(movie -&gt; {\n    assertThat(movie.xrated).isFalse();\n  });\n\nassertThat(trilogy)\n  .filterOn(&quot;releaseDate&quot;, parse(&quot;2002-12-18&quot;))\n  .hasSize(1)\n  .element(0)\n  .satisfies(movie -&gt; {\n    assertThat(movie.getTitle()).contains(&quot;Towers&quot;);\n  });\n\nassertThat(trilogy)\n  .filterOn(movie -&gt; movie.getTitle().endsWith(&quot;King&quot;))\n  .hasSize(1);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">trilogy</span>).<span class=\"pl-en\">hasSize</span>(<span class=\"pl-c1\">3</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">trilogy</span>)\n  .<span class=\"pl-en\">filterOn</span>(<span class=\"pl-s1\">movie</span> -&gt; <span class=\"pl-en\">parse</span>(<span class=\"pl-s\">\"2002-12-17\"</span>).<span class=\"pl-en\">compareTo</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getReleaseDate</span>()) &gt; <span class=\"pl-c1\">0</span>)\n  .<span class=\"pl-en\">hasSize</span>(<span class=\"pl-c1\">1</span>)\n  .<span class=\"pl-en\">element</span>(<span class=\"pl-c1\">0</span>)\n  .<span class=\"pl-en\">satisfies</span>(<span class=\"pl-s1\">movie</span> -&gt; {\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-s1\">xrated</span>).<span class=\"pl-en\">isFalse</span>();\n  });\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">trilogy</span>)\n  .<span class=\"pl-en\">filterOn</span>(<span class=\"pl-s\">\"releaseDate\"</span>, <span class=\"pl-en\">parse</span>(<span class=\"pl-s\">\"2002-12-18\"</span>))\n  .<span class=\"pl-en\">hasSize</span>(<span class=\"pl-c1\">1</span>)\n  .<span class=\"pl-en\">element</span>(<span class=\"pl-c1\">0</span>)\n  .<span class=\"pl-en\">satisfies</span>(<span class=\"pl-s1\">movie</span> -&gt; {\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getTitle</span>()).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"Towers\"</span>);\n  });\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">trilogy</span>)\n  .<span class=\"pl-en\">filterOn</span>(<span class=\"pl-s1\">movie</span> -&gt; <span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getTitle</span>().<span class=\"pl-en\">endsWith</span>(<span class=\"pl-s\">\"King\"</span>))\n  .<span class=\"pl-en\">hasSize</span>(<span class=\"pl-c1\">1</span>);</pre></div>\n<p dir=\"auto\">While this approach is more flexible than the first, it is more verbose and does usually not reflect the mental model of how a list is tested.</p>","resourcePath":"/assertj/assertj/issues/1621","createdAt":"2019-09-26T20:02:05Z","labels":{"edges":[{"node":{"name":"status: not ready"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add ConstructorAssert instead of using ClassAssert","url":"https://github.com/assertj/assertj/pull/1871","resourcePath":"/assertj/assertj/pull/1871","createdAt":"2020-05-11T08:13:17Z","number":1871,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Throwables.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/Assertions_assertThat_with_Class_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_assertThat_with_Constructor_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Person.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_hasConstructors_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_hasPrivateConstructor_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_hasProtectedConstructor_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_hasPublicConstructor_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_isProtected_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_isPublic_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDE1OTQwMDE4Ojc4ZmZiYmNlYmRhNzQxNzNmNTMzZGI0YjRhNDc5NmJhZjEwNjMwOTY=","url":"https://github.com/assertj/assertj/pull/1871/commits/78ffbbcebda74173f533db4b4a4796baf1063096"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1869,"url":"https://github.com/assertj/assertj/issues/1869","title":"Add ConstructorAssert instead of using ClassAssert","bodyHTML":"<p dir=\"auto\">About the issue described in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"519446025\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1693\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/1693/hovercard\" href=\"https://github.com/assertj/assertj/issues/1693\">#1693</a>, we would prefer a separate <code class=\"notranslate\">ConstructorAssert</code> to avoid bloating the <code class=\"notranslate\">ClassAssert</code> API. If you would like to take care of it, we are happy to support you.</p>\n<p dir=\"auto\"><em>Originally posted by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/scordio/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/scordio\">@scordio</a> in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"611607196\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1860\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/assertj/assertj/pull/1860/hovercard?comment_id=623262851&amp;comment_type=issue_comment\" href=\"https://github.com/assertj/assertj/pull/1860#issuecomment-623262851\">#1860 (comment)</a></em></p>","resourcePath":"/assertj/assertj/issues/1869","createdAt":"2020-05-08T13:53:10Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Explicitly set Javadoc locale to English","url":"https://github.com/assertj/assertj/pull/1859","resourcePath":"/assertj/assertj/pull/1859","createdAt":"2020-05-03T06:04:39Z","number":1859,"mergeCommit":{"oid":"27e2e9e70f5ce261f383e1e3dc988612ecf9ad61","message":"Explicitly set Javadoc locale to English (#1859)\n\nThis ensures that the html tag always contains language \"en\" and therefore does not default to the local used locale.","commitUrl":"https://github.com/assertj/assertj/commit/27e2e9e70f5ce261f383e1e3dc988612ecf9ad61","parents":{"nodes":[{"oid":"fa44f9610dcac2ae03ab629fe38a939e9d661dd9","message":"refactor internal.urls test classes.\nFixes #1862"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"pom.xml"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDEyNTU1MDc1OmYzMGE5NGJiODkxNzMyNzBkOTdiMjQzNDc1OWVlZTg3NGY5YzA0NjA=","url":"https://github.com/assertj/assertj/pull/1859/commits/f30a94bb89173270d97b2434759eee874f9c0460"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1825,"url":"https://github.com/assertj/assertj/issues/1825","title":"Explicitly set Javadoc locale to English. ","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">exactly that <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/spring-projects/spring-data-build/commit/88a625abc1c1dd52c6f14a3af52b1e9c25b2a91a/hovercard\" href=\"https://github.com/spring-projects/spring-data-build/commit/88a625abc1c1dd52c6f14a3af52b1e9c25b2a91a\">spring-projects/spring-data-build@<tt>88a625a</tt></a></p>","resourcePath":"/assertj/assertj/issues/1825","createdAt":"2020-04-07T23:35:00Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Added java.time.Period assertions","url":"https://github.com/assertj/assertj/pull/1902","resourcePath":"/assertj/assertj/pull/1902","createdAt":"2020-06-03T21:47:19Z","number":1902,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/InstanceOfAssertFactoriesTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/SoftAssertionsTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/SoftAssertions_combined_with_asInstanceOf_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/period/PeriodAssert_hasDays_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/period/PeriodAssert_hasMonths_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/period/PeriodAssert_hasYears_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/period/PeriodAssert_isNegative_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/period/PeriodAssert_isPositive_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldBePeriod_create_test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldHavePeriod_create_test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDI3NDczMjY1OjhmMTBjNTZmMzNiYThiNzZmYjBjNGI3MjFmZTE3OGI1MTVmYjFhOWQ=","url":"https://github.com/assertj/assertj/pull/1902/commits/8f10c56f33ba8b76fb0c4b721fe178b515fb1a9d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1853,"url":"https://github.com/assertj/assertj/issues/1853","title":"Add assertThat for java.time.Period","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Similar to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"510748405\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1650\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/1650/hovercard\" href=\"https://github.com/assertj/assertj/issues/1650\">#1650</a> it would be great to support <code class=\"notranslate\">java.time.Period</code></p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Period period = Period.of(1,1,1)\nassertThat(period)\n    .hasYear(1)\n    .hasMonth(1)\n    .hasDays(1);\"><pre><span class=\"pl-smi\">Period</span> <span class=\"pl-s1\">period</span> = <span class=\"pl-s1\">Period</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>,<span class=\"pl-c1\">1</span>)\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">period</span>)\n    .<span class=\"pl-en\">hasYear</span>(<span class=\"pl-c1\">1</span>)\n    .<span class=\"pl-en\">hasMonth</span>(<span class=\"pl-c1\">1</span>)\n    .<span class=\"pl-en\">hasDays</span>(<span class=\"pl-c1\">1</span>);</pre></div>\n<p dir=\"auto\">If you are agree with this I can work on it.</p>","resourcePath":"/assertj/assertj/issues/1853","createdAt":"2020-04-26T23:43:40Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Implement lazy withFailMessage / overridingErrorMessage","url":"https://github.com/assertj/assertj/pull/1882","resourcePath":"/assertj/assertj/pull/1882","createdAt":"2020-05-24T14:51:26Z","number":1882,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WritableAssertionInfo.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_overridingErrorMessage_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_withFailMessage_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_withFailMessage_performance_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/atomic/boolean_/AtomicBooleanAssert_overridingErrorMessage_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/atomic/integer/AtomicIntegerAssert_overridingErrorMessage_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/atomic/long_/AtomicLongAssert_overridingErrorMessage_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/atomic/longadder/LongAdderAssert_overridingErrorMessage_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/atomic/reference/AtomicReferenceAssert_overridingErrorMessage_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDIyNDI0MTQ2OjEwMjhhZjA3YTI4YWMyZjQyYzAyMmU0Y2E4OWYyODBhZDM4ZmFhNjM=","url":"https://github.com/assertj/assertj/pull/1882/commits/1028af07a28ac2f42c022e4ca89f280ad38faa63"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1837,"url":"https://github.com/assertj/assertj/issues/1837","title":"lazy withFailMessage /  overridingErrorMessage","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">junit provide a lazy fail message description by using a supplier. The supplier is called only if an error occurs, otherwise it is not called.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        Assertions.assertTrue(true, () -&gt; &quot;I won't be called&quot;);\n        Assertions.assertTrue(false, () -&gt; &quot;I will be called&quot;);\"><pre>        <span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertTrue</span>(<span class=\"pl-c1\">true</span>, () -&gt; <span class=\"pl-s\">\"I won't be called\"</span>);\n        <span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertTrue</span>(<span class=\"pl-c1\">false</span>, () -&gt; <span class=\"pl-s\">\"I will be called\"</span>);</pre></div>\n<p dir=\"auto\">It is useful for at least two reason :</p>\n<ul dir=\"auto\">\n<li>performance optimization if computing the custom error message is costly.</li>\n<li>getting error message may not be possible if there is not an error, however assertThat try to get the error message even if there is no error.</li>\n</ul>\n<p dir=\"auto\">Suggestion, add the same capability to withFailMEssage or overridingErrorMessage, example :</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        assertThat(response.isError())\n            .withFailMessage(() -&gt; &quot;my error&quot;)\n            .isFalse();\"><pre>        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">response</span>.<span class=\"pl-en\">isError</span>())\n            .<span class=\"pl-en\">withFailMessage</span>(() -&gt; <span class=\"pl-s\">\"my error\"</span>)\n            .<span class=\"pl-en\">isFalse</span>();</pre></div>","resourcePath":"/assertj/assertj/issues/1837","createdAt":"2020-04-16T14:09:37Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add isEven/isOdd to AbstractByteAssert, AbstractShortAssert, AbstractIntegerAssert and AbstractLongAssert","url":"https://github.com/assertj/assertj/pull/1870","resourcePath":"/assertj/assertj/pull/1870","createdAt":"2020-05-08T14:36:45Z","number":1870,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldBeEven_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldBeOdd_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/bytes/Bytes_assertIsEven_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/bytes/Bytes_assertIsOdd_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/integers/Integers_assertIsEven_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/integers/Integers_assertIsOdd_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/longs/Longs_assertIsEven_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/longs/Longs_assertIsOdd_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/shorts/Shorts_assertIsEven_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/shorts/Shorts_assertIsOdd_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDE1MjY2OTEwOjFlNmRjYjUyZDEyZjQyOTZjZjU0NzY4OTliMDM1Yzk0MzllNDlkZWM=","url":"https://github.com/assertj/assertj/pull/1870/commits/1e6dcb52d12f4296cf5476899b035c9439e49dec"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1807,"url":"https://github.com/assertj/assertj/issues/1807","title":"Consider adding isEven/isOdd to AbstractByteAssert, AbstractShortAssert, AbstractIntegerAssert and AbstractLongAssert","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">It is currently not possible to directly assert whether integers are odd or even.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(someInteger).isEven();\nassertThat(someInteger).isOdd();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">someInteger</span>).<span class=\"pl-en\">isEven</span>();\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">someInteger</span>).<span class=\"pl-en\">isOdd</span>();</pre></div>","resourcePath":"/assertj/assertj/issues/1807","createdAt":"2020-03-16T15:03:32Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix #1248 Converting JUnit/JUnit5 assertions to AssertJ","url":"https://github.com/assertj/assertj/pull/1842","resourcePath":"/assertj/assertj/pull/1842","createdAt":"2020-04-19T15:12:41Z","number":1842,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/scripts/convert-junit-assertions-to-assertj.sh"}},{"node":{"changeType":"MODIFIED","path":"src/main/scripts/convert-junit5-assertions-to-assertj.sh"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/scripts/Convert_Junit5_Assertions_To_Assertj_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/scripts/Convert_Junit_Assertions_To_Assertj_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/scripts/shellScriptConversionTestInvoker.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDA1NjgwNTIxOjA0ZDYyNjhmZTY4MWI5ZDhkMmI5Mjc0ODAzNWIxZGM4NTdlMTFjMjg=","url":"https://github.com/assertj/assertj/pull/1842/commits/04d6268fe681b9d8d2b92748035b1dc857e11c28"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1248,"url":"https://github.com/assertj/assertj/issues/1248","title":"Converting your JUnit assertions to AssertJ fails in some cases","bodyHTML":"<p dir=\"auto\">Hello,<br>\nI've converted my JUnit test code  with your  convert-junit-assertions-to-assertj.sh script.<br>\nIn most cases I have no problems and got a very good result. But at some tests I got into trouble (no compile any more ...) . As example here are some git diff's between JUnit code and now after the conversion.<br>\nCan you explain, what going wrong with that?</p>\n<p dir=\"auto\">Here are two examples for successful conversion:</p>\n<ul dir=\"auto\">\n<li>assertEquals(\"'ABcDe ='\", StringHandling.addSingleQuotes(\"ABcDe =\"));</li>\n</ul>\n<ul dir=\"auto\">\n<li>assertThat(StringHandling.addSingleQuotes(\"ABcDe =\")).isEqualTo(\"'ABcDe ='\");</li>\n</ul>\n<ul dir=\"auto\">\n<li>assertEquals(\"\"ABcDe =\"\", StringHandling.addDoubleQuotes(\"ABcDe =\"));</li>\n</ul>\n<ul dir=\"auto\">\n<li>assertThat(StringHandling.addDoubleQuotes(\"ABcDe =\")).isEqualTo(\"\"ABcDe =\"\");</li>\n</ul>\n<p dir=\"auto\">And here two example blocks which goes wrong:</p>\n<ul dir=\"auto\">\n<li>assertEquals(\"12.34\", StringHandling.fixFPNumberFormat(\"12.34\"));</li>\n<li>assertEquals(\"34.34\", StringHandling.fixFPNumberFormat(\"34,34\"));</li>\n<li>assertEquals(\"1234.34\", StringHandling.fixFPNumberFormat(\"1,234.34\"));</li>\n<li>assertEquals(\"1234.34\", StringHandling.fixFPNumberFormat(\"1.234,34\"));</li>\n<li>assertEquals(\"1234567.34\", StringHandling.fixFPNumberFormat(\"1,234,567.34\"));</li>\n<li>assertEquals(\"1234567.34\", StringHandling.fixFPNumberFormat(\"1.234.567,34\"));</li>\n</ul>\n<ul dir=\"auto\">\n<li>assertThat(StringHandling.fixFPNumberFormat(\"0\")).isEqualTo(\"0\");</li>\n<li>assertThat(StringHandling.fixFPNumberFormat(\"12.34\")).isEqualTo(\"12.34\");</li>\n<li>assertThat(34\")).as(\"34.34\").isEqualTo(StringHandling.fixFPNumberFormat(\"34);</li>\n<li>assertThat(234.34\")).as(\"1234.34\").isEqualTo(StringHandling.fixFPNumberFormat(\"1);</li>\n<li>assertThat(34\")).as(\"1234.34\").isEqualTo(StringHandling.fixFPNumberFormat(\"1.234);</li>\n<li>assertThat(234).as(\"1234567.34\").isCloseTo(StringHandling.fixFPNumberFormat(\"1, within(567.34\")));</li>\n<li>assertThat(34\")).as(\"1234567.34\").isEqualTo(StringHandling.fixFPNumberFormat(\"1.234.567);</li>\n</ul>\n<ul dir=\"auto\">\n<li>assertEquals(\"/home/linhrowe/Source/java/JCompPosition/examples/test_gencadpanel.cad\", StringHandling.changeFileExtension(\"/home/linhrowe/Source/java/JCompPosition/examples/test_gencadpanel.pnl\", \"cad\"));</li>\n</ul>\n<ul dir=\"auto\">\n<li>assertThat(StringHandling.changeFileExtension(\"/home/linhrowe/Source/java/JCompPosition/examples/test_gencadpanel.pnl\",\"cad\").isEqualTo(\"/home/linhrowe/Source/java/JCompPosition/examples/test_gencadpanel.cad\"));</li>\n</ul>\n<p dir=\"auto\">If you need further informations, please contact me.</p>\n<p dir=\"auto\">Bye<br>\nRoman</p>","resourcePath":"/assertj/assertj/issues/1248","createdAt":"2018-05-29T10:56:29Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix issue #1796 / add a method isEqualToWithSortedQueryParameters","url":"https://github.com/assertj/assertj/pull/1843","resourcePath":"/assertj/assertj/pull/1843","createdAt":"2020-04-19T18:19:02Z","number":1843,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractUrlAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/uri/ShouldBeEqualToWithSortedQueryParameters.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Urls.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/url/UrlAssert_isEqualToWithSortedQueryParameters_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/uri/ShouldBeEqualToWithSortedQueryParameters_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertIsEqualToWithSortedQueryParameters_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDA1NzA5Nzk3OjI3MzllNjMwN2QyZDU0Mjg2ZTQ4ZTQ5YjlhNmY2NzZiNDJiOWM0Njc=","url":"https://github.com/assertj/assertj/pull/1843/commits/2739e6307d2d54286e48e49b9a6f676b42b9c467"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1796,"url":"https://github.com/assertj/assertj/issues/1796","title":"URL should test for logical equality","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">The following test case returns false. I think that it should return true, as these two URLs are logically and practically equal:</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        URL urlA = new URL(&quot;http://localhost?a=b&amp;c=d&quot;);\n        URL urlB = new URL(&quot;http://localhost?c=d&amp;a=b&quot;);\n\n        Assertions.assertThat(urlA).isEqualTo(urlB);\"><pre>        <span class=\"pl-smi\">URL</span> <span class=\"pl-s1\">urlA</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">URL</span>(<span class=\"pl-s\">\"http://localhost?a=b&amp;c=d\"</span>);\n        <span class=\"pl-smi\">URL</span> <span class=\"pl-s1\">urlB</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">URL</span>(<span class=\"pl-s\">\"http://localhost?c=d&amp;a=b\"</span>);\n\n        <span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">urlA</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">urlB</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1796","createdAt":"2020-03-02T13:06:50Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Avoid infinite recursion in StandardRepresentation","url":"https://github.com/assertj/assertj/pull/1895","resourcePath":"/assertj/assertj/pull/1895","createdAt":"2020-06-01T09:48:40Z","number":1895,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/presentation/StandardRepresentation.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/presentation/StandardRepresentation_array_format_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/presentation/StandardRepresentation_iterable_format_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDI1ODY5NjI2OjhmNTliYzllZjMxMjgxZmY2MTFiMWZmZTllOTM1MDI3YjBkZDUwMmU=","url":"https://github.com/assertj/assertj/pull/1895/commits/8f59bc9ef31281ff611b1ffe9e935027b0dd502e"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1894,"url":"https://github.com/assertj/assertj/issues/1894","title":"Avoid infinite recursion in StandardRepresentation","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">There's a risk of stack overflow when when representing containers (array, iterable, map) having  elements referring back to itself.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">The following test leads to a stack overflow.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  public void should_format_iterable_having_itself_as_element() {\n    List&lt;Object&gt; list1 = list(&quot;Hello&quot;, &quot;World&quot;);\n    List&lt;Object&gt; list2 = list(list1);\n    list1.set(1, list2);\n    assertThat(STANDARD_REPRESENTATION.toStringOf(list1)).isEqualTo(&quot;[[\\&quot;Hello\\&quot;, (this iterable)]]&quot;);\n  }\"><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">should_format_iterable_having_itself_as_element</span>() {\n    <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">list1</span> = <span class=\"pl-en\">list</span>(<span class=\"pl-s\">\"Hello\"</span>, <span class=\"pl-s\">\"World\"</span>);\n    <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">list2</span> = <span class=\"pl-en\">list</span>(<span class=\"pl-s1\">list1</span>);\n    <span class=\"pl-s1\">list1</span>.<span class=\"pl-en\">set</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-s1\">list2</span>);\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-c1\">STANDARD_REPRESENTATION</span>.<span class=\"pl-en\">toStringOf</span>(<span class=\"pl-s1\">list1</span>)).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"[[\\\"Hello\\\", (this iterable)]]\"</span>);\n  }</pre></div>","resourcePath":"/assertj/assertj/issues/1894","createdAt":"2020-06-01T04:10:18Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"add constructor assertions for ClassAssert","url":"https://github.com/assertj/assertj/pull/1860","resourcePath":"/assertj/assertj/pull/1860","createdAt":"2020-05-04T05:10:29Z","number":1860,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Arrays.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Classes.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/IgnoringFieldsComparator.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/ObjectArrays.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Throwables.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Person.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_hasConstructors_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_hasPrivateConstructor_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_hasProtectedConstructor_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_hasPublicConstructor_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDEyNzQwNzk2OjNiOGIwYWIzNjMxYzU0ZTFkMTRjMWVlYzMwY2IwYzNkNDJjMGVlMDQ=","url":"https://github.com/assertj/assertj/pull/1860/commits/3b8b0ab3631c54e1d14c1eec30cb0c3d42c0ee04"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1693,"url":"https://github.com/assertj/assertj/issues/1693","title":"add constructor assertions for ClassAssert","bodyHTML":"<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(MyClass.class).hasPackageOrBetterNoArgConstructor(); // common for frameworks\nassertThat(MyClass.class).hasPublicConstructor(Integer.class, String.class); // common for published api's\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyClass</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">hasPackageOrBetterNoArgConstructor</span>(); <span class=\"pl-c\">// common for frameworks</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyClass</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">hasPublicConstructor</span>(<span class=\"pl-smi\">Integer</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">String</span>.<span class=\"pl-s1\">class</span>); <span class=\"pl-c\">// common for published api's</span></pre></div>\n<p dir=\"auto\">I'm not fussy on names</p>","resourcePath":"/assertj/assertj/issues/1693","createdAt":"2019-11-07T18:47:09Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Provide comparable assertions for non comparable class when given a comparator","url":"https://github.com/assertj/assertj/pull/1863","resourcePath":"/assertj/assertj/pull/1863","createdAt":"2020-05-05T10:34:28Z","number":1863,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldBeGreater.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldBeLess.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Objects.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/NonComparableClassGivenComparator_isGreaterThan_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/NonComparableClassGivenComparator_isLessThan_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDEzNDMzMTU0OmVmODM2ZGY0YjM1Y2Y0ODExN2IwYWI5NWY4NDQzNzg1YmM0MjU1ZDQ=","url":"https://github.com/assertj/assertj/pull/1863/commits/ef836df4b35cf48117b0ab95f8443785bc4255d4"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1492,"url":"https://github.com/assertj/assertj/issues/1492","title":"Provide comparable assertions for non comparable class when given a comparator","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Comparable assertions are restricted to <code class=\"notranslate\">Comparable</code> types, this could extended for non <code class=\"notranslate\">Comparable</code> types if a proper <code class=\"notranslate\">Comparator</code> is given.</p>\n<p dir=\"auto\">This is issue was created after this discussion <a href=\"https://stackoverflow.com/questions/55811121/assertj-fluent-ordering-tests-with-custom-comparator/55828748?noredirect=1#comment98322628_55828748\" rel=\"nofollow\">https://stackoverflow.com/questions/55811121/assertj-fluent-ordering-tests-with-custom-comparator/55828748?noredirect=1#comment98322628_55828748</a>.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Foo foo1 = ...;\nFoo foo2 = ...;\nFooComparator fooComparator = ...;\nassertThat(foo1).usingComparator(fooComparator).isGreaterThan(foo2);\"><pre><span class=\"pl-smi\">Foo</span> <span class=\"pl-s1\">foo1</span> = ...;\n<span class=\"pl-smi\">Foo</span> <span class=\"pl-s1\">foo2</span> = ...;\n<span class=\"pl-smi\">FooComparator</span> <span class=\"pl-s1\">fooComparator</span> = ...;\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo1</span>).<span class=\"pl-en\">usingComparator</span>(<span class=\"pl-s1\">fooComparator</span>).<span class=\"pl-en\">isGreaterThan</span>(<span class=\"pl-s1\">foo2</span>);</pre></div>\n<p dir=\"auto\">We want to avoid  to copy comparable assertions in <code class=\"notranslate\">AbstractAssert</code> as it would pollute the API.</p>\n<p dir=\"auto\">The idea of this improvement is to return a <code class=\"notranslate\">ComparableAssert</code> from <code class=\"notranslate\">usingComparator</code> and then chain comparable assertions.  Moreover we would ideally keep the original type assertions.<br>\nWhether this is technically possible is something to explore as part of this improvement.</p>","resourcePath":"/assertj/assertj/issues/1492","createdAt":"2019-04-24T23:22:33Z","labels":{"edges":[{"node":{"name":"status: pending investigation"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"filteredOn function","url":"https://github.com/assertj/assertj/pull/1867","resourcePath":"/assertj/assertj/pull/1867","createdAt":"2020-05-07T08:44:09Z","number":1867,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_filteredOn_function_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_filteredOn_in_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_filteredOn_notIn_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_filteredOn_not_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/list/ListAssert_filteredOn_function_with_navigation_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_filteredOn_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_filteredOn_function_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_filteredOn_in_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_filteredOn_notIn_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_filteredOn_not_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDE0NTQ1MjE5OjZhY2YwZGQxM2JhZDIyMjk0YTJhNzMwNjhiOWY2ZGYxNzQ4MmRlMjU=","url":"https://github.com/assertj/assertj/pull/1867/commits/6acf0dd13bad22294a2a73068b9f6df17482de25"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1620,"url":"https://github.com/assertj/assertj/issues/1620","title":"filteredOn with Function for arrays and iterables ","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Extend the fluent filter API for arrays and iterables with a method to filter based on a <code class=\"notranslate\">Function&lt;? super ELEMENT, T&gt;</code> parameter (e.g., a method reference to a getter) and a <code class=\"notranslate\">T</code> parameter (for matching).</p>\n<p dir=\"auto\">The approach is similar to the <code class=\"notranslate\">extracting(Function&lt;? super ELEMENT, V&gt;)</code> method. It will allow a save filtering without introspection.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(fellowshipOfTheRing).filteredOn(TolkienCharacter::getRace, HOBBIT)\n                                   .containsOnly(sam, frodo, pippin, merry);\n\nassertThat(fellowshipOfTheRing).filteredOn(character -&gt; character.getRace().getName(), &quot;Hobbit&quot;)\n                                   .containsOnly(sam, frodo, pippin, merry);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">fellowshipOfTheRing</span>).<span class=\"pl-en\">filteredOn</span>(<span class=\"pl-s1\">TolkienCharacter</span>::<span class=\"pl-s1\">getRace</span>, <span class=\"pl-c1\">HOBBIT</span>)\n                                   .<span class=\"pl-en\">containsOnly</span>(<span class=\"pl-s1\">sam</span>, <span class=\"pl-s1\">frodo</span>, <span class=\"pl-s1\">pippin</span>, <span class=\"pl-s1\">merry</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">fellowshipOfTheRing</span>).<span class=\"pl-en\">filteredOn</span>(<span class=\"pl-s1\">character</span> -&gt; <span class=\"pl-s1\">character</span>.<span class=\"pl-en\">getRace</span>().<span class=\"pl-en\">getName</span>(), <span class=\"pl-s\">\"Hobbit\"</span>)\n                                   .<span class=\"pl-en\">containsOnly</span>(<span class=\"pl-s1\">sam</span>, <span class=\"pl-s1\">frodo</span>, <span class=\"pl-s1\">pippin</span>, <span class=\"pl-s1\">merry</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1620","createdAt":"2019-09-26T10:56:36Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Assertions for two-dimensional arrays of char","url":"https://github.com/assertj/assertj/pull/1918","resourcePath":"/assertj/assertj/pull/1918","createdAt":"2020-06-16T20:23:52Z","number":1918,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/char2darray/Char2DArrayAssert_isNotEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/char2darray/Char2DArrayAssert_isNullOrEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/Char2DArraysBaseTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/char2darrays/Char2DArrays_assertContains_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/char2darrays/Char2DArrays_assertDoesNotContain_at_Index_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/char2darrays/Char2DArrays_assertEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/char2darrays/Char2DArrays_assertHasSameSizeAs_with_Array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/char2darrays/Char2DArrays_assertHasSize_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/char2darrays/Char2DArrays_assertNotEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/char2darrays/Char2DArrays_assertNullOrEmpty_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDM1NDQ3Mzk0OjIzMDY1ZDY0OGJiZjAxNDI4ZmI2NGUyMzEyZjJmZjEyNjYwNjE4YjY=","url":"https://github.com/assertj/assertj/pull/1918/commits/23065d648bbf01428fb64e2312f2ff12660618b6"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1182,"url":"https://github.com/assertj/assertj/issues/1182","title":"Multidimensional arrays assertion","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Pursuing SO question <a href=\"https://stackoverflow.com/questions/48652678/assertj-multidimensional-arrays-assertion-deep-equals/\" rel=\"nofollow\">AssertJ multidimensional arrays assertion (deep equals)<br>\n</a> i'd like to try to make an assertion for multidimensional arrays.</p>\n<p dir=\"auto\">I think i'd implement it similar to native Java <code class=\"notranslate\">Arrays#deepEquals()</code>, just \"extending\" it with nicer assertion exceptions, including indexes and actual/expected values.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"int[][] expected = {\n    new int[]{1, 0, 1},\n    new int[]{0, 0, 0},\n    new int[]{1, 1, 1}\n};\n \nint[][] actual = gameOfLife.play(board);\n\nassertThat(actual).isDeepEqualTo(expected);\"><pre><span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">expected</span> = {\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">1</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">0</span>},\n    <span class=\"pl-k\">new</span> <span class=\"pl-smi\">int</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">1</span>}\n};\n \n<span class=\"pl-smi\">int</span>[][] <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">gameOfLife</span>.<span class=\"pl-en\">play</span>(<span class=\"pl-s1\">board</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">isDeepEqualTo</span>(<span class=\"pl-s1\">expected</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1182","createdAt":"2018-02-12T21:20:48Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add assertThatNoException() method","url":"https://github.com/assertj/assertj/pull/1963","resourcePath":"/assertj/assertj/pull/1963","createdAt":"2020-08-11T05:43:20Z","number":1963,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AssertionsForClassTypes.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/BDDAssertions.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/NotThrownAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/ThrowableTypeAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WithAssertions.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_assertThatNoException_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/BDDAssertions_then_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/throwable/NotThrownAssert_description_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDY1ODc5ODE2OjIwMDdjYjY5NWMxYmYwYWMxNDBmYmM3ZWFjNTIyNTFhNzg0NzRkOGQ=","url":"https://github.com/assertj/assertj/pull/1963/commits/2007cb695c1bf0ac140fbc7eac52251a78474d8d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1962,"url":"https://github.com/assertj/assertj/issues/1962","title":"Consider adding an assertThatNoException method","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">The <code class=\"notranslate\">assertThatExceptionOfType</code> method and related helpers (<code class=\"notranslate\">assertThatNullPointerException</code>, <code class=\"notranslate\">assertThatIllegalArgumentException</code>, <code class=\"notranslate\">assertThatIOException</code> &amp; <code class=\"notranslate\">assertThatIllegalStateException</code>) provide a nice way to check that a specific exception has been thrown.</p>\n<p dir=\"auto\">If, however, you want to check that an exception was not thrown you need to use <code class=\"notranslate\">assertThatCode</code> and follow it with <code class=\"notranslate\">doesNotThrowAnyException</code>. It would be really nice to have an <code class=\"notranslate\">assertThatNoException</code> method, so that exception tests can consistently lead with the assertion.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Current:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThatIllegalArgumentException().isThrownBy(() -&gt; new Foo(null, &quot;bar&quot;));\nassertCode(() -&gt; new Foo(&quot;foo&quot;, null)).doesNotThrowAnyException();\"><pre><span class=\"pl-en\">assertThatIllegalArgumentException</span>().<span class=\"pl-en\">isThrownBy</span>(() -&gt; <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Foo</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-s\">\"bar\"</span>));\n<span class=\"pl-en\">assertCode</span>(() -&gt; <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Foo</span>(<span class=\"pl-s\">\"foo\"</span>, <span class=\"pl-c1\">null</span>)).<span class=\"pl-en\">doesNotThrowAnyException</span>();</pre></div>\n<p dir=\"auto\">Wanted:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThatIllegalArgumentException().isThrownBy(() -&gt; new Foo(null, &quot;bar&quot;));\nassertThatNoException().isThrownBy(() -&gt; new Foo(&quot;foo&quot;, null));\"><pre><span class=\"pl-en\">assertThatIllegalArgumentException</span>().<span class=\"pl-en\">isThrownBy</span>(() -&gt; <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Foo</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-s\">\"bar\"</span>));\n<span class=\"pl-en\">assertThatNoException</span>().<span class=\"pl-en\">isThrownBy</span>(() -&gt; <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Foo</span>(<span class=\"pl-s\">\"foo\"</span>, <span class=\"pl-c1\">null</span>));</pre></div>","resourcePath":"/assertj/assertj/issues/1962","createdAt":"2020-08-10T20:01:19Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix 1898","url":"https://github.com/assertj/assertj/pull/1944","resourcePath":"/assertj/assertj/pull/1944","createdAt":"2020-07-19T11:23:23Z","number":1944,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractByteArrayAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldBeEqual.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/bytearray/ByteArrayAssert_containsExactly_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldBeEqual_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDUyNTA3OTgxOjQ2YzA4MTZkNWVlYWNlNGE4MTA2Zjg0ZTc2MDk1NmIyZGNmNTY0YjA=","url":"https://github.com/assertj/assertj/pull/1944/commits/46c0816d5eeace4a8106f84e760956b2dcf564b0"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1898,"url":"https://github.com/assertj/assertj/issues/1898","title":"Performance regression in 3.16.0: assertThat(byte[]).containsExactly(byte[])","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">While upgrading our codebase from AssertJ 3.15.0 to 3.16.1, one of our tests hung until a 40 minute timeout expired. It turned out that this test was calling assertThat(byte[]).containsExactly(byte[]) on some byte arrays with 20 million elements.</p>\n<p dir=\"auto\">It appears that this assertion had linear performance characteristics in 3.15.0, but quadratic performance in 3.16.0, specifically changing at commit <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/3dc400426359866bfef0c65c5e4cbd6d4eeaf9fb/hovercard\" href=\"https://github.com/assertj/assertj/commit/3dc400426359866bfef0c65c5e4cbd6d4eeaf9fb\"><tt>3dc4004</tt></a>. For example, it now takes about two minutes to run this assertion on an array of size one million, vs. less than a second previously.</p>\n<p dir=\"auto\">My current workaround is to just assert the truth of Arrays.equals().</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  public void testScaleRegression() {\n    // Times taken at assertj-core-3.16.1:\n    // 8k: 15 ms\n    // 16k: 39 ms\n    // 32k: 101 ms\n    // 64k: 371 ms\n    // 128k: 1616 ms\n    // 256k: 7398 ms\n    // 512k: 31654 ms\n    // 1024k: 118472 ms\n\n    // Times taken at assertj-core-3.15.0:\n    // 8k: 4 ms\n    // 16k: 8 ms\n    // 32k: 14 ms\n    // 64k: 25 ms\n    // 128k: 44 ms\n    // 256k: 92 ms\n    // 512k: 166 ms\n    // 1024k: 339 ms\n    for (int length : Arrays.asList(8_000, 8_000, 8_000, 16_000, 32_000, 64_000, 128_000, 256_000, 512_000, 1_024_000)) {\n      byte[] data = new byte[length];\n      Arrays.fill(data, (byte) 0x42);\n      byte[] data2 = new byte[length];\n      Arrays.fill(data2, (byte) 0x42);\n      System.out.println(&quot;Testing for length &quot; + length + &quot;...&quot;);\n      long startTime2 = System.currentTimeMillis();\n      assertThat(data).containsExactly(data2);\n      System.out.println(&quot;Done testing &quot; + length + &quot;, took &quot; + (System.currentTimeMillis() - startTime2) + &quot; ms&quot;);\n    }\n  }\"><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testScaleRegression</span>() {\n    <span class=\"pl-c\">// Times taken at assertj-core-3.16.1:</span>\n    <span class=\"pl-c\">// 8k: 15 ms</span>\n    <span class=\"pl-c\">// 16k: 39 ms</span>\n    <span class=\"pl-c\">// 32k: 101 ms</span>\n    <span class=\"pl-c\">// 64k: 371 ms</span>\n    <span class=\"pl-c\">// 128k: 1616 ms</span>\n    <span class=\"pl-c\">// 256k: 7398 ms</span>\n    <span class=\"pl-c\">// 512k: 31654 ms</span>\n    <span class=\"pl-c\">// 1024k: 118472 ms</span>\n\n    <span class=\"pl-c\">// Times taken at assertj-core-3.15.0:</span>\n    <span class=\"pl-c\">// 8k: 4 ms</span>\n    <span class=\"pl-c\">// 16k: 8 ms</span>\n    <span class=\"pl-c\">// 32k: 14 ms</span>\n    <span class=\"pl-c\">// 64k: 25 ms</span>\n    <span class=\"pl-c\">// 128k: 44 ms</span>\n    <span class=\"pl-c\">// 256k: 92 ms</span>\n    <span class=\"pl-c\">// 512k: 166 ms</span>\n    <span class=\"pl-c\">// 1024k: 339 ms</span>\n    <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">length</span> : <span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-c1\">8_000</span>, <span class=\"pl-c1\">8_000</span>, <span class=\"pl-c1\">8_000</span>, <span class=\"pl-c1\">16_000</span>, <span class=\"pl-c1\">32_000</span>, <span class=\"pl-c1\">64_000</span>, <span class=\"pl-c1\">128_000</span>, <span class=\"pl-c1\">256_000</span>, <span class=\"pl-c1\">512_000</span>, <span class=\"pl-c1\">1_024_000</span>)) {\n      <span class=\"pl-smi\">byte</span>[] <span class=\"pl-s1\">data</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[<span class=\"pl-s1\">length</span>];\n      <span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">fill</span>(<span class=\"pl-s1\">data</span>, (<span class=\"pl-smi\">byte</span>) <span class=\"pl-c1\">0x42</span>);\n      <span class=\"pl-smi\">byte</span>[] <span class=\"pl-s1\">data2</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[<span class=\"pl-s1\">length</span>];\n      <span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">fill</span>(<span class=\"pl-s1\">data2</span>, (<span class=\"pl-smi\">byte</span>) <span class=\"pl-c1\">0x42</span>);\n      <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s\">\"Testing for length \"</span> + <span class=\"pl-s1\">length</span> + <span class=\"pl-s\">\"...\"</span>);\n      <span class=\"pl-smi\">long</span> <span class=\"pl-s1\">startTime2</span> = <span class=\"pl-s1\">System</span>.<span class=\"pl-en\">currentTimeMillis</span>();\n      <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">data</span>).<span class=\"pl-en\">containsExactly</span>(<span class=\"pl-s1\">data2</span>);\n      <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s\">\"Done testing \"</span> + <span class=\"pl-s1\">length</span> + <span class=\"pl-s\">\", took \"</span> + (<span class=\"pl-s1\">System</span>.<span class=\"pl-en\">currentTimeMillis</span>() - <span class=\"pl-s1\">startTime2</span>) + <span class=\"pl-s\">\" ms\"</span>);\n    }\n  }</pre></div>","resourcePath":"/assertj/assertj/issues/1898","createdAt":"2020-06-03T04:38:49Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"FEATURE #1652 : assert return value of callable throwing exception","url":"https://github.com/assertj/assertj/pull/2009","resourcePath":"/assertj/assertj/pull/2009","createdAt":"2020-10-02T18:27:10Z","number":2009,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/AbstractTryAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assertions.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/TryAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WithAssertions.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_assertThatReturningCode_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDk3MDY3NTM2OmMzNzg3NzczMWU1ZjZiZmY1ODk5MTExYTEzMDJjZmUwY2E0N2E4Yzc=","url":"https://github.com/assertj/assertj/pull/2009/commits/c37877731e5f6bff5899111a1302cfe0ca47a8c7"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1652,"url":"https://github.com/assertj/assertj/issues/1652","title":"Assert return value of callable throwing exception","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">It would be nice if the <code class=\"notranslate\">assertThatCode().doesNotThrowException()</code> API would be able execute functions that return a value and then return that value for further inspection.<br>\nThis would make it easy to provide a nice description to an otherwise maybe nondescript exception that is thrown.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Test \npublic void intendedApi() {\n  int x = assertThatCode(this::doStuff)\n    .describedAs(&quot;doing things&quot;)\n    .doesNotThrowAnyException();\n  assertThat(x).isEqualTo(3);\n}\n\n@Test\npublic void currentSolution1() {\n  int x;\n  try {\n    x = doStuff();\n  } catch (Exception e) {\n    fail(&quot;doing things&quot;);\n    return; // never reached; needed because fail() is not recognized by the java compiler as method exit\n  }\n  assertThat(x).isEqualTo(3);\n}\n\n@Test\npublic void currentSolution2() {\n  AtomicReference&lt;Integer&gt; x = new AtomicReference&lt;&gt;();\n  assertThatCode(() -&gt; x.set(doStuff()))\n    .describedAs(&quot;doing things&quot;)\n    .doesNotThrowAnyException();\n  assertThat(x.get()).isEqualTo(3);\n}\n\n// utility for demonstration purposes\npublic int doStuff() throws Exception {\n  if (new Random().nextBoolean()) {\n    throw new Exception();\n  }\n  return 3;\n}\"><pre><span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span> \n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">intendedApi</span>() {\n  <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">x</span> = <span class=\"pl-en\">assertThatCode</span>(<span class=\"pl-smi\">this</span>::<span class=\"pl-s1\">doStuff</span>)\n    .<span class=\"pl-en\">describedAs</span>(<span class=\"pl-s\">\"doing things\"</span>)\n    .<span class=\"pl-en\">doesNotThrowAnyException</span>();\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">x</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">3</span>);\n}\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">currentSolution1</span>() {\n  <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">x</span>;\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-s1\">x</span> = <span class=\"pl-en\">doStuff</span>();\n  } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> <span class=\"pl-s1\">e</span>) {\n    <span class=\"pl-en\">fail</span>(<span class=\"pl-s\">\"doing things\"</span>);\n    <span class=\"pl-k\">return</span>; <span class=\"pl-c\">// never reached; needed because fail() is not recognized by the java compiler as method exit</span>\n  }\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">x</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">3</span>);\n}\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">currentSolution2</span>() {\n  <span class=\"pl-smi\">AtomicReference</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">x</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AtomicReference</span>&lt;&gt;();\n  <span class=\"pl-en\">assertThatCode</span>(() -&gt; <span class=\"pl-s1\">x</span>.<span class=\"pl-en\">set</span>(<span class=\"pl-en\">doStuff</span>()))\n    .<span class=\"pl-en\">describedAs</span>(<span class=\"pl-s\">\"doing things\"</span>)\n    .<span class=\"pl-en\">doesNotThrowAnyException</span>();\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">x</span>.<span class=\"pl-en\">get</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">3</span>);\n}\n\n<span class=\"pl-c\">// utility for demonstration purposes</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">doStuff</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">Exception</span> {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Random</span>().<span class=\"pl-en\">nextBoolean</span>()) {\n    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Exception</span>();\n  }\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">3</span>;\n}</pre></div>","resourcePath":"/assertj/assertj/issues/1652","createdAt":"2019-10-25T12:07:07Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add assertion factory methods to AbstractAssert.","url":"https://github.com/assertj/assertj/pull/2003","resourcePath":"/assertj/assertj/pull/2003","createdAt":"2020-09-23T07:01:21Z","number":2003,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/ConcreteAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_failureWithActualExpected_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_failure_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDkxNTYyMTExOmRhYjY0ZTI5MTlhMTY5M2M5ZjFmODQ1NDVlZDM4YTFjNjBhM2U2Yzc=","url":"https://github.com/assertj/assertj/pull/2003/commits/dab64e2919a1693c9f1f84545ed38a1c60a3e6c7"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2001,"url":"https://github.com/assertj/assertj/issues/2001","title":"AbstractAssert to add assertion factory methods","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Some of the utility methods in <code class=\"notranslate\">AbstractAssert</code> that are commonly used by custom assertion implementations will always throw an exception. Specifically:</p>\n<p dir=\"auto\"><a href=\"https://github.com/joel-costigliola/assertj-core/blob/3c6bb8a5d4f452c60cf3c8e336a03feba5e9b207/src/main/java/org/assertj/core/api/AbstractAssert.java#L143\">https://github.com/joel-costigliola/assertj-core/blob/3c6bb8a5d4f452c60cf3c8e336a03feba5e9b207/src/main/java/org/assertj/core/api/AbstractAssert.java#L143</a></p>\n<p dir=\"auto\"><a href=\"https://github.com/joel-costigliola/assertj-core/blob/3c6bb8a5d4f452c60cf3c8e336a03feba5e9b207/src/main/java/org/assertj/core/api/AbstractAssert.java#L185\">https://github.com/joel-costigliola/assertj-core/blob/3c6bb8a5d4f452c60cf3c8e336a03feba5e9b207/src/main/java/org/assertj/core/api/AbstractAssert.java#L185</a></p>\n<p dir=\"auto\">Unfortunately, methods like this are a pain for the compiler and for code coverage tools because they have no way of knowing that calls to these methods will never return normally. Hence you get code coverage maps that look like this:</p>\n<p dir=\"auto\"><a href=\"https://codecov.io/gh/osgi/osgi-test/src/main/org.osgi.test.assertj.framework/src/main/java/org/osgi/test/assertj/bundlecontext/AbstractBundleContextAssert.java\" rel=\"nofollow\">https://codecov.io/gh/osgi/osgi-test/src/main/org.osgi.test.assertj.framework/src/main/java/org/osgi/test/assertj/bundlecontext/AbstractBundleContextAssert.java</a></p>\n<p dir=\"auto\">...with the invocations of the <code class=\"notranslate\">failXXX()</code> methods all showing up as uncovered. This happens because the way Codecov works is to insert probes (little bits of test code) before and after each line of source code - because the probe after the call to <code class=\"notranslate\">failXXX()</code> never gets called, the code coverage tool concludes (incorrectly) that the line before it wasn't executed.</p>\n<p dir=\"auto\">In order to fix this, it would be better if instead of throwing the exception directly, the two methods had counterparts which returned an exception that the caller could throw directly. So instead of:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (!actual.getName().equals(name)) {\n     failWithMessage(&quot;Expected character's name to be &lt;%s&gt; but was &lt;%s&gt;&quot; name, actual.getName());\n}\"><pre><span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">getName</span>().<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">name</span>)) {\n     <span class=\"pl-en\">failWithMessage</span>(<span class=\"pl-s\">\"Expected character's name to be &lt;%s&gt; but was &lt;%s&gt;\"</span> <span class=\"pl-s1\">name</span>, <span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">getName</span>());\n}</pre></div>\n<p dir=\"auto\">...you'd do something like this:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"if (!actual.getName().equals(name)) {\n     throw failureWithMessage(&quot;Expected character's name to be &lt;%s&gt; but was &lt;%s&gt;&quot; name, actual.getName());\n}\"><pre><span class=\"pl-k\">if</span> (!<span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">getName</span>().<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">name</span>)) {\n     <span class=\"pl-k\">throw</span> <span class=\"pl-en\">failureWithMessage</span>(<span class=\"pl-s\">\"Expected character's name to be &lt;%s&gt; but was &lt;%s&gt;\"</span> <span class=\"pl-s1\">name</span>, <span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">getName</span>());\n}</pre></div>\n<p dir=\"auto\">This way, the compiler and code coverage tools would be in on the secret and can handle appropriately, and our code coverage checks for our custom assertions would be showing 100% coverage instead of 87%. <g-emoji class=\"g-emoji\" alias=\"smile\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f604.png\">😄</g-emoji></p>\n<p dir=\"auto\">This is more than just a \"code coverage\" nicety - the compiler can also work better (eg, spot dead code) with this pattern rather than the pattern of calling a method that always throws.</p>","resourcePath":"/assertj/assertj/issues/2001","createdAt":"2020-09-22T00:59:07Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Better handle soft proxies for custom assert classes in OSGi bundles","url":"https://github.com/assertj/assertj/pull/1968","resourcePath":"/assertj/assertj/pull/1968","createdAt":"2020-08-14T18:45:10Z","number":1968,"mergeCommit":{"oid":"eafed85ef503c2b4c866201530e7779f5f8ec6ee","message":"Better handle soft proxies for custom assert classes in OSGi bundles (#1968)\n\nWe use a composite class loader for defining soft proxies when the\r\nassert class is from a different class loader than the AssertJ classes.\r\n\r\nThis can occur in OSGi when the assert class is from a bundle. The\r\ncomposite class loader provides access to the internal, non-exported\r\ntypes of AssertJ. ByteBuddy will define the proxy class in the\r\nCompositeClassLoader rather than in the class loader of the assert\r\nclass. This means the assert class cannot assume package private access\r\nto super types, interfaces, etc. since the proxy class is defined in a\r\ndifferent class loader (the CompositeClassLoader) than the assert class.\r\n\r\nFixes https://github.com/joel-costigliola/assertj-core/issues/1964\r\n\r\nSigned-off-by: BJ Hargrave <bj@bjhargrave.com>","commitUrl":"https://github.com/assertj/assertj/commit/eafed85ef503c2b4c866201530e7779f5f8ec6ee","parents":{"nodes":[{"oid":"cbf457772faff89c632a0d089d25f3ab915a8b9d","message":"Add missing ObjectArrayAssert_anySatisfy_Test"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/SoftProxies.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDY4MTMyNjg2OmJlMDZlMThjYTE2ZGI3N2UxYmY4MGU3ZGM2MTkyYjJjODk2MTU1M2E=","url":"https://github.com/assertj/assertj/pull/1968/commits/be06e18ca16db77e1bf80e7dc6192b2c8961553a"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1964,"url":"https://github.com/assertj/assertj/issues/1964","title":"OSGi: soft proxy creation lacks visibilty to internal types","bodyHTML":"<p dir=\"auto\">In the <a href=\"https://github.com/osgi/osgi-test\">osgi-test</a> project, we are developing custom AssertJ assertions and providing soft assertion support for them. <a href=\"https://github.com/osgi/osgi-test/pull/176\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/osgi/osgi-test/pull/176/hovercard\">Integration testing for the latest such custom assertion</a>, show a class loading issue preventing creating the soft assertion proxy. The issue seems to be at</p>\n<p dir=\"auto\"><a href=\"https://github.com/joel-costigliola/assertj-core/blob/0cadf3e19ff126fc96f2055d9923b6fb327a02be/src/main/java/org/assertj/core/api/SoftProxies.java#L198-L200\">https://github.com/joel-costigliola/assertj-core/blob/0cadf3e19ff126fc96f2055d9923b6fb327a02be/src/main/java/org/assertj/core/api/SoftProxies.java#L198-L200</a></p>\n<p dir=\"auto\">where it uses the class loader of the assertClass but the OSGi bundle holding the assertClass does not have visibility to the internal packages of AssertJ which also need to be visible to the ByteBuddy generated class. So when the integration test runs, we get the following error:</p>\n<p dir=\"auto\"><a href=\"https://github.com/osgi/osgi-test/pull/176/checks?check_run_id=972751583#step:4:727\">https://github.com/osgi/osgi-test/pull/176/checks?check_run_id=972751583#step:4:727</a></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"[INFO] --- bnd-testing-maven-plugin:5.1.2:testing (testing) @ org.osgi.test.junit5 ---\n[INFO] Matching glob *\n[INFO] Bnd inferred -runee: JavaSE-1.8\nTEST org.osgi.test.junit5.dictionary.DictionaryAssertTest#testDictionarySoftAssertion() &lt;&lt;&lt; ERROR: org/assertj/core/internal/TypeComparators\njava.lang.NoClassDefFoundError: org/assertj/core/internal/TypeComparators\n\tat java.lang.Class.getDeclaredMethods0(Native Method)\n\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\n\tat java.lang.Class.getDeclaredMethod(Class.java:2128)\n\tat org.osgi.test.assertj.dictionary.ProxyableDictionaryAssert$ByteBuddy$QRu2iZHZ.&lt;clinit&gt;(Unknown Source)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.assertj.core.api.SoftProxies.createSoftAssertionProxy(SoftProxies.java:118)\n\tat org.assertj.core.api.AbstractSoftAssertions.proxy(AbstractSoftAssertions.java:43)\n\tat org.osgi.test.assertj.dictionary.DictionarySoftAssertionsProvider.assertThat(DictionarySoftAssertionsProvider.java:32)\n\tat org.osgi.test.junit5.dictionary.DictionaryAssertTest.testDictionarySoftAssertion(DictionaryAssertTest.java:22)\"><pre class=\"notranslate\"><code>[INFO] --- bnd-testing-maven-plugin:5.1.2:testing (testing) @ org.osgi.test.junit5 ---\n[INFO] Matching glob *\n[INFO] Bnd inferred -runee: JavaSE-1.8\nTEST org.osgi.test.junit5.dictionary.DictionaryAssertTest#testDictionarySoftAssertion() &lt;&lt;&lt; ERROR: org/assertj/core/internal/TypeComparators\njava.lang.NoClassDefFoundError: org/assertj/core/internal/TypeComparators\n\tat java.lang.Class.getDeclaredMethods0(Native Method)\n\tat java.lang.Class.privateGetDeclaredMethods(Class.java:2701)\n\tat java.lang.Class.getDeclaredMethod(Class.java:2128)\n\tat org.osgi.test.assertj.dictionary.ProxyableDictionaryAssert$ByteBuddy$QRu2iZHZ.&lt;clinit&gt;(Unknown Source)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat java.lang.reflect.Constructor.newInstance(Constructor.java:423)\n\tat org.assertj.core.api.SoftProxies.createSoftAssertionProxy(SoftProxies.java:118)\n\tat org.assertj.core.api.AbstractSoftAssertions.proxy(AbstractSoftAssertions.java:43)\n\tat org.osgi.test.assertj.dictionary.DictionarySoftAssertionsProvider.assertThat(DictionarySoftAssertionsProvider.java:32)\n\tat org.osgi.test.junit5.dictionary.DictionaryAssertTest.testDictionarySoftAssertion(DictionaryAssertTest.java:22)\n</code></pre></div>\n<p dir=\"auto\">The ByteBuddy generated class needs to use a class loader which can load classes from the class loader of the assertion class (<code class=\"notranslate\">assertClass.getClassLoader()</code>) and also from the class loader of AssertJ so that internal types can be found. So I think the supplied class loader here needs to be a composite class loader over both <code class=\"notranslate\">assertClass.getClassLoader()</code> and <code class=\"notranslate\">getClass().getClassLoader()</code>.</p>","resourcePath":"/assertj/assertj/issues/1964","createdAt":"2020-08-11T19:08:18Z","labels":{"edges":[{"node":{"name":"3rd-party: OSGi"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Implement singleElement for iterables","url":"https://github.com/assertj/assertj/pull/1933","resourcePath":"/assertj/assertj/pull/1933","createdAt":"2020-06-28T09:29:17Z","number":1933,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractIterableAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/BDDSoftAssertionsTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/SoftAssertionsTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/Assumptions_assumeThat_involving_iterable_navigation_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_singleElement_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_singleElement_with_InstanceOfAssertFactory_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDQxMDI5NTgyOjJmNDhmNDNhMGFlYzgzY2NhYTUwOTIwNTA1MDNlZWRjY2M3ZWRmOTg=","url":"https://github.com/assertj/assertj/pull/1933/commits/2f48f43a0aec83ccaa5092050503eedccc7edf98"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1927,"url":"https://github.com/assertj/assertj/issues/1927","title":"singleElement for iterables","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Add a method <code class=\"notranslate\">hasSingleElementThat</code> to the assertions API for iterables that checks whether the iterable <code class=\"notranslate\">hasSize(1)</code> and then returns <code class=\"notranslate\">element(0)</code> for further assertions on that element.</p>\n<p dir=\"auto\">I have stumbled across this pattern several times, so I wonder whether such a convenience method would make sense in the API.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(newArrayList(&quot;Yoda&quot;)).hasSingleElementThat().startsWith(&quot;Yo&quot;);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-en\">newArrayList</span>(<span class=\"pl-s\">\"Yoda\"</span>)).<span class=\"pl-en\">hasSingleElementThat</span>().<span class=\"pl-en\">startsWith</span>(<span class=\"pl-s\">\"Yo\"</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/1927","createdAt":"2020-06-20T18:45:06Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Get the current actual","url":"https://github.com/assertj/assertj/pull/2027","resourcePath":"/assertj/assertj/pull/2027","createdAt":"2020-10-29T20:54:56Z","number":2027,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractTemporalAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/abstract_/OptionalAssert_getActual_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTEyNTYxNDM4OmYyMzc3ZDE5YmM5YzBmZWNmYzExN2JiZTRjMWNmZTQ5YzhlZjkzZjQ=","url":"https://github.com/assertj/assertj/pull/2027/commits/f2377d19bc9c0fecfc117bbe4c1cfe49c8ef93f4"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1931,"url":"https://github.com/assertj/assertj/issues/1931","title":"Provide a way to the get the current actual","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Some assertions have side effects or traverse the objects under test.</p>\n<p dir=\"auto\">Sometimes, it is desirable to assert something, then perform additional manipulations on the object under test, before asserting more things.</p>\n<p dir=\"auto\">In these cases, you have 2 choices:</p>\n<ol dir=\"auto\">\n<li>Perform the traversal outside of assertj and then assert as you reach the relevant pieces.</li>\n<li>Duplicate the traversal both with and without assertj</li>\n</ol>\n<p dir=\"auto\">It would be useful instead if all assertions allowed for the actual object to be retrieved, removing this duplication.</p>\n<p dir=\"auto\">Please let me know if there is already a way to do this (or a better approach) but I can't see one.</p>\n<p dir=\"auto\">Below examples show this with succeedsWithin but the problem is not specific to succeedsWithin.</p>\n<h3 dir=\"auto\">Inconvenient Alternative 1</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  //no way to access what the future returned\n  assertThat(future).succeedsWithin(10, TimeUnit.SECONDS);\n\n  //Duplicate the traversal logic\n  Object foo = future.get();\n\n  //manipulate object outside of assertj\n  //perform further assertions\"><pre>  <span class=\"pl-c\">//no way to access what the future returned</span>\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">future</span>).<span class=\"pl-en\">succeedsWithin</span>(<span class=\"pl-c1\">10</span>, <span class=\"pl-smi\">TimeUnit</span>.<span class=\"pl-c1\">SECONDS</span>);\n\n  <span class=\"pl-c\">//Duplicate the traversal logic</span>\n  <span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">foo</span> = <span class=\"pl-s1\">future</span>.<span class=\"pl-en\">get</span>();\n\n  <span class=\"pl-c\">//manipulate object outside of assertj</span>\n  <span class=\"pl-c\">//perform further assertions</span></pre></div>\n<h3 dir=\"auto\">Inconvenient Alternative 2</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  //Get the underlying object first. Don't use assertj and lose the assertion failures if something goes wrong\n  Object foo = future.get()  \n  \n  //manipulate object outside of assertj\n  //perform further assertions\"><pre>  <span class=\"pl-c\">//Get the underlying object first. Don't use assertj and lose the assertion failures if something goes wrong</span>\n  <span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">foo</span> = <span class=\"pl-s1\">future</span>.<span class=\"pl-en\">get</span>()  \n  \n  <span class=\"pl-c\">//manipulate object outside of assertj</span>\n  <span class=\"pl-c\">//perform further assertions</span></pre></div>\n<h3 dir=\"auto\">Desired Outcome</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  Object foo = assertThat(future)\n    .succeedsWithin(10, TimeUnit.SECONDS)\n    .getActual();\n\n  //manipulate object outside of assertj\n  //perform further assertions\"><pre>  <span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">foo</span> = <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">future</span>)\n    .<span class=\"pl-en\">succeedsWithin</span>(<span class=\"pl-c1\">10</span>, <span class=\"pl-smi\">TimeUnit</span>.<span class=\"pl-c1\">SECONDS</span>)\n    .<span class=\"pl-en\">getActual</span>();\n\n  <span class=\"pl-c\">//manipulate object outside of assertj</span>\n  <span class=\"pl-c\">//perform further assertions</span></pre></div>\n<h3 dir=\"auto\">Proposed Solution</h3>\n<p dir=\"auto\">Just add a getter to AbstractAssert:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  public ACTUAL getActual() {\n    return actual;\n  }\"><pre>  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">ACTUAL</span> <span class=\"pl-s1\">getActual</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">actual</span>;\n  }</pre></div>","resourcePath":"/assertj/assertj/issues/1931","createdAt":"2020-06-24T22:33:54Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Improve describe error readability of ElementsShouldSatisfy","url":"https://github.com/assertj/assertj/pull/2012","resourcePath":"/assertj/assertj/pull/2012","createdAt":"2020-10-07T01:15:11Z","number":2012,"mergeCommit":{"oid":"bce50fd14e305a9de9e3a5e15efc6fc55e3f04be","message":"Improve describe error readability of ElementsShouldSatisfy (#2012)\n\nPreviously, the error was appended after the toString of the element that did not satisfy the requirements. This was problematic for objects with a lengthy toString because it made the describe error difficult to identify. Now, the describe error is on a new line allowing for quick identification.","commitUrl":"https://github.com/assertj/assertj/commit/bce50fd14e305a9de9e3a5e15efc6fc55e3f04be","parents":{"nodes":[{"oid":"0fa3e16a2af8ed26ee030df3fc27afdca4ee4efc","message":"Add failsWithin CompletableFuture assertion.\nFixes #1150"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ElementsShouldSatisfy.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ZippedElementsShouldSatisfy.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ElementsShouldSatisfy_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ElementsShouldZipSatisfy_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDk4OTE4NzI4OmZkNmNmZjdiZjhmNzk0MDQwNWZhY2EyZTg4MWIwZTY2MzFiNzAzZWQ=","url":"https://github.com/assertj/assertj/pull/2012/commits/fd6cff7bf8f7940405faca2e881b0e6631b703ed"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2010,"url":"https://github.com/assertj/assertj/issues/2010","title":"Improve describe error readability of ElementsShouldSatisfy","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">The <code class=\"notranslate\">error: &lt;description&gt;</code> from <code class=\"notranslate\">ElementsShouldSatisfy</code> should be on a new line to improve readability of objects with long <code class=\"notranslate\">toString()</code>.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Consider a complex Object with many fields in its <code class=\"notranslate\">toString</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class ObjectWithManyFields {\n\n    private String field1;\n    private String field2;\n    // ... plus many more fields\n\n    // getter, setters\n\n    @Override\n    public String toString() {\n        return &quot;ObjectWithManyFields{&quot; +\n                &quot;field1='&quot; + field1 + '\\'' +\n                &quot;, field2='&quot; + field2 + '\\'' +\n                // ... plus many more fields\n                '}';\n    }\n\n}\n\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ObjectWithManyFields</span> {\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">field1</span>;\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">field2</span>;\n    <span class=\"pl-c\">// ... plus many more fields</span>\n\n    <span class=\"pl-c\">// getter, setters</span>\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">toString</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-s\">\"ObjectWithManyFields{\"</span> +\n                <span class=\"pl-s\">\"field1='\"</span> + <span class=\"pl-s1\">field1</span> + <span class=\"pl-s\">'\\''</span> +\n                <span class=\"pl-s\">\", field2='\"</span> + <span class=\"pl-s1\">field2</span> + <span class=\"pl-s\">'\\''</span> +\n                <span class=\"pl-c\">// ... plus many more fields</span>\n                <span class=\"pl-s\">'}'</span>;\n    }\n\n}</pre></div>\n<p dir=\"auto\">Using <code class=\"notranslate\">allSatisfy</code></p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Test\nvoid someTest() {\n    List&lt;ObjectWithManyFields&gt; objectsWithManyFields = new ArrayList&lt;&gt;();\n\n    ObjectWithManyFields objectWithManyFields = new ObjectWithManyFields();\n    objectWithManyFields.setField1(&quot;my field1&quot;);\n    objectsWithManyFields.add(objectWithManyFields);\n\n    assertThat(objectsWithManyFields).allSatisfy(o -&gt; {\n        assertThat(o.getField1()).as(&quot;Field 1&quot;).isEqualTo(&quot;some value&quot;);\n        assertThat(o.getField2()).as(&quot;Field 2&quot;).isEqualTo(&quot;some other value&quot;);\n        // etc.\n    });\n}\"><pre><span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-smi\">void</span> <span class=\"pl-s1\">someTest</span>() {\n    <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">ObjectWithManyFields</span>&gt; <span class=\"pl-s1\">objectsWithManyFields</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ArrayList</span>&lt;&gt;();\n\n    <span class=\"pl-smi\">ObjectWithManyFields</span> <span class=\"pl-s1\">objectWithManyFields</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectWithManyFields</span>();\n    <span class=\"pl-s1\">objectWithManyFields</span>.<span class=\"pl-en\">setField1</span>(<span class=\"pl-s\">\"my field1\"</span>);\n    <span class=\"pl-s1\">objectsWithManyFields</span>.<span class=\"pl-en\">add</span>(<span class=\"pl-s1\">objectWithManyFields</span>);\n\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">objectsWithManyFields</span>).<span class=\"pl-en\">allSatisfy</span>(<span class=\"pl-s1\">o</span> -&gt; {\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">o</span>.<span class=\"pl-en\">getField1</span>()).<span class=\"pl-en\">as</span>(<span class=\"pl-s\">\"Field 1\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"some value\"</span>);\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">o</span>.<span class=\"pl-en\">getField2</span>()).<span class=\"pl-en\">as</span>(<span class=\"pl-s\">\"Field 2\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"some other value\"</span>);\n        <span class=\"pl-c\">// etc.</span>\n    });\n}</pre></div>\n<p dir=\"auto\">Yields this</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting all elements of:\n  &lt;[ObjectWithManyFields{field1='my field1', field2='null', field3='null', field4='null', field5='null', field6='null', field7='null', field8='null', field9='null', field10='null', field11='null', field12='null', field13='null', field14='null', field15='null', field16='null', field17='null', field18='null', field19='null', field20='null', field21='null', field22='null', field23='null', field24='null', field25='null'}]&gt;\nto satisfy given requirements, but these elements did not:\n\n  &lt;ObjectWithManyFields{field1='my field1', field2='null', field3='null', field4='null', field5='null', field6='null', field7='null', field8='null', field9='null', field10='null', field11='null', field12='null', field13='null', field14='null', field15='null', field16='null', field17='null', field18='null', field19='null', field20='null', field21='null', field22='null', field23='null', field24='null', field25='null'}&gt; error: [Field 1] \nExpecting:\n &lt;&quot;my field1&quot;&gt;\nto be equal to:\n &lt;&quot;some value&quot;&gt;\nbut was not.\"><pre><span class=\"pl-smi\">java</span>.<span class=\"pl-smi\">lang</span>.<span class=\"pl-smi\">AssertionError</span>: \n<span class=\"pl-s1\">Expecting</span> <span class=\"pl-s1\">all</span> <span class=\"pl-s1\">elements</span> <span class=\"pl-s1\">of</span>:\n  &lt;[<span class=\"pl-s1\">ObjectWithManyFields</span>{<span class=\"pl-s1\">field1</span>=<span class=\"pl-s\">'my field1'</span>, <span class=\"pl-s1\">field2</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field3</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field4</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field5</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field6</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field7</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field8</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field9</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field10</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field11</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field12</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field13</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field14</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field15</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field16</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field17</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field18</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field19</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field20</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field21</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field22</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field23</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field24</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field25</span>=<span class=\"pl-s\">'null'</span>}]&gt;\n<span class=\"pl-smi\">to</span> <span class=\"pl-s1\">satisfy</span> <span class=\"pl-smi\">given</span> <span class=\"pl-s1\">requirements</span>, <span class=\"pl-smi\">but</span> <span class=\"pl-s1\">these</span> <span class=\"pl-smi\">elements</span> <span class=\"pl-s1\">did</span> <span class=\"pl-s1\">not</span>:\n\n  &lt;<span class=\"pl-s1\">ObjectWithManyFields</span>{<span class=\"pl-s1\">field1</span>=<span class=\"pl-s\">'my field1'</span>, <span class=\"pl-s1\">field2</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field3</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field4</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field5</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field6</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field7</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field8</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field9</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field10</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field11</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field12</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field13</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field14</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field15</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field16</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field17</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field18</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field19</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field20</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field21</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field22</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field23</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field24</span>=<span class=\"pl-s\">'null'</span>, <span class=\"pl-s1\">field25</span>=<span class=\"pl-s\">'null'</span>}&gt; <span class=\"pl-s1\">error</span>: [<span class=\"pl-smi\">Field</span> <span class=\"pl-c1\">1</span>] \n<span class=\"pl-s1\">Expecting</span>:\n &lt;<span class=\"pl-s\">\"my field1\"</span>&gt;\n<span class=\"pl-smi\">to</span> <span class=\"pl-s1\">be</span> <span class=\"pl-smi\">equal</span> <span class=\"pl-s1\">to</span>:\n &lt;<span class=\"pl-s\">\"some value\"</span>&gt;\n<span class=\"pl-smi\">but</span> <span class=\"pl-s1\">was</span> <span class=\"pl-s1\">not</span>.</pre></div>\n<p dir=\"auto\">Now when I first came across this, right away I was unable to determine which assertion of my <code class=\"notranslate\">Consumer</code> failed from my <code class=\"notranslate\">as()</code> descriptions. I thought it was completely omitted. It was only when I scrolled right that I found the error.</p>\n<p dir=\"auto\">It would be much better if the error description was on a new line after the toString representation of the object that failed the <code class=\"notranslate\">assertAllSatisfy</code>.</p>\n<p dir=\"auto\">Like this:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting all elements of:\n  &lt;[ObjectWithManyFields{field1='my field1', field2='null', field3='null', field4='null', field5='null', field6='null', field7='null', field8='null', field9='null', field10='null', field11='null', field12='null', field13='null', field14='null', field15='null', field16='null', field17='null', field18='null', field19='null', field20='null', field21='null', field22='null', field23='null', field24='null', field25='null'}]&gt;\nto satisfy given requirements, but these elements did not:\n\n  &lt;ObjectWithManyFields{field1='my field1', field2='null', field3='null', field4='null', field5='null', field6='null', field7='null', field8='null', field9='null', field10='null', field11='null', field12='null', field13='null', field14='null', field15='null', field16='null', field17='null', field18='null', field19='null', field20='null', field21='null', field22='null', field23='null', field24='null', field25='null'}&gt;\nerror: [Field 1] \nExpecting:\n &lt;&quot;my field1&quot;&gt;\nto be equal to:\n &lt;&quot;some value&quot;&gt;\nbut was not.\"><pre class=\"notranslate\"><code>java.lang.AssertionError: \nExpecting all elements of:\n  &lt;[ObjectWithManyFields{field1='my field1', field2='null', field3='null', field4='null', field5='null', field6='null', field7='null', field8='null', field9='null', field10='null', field11='null', field12='null', field13='null', field14='null', field15='null', field16='null', field17='null', field18='null', field19='null', field20='null', field21='null', field22='null', field23='null', field24='null', field25='null'}]&gt;\nto satisfy given requirements, but these elements did not:\n\n  &lt;ObjectWithManyFields{field1='my field1', field2='null', field3='null', field4='null', field5='null', field6='null', field7='null', field8='null', field9='null', field10='null', field11='null', field12='null', field13='null', field14='null', field15='null', field16='null', field17='null', field18='null', field19='null', field20='null', field21='null', field22='null', field23='null', field24='null', field25='null'}&gt;\nerror: [Field 1] \nExpecting:\n &lt;\"my field1\"&gt;\nto be equal to:\n &lt;\"some value\"&gt;\nbut was not.\n</code></pre></div>\n<p dir=\"auto\">I have the change ready and can submit a PR if OK'ed.</p>","resourcePath":"/assertj/assertj/issues/2010","createdAt":"2020-10-06T01:59:55Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add succeedsWithin to FutureAssert","url":"https://github.com/assertj/assertj/pull/1930","resourcePath":"/assertj/assertj/pull/1930","createdAt":"2020-06-24T22:17:33Z","number":1930,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractCompletableFutureAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractFutureAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/future/ShouldBeCompletedWithin.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Futures.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/presentation/StandardRepresentation.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/future/CompletableFutureAssert_succeedsWithin_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/future/CompletableFutureAssert_succeedsWithin_duration_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/future/FutureAssert_succeedsWithin_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/future/FutureAssert_succeedsWithin_duration_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDM5NTQ4MDY1OmY2ODYzZDFiYzYxZmJjYzlmYzRhNjgxNTY3ZThmN2YzMDgzMzc4NmM=","url":"https://github.com/assertj/assertj/pull/1930/commits/f6863d1bc61fbcc9fc4a681567e8f7f30833786c"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1929,"url":"https://github.com/assertj/assertj/issues/1929","title":"Move succeedsWithin to FutureAssert","bodyHTML":"<p dir=\"auto\"><code class=\"notranslate\">succeedsWithin</code> is currently only defined on <code class=\"notranslate\">CompletableFutureAssert</code> but is compatible with a regular <code class=\"notranslate\">Future</code> also.</p>\n<p dir=\"auto\">This means if I have a method that returns a <code class=\"notranslate\">Future</code> (but I know it is a <code class=\"notranslate\">CompletableFuture</code>), I have to cast it in order to use this assertion.</p>\n<p dir=\"auto\">Placing this assertion on <code class=\"notranslate\">FutureAssert</code> instead would let it work in either case.</p>","resourcePath":"/assertj/assertj/issues/1929","createdAt":"2020-06-23T21:28:00Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Change precedence of assumption classes","url":"https://github.com/assertj/assertj/pull/1983","resourcePath":"/assertj/assertj/pull/1983","createdAt":"2020-08-27T19:24:36Z","number":1983,"mergeCommit":{"oid":"7279cd7cba461c0db5f2302b4974dff64f2de14d","message":"Change precedence of assumption classes (#1983)\n\nIn order of priority:\r\n* org.opentest4j.TestAbortedException\r\n* org.testng.SkipException\r\n* org.junit.AssumptionViolatedException","commitUrl":"https://github.com/assertj/assertj/commit/7279cd7cba461c0db5f2302b4974dff64f2de14d","parents":{"nodes":[{"oid":"8a9712c105031456f046471c81029bbf5baeee25","message":"Minor code cleanup (closes #1972)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/Assumptions_assumeThat_with_succeedsWithin_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/Assumptions_assumeThat_with_various_java_8_types_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/Assumptions_assumeThat_with_various_types_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/BDDAssumptionsTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/BaseAssumptionsRunnerTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/bytearray/ByteArrayAssert_asHexString_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/bytearray/ByteArrayAssert_asString_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/bytearray/ByteArrayAssert_asString_with_charset_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonAssert_assumptions_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/AssertionsUtil.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDc0OTAyNTMwOmVlYjI1NzQ0YTY0MWFiOGYwYjlkN2I0N2NiMTQ2MjE5ODc5MmYwMTA=","url":"https://github.com/assertj/assertj/pull/1983/commits/eeb25744a641ab8f0b9d7b47cb1462198792f010"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1961,"url":"https://github.com/assertj/assertj/issues/1961","title":"Assumptions.assumeThat incompatible with TestNG 7.1.1+","bodyHTML":"<p dir=\"auto\">See <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"676296996\" data-permission-text=\"Title is private\" data-url=\"https://github.com/cbeust/testng/issues/2352\" data-hovercard-type=\"issue\" data-hovercard-url=\"/cbeust/testng/issues/2352/hovercard\" href=\"https://github.com/cbeust/testng/issues/2352\">cbeust/testng#2352</a></p>","resourcePath":"/assertj/assertj/issues/1961","createdAt":"2020-08-10T17:40:06Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Added \"hasPackage\" assertions for Class","url":"https://github.com/assertj/assertj/pull/2019","resourcePath":"/assertj/assertj/pull/2019","createdAt":"2020-10-15T10:16:01Z","number":2019,"mergeCommit":{"oid":"1873ff0fbea12bea8a7e1546c734fc90ccd821e0","message":"Add hasPackage Class assertion (#2019)","commitUrl":"https://github.com/assertj/assertj/commit/1873ff0fbea12bea8a7e1546c734fc90ccd821e0","parents":{"nodes":[{"oid":"9774849fc5b13a2dd69ad6bddfae5a91f4943d9e","message":"Bump equalsverifier from 3.4.3 to 3.5 (#2024)\n\nBumps [equalsverifier](https://github.com/jqno/equalsverifier) from 3.4.3 to 3.5.\r\n- [Release notes](https://github.com/jqno/equalsverifier/releases)\r\n- [Changelog](https://github.com/jqno/equalsverifier/blob/main/CHANGELOG.md)\r\n- [Commits](https://github.com/jqno/equalsverifier/compare/equalsverifier-3.4.3...equalsverifier-3.5)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractClassAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldHavePackage.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveSuperclass.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Classes.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_hasPackage_with_Package_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_hasPackage_with_String_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldHavePackage_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/classes/Classes_assertHasPackage_with_Package_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/classes/Classes_assertHasPackage_with_String_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTAzOTg5MDU2OjE1NWM4NTVhZGU2YmZlZTc4ZjYzNGNlNDFlZTc5MmIwNmY3ZGZjMTg=","url":"https://github.com/assertj/assertj/pull/2019/commits/155c855ade6bfee78f634ce41ee792b06f7dfc18"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1947,"url":"https://github.com/assertj/assertj/issues/1947","title":"Add an assertion for checking a class package","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I'm working on a code generation module and I need to check that generated classes have the right package.<br>\nCurrently, this is the best AssertJ lets me express:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Class&lt;?&gt; aClass;\nString packageName;\n\nassertThat(aClass.getPackageName()).isEqualTo(packageName);\"><pre><span class=\"pl-smi\">Class</span>&lt;?&gt; <span class=\"pl-s1\">aClass</span>;\n<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">packageName</span>;\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">aClass</span>.<span class=\"pl-en\">getPackageName</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">packageName</span>);</pre></div>\n<p dir=\"auto\">I would like a more expressive assertion such as:</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(aClass).hasPackage(packageName);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">aClass</span>).<span class=\"pl-en\">hasPackage</span>(<span class=\"pl-s1\">packageName</span>);</pre></div>\n<p dir=\"auto\">There could be an overload for a <code class=\"notranslate\">Package</code> argument as well.</p>","resourcePath":"/assertj/assertj/issues/1947","createdAt":"2020-07-25T15:02:09Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Handle soft proxies for custom assert classes in OSGi bundles (#1979)","url":"https://github.com/assertj/assertj/pull/1980","resourcePath":"/assertj/assertj/pull/1980","createdAt":"2020-08-26T17:02:19Z","number":1980,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"pom.xml"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assumptions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/ClassLoadingStrategyFactory.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/SoftProxies.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/osgi/AssumptionsTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/osgi/SimpleTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/osgi/soft/CustomSoftAssertionTest.java"}},{"node":{"changeType":"MODIFIED","path":"verify.bndrun"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDc0MDM4MjcwOjU0OTMzYmY0OTY1YWNlYzk1YmE4ZWRkNjhhNGQ0NzA5YWVlNGI0NzU=","url":"https://github.com/assertj/assertj/pull/1980/commits/54933bf4965acec95ba8edd68a4d4709aee4b475"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1888,"url":"https://github.com/assertj/assertj/issues/1888","title":"OSGi integration testing","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">AssertJ support in OSGi is pretty good. However, due to the funky classloading tricks that it uses (particularly with assumptions and soft assertions) you can sometimes run into issues. Searching the issues for \"OSGi\" will reveal a number of them (some of them still open). In the osgi-test project, we have recently hit a similar issue (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"623068451\" data-permission-text=\"Title is private\" data-url=\"https://github.com/osgi/osgi-test/issues/118\" data-hovercard-type=\"issue\" data-hovercard-url=\"/osgi/osgi-test/issues/118/hovercard\" href=\"https://github.com/osgi/osgi-test/issues/118\">osgi/osgi-test#118</a>).</p>\n<p dir=\"auto\">This suggestion has been made before (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"348166619\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1290\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/1290/hovercard\" href=\"https://github.com/assertj/assertj/issues/1290#issue-348166619\">#1290 (comment)</a>) that we include integration tests in AssertJ that exercise the OSGi nature of AssertJ to guard against regressions and catch problems early. I think it would be nice to capture this in a dedicated issue.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Nothing concrete yet, but in osgi-test we are going to try and achieve it by migrating the tests for our custom AssertJ assertions to leverage the Bndtools M2E integration for running integration tests inside an OSGi framework (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"626325875\" data-permission-text=\"Title is private\" data-url=\"https://github.com/osgi/osgi-test/issues/121\" data-hovercard-type=\"issue\" data-hovercard-url=\"/osgi/osgi-test/issues/121/hovercard\" href=\"https://github.com/osgi/osgi-test/issues/121\">osgi/osgi-test#121</a>). If it works well, perhaps we consider adding this in some form to the AssertJ build.</p>","resourcePath":"/assertj/assertj/issues/1888","createdAt":"2020-05-28T08:56:01Z","labels":{"edges":[{"node":{"name":"3rd-party: OSGi"}}]}}},{"node":{"number":1979,"url":"https://github.com/assertj/assertj/issues/1979","title":"OSGi: Soft proxies not working on Java 9+","bodyHTML":"<p dir=\"auto\">In <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"679339485\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1968\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/assertj/assertj/pull/1968/hovercard\" href=\"https://github.com/assertj/assertj/pull/1968\">#1968</a>, I made a fix to better support custom assertions in OSGi bundles being used as soft assertions. This works fine on Java 8 but does nothing for Java 9+ due to the way AssertJ selects the ClassLoadingStrategy.</p>\n<p dir=\"auto\"><a href=\"https://github.com/joel-costigliola/assertj-core/blob/d80cb5c8fc9d76ed6ca4361cc40e0e42d22b1cbc/src/main/java/org/assertj/core/api/ClassLoadingStrategyFactory.java#L36-L41\">https://github.com/joel-costigliola/assertj-core/blob/d80cb5c8fc9d76ed6ca4361cc40e0e42d22b1cbc/src/main/java/org/assertj/core/api/ClassLoadingStrategyFactory.java#L36-L41</a></p>\n<p dir=\"auto\">In Java 8, <code class=\"notranslate\">ClassLoadingStrategy.Default.INJECTION</code> is used. The strategy respects the class loader specified in</p>\n<p dir=\"auto\"><a href=\"https://github.com/joel-costigliola/assertj-core/blob/d80cb5c8fc9d76ed6ca4361cc40e0e42d22b1cbc/src/main/java/org/assertj/core/api/SoftProxies.java#L204\">https://github.com/joel-costigliola/assertj-core/blob/d80cb5c8fc9d76ed6ca4361cc40e0e42d22b1cbc/src/main/java/org/assertj/core/api/SoftProxies.java#L204</a></p>\n<p dir=\"auto\">But in Java 9+, <code class=\"notranslate\">ClassLoadingStrategy.UsingLookup.of(PRIVATE_LOOKUP_IN.invoke(null, assertClass, LOOKUP))</code> is used. This strategy uses the <code class=\"notranslate\">MethodHandles.Lookup.defineClass</code> method which only uses the class loader defining the assertClass. That is, this strategy <em>ignores</em> the class loader passed to the <code class=\"notranslate\">load</code> method above :-( So this means in Java 9+, the CompositeClassLoader is not used to define the proxy classes and they can then fail to define since certain types in AssertJ are not visible.</p>","resourcePath":"/assertj/assertj/issues/1979","createdAt":"2020-08-26T13:57:49Z","labels":{"edges":[{"node":{"name":"3rd-party: OSGi"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add field injection to SoftAssertionsExtension","url":"https://github.com/assertj/assertj/pull/1984","resourcePath":"/assertj/assertj/pull/1984","createdAt":"2020-08-31T04:44:56Z","number":1984,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/junit/jupiter/InheritingSoftlyExtensionFieldTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/junit/jupiter/SoftAssertionsExtensionAPIIntegrationTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/junit/jupiter/SoftAssertionsExtension_InjectionSanityChecking_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/junit/jupiter/SoftAssertionsExtension_Injection_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/junit/jupiter/SoftAssertionsExtension_PER_CLASS_Concurrency_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/junit/jupiter/SoftAssertionsExtension_PER_CLASS_Injection_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/junit/jupiter/SoftlyAssertionsExtensionIntegrationTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/junit/jupiter/SoftlyExtensionTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/junit/jupiter/TestKitUtils.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/junit/jupiter/WithSoftlyExtension.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDc2MDQwNDUxOjVlNjE3OWIzYjQyNjMwMTA3MWM4YTZiNjFiYWNlYTBlODI3MDZkYjU=","url":"https://github.com/assertj/assertj/pull/1984/commits/5e6179b3b426301071c8a6b61bacea0e82706db5"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1970,"url":"https://github.com/assertj/assertj/issues/1970","title":"Softly/SoftAssertionsExtension revamp","bodyHTML":"<p dir=\"auto\">I have a number of suggestions regarding these two extensions that I wanted to float - they could be done as separate issues but they are tightly coupled so I'm going to include them in one issue for now and we can split them up later if you feel that this is appropriate.</p>\n<h2 dir=\"auto\">SoftlyExtension doesn't support custom SoftAssertionsProvider</h2>\n<p dir=\"auto\">I find the field-injection style of <code class=\"notranslate\">SoftlyExtension</code> much preferable to parameter injections. Not only does it simplify the method signatures of the tests, but you can easily have common methods that can perform a common set of (soft) assertions on some objects without having to pass the <code class=\"notranslate\">SoftAssertions</code> reference around. I find that in many of my <code class=\"notranslate\">SoftAssertionExtension</code> implementations, I have a line at the top of them all that says \"this.softly = softly\", which is boilerplate code polluting every test. The alternative is to declare <code class=\"notranslate\">SoftAssertions</code> as a parameter to all of the common methods too, which is even less attractive.</p>\n<p dir=\"auto\">However, <code class=\"notranslate\">SoftlyExtension</code> has the drawback that it is hard-coded to use <code class=\"notranslate\">SoftAssertions</code>. This means you miss out on the ability to use</p>\n<h2 dir=\"auto\">Combine SoftlyExtension and SoftAssertionsExtension</h2>\n<p dir=\"auto\">In osgi-test, we've settled upon a pattern of extensions that support both field and parameter injection. This allows them to make use of common code (eg, instantiating the object to be injected) and it makes it easier for the user as they don't have to make a special effort to remember which one to use.</p>\n<p dir=\"auto\">I can't see any good reason not to merge these two, but perhaps someone else can. Failing that, I suggest that we merge them (which will go a significant part of the way to solving the first point). Given that <code class=\"notranslate\">SoftAssertionsExtension</code> has been around longer, I'm going to suggest merging <code class=\"notranslate\">SoftlyExtension</code> into it and then deprecating <code class=\"notranslate\">SoftlyExtension</code>.</p>\n<h2 dir=\"auto\">Adding API for third-party extensions</h2>\n<p dir=\"auto\">If you're using multiple soft assertion-type libraries, it is nice if you can combine the two into a common \"multiple failure\". This was the thrust behind <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"418126968\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1459\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/1459/hovercard\" href=\"https://github.com/assertj/assertj/issues/1459\">#1459</a>.</p>\n<p dir=\"auto\"><a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/fduminy/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/fduminy\">@fduminy</a> came up with a novel way to combine it with Mockito soft verification (see <a href=\"https://github.com/fduminy/assertj-mockito\">https://github.com/fduminy/assertj-mockito</a>). The only problem with this implementation is that it relies on what is effectively private API of <code class=\"notranslate\">SoftAssertionsExtension</code> to work, as it maintains its own copy of has to reach into the extension context and peek into <code class=\"notranslate\">SoftAssertionExtension</code>'s private store to get the current soft assertion instance to re-use. It would be nice if this aspect of it was publicised so that <code class=\"notranslate\">AssertJMockitoExtension</code> and other 3rd-party extensions can get access to the soft assertion object for the current context.</p>\n<p dir=\"auto\">In osgi-test, we hit upon the idea of using a public static method that takes an <code class=\"notranslate\">ExtensionContext</code> as a parameter, which is responsible for fetching the object from the store (and creating it if necessary). It is possible to use a static method because the extensions themselves are stateless (or supposed to be, anyway!) and store all of their state in the <code class=\"notranslate\">ExtensionContext</code>.</p>\n<p dir=\"auto\">It would be nice if these extensions offered the same ability, which would help clean up code like <code class=\"notranslate\">AssertJMockitoExtension</code>. If we merge the two extensions, this will only need to be done once - if we do not merge them, then we could consider making one depend on the other's public static initalisation method (which would go part way to solving the first point too).</p>","resourcePath":"/assertj/assertj/issues/1970","createdAt":"2020-08-20T05:43:34Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add OSGi integration testing to build","url":"https://github.com/assertj/assertj/pull/1982","resourcePath":"/assertj/assertj/pull/1982","createdAt":"2020-08-26T19:39:16Z","number":1982,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"pom.xml"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/osgi/soft/CustomSoftAssertionTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/osgi/soft/SimpleTest.java"}},{"node":{"changeType":"MODIFIED","path":"verify.bndrun"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDc0MTEzODQyOjU0Nzc5YmIwNmZhNzA0NmFlYmJhMmQzNGU3OGRkZmRhZmYxMDQ0ZGU=","url":"https://github.com/assertj/assertj/pull/1982/commits/54779bb06fa7046aebba2d34e78ddfdaff1044de"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1888,"url":"https://github.com/assertj/assertj/issues/1888","title":"OSGi integration testing","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">AssertJ support in OSGi is pretty good. However, due to the funky classloading tricks that it uses (particularly with assumptions and soft assertions) you can sometimes run into issues. Searching the issues for \"OSGi\" will reveal a number of them (some of them still open). In the osgi-test project, we have recently hit a similar issue (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"623068451\" data-permission-text=\"Title is private\" data-url=\"https://github.com/osgi/osgi-test/issues/118\" data-hovercard-type=\"issue\" data-hovercard-url=\"/osgi/osgi-test/issues/118/hovercard\" href=\"https://github.com/osgi/osgi-test/issues/118\">osgi/osgi-test#118</a>).</p>\n<p dir=\"auto\">This suggestion has been made before (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"348166619\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1290\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/1290/hovercard\" href=\"https://github.com/assertj/assertj/issues/1290#issue-348166619\">#1290 (comment)</a>) that we include integration tests in AssertJ that exercise the OSGi nature of AssertJ to guard against regressions and catch problems early. I think it would be nice to capture this in a dedicated issue.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Nothing concrete yet, but in osgi-test we are going to try and achieve it by migrating the tests for our custom AssertJ assertions to leverage the Bndtools M2E integration for running integration tests inside an OSGi framework (<a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"626325875\" data-permission-text=\"Title is private\" data-url=\"https://github.com/osgi/osgi-test/issues/121\" data-hovercard-type=\"issue\" data-hovercard-url=\"/osgi/osgi-test/issues/121/hovercard\" href=\"https://github.com/osgi/osgi-test/issues/121\">osgi/osgi-test#121</a>). If it works well, perhaps we consider adding this in some form to the AssertJ build.</p>","resourcePath":"/assertj/assertj/issues/1888","createdAt":"2020-05-28T08:56:01Z","labels":{"edges":[{"node":{"name":"3rd-party: OSGi"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"#2005 Adds assertions for infinities.","url":"https://github.com/assertj/assertj/pull/2006","resourcePath":"/assertj/assertj/pull/2006","createdAt":"2020-10-01T08:22:27Z","number":2006,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/double_/DoubleAssert_isNotNegativeInfinity_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/double_/DoubleAssert_isNotPositiveInfinity_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/double_/DoubleAssert_isPositiveInfinity_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/float_/FloatAssertTestParameters.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/float_/FloatAssert_isFinite_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/float_/FloatAssert_isInfinite_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/float_/FloatAssert_isNegativeInfinity_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/float_/FloatAssert_isNotNegativeInfinity_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/float_/FloatAssert_isNotPositiveInfinity_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/float_/FloatAssert_isPositiveInfinity_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDk2MDY2ODMxOjFjNzdjNTBhZDllYTU2MTRlY2E4ZmI3NDM0OTcxMjQ1YWE3ZWI2Mjg=","url":"https://github.com/assertj/assertj/pull/2006/commits/1c77c50ad9ea5614eca8fb7434971245aa7eb628"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2005,"url":"https://github.com/assertj/assertj/issues/2005","title":"Add Abstract(Float|Double)Assert#is(Not)(Negative|Positive)Infinity","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I see we already have <code class=\"notranslate\">is(Not)Nan</code>.<br>\nCan we have a chance for <code class=\"notranslate\">is(Negative|Positive)Infinity</code>?</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"final float f = getSome();\n//assertThat(f).isEquals(Float.NEGATIVE_INFINITY);\nassertThat(f).isNegativeInfinty();\"><pre><span class=\"pl-k\">final</span> <span class=\"pl-smi\">float</span> <span class=\"pl-s1\">f</span> = <span class=\"pl-en\">getSome</span>();\n<span class=\"pl-c\">//assertThat(f).isEquals(Float.NEGATIVE_INFINITY);</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">f</span>).<span class=\"pl-en\">isNegativeInfinty</span>();</pre></div>","resourcePath":"/assertj/assertj/issues/2005","createdAt":"2020-09-28T04:30:33Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Use dedicated executorservice for every testcase","url":"https://github.com/assertj/assertj/pull/2040","resourcePath":"/assertj/assertj/pull/2040","createdAt":"2020-11-15T08:56:05Z","number":2040,"mergeCommit":{"oid":"58b808819cd1e837e9621f3f50e95fddde8a9a36","message":"Use dedicated executorservice for every testcase (#2040)","commitUrl":"https://github.com/assertj/assertj/commit/58b808819cd1e837e9621f3f50e95fddde8a9a36","parents":{"nodes":[{"oid":"5288f51a75da8d5c065c9396e00498bc58b504bd","message":"Disable flaky test on windows"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/future/AbstractFutureTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/future/CompletableFutureAssert_failsWithin_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/future/CompletableFutureAssert_succeedsWithin_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/future/CompletableFutureAssert_succeedsWithin_duration_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/future/FutureAssert_failsWithin_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/future/FutureAssert_succeedsWithin_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/future/FutureAssert_succeedsWithin_duration_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTIxMTY1MjAzOmNjOWQ1YTcxN2ZiNTlmNWFiNGRmMDg5MjVlMmVjNjBhOTkyYzc4MWE=","url":"https://github.com/assertj/assertj/pull/2040/commits/cc9d5a717fb59f5ab4df08925e2ec60a992c781a"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2030,"url":"https://github.com/assertj/assertj/issues/2030","title":"Investigate future flaky tests","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Some tests were annotated with <code class=\"notranslate\">@DisabledOnOs</code> because they failed in CI but not locally, we haven't yet understood why.</p>","resourcePath":"/assertj/assertj/issues/2030","createdAt":"2020-11-01T02:05:59Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add AbstractDateAssert.isBetween for Instant bounds","url":"https://github.com/assertj/assertj/pull/2034","resourcePath":"/assertj/assertj/pull/2034","createdAt":"2020-11-06T14:44:42Z","number":2034,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractDateAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isBetweenSpecifyingBoundariesInclusion_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isBetween_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTE2Nzg5NTUzOmY0ZjliOWFkMWJmNzY1NzZkZjg3NmZlM2E2NTkxZmNkNTE2ODgzY2U=","url":"https://github.com/assertj/assertj/pull/2034/commits/f4f9b9ad1bf76576df876fe3a6591fcd516883ce"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2032,"url":"https://github.com/assertj/assertj/issues/2032","title":"Add method isBetween(Instant, Instant) to AbstractDateAssert ","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I think it will be convenient to have in AbstractDateAssert method <code class=\"notranslate\">isBetween(start: Instant, end: Instant)</code> because <code class=\"notranslate\">Data</code> and <code class=\"notranslate\">Instant</code> are the same in meaning (unix time moment). But it's more comfortable to calculate times as <code class=\"notranslate\">Instant</code> and don't use <code class=\"notranslate\">Date.from()</code> to convert.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(validatingDate).isBetween(Instant.now().minusSeconds(2),  Instant.now().plusSeconds(2))\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">validatingDate</span>).<span class=\"pl-en\">isBetween</span>(<span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">minusSeconds</span>(<span class=\"pl-c1\">2</span>),  <span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">plusSeconds</span>(<span class=\"pl-c1\">2</span>))</pre></div>","resourcePath":"/assertj/assertj/issues/2032","createdAt":"2020-11-02T14:31:07Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add doesNotHaveSameHashCodeAs assertion","url":"https://github.com/assertj/assertj/pull/2037","resourcePath":"/assertj/assertj/pull/2037","createdAt":"2020-11-07T18:24:23Z","number":2037,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldNotHaveSameHashCode.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Objects.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_doesNotHaveSameHashCodeAs_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldNotHaveSameHashCode_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/objects/Objects_assertDoesNotHaveSameHashCodeAs_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTE3MTc0NTAxOjk5MTgzZDNlOGQ1Yjc5MjlkMjUzMWQ5ZDU5ZjJlY2I4ZmZhZjJkYTQ=","url":"https://github.com/assertj/assertj/pull/2037/commits/99183d3e8d5b7929d2531d9d59f2ecb8ffaf2da4"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2028,"url":"https://github.com/assertj/assertj/issues/2028","title":"Add doesNotHaveSameHashCodeAs and doesNotHaveToString assertions","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I sugest to add <em>doesNotHaveSameHashCodeAs</em> and <em>doesNotHaveToString</em> assertions to reflect <em>isEqualTo</em>/<em>isNotEqualTo</em>. (With a shorter name maybe?)</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(foo).isEqualTo(foo);\nassertThat(foo).hasSameHashCodeAs(foo);\nassertThat(foo).hasToString(foo.toString());\n\n// Would replace:\nassertThat(foo).isNotEqualTo(bar);\nassertThat(foo.hashCode()).isNotEqualTo(bar.hashCode());\nassertThat(foo.toString()).isNotEqualTo(bar.toString());\n\n// By:\nassertThat(foo).isNotEqualTo(bar);\nassertThat(foo).doesNotHaveSameHashCodeAs(bar);\nassertThat(foo).doesNotHaveToString(bar.toString());\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">foo</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">hasSameHashCodeAs</span>(<span class=\"pl-s1\">foo</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">hasToString</span>(<span class=\"pl-s1\">foo</span>.<span class=\"pl-en\">toString</span>());\n\n<span class=\"pl-c\">// Would replace:</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">isNotEqualTo</span>(<span class=\"pl-s1\">bar</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>.<span class=\"pl-en\">hashCode</span>()).<span class=\"pl-en\">isNotEqualTo</span>(<span class=\"pl-s1\">bar</span>.<span class=\"pl-en\">hashCode</span>());\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>.<span class=\"pl-en\">toString</span>()).<span class=\"pl-en\">isNotEqualTo</span>(<span class=\"pl-s1\">bar</span>.<span class=\"pl-en\">toString</span>());\n\n<span class=\"pl-c\">// By:</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">isNotEqualTo</span>(<span class=\"pl-s1\">bar</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">doesNotHaveSameHashCodeAs</span>(<span class=\"pl-s1\">bar</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">doesNotHaveToString</span>(<span class=\"pl-s1\">bar</span>.<span class=\"pl-en\">toString</span>());</pre></div>","resourcePath":"/assertj/assertj/issues/2028","createdAt":"2020-10-30T09:24:55Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add AbstractDateAssert.hasSameTimeAs & isCloseTo for Instant","url":"https://github.com/assertj/assertj/pull/2046","resourcePath":"/assertj/assertj/pull/2046","createdAt":"2020-11-24T01:11:49Z","number":2046,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractDateAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_hasSameTimeAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isCloseTo_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTI2MDk2NzEwOjQyYTg3OTMzYjRmNWM4YTk4Mzc3YTEwNWY3N2EyODg4NjEyOGJkZDQ=","url":"https://github.com/assertj/assertj/pull/2046/commits/42a87933b4f5c8a98377a105f77a28886128bdd4"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2032,"url":"https://github.com/assertj/assertj/issues/2032","title":"Add method isBetween(Instant, Instant) to AbstractDateAssert ","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I think it will be convenient to have in AbstractDateAssert method <code class=\"notranslate\">isBetween(start: Instant, end: Instant)</code> because <code class=\"notranslate\">Data</code> and <code class=\"notranslate\">Instant</code> are the same in meaning (unix time moment). But it's more comfortable to calculate times as <code class=\"notranslate\">Instant</code> and don't use <code class=\"notranslate\">Date.from()</code> to convert.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(validatingDate).isBetween(Instant.now().minusSeconds(2),  Instant.now().plusSeconds(2))\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">validatingDate</span>).<span class=\"pl-en\">isBetween</span>(<span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">minusSeconds</span>(<span class=\"pl-c1\">2</span>),  <span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">plusSeconds</span>(<span class=\"pl-c1\">2</span>))</pre></div>","resourcePath":"/assertj/assertj/issues/2032","createdAt":"2020-11-02T14:31:07Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add AbstractDateAssert.isIn for Instant arg","url":"https://github.com/assertj/assertj/pull/2036","resourcePath":"/assertj/assertj/pull/2036","createdAt":"2020-11-07T13:03:48Z","number":2036,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractDateAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isIn_with_vararg_param_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isNotIn_with_vararg_param_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTE3MTM1MDIzOmJjNjQ5YmNlMjIxZTkyMmM2NDljMTdkZGZjYzkwNTgwNDI3NzBkMWE=","url":"https://github.com/assertj/assertj/pull/2036/commits/bc649bce221e922c649c17ddfcc9058042770d1a"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2032,"url":"https://github.com/assertj/assertj/issues/2032","title":"Add method isBetween(Instant, Instant) to AbstractDateAssert ","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I think it will be convenient to have in AbstractDateAssert method <code class=\"notranslate\">isBetween(start: Instant, end: Instant)</code> because <code class=\"notranslate\">Data</code> and <code class=\"notranslate\">Instant</code> are the same in meaning (unix time moment). But it's more comfortable to calculate times as <code class=\"notranslate\">Instant</code> and don't use <code class=\"notranslate\">Date.from()</code> to convert.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(validatingDate).isBetween(Instant.now().minusSeconds(2),  Instant.now().plusSeconds(2))\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">validatingDate</span>).<span class=\"pl-en\">isBetween</span>(<span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">minusSeconds</span>(<span class=\"pl-c1\">2</span>),  <span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">plusSeconds</span>(<span class=\"pl-c1\">2</span>))</pre></div>","resourcePath":"/assertj/assertj/issues/2032","createdAt":"2020-11-02T14:31:07Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add doesNotHaveToString assertion","url":"https://github.com/assertj/assertj/pull/2052","resourcePath":"/assertj/assertj/pull/2052","createdAt":"2020-11-26T02:12:07Z","number":2052,"mergeCommit":{"oid":"1ae4284b533a925174d74f79ee5dad2326d724ae","message":"Add doesNotHaveToString assertion (#2052)\n\n* Implement doesNotHaveToString assertion\r\nCo-authored-by: Kim S. Ly <lykims@users.noreply.github.com>","commitUrl":"https://github.com/assertj/assertj/commit/1ae4284b533a925174d74f79ee5dad2326d724ae","parents":{"nodes":[{"oid":"84fc616221e68556edb8ca6e5084a265dc255457","message":"Add overloaded methods with boxed boolean arrays for contains assertions\n\nSee #2055."}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveToString.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldNotHaveToString.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Objects.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_doesNotHaveToString_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldHaveToString_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldNotHaveToString_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/objects/Objects_assertDoesNotHaveToString_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/objects/Objects_assertHasToString_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTI3Nzc5Njk1OjI4NzM5NDY1NWQ2YWIyYWI3N2Q3MGQzN2VlOTZhZTNiYmQyMzY5MGM=","url":"https://github.com/assertj/assertj/pull/2052/commits/287394655d6ab2ab77d70d37ee96ae3bbd23690c"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2028,"url":"https://github.com/assertj/assertj/issues/2028","title":"Add doesNotHaveSameHashCodeAs and doesNotHaveToString assertions","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I sugest to add <em>doesNotHaveSameHashCodeAs</em> and <em>doesNotHaveToString</em> assertions to reflect <em>isEqualTo</em>/<em>isNotEqualTo</em>. (With a shorter name maybe?)</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(foo).isEqualTo(foo);\nassertThat(foo).hasSameHashCodeAs(foo);\nassertThat(foo).hasToString(foo.toString());\n\n// Would replace:\nassertThat(foo).isNotEqualTo(bar);\nassertThat(foo.hashCode()).isNotEqualTo(bar.hashCode());\nassertThat(foo.toString()).isNotEqualTo(bar.toString());\n\n// By:\nassertThat(foo).isNotEqualTo(bar);\nassertThat(foo).doesNotHaveSameHashCodeAs(bar);\nassertThat(foo).doesNotHaveToString(bar.toString());\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">foo</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">hasSameHashCodeAs</span>(<span class=\"pl-s1\">foo</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">hasToString</span>(<span class=\"pl-s1\">foo</span>.<span class=\"pl-en\">toString</span>());\n\n<span class=\"pl-c\">// Would replace:</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">isNotEqualTo</span>(<span class=\"pl-s1\">bar</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>.<span class=\"pl-en\">hashCode</span>()).<span class=\"pl-en\">isNotEqualTo</span>(<span class=\"pl-s1\">bar</span>.<span class=\"pl-en\">hashCode</span>());\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>.<span class=\"pl-en\">toString</span>()).<span class=\"pl-en\">isNotEqualTo</span>(<span class=\"pl-s1\">bar</span>.<span class=\"pl-en\">toString</span>());\n\n<span class=\"pl-c\">// By:</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">isNotEqualTo</span>(<span class=\"pl-s1\">bar</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">doesNotHaveSameHashCodeAs</span>(<span class=\"pl-s1\">bar</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">foo</span>).<span class=\"pl-en\">doesNotHaveToString</span>(<span class=\"pl-s1\">bar</span>.<span class=\"pl-en\">toString</span>());</pre></div>","resourcePath":"/assertj/assertj/issues/2028","createdAt":"2020-10-30T09:24:55Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add isEmpty() and isNotEmpty assert for Path","url":"https://github.com/assertj/assertj/pull/2059","resourcePath":"/assertj/assertj/pull/2059","createdAt":"2020-12-02T15:48:04Z","number":2059,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractPathAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Paths.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/path/PathAssert_isEmpty_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/path/PathAssert_isNotEmpty_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/TempFileUtil.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTMxMTA5MzUyOjNkNDU0M2VhN2I5MzVkMTg2NjE2OWQzYjQwY2ZlMWYxYzBhNTIyMDM=","url":"https://github.com/assertj/assertj/pull/2059/commits/3d4543ea7b935d1866169d3b40cfe1f1c0a52203"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2049,"url":"https://github.com/assertj/assertj/issues/2049","title":"Add isEmpty() / isNotEmpty() to AbstractPathAssert","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\"><code class=\"notranslate\">AbstractPathAssert</code> lacks assertions to test if <code class=\"notranslate\">path</code> is empty or not empty, in the case of regular files.</p>\n<p dir=\"auto\">These assertions could rely on <code class=\"notranslate\">java.nio.Files.size()</code>.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(path).isEmpty();\nassertThat(path).isNotEmpty();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">path</span>).<span class=\"pl-en\">isEmpty</span>();\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">path</span>).<span class=\"pl-en\">isNotEmpty</span>();</pre></div>","resourcePath":"/assertj/assertj/issues/2049","createdAt":"2020-11-24T12:53:05Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Rework `StandardComparisonStrategy#areEqual` to avoid shortcuts","url":"https://github.com/assertj/assertj/pull/2114","resourcePath":"/assertj/assertj/pull/2114","createdAt":"2021-01-31T16:42:51Z","number":2114,"mergeCommit":{"oid":"29de9ffc6a8aca29487a47bf8d432f3eaf50d527","message":"Rework `StandardComparisonStrategy#areEqual` to avoid shortcuts (#2114)\n\nThe previous behavior relied on `java.util.Objects#deepEquals`, which\r\nperforms a reference check before invoking `equals` on the first\r\nparameter. While this it not an issue for proper implementations of\r\nthe `equals` contract, it was behaving incorrectly in case of\r\nimplementations not satisfying the reflexive property. Also, performing\r\nthe reference check outside of the `equals` implementation reduced the\r\noverall coverage.\r\n\r\nThe tests now provide thorough regression to ensure that no shortcut is\r\ntaken, especially in case of implementations violating the contract.","commitUrl":"https://github.com/assertj/assertj/commit/29de9ffc6a8aca29487a47bf8d432f3eaf50d527","parents":{"nodes":[{"oid":"f27b022a369ba731ed72413f6c10c82a9e539495","message":"[maven-release-plugin] prepare for next development iteration"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/AtomicReferenceArrayElementComparisonStrategy.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/IterableElementComparisonStrategy.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/ObjectArrayElementComparisonStrategy.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/StandardComparisonStrategy.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/StandardComparisonStrategy_areEqual_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/objects/Objects_assertEqual_Test.java"}},{"node":{"changeType":"MODIFIED","path":"verify.bndrun"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTY0Njg3NDYyOmNiNjJlM2EwNmQ1MmYxYzNhMTQ1YzZhMjExYzRiYzUzMTYwZDZjYTE=","url":"https://github.com/assertj/assertj/pull/2114/commits/cb62e3a06d52f1c3a145c6a211c4bc53160d6ca1"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1949,"url":"https://github.com/assertj/assertj/issues/1949","title":"#isEqualTo(Object other) takes invalid shortcut","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Before PR <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"556566886\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1767\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/assertj/assertj/pull/1767/hovercard\" href=\"https://github.com/assertj/assertj/pull/1767\">#1767</a> (specifically commit <a href=\"../commit/76762a3664b3af2101d580355a05c6f0b3aa46cc\">76762a3664b3af2101d580355a05c6f0b3aa46cc</a>) an object x was not automatically considered equal to itself when using <code class=\"notranslate\">BDDAssertions.assertThat(x).isEqualTo(x);</code><br>\nBy switching from</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    if (o1 == null) {\n      return o2 == null;\n    }\n    if (o1.equals(o2)) {\n      return true;\n    }\"><pre>    <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">o1</span> == <span class=\"pl-c1\">null</span>) {\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">o2</span> == <span class=\"pl-c1\">null</span>;\n    }\n    <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">o1</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">o2</span>)) {\n      <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;\n    }</pre></div>\n<p dir=\"auto\">to calling <code class=\"notranslate\">java.util.Objects.deepEquals(o1, o2);</code> we end up with</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    if (o1 == o2)\n        return true;\n    else if (o1 == null || o2 == null)\n        return false;\n    else\n        // defaults to o1.equals(o2) if type is not an array\n        return Arrays.deepEquals0(o1, 2);\"><pre>    <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">o1</span> == <span class=\"pl-s1\">o2</span>)\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;\n    <span class=\"pl-k\">else</span> <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">o1</span> == <span class=\"pl-c1\">null</span> || <span class=\"pl-s1\">o2</span> == <span class=\"pl-c1\">null</span>)\n        <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n    <span class=\"pl-k\">else</span>\n        <span class=\"pl-c\">// defaults to o1.equals(o2) if type is not an array</span>\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">deepEquals0</span>(<span class=\"pl-s1\">o1</span>, <span class=\"pl-c1\">2</span>);</pre></div>\n<p dir=\"auto\">This means when testing a custom equals implementation of a class, BDDAssertions doesn't actually do what we expect it to do and we may oversee bugs in the application code.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// fails with assertj 3.16.1; succeeds with 3.13.2; probably broken since 13.15.1\n@Test\nvoid testEquals() {\n\tObject x = new Object() {\n\t\t@Override\n\t\tpublic boolean equals(Object other) {\n\t\t\treturn false;\n\t\t}\n\t};\n\tBDDAssertions.assertThat(x).isNotEqualTo(x);\n}\"><pre><span class=\"pl-c\">// fails with assertj 3.16.1; succeeds with 3.13.2; probably broken since 13.15.1</span>\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testEquals</span>() {\n\t<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">x</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Object</span>() {\n\t\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">equals</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">other</span>) {\n\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n\t\t}\n\t};\n\t<span class=\"pl-c1\">BDDAssertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">x</span>).<span class=\"pl-en\">isNotEqualTo</span>(<span class=\"pl-s1\">x</span>);\n}</pre></div>","resourcePath":"/assertj/assertj/issues/1949","createdAt":"2020-07-27T13:42:47Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add overloaded methods with boxed long arrays for contains assertions","url":"https://github.com/assertj/assertj/pull/2042","resourcePath":"/assertj/assertj/pull/2042","createdAt":"2020-11-22T23:34:41Z","number":2042,"mergeCommit":{"oid":"18b01bd1614d774fbc1ab7d1a2aaaac6ffb0cad0","message":"Add overloaded methods with boxed long arrays for contains assertions (#2042)","commitUrl":"https://github.com/assertj/assertj/commit/18b01bd1614d774fbc1ab7d1a2aaaac6ffb0cad0","parents":{"nodes":[{"oid":"9bf0d577a30e2bd7f1abe6ba1259b9f7404443a8","message":"Add missing @since to Abstract{Double|Float)Assert#is(Infinite|Finite)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/longarray/LongArrayAssert_containsExactlyInAnyOrder_with_Long_array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/longarray/LongArrayAssert_containsExactly_with_Long_array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/longarray/LongArrayAssert_containsOnlyOnce_with_Long_array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/longarray/LongArrayAssert_containsOnly_with_Long_array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/longarray/LongArrayAssert_containsSequence_with_Long_array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/longarray/LongArrayAssert_containsSubsequence_with_Long_array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/longarray/LongArrayAssert_contains_with_Long_array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/longarray/LongArrayAssert_doesNotContain_with_Long_array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/longarray/LongArrayAssert_endsWith_with_Long_array_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/longarray/LongArrayAssert_startsWith_with_Long_array_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTI1Mzc2ODI4OjVkYjE2YmRjYTc3OTUyNjZlOTZlMzI4MmQ3ZTM4YzA2YzFmMDRiMWM=","url":"https://github.com/assertj/assertj/pull/2042/commits/5db16bdca7795266e96e3282d7e38c06c1f04b1c"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1948,"url":"https://github.com/assertj/assertj/issues/1948","title":"Comparing of Boxed vs. Unboxed Array broken","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Before PR <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"556566886\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1767\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/assertj/assertj/pull/1767/hovercard\" href=\"https://github.com/assertj/assertj/pull/1767\">#1767</a> (specifically commit <a href=\"../commit/76762a3664b3af2101d580355a05c6f0b3aa46cc\">76762a3664b3af2101d580355a05c6f0b3aa46cc</a>) it was possible to compare a boxed with an unboxed array.<br>\nThis was because org.assertj.core.util.areEqualArrays was comparing entry by entry which took care of automatic boxing/unboxing.<br>\nThis functionality is broken and I'm not sure whether this was intentional. It's causing quite some refactoring efforts on our side to upgrade and I would argue that the old behaviour was quite useful.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// fails with assertj 3.16.1; succeeds with 3.13.2; probably broken since 13.15.1\n@Test\nvoid testCompareArrays() {\n\tlong[] array1 = new long[] { 2L, 2L };\n\tLong[] array2 = new Long[] { 2L, 2L };\n\t\t\n\tBDDAssertions.assertThat(array1).isEqualTo(array2);\n}\"><pre><span class=\"pl-c\">// fails with assertj 3.16.1; succeeds with 3.13.2; probably broken since 13.15.1</span>\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testCompareArrays</span>() {\n\t<span class=\"pl-smi\">long</span>[] <span class=\"pl-s1\">array1</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">long</span>[] { <span class=\"pl-c1\">2L</span>, <span class=\"pl-c1\">2L</span> };\n\t<span class=\"pl-smi\">Long</span>[] <span class=\"pl-s1\">array2</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Long</span>[] { <span class=\"pl-c1\">2L</span>, <span class=\"pl-c1\">2L</span> };\n\t\t\n\t<span class=\"pl-c1\">BDDAssertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">array1</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">array2</span>);\n}</pre></div>","resourcePath":"/assertj/assertj/issues/1948","createdAt":"2020-07-27T13:30:20Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add isBeforeXXX and isAfterXXX for Instant","url":"https://github.com/assertj/assertj/pull/2043","resourcePath":"/assertj/assertj/pull/2043","createdAt":"2020-11-24T00:07:30Z","number":2043,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractDateAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isAfterOrEqualTo_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isAfter_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isBeforeOrEqualTo_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isBefore_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTI2MDcwNDgyOjllZTM4OWQ0YjliMDBmYjEzN2FhODkwYWIyNmViNmQ3ZWNkMGFiOWY=","url":"https://github.com/assertj/assertj/pull/2043/commits/9ee389d4b9b00fb137aa890ab26eb6d7ecd0ab9f"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2032,"url":"https://github.com/assertj/assertj/issues/2032","title":"Add method isBetween(Instant, Instant) to AbstractDateAssert ","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I think it will be convenient to have in AbstractDateAssert method <code class=\"notranslate\">isBetween(start: Instant, end: Instant)</code> because <code class=\"notranslate\">Data</code> and <code class=\"notranslate\">Instant</code> are the same in meaning (unix time moment). But it's more comfortable to calculate times as <code class=\"notranslate\">Instant</code> and don't use <code class=\"notranslate\">Date.from()</code> to convert.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(validatingDate).isBetween(Instant.now().minusSeconds(2),  Instant.now().plusSeconds(2))\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">validatingDate</span>).<span class=\"pl-en\">isBetween</span>(<span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">minusSeconds</span>(<span class=\"pl-c1\">2</span>),  <span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">plusSeconds</span>(<span class=\"pl-c1\">2</span>))</pre></div>","resourcePath":"/assertj/assertj/issues/2032","createdAt":"2020-11-02T14:31:07Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add comparator-based Object assert","url":"https://github.com/assertj/assertj/pull/2086","resourcePath":"/assertj/assertj/pull/2086","createdAt":"2020-12-22T22:25:39Z","number":2086,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/ComparatorBasedObjectAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/ComparisonBasedAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/ObjectAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldBeBetween.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldBeGreater.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldBeGreaterOrEqual.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldBeLess.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldBeLessOrEqual.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Objects.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/objects/Objects_assertEqualByComparison_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTQ0NDAzMjU3OjE2MjRmMTdlYmJlYjZlMTQ0OTdlMTk3MGExNTEyNzlmZDZjNjQ1MzY=","url":"https://github.com/assertj/assertj/pull/2086/commits/1624f17ebbeb6e14497e1970a151279fd6c64536"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2041,"url":"https://github.com/assertj/assertj/issues/2041","title":"support comparison checks using Comparator instead of Comparable","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Currently we have a fluent API for asserting comparison results: <code class=\"notranslate\">Assertions.assertThat(java.lang.Comparable)</code>, where the ordering can also be replaced by a custom comparator by the use of <code class=\"notranslate\">usingComparator(java.lang.Comparator)</code>.<br>\nI'd like to have the same API available through the use of <code class=\"notranslate\">Assertions.assertThat(Object).usingComparator(java.lang.Comparator)</code> for classes that don't implement <code class=\"notranslate\">Comparable</code>.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\nassertThat(object1).usingComparator(mySpecialOrdering).isLessThan(object2);\n\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">object1</span>).<span class=\"pl-en\">usingComparator</span>(<span class=\"pl-s1\">mySpecialOrdering</span>).<span class=\"pl-en\">isLessThan</span>(<span class=\"pl-s1\">object2</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/2041","createdAt":"2020-11-17T10:58:10Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add AbstractDateAssert.usingInstantComparator","url":"https://github.com/assertj/assertj/pull/2047","resourcePath":"/assertj/assertj/pull/2047","createdAt":"2020-11-24T01:58:16Z","number":2047,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractDateAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/date/DateAssert_usingInstantComparator_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/test/AlwaysEqualComparator.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTI2MTIwNzAyOjc2MmIyZjE0NGM0OTJlNDYwMjJmYzg5YTM4OTA0ZWRiODc5MDQ2ZmY=","url":"https://github.com/assertj/assertj/pull/2047/commits/762b2f144c492e46022fc89a38904edb879046ff"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2032,"url":"https://github.com/assertj/assertj/issues/2032","title":"Add method isBetween(Instant, Instant) to AbstractDateAssert ","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I think it will be convenient to have in AbstractDateAssert method <code class=\"notranslate\">isBetween(start: Instant, end: Instant)</code> because <code class=\"notranslate\">Data</code> and <code class=\"notranslate\">Instant</code> are the same in meaning (unix time moment). But it's more comfortable to calculate times as <code class=\"notranslate\">Instant</code> and don't use <code class=\"notranslate\">Date.from()</code> to convert.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(validatingDate).isBetween(Instant.now().minusSeconds(2),  Instant.now().plusSeconds(2))\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">validatingDate</span>).<span class=\"pl-en\">isBetween</span>(<span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">minusSeconds</span>(<span class=\"pl-c1\">2</span>),  <span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">plusSeconds</span>(<span class=\"pl-c1\">2</span>))</pre></div>","resourcePath":"/assertj/assertj/issues/2032","createdAt":"2020-11-02T14:31:07Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix #2068 isValidGetter checks if return type of method is not void","url":"https://github.com/assertj/assertj/pull/2071","resourcePath":"/assertj/assertj/pull/2071","createdAt":"2020-12-11T10:19:56Z","number":2071,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/util/introspection/Introspection.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/Introspection_getProperty_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/introspection/PropertyOrFieldSupport_getValueOf_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTM2Nzc0MjM4OmY3YjhhYTNhZjFhMzYwN2UyMmU5ZDU3MjBiNzkwODEwZjJkMThkM2Q=","url":"https://github.com/assertj/assertj/pull/2071/commits/f7b8aa3af1a3607e22e9d5720b790810f2d18d3d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2068,"url":"https://github.com/assertj/assertj/issues/2068","title":"Introspection.findGetter find wrong getter method with return type void","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Introspection does not work if target class has a method that has same name as the field I like to extract but with return type void</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"org.apache.xerces.dom.events.EventImpl event = ...\nassertThat(event)\n        .extracting(&quot;preventDefault&quot;)\n        .asInstanceOf(InstanceOfAssertFactories.BOOLEAN)\n        .isTrue();\"><pre><span class=\"pl-smi\">org</span>.<span class=\"pl-smi\">apache</span>.<span class=\"pl-smi\">xerces</span>.<span class=\"pl-smi\">dom</span>.<span class=\"pl-smi\">events</span>.<span class=\"pl-smi\">EventImpl</span> <span class=\"pl-s1\">event</span> = ...\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">event</span>)\n        .<span class=\"pl-en\">extracting</span>(<span class=\"pl-s\">\"preventDefault\"</span>)\n        .<span class=\"pl-en\">asInstanceOf</span>(<span class=\"pl-smi\">InstanceOfAssertFactories</span>.<span class=\"pl-c1\">BOOLEAN</span>)\n        .<span class=\"pl-en\">isTrue</span>();</pre></div>\n<p dir=\"auto\">The class EventImpl has a method</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public void preventDefault()\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">preventDefault</span>()</pre></div>\n<p dir=\"auto\">The method findGetter of class org.assertj.core.util.introspection.Introspection will return this method as getter. Therefore, the field is not introspected at all. The found getter method will return null since it has void as return type.</p>\n<p dir=\"auto\">To fix this the method isValidGetter should check if the given method has a return type that is not void.</p>\n<h4 dir=\"auto\">Workaround</h4>\n<p dir=\"auto\">Introspection.setExtractBareNamePropertyMethods(false);</p>","resourcePath":"/assertj/assertj/issues/2068","createdAt":"2020-12-10T15:39:50Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add AbstractDateAssert.isEqualXXX for Instant arg","url":"https://github.com/assertj/assertj/pull/2035","resourcePath":"/assertj/assertj/pull/2035","createdAt":"2020-11-07T12:05:18Z","number":2035,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractDateAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isEqualToIgnoringHours_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isEqualToIgnoringMillis_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isEqualToIgnoringMinutes_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isEqualToIgnoringSeconds_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isEqualTo_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isNotEqualTo_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTE3MTI4MjQzOmRhOGYzMDk4ZjhlODJjYTViYTkxMDE4MzgyNjU4N2IwOGFhYjRiYmI=","url":"https://github.com/assertj/assertj/pull/2035/commits/da8f3098f8e82ca5ba910183826587b08aab4bbb"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2032,"url":"https://github.com/assertj/assertj/issues/2032","title":"Add method isBetween(Instant, Instant) to AbstractDateAssert ","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I think it will be convenient to have in AbstractDateAssert method <code class=\"notranslate\">isBetween(start: Instant, end: Instant)</code> because <code class=\"notranslate\">Data</code> and <code class=\"notranslate\">Instant</code> are the same in meaning (unix time moment). But it's more comfortable to calculate times as <code class=\"notranslate\">Instant</code> and don't use <code class=\"notranslate\">Date.from()</code> to convert.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(validatingDate).isBetween(Instant.now().minusSeconds(2),  Instant.now().plusSeconds(2))\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">validatingDate</span>).<span class=\"pl-en\">isBetween</span>(<span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">minusSeconds</span>(<span class=\"pl-c1\">2</span>),  <span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">plusSeconds</span>(<span class=\"pl-c1\">2</span>))</pre></div>","resourcePath":"/assertj/assertj/issues/2032","createdAt":"2020-11-02T14:31:07Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add AbstractDateAssert.isInSameXXX for Instant","url":"https://github.com/assertj/assertj/pull/2045","resourcePath":"/assertj/assertj/pull/2045","createdAt":"2020-11-24T00:48:22Z","number":2045,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractDateAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isInSameDayAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isInSameHourAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isInSameHourWindowAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isInSameMinuteAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isInSameMinuteWindowAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isInSameMonthAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isInSameSecondAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isInSameSecondWindowAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isInSameYearAs_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTI2MDgzMzExOjU3ZGFhOTFhZTdmNThlOTY4NzUzYTg5MjBiMDFkMjU0NmY5ZWJlYzQ=","url":"https://github.com/assertj/assertj/pull/2045/commits/57daa91ae7f58e968753a8920b01d2546f9ebec4"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2032,"url":"https://github.com/assertj/assertj/issues/2032","title":"Add method isBetween(Instant, Instant) to AbstractDateAssert ","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I think it will be convenient to have in AbstractDateAssert method <code class=\"notranslate\">isBetween(start: Instant, end: Instant)</code> because <code class=\"notranslate\">Data</code> and <code class=\"notranslate\">Instant</code> are the same in meaning (unix time moment). But it's more comfortable to calculate times as <code class=\"notranslate\">Instant</code> and don't use <code class=\"notranslate\">Date.from()</code> to convert.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(validatingDate).isBetween(Instant.now().minusSeconds(2),  Instant.now().plusSeconds(2))\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">validatingDate</span>).<span class=\"pl-en\">isBetween</span>(<span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">minusSeconds</span>(<span class=\"pl-c1\">2</span>),  <span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">plusSeconds</span>(<span class=\"pl-c1\">2</span>))</pre></div>","resourcePath":"/assertj/assertj/issues/2032","createdAt":"2020-11-02T14:31:07Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Use org.junit.ComparisonFailure when available and org.opentest4j.AssertionFailedError is not.","url":"https://github.com/assertj/assertj/pull/2063","resourcePath":"/assertj/assertj/pull/2063","createdAt":"2020-12-08T01:52:02Z","number":2063,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/recursive/comparison/ComparisonDifference.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/AssertionErrorCreator.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldBeEqualByComparingFieldByFieldRecursively.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Failures.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Strings.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/internal/UnambiguousRepresentation.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/AssertionErrorCreator_assertionError_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/UnambiguousRepresentation_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertEqualsNormalizingPunctuationAndWhitespace_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertIsEqualToNormalizingNewlines_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTM0MDYyMjEzOjVlMmVmMjAxMjJjOTFkZGI2NDM2MTI1MDVkNGQyNDRlODVlZDM1NzM=","url":"https://github.com/assertj/assertj/pull/2063/commits/5e2ef20122c91ddb643612505d4d244e85ed3573"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2062,"url":"https://github.com/assertj/assertj/issues/2062","title":"Make .isEqualToNormalizingXxx failures easier to analyze.","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">IntelliJ IDEA (and most likely other IDEs) have a nice support for <code class=\"notranslate\">org.junit.ComparisonFailure</code>, where it process the exception and generate a nice report with the diff, which I find very useful when comparing large objects. <code class=\"notranslate\">isEqualTo ()</code> will already throw this error. I believe all <code class=\"notranslate\">isEqualToNormalizingXxxx</code> methods should do the same instead of  throwing a raw <code class=\"notranslate\">AssertionError</code>.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Compare the result of the below (failling) tests in IntelliJ:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class AssertionFailureTest {\n\n  @Test\n  public void isEqualTo () {\n    String expected = IntStream.range (0, 200)\n      .mapToObj (String::valueOf)\n      .collect (Collectors.joining (&quot;\\n&quot;));\n    String actual = IntStream.range (0, 200)\n      .filter (i -&gt; i != 42)\n      .mapToObj (String::valueOf)\n      .collect(Collectors.joining (&quot;\\n&quot;));\n\n    assertThat (actual).isEqualTo (expected);\n  }\n\n  @Test\n  public void isEqualToNormalizingXxxx () {\n    String expected = IntStream.range (0, 200)\n      .mapToObj (String::valueOf)\n      .collect (Collectors.joining (&quot;\\n&quot;));\n    String actual = IntStream.range (0, 200)\n      .filter (i -&gt; i != 42)\n      .mapToObj (String::valueOf)\n      .collect(Collectors.joining (&quot;\\n&quot;));\n\n    assertThat (actual).isEqualToNormalizingNewlines (expected);\n  }\n\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">AssertionFailureTest</span> {\n\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">isEqualTo</span> () {\n    <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">expected</span> = <span class=\"pl-s1\">IntStream</span>.<span class=\"pl-en\">range</span> (<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">200</span>)\n      .<span class=\"pl-en\">mapToObj</span> (<span class=\"pl-s1\">String</span>::<span class=\"pl-s1\">valueOf</span>)\n      .<span class=\"pl-en\">collect</span> (<span class=\"pl-s1\">Collectors</span>.<span class=\"pl-en\">joining</span> (<span class=\"pl-s\">\"\\n\"</span>));\n    <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">IntStream</span>.<span class=\"pl-en\">range</span> (<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">200</span>)\n      .<span class=\"pl-en\">filter</span> (<span class=\"pl-s1\">i</span> -&gt; <span class=\"pl-s1\">i</span> != <span class=\"pl-c1\">42</span>)\n      .<span class=\"pl-en\">mapToObj</span> (<span class=\"pl-s1\">String</span>::<span class=\"pl-s1\">valueOf</span>)\n      .<span class=\"pl-en\">collect</span>(<span class=\"pl-s1\">Collectors</span>.<span class=\"pl-en\">joining</span> (<span class=\"pl-s\">\"\\n\"</span>));\n\n    <span class=\"pl-en\">assertThat</span> (<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">isEqualTo</span> (<span class=\"pl-s1\">expected</span>);\n  }\n\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">isEqualToNormalizingXxxx</span> () {\n    <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">expected</span> = <span class=\"pl-s1\">IntStream</span>.<span class=\"pl-en\">range</span> (<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">200</span>)\n      .<span class=\"pl-en\">mapToObj</span> (<span class=\"pl-s1\">String</span>::<span class=\"pl-s1\">valueOf</span>)\n      .<span class=\"pl-en\">collect</span> (<span class=\"pl-s1\">Collectors</span>.<span class=\"pl-en\">joining</span> (<span class=\"pl-s\">\"\\n\"</span>));\n    <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">IntStream</span>.<span class=\"pl-en\">range</span> (<span class=\"pl-c1\">0</span>, <span class=\"pl-c1\">200</span>)\n      .<span class=\"pl-en\">filter</span> (<span class=\"pl-s1\">i</span> -&gt; <span class=\"pl-s1\">i</span> != <span class=\"pl-c1\">42</span>)\n      .<span class=\"pl-en\">mapToObj</span> (<span class=\"pl-s1\">String</span>::<span class=\"pl-s1\">valueOf</span>)\n      .<span class=\"pl-en\">collect</span>(<span class=\"pl-s1\">Collectors</span>.<span class=\"pl-en\">joining</span> (<span class=\"pl-s\">\"\\n\"</span>));\n\n    <span class=\"pl-en\">assertThat</span> (<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">isEqualToNormalizingNewlines</span> (<span class=\"pl-s1\">expected</span>);\n  }\n\n}</pre></div>\n<h4 dir=\"auto\">NB</h4>\n<p dir=\"auto\">The goal of this issue is to make it easy to find the issue in case an assertion fails. Throwing a ComparisonFailure seems me to be an easy way to do that, but feel free to suggest any other way.</p>","resourcePath":"/assertj/assertj/issues/2062","createdAt":"2020-12-07T11:27:20Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix StackOverflowError when usingRecursiveComparison of Path on Windows","url":"https://github.com/assertj/assertj/pull/2126","resourcePath":"/assertj/assertj/pull/2126","createdAt":"2021-02-20T15:03:25Z","number":2126,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_usingComparatorForType_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_usingFieldByFieldElementComparator_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_usingRecursiveFieldByFieldElementComparator_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonAssert_isEqualTo_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration_multiLineDescription_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/ExtendedByTypesComparator_toString_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/FieldByFieldComparator_toString_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/IgnoringFieldsComparator_toString_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/OnFieldsComparator_toString_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/RecursiveFieldByFieldComparator_toString_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc2OTU1OTI2OmM0ZTcxZjFiNDFmMzUxYTlhOGQ0NTJiYTZmYzRiYzZlOTVlMmM1NGU=","url":"https://github.com/assertj/assertj/pull/2126/commits/c4e71f1b41f351a9a8d452ba6fc4bc6e95e2c54e"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1855,"url":"https://github.com/assertj/assertj/issues/1855","title":"StackoverflowError when usingRecursiveComparison for an Object with a nio path","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I get a StackoverflowError when usingRecursiveComparison for an Object which contains a nio path.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.assertj.core.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.nio.file.Path;\nimport java.nio.file.Paths;\n\npublic class AssertJBugReport {\n\n    @Test\n    public void pathThrowsStackoverflowError() {\n        final Container container1 = new Container(&quot;/tmp/example&quot;);\n        final Container container2 = new Container(&quot;/tmp/example&quot;);\n\n        Assertions.assertThat(container1)\n                .usingRecursiveComparison()\n                .isEqualTo(container2);\n    }\n\n    public static class Container {\n        private Path path;\n\n        public Container(String path) {\n            this.path = Paths.get(path);\n        }\n\n        public Path getPath() {\n            return path;\n        }\n    }\n\n}\n\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">assertj</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">nio</span>.<span class=\"pl-s1\">file</span>.<span class=\"pl-s1\">Path</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">nio</span>.<span class=\"pl-s1\">file</span>.<span class=\"pl-s1\">Paths</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">AssertJBugReport</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">pathThrowsStackoverflowError</span>() {\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Container</span> <span class=\"pl-s1\">container1</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Container</span>(<span class=\"pl-s\">\"/tmp/example\"</span>);\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Container</span> <span class=\"pl-s1\">container2</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Container</span>(<span class=\"pl-s\">\"/tmp/example\"</span>);\n\n        <span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">container1</span>)\n                .<span class=\"pl-en\">usingRecursiveComparison</span>()\n                .<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">container2</span>);\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Container</span> {\n        <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Path</span> <span class=\"pl-s1\">path</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Container</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">path</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">path</span> = <span class=\"pl-s1\">Paths</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s1\">path</span>);\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Path</span> <span class=\"pl-en\">getPath</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">path</span>;\n        }\n    }\n\n}</pre></div>","resourcePath":"/assertj/assertj/issues/1855","createdAt":"2020-04-28T10:13:36Z","labels":{"edges":[{"node":{"name":"type: bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"StringAssert: Add method to assert equality of normalized strings","url":"https://github.com/assertj/assertj/pull/2087","resourcePath":"/assertj/assertj/pull/2087","createdAt":"2020-12-23T03:09:11Z","number":2087,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldBeEqualNormalizingUnicode.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Strings.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldBeEqualNormalizingUnicode_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertEqualsNormalizingUnicode_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTQ0NTM2MDgwOmRiYzJiMTZjNDI2YzE0ZTE3MzMwNGMzMzg4ZWNhMDNjNTZlMTIzNjU=","url":"https://github.com/assertj/assertj/pull/2087/commits/dbc2b16c426c14e173304c3388eca03c56e12365"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2057,"url":"https://github.com/assertj/assertj/issues/2057","title":"StringAssert: Add method to assert equality of normalized strings ","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Some Strings look equal but their canonical form is not equal. For example one can compose the A umlaut (Ä) with a single character: \\u00C4 Or with a combination of the A character and the dots (the dieresis character ¨): \\u0041\\u0308</p>\n<p dir=\"auto\">In essence, you are using two unicode characters for one letter. Because equals() compares characters, the form with dieresis is not equals to the form without.</p>\n<p dir=\"auto\">The problem is explained here: <a href=\"https://stackoverflow.com/questions/27670249/string-comparison-is-wrong/27670613#27670613\" rel=\"nofollow\">https://stackoverflow.com/questions/27670249/string-comparison-is-wrong/27670613#27670613</a></p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;\\u00C4&quot;).isEqualToNormalizingUnicode(&quot;\\u0041\\u0308&quot;)\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"\\u00C4\"</span>).<span class=\"pl-en\">isEqualToNormalizingUnicode</span>(<span class=\"pl-s\">\"\\u0041\\u0308\"</span>)</pre></div>","resourcePath":"/assertj/assertj/issues/2057","createdAt":"2020-11-30T14:35:19Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Starting work for CollectionAssert","url":"https://github.com/assertj/assertj/pull/2106","resourcePath":"/assertj/assertj/pull/2106","createdAt":"2021-01-27T00:42:28Z","number":2106,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/FactoryBasedNavigableCollectionAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/InstanceOfAssertFactories.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/StandardSoftAssertionsProvider.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WithAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WithAssumptions.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldHaveThrownException.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/internal/Collection.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/Assertions_assertThat_with_Iterable_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/Assertions_assertThat_with_Iterator_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/InstanceOfAssertFactoriesTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTYyMTQ3ODMzOjQ1ZGI5NGQxNTBiYzYxOGU4NDAxMzliMTdiNGI4MWYxZGNiZmUxMTQ=","url":"https://github.com/assertj/assertj/pull/2106/commits/45db94d150bc618e840139b17b4b81f1dcbfe114"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2102,"url":"https://github.com/assertj/assertj/issues/2102","title":"`isUnmodifiable` assertion for Collections","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Considering the <code class=\"notranslate\">java.util.Collections.unmodifiableXXX()</code> methods, we could add a <code class=\"notranslate\">isUnmodifiable()</code> method to the assert classes for collections.</p>\n<h4 dir=\"auto\">Implementation Proposal</h4>\n<p dir=\"auto\">Under the hood, the assertion should try to call all the collection APIs which are expected to throw <code class=\"notranslate\">UnsupportedOperationException</code>. The assertion succeeds if all of them are throwing the expected exception, otherwise it fails.</p>\n<p dir=\"auto\">We could define a new <code class=\"notranslate\">AbstractCollectionAssert</code> which would inherit from <code class=\"notranslate\">AbstractIterableAssert</code> and would be the parent class for all the other assert classes for collection subtypes. <code class=\"notranslate\">AbstractCollectionAssert</code> would expose <code class=\"notranslate\">isUnmodifiable()</code>. Also, <code class=\"notranslate\">Assertions.assertThat(Collection)</code> and <code class=\"notranslate\">BDDAssertions.then(Collection)</code> would be needed.</p>\n<p dir=\"auto\">Below is the mapping between the collection type and the APIs to test. Each subtype would cover also the methods of the parent type. E.g., if we have a <code class=\"notranslate\">List</code>, the assertion should also verify <code class=\"notranslate\">Collection</code> methods.</p>\n<table role=\"table\">\n<thead>\n<tr>\n<th>Instance Of</th>\n<th>APIs to test</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"notranslate\">Collection</code></td>\n<td><code class=\"notranslate\">add(E)</code>, <code class=\"notranslate\">addAll(Collection)</code>, <code class=\"notranslate\">clear()</code>, <code class=\"notranslate\">iterator().remove()</code>, <code class=\"notranslate\">remove(Object)</code>, <code class=\"notranslate\">removeAll(Collection)</code>, <code class=\"notranslate\">removeIf(Predicate)</code>, <code class=\"notranslate\">retainAll(Collection)</code></td>\n</tr>\n<tr>\n<td><code class=\"notranslate\">List</code></td>\n<td><code class=\"notranslate\">add(int, E)</code>, <code class=\"notranslate\">addAll(int, Collection)</code>, <code class=\"notranslate\">listIterator().add(E)</code>, <code class=\"notranslate\">listIterator().remove()</code>, <code class=\"notranslate\">listIterator().set(E)</code>, <code class=\"notranslate\">remove(int)</code>, <code class=\"notranslate\">replaceAll(UnaryOperator)</code>, <code class=\"notranslate\">set(int, E)</code>, <code class=\"notranslate\">sort(Comparator)</code></td>\n</tr>\n<tr>\n<td><code class=\"notranslate\">NavigableSet</code></td>\n<td><code class=\"notranslate\">descendingIterator().remove()</code>, <code class=\"notranslate\">pollFirst()</code>, <code class=\"notranslate\">pollLast()</code></td>\n</tr>\n<tr>\n<td><code class=\"notranslate\">Set</code></td>\n<td>-</td>\n</tr>\n<tr>\n<td><code class=\"notranslate\">SortedSet</code></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"List&lt;Integer&gt; list = Collections.unmodifiableList(Arrays.asList(1, 2, 3));\nassertThat(list).isUnmodifiable();\"><pre><span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">list</span> = <span class=\"pl-s1\">Collections</span>.<span class=\"pl-en\">unmodifiableList</span>(<span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>));\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">list</span>).<span class=\"pl-en\">isUnmodifiable</span>();</pre></div>","resourcePath":"/assertj/assertj/issues/2102","createdAt":"2021-01-15T16:54:39Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add isNotFinite and isNotInfinite assertions for float and double","url":"https://github.com/assertj/assertj/pull/2125","resourcePath":"/assertj/assertj/pull/2125","createdAt":"2021-02-18T14:53:37Z","number":2125,"mergeCommit":{"oid":"30bfbbc257d1a5b59563323b5eea29099d73926f","message":"Add isNotFinite and isNotInfinite assertions for float and double (#2125)","commitUrl":"https://github.com/assertj/assertj/commit/30bfbbc257d1a5b59563323b5eea29099d73926f","parents":{"nodes":[{"oid":"8539ba3a275446d2ab120c84c0c74c24e7b50326","message":"Bump mockito.version from 3.7.7 to 3.8.0"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/float_/FloatAssert_isNotInfinite_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldNotBeFinite_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldNotBeInfinite_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/doubles/Doubles_assertIsInfinite_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/doubles/Doubles_assertIsNotFinite_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/doubles/Doubles_assertIsNotInfinite_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/floats/Floats_assertIsFinite_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/floats/Floats_assertIsInfinite_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/floats/Floats_assertIsNotFinite_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/floats/Floats_assertIsNotInfinite_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc1NzQzMTE3OjEwYmZiMjlhODA4YjBmODU1NWZlYjgyNDM3YjVlYzhkMDQ3MTJhYWY=","url":"https://github.com/assertj/assertj/pull/2125/commits/10bfb29a808b0f8555feb82437b5ec8d04712aaf"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2120,"url":"https://github.com/assertj/assertj/issues/2120","title":"Add isNotFinite and isNotInfinite for floating-point types (double, float)","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\"><code class=\"notranslate\">isFinite()</code> and <code class=\"notranslate\">isInfinite()</code> assertions were handily added via <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"709920723\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2005\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2005/hovercard\" href=\"https://github.com/assertj/assertj/issues/2005\">#2005</a>. In the comments on PR <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"712615873\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2006\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/assertj/assertj/pull/2006/hovercard\" href=\"https://github.com/assertj/assertj/pull/2006\">#2006</a>, it looks like the original author believed <code class=\"notranslate\">isNotFinite()</code> and <code class=\"notranslate\">isNotInfinite()</code> were unnecessary, perhaps because they appear to be opposites.</p>\n<p dir=\"auto\">However, <code class=\"notranslate\">Double.isFinite()</code> and <code class=\"notranslate\">Double.isInfinite()</code> (and corresponding <code class=\"notranslate\">Float</code> methods) aren't exact opposites. <code class=\"notranslate\">isFinite()</code> means:</p>\n<ul dir=\"auto\">\n<li>Not <code class=\"notranslate\">POSITIVE_INFINITY</code>, <em>and</em></li>\n<li>Not <code class=\"notranslate\">NEGATIVE_INFINITY</code>, <em>and</em></li>\n<li>Not <code class=\"notranslate\">NaN</code></li>\n</ul>\n<p dir=\"auto\"><code class=\"notranslate\">isInfinite()</code> means:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">POSITIVE_INFINITY</code>, <em>or</em></li>\n<li><code class=\"notranslate\">NEGATIVE_INFINITY</code></li>\n</ul>\n<p dir=\"auto\">While it's possible to achieve the same result as <code class=\"notranslate\">isNotInfinite()</code> with <code class=\"notranslate\">isNotEqualTo(Double.POSITIVE_INFINITY).isNotEqualTo(Double.NEGATIVE_INFINITY)</code>, that's a little cumbersome.</p>\n<p dir=\"auto\"><code class=\"notranslate\">isNotFinite()</code> is much trickier to achieve--the best I've been able to do is <code class=\"notranslate\">satisfiesAnyOf(...)</code>, but that's very cumbersome, indeed.</p>","resourcePath":"/assertj/assertj/issues/2120","createdAt":"2021-02-09T14:21:14Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Extract value only if the map key exists in PropertyOrFieldSupport","url":"https://github.com/assertj/assertj/pull/2122","resourcePath":"/assertj/assertj/pull/2122","createdAt":"2021-02-10T21:09:28Z","number":2122,"mergeCommit":{"oid":"a49869bf382f19a3dd4ada49e655c07f90fab05a","message":"Extract value only if the map key exists in PropertyOrFieldSupport (#2122)","commitUrl":"https://github.com/assertj/assertj/commit/a49869bf382f19a3dd4ada49e655c07f90fab05a","parents":{"nodes":[{"oid":"553630e45b24d8ee2f2d23a43a24a0df1c1aa4c1","message":"Bump maven-invoker-plugin from 3.2.1 to 3.2.2 (#2127)\n\nBumps [maven-invoker-plugin](https://github.com/apache/maven-invoker-plugin) from 3.2.1 to 3.2.2.\r\n- [Release notes](https://github.com/apache/maven-invoker-plugin/releases)\r\n- [Commits](https://github.com/apache/maven-invoker-plugin/compare/maven-invoker-plugin-3.2.1...maven-invoker-plugin-3.2.2)\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/util/introspection/PropertyOrFieldSupport.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/map/MapAssert_extracting_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/map/MapAssert_flatExtracting_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/object/ObjectAssert_extracting_with_String_Array_Test.java"}},{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/api/object/ObjectAssert_extracting_with_String_Test.java"}},{"node":{"changeType":"DELETED","path":"src/test/java/org/assertj/core/api/object/ObjectAssert_flatExtracting_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/extractor/ByNameMultipleExtractorTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/extractor/ByNameSingleExtractorTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/introspection/PropertyOrFieldSupport_getSimpleValue_with_Map_input_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/introspection/PropertyOrFieldSupport_getValueOf_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTcxNDA0OTYyOjMwOTRkOTJkNDBiOGUyZmViMzI3Yzc3YTc4Y2FhNjU3ZGEyYWJhYzk=","url":"https://github.com/assertj/assertj/pull/2122/commits/3094d92d40b8e2feb327c77a78caa657da2abac9"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2111,"url":"https://github.com/assertj/assertj/issues/2111","title":"Assertions ignore missing entry on maps","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">A custom assertion extending <code class=\"notranslate\">MapAssert</code> that performs a <code class=\"notranslate\">org.assertj.core.api.AbstractObjectAssert.hasFieldOrProperty(String)</code> on an <code class=\"notranslate\">actual</code> that neither has a getter or field, but <em>is</em> a <code class=\"notranslate\">Map</code> silently ignores missing map entries.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Given JSON:</p>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;startLevel&quot; : 1,\n  &quot;initialBundleStartLevel&quot; : 1\n}\"><pre>{\n  <span class=\"pl-ent\">\"startLevel\"</span> : <span class=\"pl-c1\">1</span>,\n  <span class=\"pl-ent\">\"initialBundleStartLevel\"</span> : <span class=\"pl-c1\">1</span>\n}</pre></div>\n<p dir=\"auto\">The following will silently succeed</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"net.javacrumbs.jsonunit.assertj.JsonAssertions.assertThatJson(\n    json\n).isObject().hasFieldOrProperty(\n    &quot;lastModified&quot;\n);\"><pre><span class=\"pl-s1\">net</span>.<span class=\"pl-s1\">javacrumbs</span>.<span class=\"pl-s1\">jsonunit</span>.<span class=\"pl-s1\">assertj</span>.<span class=\"pl-s1\">JsonAssertions</span>.<span class=\"pl-en\">assertThatJson</span>(\n    <span class=\"pl-s1\">json</span>\n).<span class=\"pl-en\">isObject</span>().<span class=\"pl-en\">hasFieldOrProperty</span>(\n    <span class=\"pl-s\">\"lastModified\"</span>\n);</pre></div>\n<h4 dir=\"auto\">Reason</h4>\n<p dir=\"auto\">The method <code class=\"notranslate\">org.assertj.core.util.introspection.PropertyOrFieldSupport.getSimpleValue(String, Object)</code> throws in the case of propertySupport not having a getter method, and fieldSupport not finding a field. However in the case of the Map fallback it does not fail for a missing entry.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    // try to get name as a property, then try as a field, then try as a map key\n    try {\n      return propertySupport.propertyValueOf(name, Object.class, input);\n    } catch (IntrospectionError propertyIntrospectionError) {\n      // no luck as a property, let's try as a field\n      try {\n        return fieldSupport.fieldValue(name, Object.class, input);\n      } catch (IntrospectionError fieldIntrospectionError) {\n        // neither field nor property found with given name\n\n        // if the input object is a map, try name as a map key\n        if (input instanceof Map) {\n          Map&lt;?, ?&gt; map = (Map&lt;?, ?&gt;) input;\n          return map.get(name);\n        }\n\n        // no value found with given name, it is considered as an error\n        String message = format(&quot;%nCan't find any field or property with name '%s'.%n&quot; +\n                                &quot;Error when introspecting properties was :%n&quot; +\n                                &quot;- %s %n&quot; +\n                                &quot;Error when introspecting fields was :%n&quot; +\n                                &quot;- %s&quot;,\n                                name, propertyIntrospectionError.getMessage(),\n                                fieldIntrospectionError.getMessage());\n        throw new IntrospectionError(message, fieldIntrospectionError);\n      }\n    }\"><pre class=\"notranslate\"><code>    // try to get name as a property, then try as a field, then try as a map key\n    try {\n      return propertySupport.propertyValueOf(name, Object.class, input);\n    } catch (IntrospectionError propertyIntrospectionError) {\n      // no luck as a property, let's try as a field\n      try {\n        return fieldSupport.fieldValue(name, Object.class, input);\n      } catch (IntrospectionError fieldIntrospectionError) {\n        // neither field nor property found with given name\n\n        // if the input object is a map, try name as a map key\n        if (input instanceof Map) {\n          Map&lt;?, ?&gt; map = (Map&lt;?, ?&gt;) input;\n          return map.get(name);\n        }\n\n        // no value found with given name, it is considered as an error\n        String message = format(\"%nCan't find any field or property with name '%s'.%n\" +\n                                \"Error when introspecting properties was :%n\" +\n                                \"- %s %n\" +\n                                \"Error when introspecting fields was :%n\" +\n                                \"- %s\",\n                                name, propertyIntrospectionError.getMessage(),\n                                fieldIntrospectionError.getMessage());\n        throw new IntrospectionError(message, fieldIntrospectionError);\n      }\n    }\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/2111","createdAt":"2021-01-30T15:26:52Z","labels":{"edges":[{"node":{"name":"type: bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add AbstractDateAssert.isNotBetween for Instant","url":"https://github.com/assertj/assertj/pull/2044","resourcePath":"/assertj/assertj/pull/2044","createdAt":"2020-11-24T00:20:11Z","number":2044,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractDateAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isNotBetweenSpecifyingBoundariesInclusion_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_isNotBetween_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTI2MDc0ODU4OjliODAzODhlZWQ3Yjc5OTE3ODBmMzQ4ODY3MTVhMDhkZmM2Mzk3ZDI=","url":"https://github.com/assertj/assertj/pull/2044/commits/9b80388eed7b7991780f34886715a08dfc6397d2"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2032,"url":"https://github.com/assertj/assertj/issues/2032","title":"Add method isBetween(Instant, Instant) to AbstractDateAssert ","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I think it will be convenient to have in AbstractDateAssert method <code class=\"notranslate\">isBetween(start: Instant, end: Instant)</code> because <code class=\"notranslate\">Data</code> and <code class=\"notranslate\">Instant</code> are the same in meaning (unix time moment). But it's more comfortable to calculate times as <code class=\"notranslate\">Instant</code> and don't use <code class=\"notranslate\">Date.from()</code> to convert.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(validatingDate).isBetween(Instant.now().minusSeconds(2),  Instant.now().plusSeconds(2))\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">validatingDate</span>).<span class=\"pl-en\">isBetween</span>(<span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">minusSeconds</span>(<span class=\"pl-c1\">2</span>),  <span class=\"pl-s1\">Instant</span>.<span class=\"pl-en\">now</span>().<span class=\"pl-en\">plusSeconds</span>(<span class=\"pl-c1\">2</span>))</pre></div>","resourcePath":"/assertj/assertj/issues/2032","createdAt":"2020-11-02T14:31:07Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Satisfies exactly in any order","url":"https://github.com/assertj/assertj/pull/2076","resourcePath":"/assertj/assertj/pull/2076","createdAt":"2020-12-15T20:17:30Z","number":2076,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AtomicReferenceArrayAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/ObjectEnumerableAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldSatisfy.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/internal/ElementsSatisfyingConsumer.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Iterables.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/atomic/referencearray/AtomicReferenceArrayAssert_satisfiesExactlyInAnyOrder_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_satisfiesExactlyInAnyOrder_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_satisfiesExactlyInAnyOrder_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldSatisfy_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/iterables/Iterables_assertSatisfiesExactlyInAnyOrder_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTQwNjcxMzc0OmViNDE4MDRhNDg3NzEzMDRhZTFmNjM0YzMxMmYyZTFiZGRkNjI0NmQ=","url":"https://github.com/assertj/assertj/pull/2076/commits/eb41804a48771304ae1f634c312f2e1bddd6246d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2054,"url":"https://github.com/assertj/assertj/issues/2054","title":"Consumer-based \"satisfyExactlyInAnyOrder\" assertions for elements in arrays and iterables","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Based on <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"499088123\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1621\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/1621/hovercard\" href=\"https://github.com/assertj/assertj/issues/1621\">#1621</a>, extend the assertions API for arrays and iterables with a <code class=\"notranslate\">satisfyExactlyInAnyOrder</code> method accepting multiple  <code class=\"notranslate\">Consumer&lt;? super ELEMENT&gt;</code>s.<br>\nThe tested collection must have the same size as the consumers. For each element of the tested collection the (remaining) consumers are called; if a consumer accepts the element, then the element and that consumer are removed from their collections and the next element is probed.</p>\n<p dir=\"auto\">The additional method would have the signature:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public final SELF satisfyExactlyInAnyOrder(Consumer&lt;? super ELEMENT&gt;... consumers)\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">SELF</span> <span class=\"pl-s1\">satisfyExactlyInAnyOrder</span>(<span class=\"pl-smi\">Consumer</span>&lt;? <span class=\"pl-en\">super</span> <span class=\"pl-smi\">ELEMENT</span>&gt;... <span class=\"pl-s1\">consumers</span>)</pre></div>\n<p dir=\"auto\">Additionally, the method would be overloaded with an assert factory as first parameter and consumers operating not on the collection ELEMENT but on an assertion over that element (as suggested by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/jbytecoder/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/jbytecoder\">@jbytecoder</a>):</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public final &lt;A extends AbstractAssert&lt;?, ELEMENT&gt;&gt; \nSELF satisfyExactlyInAnyOrder(Function&lt;ELEMENT, A&gt; assertFactory, Consumer&lt;? super A&gt;... consumers)\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> &lt;<span class=\"pl-smi\">A</span> <span class=\"pl-s1\">extends</span> <span class=\"pl-smi\">AbstractAssert</span>&lt;?, <span class=\"pl-smi\">ELEMENT</span>&gt;&gt; \n<span class=\"pl-c1\">SELF</span> <span class=\"pl-en\">satisfyExactlyInAnyOrder</span>(<span class=\"pl-s1\">Function</span>&lt;<span class=\"pl-c1\">ELEMENT</span>, <span class=\"pl-s1\">A</span>&gt; <span class=\"pl-s1\">assertFactory</span>, <span class=\"pl-smi\">Consumer</span>&lt;? <span class=\"pl-en\">super</span> <span class=\"pl-smi\">A</span>&gt;... <span class=\"pl-s1\">consumers</span>)</pre></div>\n<p dir=\"auto\">Note: the implementation from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"627639374\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1892\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/assertj/assertj/pull/1892/hovercard\" href=\"https://github.com/assertj/assertj/pull/1892\">#1892</a> (originally for the <code class=\"notranslate\">satisfy</code> method, aka. <code class=\"notranslate\">containsElementsSatisfyingExactlyInAnyOrder</code>, still pending agreement on clear naming) already performs all necessary logic. It could be combined with a simple length verification.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(trilogy).satisfyExactlyInAnyOrder(movie -&gt; {\n    // the fellowship of the Ring\n    assertThat(movie.getReleaseDate()).isBefore(parse(&quot;2002-12-17&quot;));\n    assertThat(movie.xrated).isFalse();\n  }, \n  movie -&gt; {\n    // the Return of the King\n    assertThat(movie.getTitle()).endsWith(&quot;King&quot;);\n  },\n  movie -&gt; {\n    // the two Towers\n     assertThat(movie.getReleaseDate()).isEqualTo(parse(&quot;2002-12-18&quot;));\n     assertThat(movie.getTitle()).contains(&quot;Towers&quot;);\n  } \n);\n\nassertThat(movieTitles).satisfyExactlyInAnyOrder(\n  Assertions::assertThat,\n  s -&gt; s.matches(&quot;.* Return .* King&quot;),\n  s -&gt; s.endsWith(&quot;Towers&quot;), \n  s -&gt; s.contains(&quot;fellowship&quot;)\n);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">trilogy</span>).<span class=\"pl-en\">satisfyExactlyInAnyOrder</span>(<span class=\"pl-s1\">movie</span> -&gt; {\n    <span class=\"pl-c\">// the fellowship of the Ring</span>\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getReleaseDate</span>()).<span class=\"pl-en\">isBefore</span>(<span class=\"pl-en\">parse</span>(<span class=\"pl-s\">\"2002-12-17\"</span>));\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-s1\">xrated</span>).<span class=\"pl-en\">isFalse</span>();\n  }, \n  <span class=\"pl-s1\">movie</span> -&gt; {\n    <span class=\"pl-c\">// the Return of the King</span>\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getTitle</span>()).<span class=\"pl-en\">endsWith</span>(<span class=\"pl-s\">\"King\"</span>);\n  },\n  <span class=\"pl-s1\">movie</span> -&gt; {\n    <span class=\"pl-c\">// the two Towers</span>\n     <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getReleaseDate</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-en\">parse</span>(<span class=\"pl-s\">\"2002-12-18\"</span>));\n     <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movie</span>.<span class=\"pl-en\">getTitle</span>()).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"Towers\"</span>);\n  } \n);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">movieTitles</span>).<span class=\"pl-en\">satisfyExactlyInAnyOrder</span>(\n  <span class=\"pl-s1\">Assertions</span>::<span class=\"pl-s1\">assertThat</span>,\n  <span class=\"pl-s1\">s</span> -&gt; <span class=\"pl-s1\">s</span>.<span class=\"pl-en\">matches</span>(<span class=\"pl-s\">\".* Return .* King\"</span>),\n  <span class=\"pl-s1\">s</span> -&gt; <span class=\"pl-s1\">s</span>.<span class=\"pl-en\">endsWith</span>(<span class=\"pl-s\">\"Towers\"</span>), \n  <span class=\"pl-s1\">s</span> -&gt; <span class=\"pl-s1\">s</span>.<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"fellowship\"</span>)\n);</pre></div>\n<p dir=\"auto\">This issue (and <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"752750444\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2053\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2053/hovercard\" href=\"https://github.com/assertj/assertj/issues/2053\">#2053</a>) was split from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"499088123\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1621\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/1621/hovercard\" href=\"https://github.com/assertj/assertj/issues/1621\">#1621</a> as suggested by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/joel-costigliola/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/joel-costigliola\">@joel-costigliola</a> in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"499088123\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1621\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/1621/hovercard?comment_id=539696963&amp;comment_type=issue_comment\" href=\"https://github.com/assertj/assertj/issues/1621#issuecomment-539696963\">#1621 (comment)</a></p>","resourcePath":"/assertj/assertj/issues/2054","createdAt":"2020-11-28T19:39:29Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Update ShouldBeEqual assertion message","url":"https://github.com/assertj/assertj/pull/2200","resourcePath":"/assertj/assertj/pull/2200","createdAt":"2021-05-06T02:12:01Z","number":2200,"mergeCommit":{"oid":"170cbf1487e8fca92f70c235f975b81f6594e675","message":"Update ShouldBeEqual assertion message (#2200)\n\nMove the trailing space after \"was\" to a leading space before \"but\" so that IntellIJ's diff regexes can pick it up\r\nFixes #2199","commitUrl":"https://github.com/assertj/assertj/commit/170cbf1487e8fca92f70c235f975b81f6594e675","parents":{"nodes":[{"oid":"81ed66f4710138d30e4a4b5ab83ef2989e7f39dd","message":"Configure pitest (#2195)\n\n* configure pitest mutation testing\r\n\r\n* exclude pitest from stack traces\r\n\r\n* fix test order dependencies\r\n\r\n* add cdg plugin\r\n\r\n* bind to test-compile\r\n\r\nCo-authored-by: Henry Coles <henry.colesgroupcmg.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldBeEqualIgnoringCase.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_isInstanceOfSatisfying_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/atomic/reference/AtomicReferenceAssert_hasValueSatisfying_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldBeEqual_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldBeEqual_newAssertionError_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldBeEqual_newAssertionError_differentiating_expected_and_actual_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldBeEqual_newAssertionError_without_JUnit_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldBeEqual_newAssertionError_without_JUnit_and_OTA4J_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/matcher/AssertionMatcher_matches_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/test/ErrorMessagesForTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjMxMDQzNDU1OmQ1OTUxZjYxMmMxNDNlNjE1NjMxNjRmMjIxZjMzNzViZTMyYWY2NjY=","url":"https://github.com/assertj/assertj/pull/2200/commits/d5951f612c143e61563164f221f3375be32af666"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2199,"url":"https://github.com/assertj/assertj/issues/2199","title":"Remove space in default error message for ShouldBeEqual to help IntelliJ diff detection","bodyHTML":"<p dir=\"auto\">Referencing this StackOverflow ticket: <a href=\"https://stackoverflow.com/questions/10934743/formatting-output-so-that-intellij-idea-shows-diffs-for-two-texts\" rel=\"nofollow\">https://stackoverflow.com/questions/10934743/formatting-output-so-that-intellij-idea-shows-diffs-for-two-texts</a></p>\n<p dir=\"auto\">It seems that IntelliJ expects assertion errors to be in this format in order to have nicely rendered diffs:</p>\n<p dir=\"auto\"><code class=\"notranslate\">expected: xxx but was: yyy</code></p>\n<p dir=\"auto\">But AssertJ would format this with an extra space after the <code class=\"notranslate\">was</code>:</p>\n<p dir=\"auto\"><code class=\"notranslate\">expected: xxx but was : yyy</code></p>\n<p dir=\"auto\">Which would cause it to fail the regex, and IntelliJ defaults to just printing the error string. I tried patching my AssertJ <code class=\"notranslate\">ShouldBeEqual</code> locally without that extra space, and IntelliJ was then able to detect it properly.</p>\n<p dir=\"auto\">Would it be possible to remove the extraneous space after the <code class=\"notranslate\">was</code> so that the test output can automatically be detected as a diff?</p>\n<p dir=\"auto\">Thanks!</p>\n<p dir=\"auto\">Link to message: <a href=\"https://github.com/assertj/assertj-core/blob/main/src/main/java/org/assertj/core/error/ShouldBeEqual.java#L44\">https://github.com/assertj/assertj-core/blob/main/src/main/java/org/assertj/core/error/ShouldBeEqual.java#L44</a></p>","resourcePath":"/assertj/assertj/issues/2199","createdAt":"2021-05-06T00:53:54Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Maps.assertContainsOnly(info, actual, entries) has inconsistent behaviour if `entries` is empty","url":"https://github.com/assertj/assertj/pull/2145","resourcePath":"/assertj/assertj/pull/2145","createdAt":"2021-03-13T10:29:29Z","number":2145,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Maps.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsExactly_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsOnly_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTkyMzQxMTE2OmMwYjg0Y2ViNGE5NDAzYjc1YzRlOTFjMDA2NDY3MGI2NWExMGE0MzA=","url":"https://github.com/assertj/assertj/pull/2145/commits/c0b84ceb4a9403b75c4e91c0064670b65a10a430"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2107,"url":"https://github.com/assertj/assertj/issues/2107","title":"Maps.assertContainsOnly(info, actual, entries) has inconsistent behaviour if `entries` is empty","bodyHTML":"<p dir=\"auto\"><a href=\"https://github.com/assertj/assertj-core/blob/f27b022a369ba731ed72413f6c10c82a9e539495/src/main/java/org/assertj/core/internal/Maps.java#L745\">https://github.com/assertj/assertj-core/blob/f27b022a369ba731ed72413f6c10c82a9e539495/src/main/java/org/assertj/core/internal/Maps.java#L745</a><br>\nThe call mentioned in the link fails with IllegalArgumentException if <code class=\"notranslate\">entries</code> is empty, and <code class=\"notranslate\">actual</code> is not. This, however, would work if <code class=\"notranslate\">actual</code> is empty as well (the mentioned line is not executed in this case). Thus, execution success depends on <code class=\"notranslate\">actual</code> input, which is the most frequently changing part of the test.<br>\nI would expect this code to fail with AssertionError with proper message (<code class=\"notranslate\">actual should be empty, but was XXX</code>)</p>","resourcePath":"/assertj/assertj/issues/2107","createdAt":"2021-01-27T15:44:53Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Implementing `hasExactlyElementsOfTypes` mentioned in issue #1907","url":"https://github.com/assertj/assertj/pull/2181","resourcePath":"/assertj/assertj/pull/2181","createdAt":"2021-04-20T12:48:49Z","number":2181,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractIterableAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractObjectArrayAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AtomicReferenceArrayAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/ObjectEnumerableAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/ObjectArrays.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/atomic/referencearray/AtomicReferenceArrayAssert_hasExactlyElementsOfTypes_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_hasExactlyElementsOfTypes_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_hasExactlyElementsOfTypes_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/objectarrays/ObjectArrays_assertHasExactlyElementsOfTypes_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjE5Mjk2MzQ2OjZkNzNiOGUyNDU5MTBhMmIyOGFjMWU2ZjA2YmU3ZjAyZWY1YjM5YmQ=","url":"https://github.com/assertj/assertj/pull/2181/commits/6d73b8e245910a2b28ac1e6f06be7f02ef5b39bd"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1907,"url":"https://github.com/assertj/assertj/issues/1907","title":"Verify type of element in iterable with order in mind","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Create new assertion on <code class=\"notranslate\">AbstractIterableAssert</code> that verifies type of each element of iterable taking order into consideration.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">I am working currently with following code where it's important to verify that elements are of correct type in particular order:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"List&lt;CredentialsProvider&gt; credentialsProviders = ....;\n\nassertThat(credentialsProviders).hasSize(3);\t\t\nassertThat(credentialsProviders.get(0)).isInstanceOf(AWSStaticCredentialsProvider.class);\nassertThat(credentialsProviders.get(1)).isInstanceOf(EC2ContainerCredentialsProviderWrapper.class);\nassertThat(credentialsProviders.get(2)).isInstanceOf(ProfileCredentialsProvider.class);\"><pre><span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">CredentialsProvider</span>&gt; <span class=\"pl-s1\">credentialsProviders</span> = ....;\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">credentialsProviders</span>).<span class=\"pl-en\">hasSize</span>(<span class=\"pl-c1\">3</span>);\t\t\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">credentialsProviders</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-c1\">0</span>)).<span class=\"pl-en\">isInstanceOf</span>(<span class=\"pl-smi\">AWSStaticCredentialsProvider</span>.<span class=\"pl-s1\">class</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">credentialsProviders</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-c1\">1</span>)).<span class=\"pl-en\">isInstanceOf</span>(<span class=\"pl-smi\">EC2ContainerCredentialsProviderWrapper</span>.<span class=\"pl-s1\">class</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">credentialsProviders</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-c1\">2</span>)).<span class=\"pl-en\">isInstanceOf</span>(<span class=\"pl-smi\">ProfileCredentialsProvider</span>.<span class=\"pl-s1\">class</span>);</pre></div>\n<p dir=\"auto\">Initial though was to replace these 3 lines with</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(credentialsProviders).hasOnlyElementsOfTypes(AWSStaticCredentialsProvider.class, EC2ContainerCredentialsProviderWrapper.class, ProfileCredentialsProvider.class);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">credentialsProviders</span>).<span class=\"pl-en\">hasOnlyElementsOfTypes</span>(<span class=\"pl-smi\">AWSStaticCredentialsProvider</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">EC2ContainerCredentialsProviderWrapper</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">ProfileCredentialsProvider</span>.<span class=\"pl-s1\">class</span>);</pre></div>\n<p dir=\"auto\">but it does not verify the order of types.</p>\n<p dir=\"auto\">My idea is to create an assertion that would verify if all elements of an iterable match given type like:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(credentialsProviders).containsOnlyElementsOfTypes(AWSStaticCredentialsProvider.class, EC2ContainerCredentialsProviderWrapper.class, ProfileCredentialsProvider.class);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">credentialsProviders</span>).<span class=\"pl-en\">containsOnlyElementsOfTypes</span>(<span class=\"pl-smi\">AWSStaticCredentialsProvider</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">EC2ContainerCredentialsProviderWrapper</span>.<span class=\"pl-s1\">class</span>, <span class=\"pl-smi\">ProfileCredentialsProvider</span>.<span class=\"pl-s1\">class</span>);</pre></div>\n<p dir=\"auto\">I am happy to implement it if you confirm it's a good idea or propose another solution to the problem <g-emoji class=\"g-emoji\" alias=\"slightly_smiling_face\" fallback-src=\"https://github.githubassets.com/images/icons/emoji/unicode/1f642.png\">🙂</g-emoji></p>","resourcePath":"/assertj/assertj/issues/1907","createdAt":"2020-06-08T21:51:01Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Added new assertions for URI and URL for exhaustive parameters check","url":"https://github.com/assertj/assertj/pull/2156","resourcePath":"/assertj/assertj/pull/2156","createdAt":"2021-03-28T09:17:21Z","number":2156,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Uris.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Urls.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/uri/UriAssert_containsExactlyParameters_Entries_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/uri/UriAssert_containsExactlyParameters_Map_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/url/UrlAssert_containsExactlyParameters_Entries_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/url/UrlAssert_containsExactlyParameters_Map_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/urls/Uris_containsExactlyParameters_Entries_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/urls/Uris_containsExactlyParameters_Map_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/urls/Urls_containsExactlyParameters_Entries_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/urls/Urls_containsExactlyParameters_Map_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjAyMjExNjUyOmFhM2E4ZmVmM2E4MDYzMTdiODg4Yjg0MTVlMTY4ZTM0OWY2MTI5Y2Q=","url":"https://github.com/assertj/assertj/pull/2156/commits/aa3a8fef3a806317b888b8415e168e349f6129cd"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2153,"url":"https://github.com/assertj/assertj/issues/2153","title":"Comprehensively checking url query params","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">With assertThat on URL object isn't possible check all parameters in one method call. For example is possible check whole map by insert expected map. It will be very usefull becouse sometimes depends on exactly params and api not able validate there aren't more params...</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        // for map is it possible by\n       assertThat(Map.of()).containsExactlyInAnyOrderEntriesOf(Map.of(\n                &quot;k1&quot;, &quot;v1&quot;\n        ));\n\n       // for url maybe something like this\n       assertThat(new URL(url)).hasExactlyParams(Map.of(\n                &quot;qK1&quot;, &quot;qV1&quot;\n        ))\"><pre>        <span class=\"pl-c\">// for map is it possible by</span>\n       <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Map</span>.<span class=\"pl-en\">of</span>()).<span class=\"pl-en\">containsExactlyInAnyOrderEntriesOf</span>(<span class=\"pl-s1\">Map</span>.<span class=\"pl-en\">of</span>(\n                <span class=\"pl-s\">\"k1\"</span>, <span class=\"pl-s\">\"v1\"</span>\n        ));\n\n       <span class=\"pl-c\">// for url maybe something like this</span>\n       <span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">URL</span>(<span class=\"pl-s1\">url</span>)).<span class=\"pl-en\">hasExactlyParams</span>(<span class=\"pl-s1\">Map</span>.<span class=\"pl-en\">of</span>(\n                <span class=\"pl-s\">\"qK1\"</span>, <span class=\"pl-s\">\"qV1\"</span>\n        ))</pre></div>","resourcePath":"/assertj/assertj/issues/2153","createdAt":"2021-03-18T13:01:31Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"The white space was deleted in shouldNotBe and the format was changed…","url":"https://github.com/assertj/assertj/pull/2203","resourcePath":"/assertj/assertj/pull/2203","createdAt":"2021-05-08T05:52:06Z","number":2203,"mergeCommit":{"oid":"0834b02b29b0cd70dc7003e9116ba14d7e3ae296","message":"The white space was deleted in shouldNotBe and the format was changed… (#2203)\n\nImprove shouldNotBe and shouldNotHave error message formatting","commitUrl":"https://github.com/assertj/assertj/commit/0834b02b29b0cd70dc7003e9116ba14d7e3ae296","parents":{"nodes":[{"oid":"53c8c9a170474d0f134ad247580e3d89469363db","message":"Favor `requireNonNull` with `Supplier`"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldNotBe.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldNotHave.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldNotBe_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldNotHave_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjM0MDAwNjYyOmQ4NDQ3YWIzMDc0ZTgyMDlhNGFiMTI5NjExOTVjMTkwY2FjY2I2MDc=","url":"https://github.com/assertj/assertj/pull/2203/commits/d8447ab3074e8209a4ab12961195c190caccb607"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2202,"url":"https://github.com/assertj/assertj/issues/2202","title":"ShouldNotBe: missing linebreak OR to much whitespaces ","bodyHTML":"<p dir=\"auto\">ShouldNotBe has a missing linebreak OR to much whitespaces.</p>\n<p dir=\"auto\"><a href=\"https://github.com/assertj/assertj-core/blob/e14081576c22240c45dd2f8f2d3afa7d42303faf/src/main/java/org/assertj/core/error/ShouldNotBe.java#L38\">https://github.com/assertj/assertj-core/blob/e14081576c22240c45dd2f8f2d3afa7d42303faf/src/main/java/org/assertj/core/error/ShouldNotBe.java#L38</a></p>\n<p dir=\"auto\"><code class=\"notranslate\">\"%nExpecting actual:%n  %s%nnot to be [ ]%s\"</code></p>","resourcePath":"/assertj/assertj/issues/2202","createdAt":"2021-05-07T20:32:42Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"#2132 Wrong error message in assertion when using Set collection","url":"https://github.com/assertj/assertj/pull/2133","resourcePath":"/assertj/assertj/pull/2133","createdAt":"2021-02-23T21:46:29Z","number":2133,"mergeCommit":{"oid":"cfb0c5ffb71b85074b06af671eec73986c487ad1","message":"Display proper collection type in `contains` and `containsAll` error messages (#2133)","commitUrl":"https://github.com/assertj/assertj/commit/cfb0c5ffb71b85074b06af671eec73986c487ad1","parents":{"nodes":[{"oid":"f89fe85395becafaa0377ef5758ba5cf8095b2b8","message":"Align javadoc with changelog\n\nSee assertj/doc#92."}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/GroupTypeDescription.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldContain.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Iterables.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/GroupTypeDescription_getGroupTypeDescription_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/iterables/Iterables_assertContainsAll_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/iterables/Iterables_assertContains_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTc4Nzc1NzExOmNlMGEzMWJhMjYyYWI3NjE4YjhmMzZmNWZhZmEzNTIzNjU1MDhmYWI=","url":"https://github.com/assertj/assertj/pull/2133/commits/ce0a31ba262ab7618b8f36f5fafa352365508fab"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2132,"url":"https://github.com/assertj/assertj/issues/2132","title":"Wrong collection type in Set assertion","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">The assertion error displays the wrong collection type, as noticed by <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/Patouche/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/Patouche\">@Patouche</a>.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.assertj.core.api.Assertions;\nimport org.junit.jupiter.api.Test;\n\nimport java.util.Set;\nimport java.util.stream.Collectors;\nimport java.util.stream.Stream;\n\nclass AssertJTests {\n\n    @Test\n    void iterable_bad_name() {\n        final Set&lt;String&gt; actual = Stream.of(&quot;toto&quot;, &quot;tata&quot;).collect(Collectors.toSet());\n        Assertions.assertThat(actual).contains(&quot;tutu&quot;);\n    }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">assertj</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Set</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">stream</span>.<span class=\"pl-s1\">Collectors</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">stream</span>.<span class=\"pl-s1\">Stream</span>;\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">AssertJTests</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">iterable_bad_name</span>() {\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Set</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">Stream</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"toto\"</span>, <span class=\"pl-s\">\"tata\"</span>).<span class=\"pl-en\">collect</span>(<span class=\"pl-s1\">Collectors</span>.<span class=\"pl-en\">toSet</span>());\n        <span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"tutu\"</span>);\n    }\n}</pre></div>\n<p dir=\"auto\">The error is as follows:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting ArrayList:\n &lt;[&quot;toto&quot;, &quot;tata&quot;]&gt;\nto contain:\n &lt;[&quot;tutu&quot;]&gt;\nbut could not find the following element(s):\n &lt;[&quot;tutu&quot;]&gt;\"><pre><span class=\"pl-smi\">java</span>.<span class=\"pl-smi\">lang</span>.<span class=\"pl-smi\">AssertionError</span>: \n<span class=\"pl-s1\">Expecting</span> <span class=\"pl-s1\">ArrayList</span>:\n &lt;[<span class=\"pl-s\">\"toto\"</span>, <span class=\"pl-s\">\"tata\"</span>]&gt;\n<span class=\"pl-smi\">to</span> <span class=\"pl-s1\">contain</span>:\n &lt;<span class=\"pl-s1\"></span>[<span class=\"pl-s\">\"tutu\"</span>]&gt;\n<span class=\"pl-smi\">but</span> <span class=\"pl-s1\">could</span> <span class=\"pl-s1\">not</span> <span class=\"pl-smi\">find</span> <span class=\"pl-s1\">the</span> <span class=\"pl-smi\">following</span> <span class=\"pl-en\">element</span>(<span class=\"pl-s1\">s</span>):\n &lt;<span class=\"pl-s1\"></span>[<span class=\"pl-s\">\"tutu\"</span>]&gt;</pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">ArrayList</code> should not be displayed in the error message.</p>","resourcePath":"/assertj/assertj/issues/2132","createdAt":"2021-02-23T19:07:49Z","labels":{"edges":[{"node":{"name":"type: bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"CompositeRepresentation and CompositeRepresentation_Test draft.","url":"https://github.com/assertj/assertj/pull/2174","resourcePath":"/assertj/assertj/pull/2174","createdAt":"2021-04-19T03:27:24Z","number":2174,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/presentation/CompositeRepresentation.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/presentation/CompositeRepresentation_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjE3NjI3NzU1OmVmYTQ1MDRmMDcwODM3NDcyM2EzODc0MTkyNjQ2YTJiNWQyZjljMTI=","url":"https://github.com/assertj/assertj/pull/2174/commits/efa4504f0708374723a3874192646a2b5d2f9c12"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2048,"url":"https://github.com/assertj/assertj/issues/2048","title":"Fine-grained Representations","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I have recently discovered the <code class=\"notranslate\">Representation</code> API. I am looking at using it with osgi-test and with idempiere-test as part of their respective domain-specific assertion libraries, so that they can produce more readable diagnostics by overriding <code class=\"notranslate\">toString()</code> implementations in the domain objects.</p>\n<p dir=\"auto\">For maximum usability and code readability, It would be nice if these Representation implementations could be auto-registered. AssertJ already provides a mechanism for this.</p>\n<p dir=\"auto\">However, ideally, different domain-specific libraries would be able to independently register <code class=\"notranslate\">Representation</code> implementations for their specific settings  osgi-test and idempiere-test could independently register <code class=\"notranslate\">Representation</code> implementations for their respective domains. For example, osgi-test could register a <code class=\"notranslate\">Representation</code> implementation for the type <code class=\"notranslate\">org.osgi.framework.Bundle</code> while idempiere-test could register one for <code class=\"notranslate\">org.compiere.model.MInvoice</code>.</p>\n<p dir=\"auto\">Unfortunately, with the current implementation, the default <code class=\"notranslate\">Representation</code> implementation is a global singleton setting that is applied to all objects.</p>\n<h4 dir=\"auto\">Proposal</h4>\n<p dir=\"auto\">I'm open to ideas. I'm thinking something along these lines:</p>\n<ol dir=\"auto\">\n<li>Un-deprecate the <code class=\"notranslate\">ServiceLoader</code> implementation of <code class=\"notranslate\">Representation</code>. <code class=\"notranslate\">Configuration</code> is by nature a singleton instance and not well-suited to the modular, multi-implementation approach being offered.</li>\n<li><code class=\"notranslate\">Representation</code> will become parameterized. Thus:</li>\n</ol>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public interface Representation&lt;T&gt; {\n  String toStringOf(T object);\n  String unambiguousToStringOf(T object);\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">Representation</span>&lt;<span class=\"pl-s1\">T</span>&gt; {\n  <span class=\"pl-smi\">String</span> <span class=\"pl-en\">toStringOf</span>(<span class=\"pl-smi\">T</span> <span class=\"pl-s1\">object</span>);\n  <span class=\"pl-smi\">String</span> <span class=\"pl-en\">unambiguousToStringOf</span>(<span class=\"pl-smi\">T</span> <span class=\"pl-s1\">object</span>);</pre></div>\n<p dir=\"auto\">Specific implementations of <code class=\"notranslate\">Representation</code> can add their own bounds, eg:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class BundleRepresentation implements Representation&lt;Bundle&gt; {\n...\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">BundleRepresentation</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Representation</span>&lt;<span class=\"pl-smi\">Bundle</span>&gt; {\n...\n}</pre></div>\n<ol start=\"3\" dir=\"auto\">\n<li>AssertJ Core will collate all of the implementations and build a lookup table from object type to representation. This will be used by the core in determining which representation to use (if not overridden by a call to <code class=\"notranslate\">usingReperesentation()</code>).</li>\n</ol>\n<p dir=\"auto\">I think it will be possible to build the lookup table with no further changes to <code class=\"notranslate\">Representation</code>, using reflection to find out the bound on <code class=\"notranslate\">T</code>. However, if it is not possible, then add a <code class=\"notranslate\">supportedType()</code> method to <code class=\"notranslate\">Representation</code> that the core can interrogate:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public interface Representation&lt;T&gt; {\n  String toStringOf(T object);\n  String unambiguousToStringOf(T object);\n  default Class&lt;T&gt; supportedType() {return (Class&lt;T&gt;)Object.class; }\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">Representation</span>&lt;<span class=\"pl-s1\">T</span>&gt; {\n  <span class=\"pl-smi\">String</span> <span class=\"pl-en\">toStringOf</span>(<span class=\"pl-smi\">T</span> <span class=\"pl-s1\">object</span>);\n  <span class=\"pl-smi\">String</span> <span class=\"pl-en\">unambiguousToStringOf</span>(<span class=\"pl-smi\">T</span> <span class=\"pl-s1\">object</span>);\n  <span class=\"pl-k\">default</span> <span class=\"pl-smi\">Class</span>&lt;<span class=\"pl-smi\">T</span>&gt; <span class=\"pl-en\">supportedType</span>() {<span class=\"pl-k\">return</span> (<span class=\"pl-smi\">Class</span>&lt;<span class=\"pl-smi\">T</span>&gt;)<span class=\"pl-smi\">Object</span>.<span class=\"pl-s1\">class</span>; }</pre></div>","resourcePath":"/assertj/assertj/issues/2048","createdAt":"2020-11-24T05:56:18Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add stack trace information for Throwable when hasCauseInstanceOf and hasCauseExactlyInstanceOf fails","url":"https://github.com/assertj/assertj/pull/2209","resourcePath":"/assertj/assertj/pull/2209","createdAt":"2021-05-13T18:01:37Z","number":2209,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveCauseExactlyInstance.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveCauseInstance.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldHaveCauseExactlyInstance_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldHaveCauseInstance_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjQ0MTQ0NzIyOjU1MjBmMzM4NzJmZTAwM2JjNDQ1ZjUxOTczMTk4YzVhOGEyYTgyNzU=","url":"https://github.com/assertj/assertj/pull/2209/commits/5520f33872fe003bc445f51973198c5a8a2a8275"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1355,"url":"https://github.com/assertj/assertj/issues/1355","title":"Describe actual Throwables when ThrowableAssert fails","bodyHTML":"<h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">When some <code class=\"notranslate\">Throwable</code>-related assertion fails the actual <code class=\"notranslate\">Throwable</code> that failed the check is not described beyond what actually caused assertion failure (e.g. message mismatch). In non trivial code when unexpected <code class=\"notranslate\">Exception</code>s are thrown this makes debugging inconvenient.</p>\n<p dir=\"auto\">Dumping more comprehensive (class, message, stack, perhaps even recursive info about causes) info about the actual <code class=\"notranslate\">Throwable</code> could ease assertion failure investigation.</p>\n<p dir=\"auto\">Relevant message factories (e.g. <code class=\"notranslate\">ShouldHaveMessage</code>) already have access to actual <code class=\"notranslate\">Throwable</code>.</p>\n<p dir=\"auto\">It may be tempting to use <code class=\"notranslate\">util.Throwables.ERROR_DESCRIPTION_EXTRACTOR</code> to describe throwables, but more powerful mechanism would be appreciated.<br>\nProviding a precise information in case of assertion failure doesn't seem to be overkill (unlike as in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"198264689\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj-core/issues/864\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj-core/issues/864/hovercard\" href=\"https://github.com/assertj/assertj-core/issues/864\">#864</a>)</p>\n<h3 dir=\"auto\">Error message to improve</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCause</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCauseExactlyInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCauseInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCauseReference - <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/weiyilei/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/weiyilei\">@weiyilei</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveNoCause</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveNoSuppressedExceptions</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveRootCauseExactlyInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveRootCauseInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveSuppressedException</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldNotContainCharSequence</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldStartWith</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldEndWith</li>\n</ul>\n<p dir=\"auto\">If you are interested contributing to this issue, select one error message, it will be assigned to you.</p>","resourcePath":"/assertj/assertj/issues/1355","createdAt":"2018-11-08T16:33:06Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"fix issue 971:to have ability to ignore all assert when expected value is null","url":"https://github.com/assertj/assertj/pull/2180","resourcePath":"/assertj/assertj/pull/2180","createdAt":"2021-04-20T10:02:45Z","number":2180,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_as_with_description_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjE5MTgyMTY2OmM1YmVjMDkxNzIxMzU4YzlmY2IyNzFjMjYyMTFlZjcxMzJkNzA1OGE=","url":"https://github.com/assertj/assertj/pull/2180/commits/c5bec091721358c9fcb271c26211ef7132d7058a"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":971,"url":"https://github.com/assertj/assertj/issues/971","title":"New Feature: to have ability to ignore all assert when expected value is null","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">to have ability to ignore all assert when expected value is null.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Let's call the new method \"ignoreAssertWhenExpectedIsNull\"</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;Hello World!&quot;).ignoreAssertWhenExpectedIsNull().isEqualTo(null); // will pass\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Hello World!\"</span>).<span class=\"pl-en\">ignoreAssertWhenExpectedIsNull</span>().<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// will pass</span></pre></div>\n<h4 dir=\"auto\">Further more</h4>\n<p dir=\"auto\">If go further, we could have a method as ignoreAssertWhen(IgnoreType ignoreType)</p>\n<p dir=\"auto\">Above would be</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;Hello World!&quot;).ignoreAssertWhen(IgnoreType.ExpectedIsNull).isEqualTo(null); // will pass\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Hello World!\"</span>).<span class=\"pl-en\">ignoreAssertWhen</span>(<span class=\"pl-smi\">IgnoreType</span>.<span class=\"pl-s1\">ExpectedIsNull</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// will pass</span></pre></div>\n<p dir=\"auto\">IgnoreType could contains</p>\n<ul dir=\"auto\">\n<li>ExpectedIsNull</li>\n<li>ActualIsNull</li>\n<li>EitherIsNull</li>\n</ul>","resourcePath":"/assertj/assertj/issues/971","createdAt":"2017-04-11T11:19:48Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"status: pending investigation"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix 'toString' method of subclasses of AtomicReference isn't used for…","url":"https://github.com/assertj/assertj/pull/2194","resourcePath":"/assertj/assertj/pull/2194","createdAt":"2021-05-01T12:36:56Z","number":2194,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/presentation/StandardRepresentation.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/presentation/StandardRepresentation_toStringOf_AtomicReferences_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjI4NDI1NzQ2OjUyZWI3ZDcyNjNlODQxZjgzYzJiMjlkMmRiNWQwMWM5OThhOGZjMWI=","url":"https://github.com/assertj/assertj/pull/2194/commits/52eb7d7263e841f83c2b29d2db5d01c998a8fc1b"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2192,"url":"https://github.com/assertj/assertj/issues/2192","title":"'toString' method of subclasses of AtomicReference isn't used for presentation","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Sometimes we extend AtomicReference in our classes to store some internal data. (Of course, usually it's better to use delegation instead of inheritance, but it may increase memory footprint and it may be undesirable in some cases.) <code class=\"notranslate\">StandardRepresentation.toStringOf</code> returns special representation for instances of such classes, which doesn't include result of 'toString' call.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Consider the following class</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyData extends AtomicReference&lt;String&gt; {\n  private String description;\n\n  MyData(String description) {\n    this.description = description;\n  }\n\n  @Override\n  public String toString() {\n    return &quot;MyData[&quot; + description + &quot;]&quot;;\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyData</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">AtomicReference</span>&lt;<span class=\"pl-smi\">String</span>&gt; {\n  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">description</span>;\n\n  <span class=\"pl-smi\">MyData</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">description</span>) {\n    <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">description</span> = <span class=\"pl-s1\">description</span>;\n  }\n\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">toString</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-s\">\"MyData[\"</span> + <span class=\"pl-s1\">description</span> + <span class=\"pl-s\">\"]\"</span>;\n  }\n}</pre></div>\n<p dir=\"auto\">If you use its instances in assertions like</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    assertThat(new MyData[] {new MyData(&quot;foo&quot;)}).contains(new MyData(&quot;bar&quot;));\"><pre>    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">MyData</span>[] {<span class=\"pl-k\">new</span> <span class=\"pl-smi\">MyData</span>(<span class=\"pl-s\">\"foo\"</span>)}).<span class=\"pl-en\">contains</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">MyData</span>(<span class=\"pl-s\">\"bar\"</span>));</pre></div>\n<p dir=\"auto\">you'll get error messages like</p>\n<blockquote>\n<p dir=\"auto\">Expecting MyData[]:<br>\n[AtomicReference[null]]<br>\nto contain:<br>\n[AtomicReference[null]]<br>\nbut could not find the following mydata(s):<br>\n[AtomicReference[null]]</p>\n</blockquote>\n<p dir=\"auto\">which aren't helpful.</p>","resourcePath":"/assertj/assertj/issues/2192","createdAt":"2021-04-30T10:39:04Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"isHTTPReachable","url":"https://github.com/assertj/assertj/pull/2219","resourcePath":"/assertj/assertj/pull/2219","createdAt":"2021-05-18T16:59:39Z","number":2219,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractUrlAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/uri/ShouldBeReachableHTTP.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Urls.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/url/UrlAssert_isReachableHTTP_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/uri/ShouldBeReachableHTTP_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjQ2OTMyNTQ1OjE2OTc1NTQzNGEzZjQ1OTNjNDQwZDZmNDBlM2Y4NDMxYmVhMzg2N2Y=","url":"https://github.com/assertj/assertj/pull/2219/commits/169755434a3f4593c440d6f40e3f8431bea3867f"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2196,"url":"https://github.com/assertj/assertj/issues/2196","title":"Add `isReachable` / `isUnreachable` for URL assertions","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Inspired by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"869681278\" data-permission-text=\"Title is private\" data-url=\"https://github.com/junit-pioneer/junit-pioneer/issues/468\" data-hovercard-type=\"issue\" data-hovercard-url=\"/junit-pioneer/junit-pioneer/issues/468/hovercard\" href=\"https://github.com/junit-pioneer/junit-pioneer/issues/468\">junit-pioneer/junit-pioneer#468</a>, <code class=\"notranslate\">isReachable</code> / <code class=\"notranslate\">isUnreachable</code> assertions could be added to <code class=\"notranslate\">AbstractUrlAssert</code>.</p>\n<p dir=\"auto\">One of the most valuable use cases could be when the assertion is used as an assumption, allowing to skip a test if a remote dependency is not available.</p>\n<p dir=\"auto\">The assertion name could be generic enough (i.e., not strictly bound to HTTP) and internally we could have different behaviors based on the protocol.</p>\n<p dir=\"auto\">At first, the target should be only HTTP URLs.</p>\n<p dir=\"auto\"><a href=\"https://gist.github.com/nipafx/a21f1d1c5211617453e43a88c9df439c\">This gist</a> might inspire the assertion implementation.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(new URL(&quot;http://google.com&quot;)).isReachable();\nassertThat(new URL(&quot;http://invalid&quot;)).isUnreachable();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">URL</span>(<span class=\"pl-s\">\"http://google.com\"</span>)).<span class=\"pl-en\">isReachable</span>();\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">URL</span>(<span class=\"pl-s\">\"http://invalid\"</span>)).<span class=\"pl-en\">isUnreachable</span>();</pre></div>\n<h4 dir=\"auto\">Points to discuss</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Naming: <code class=\"notranslate\">isReachable</code> good enough, especially if we want to have it generic? What about <code class=\"notranslate\">isAccessible</code> or <code class=\"notranslate\">exists</code>?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Testing: <a href=\"https://www.mock-server.com/\" rel=\"nofollow\">MockServer</a>? Something else?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Should we support HTTPS? We might need to <a href=\"https://nakov.com/blog/2009/07/16/disable-certificate-validation-in-java-ssl-connections/\" rel=\"nofollow\">disable certificate chain and hostname validation</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Method: <a href=\"https://www.baeldung.com/java-check-url-exists#using-a-head-request\" rel=\"nofollow\"><code class=\"notranslate\">GET</code> vs <code class=\"notranslate\">HEAD</code></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> What to do with <a href=\"https://www.baeldung.com/java-check-url-exists#redirects\" rel=\"nofollow\">redirects</a></li>\n</ul>","resourcePath":"/assertj/assertj/issues/2196","createdAt":"2021-05-04T10:26:37Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"fix issue 2210","url":"https://github.com/assertj/assertj/pull/2215","resourcePath":"/assertj/assertj/pull/2215","createdAt":"2021-05-16T16:52:05Z","number":2215,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractObjectAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Objects.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/object/ObjectAssert_hasAllNullFieldsOrPropertiesExcept_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjQ1MzQ0NjE4OmFmYTlkODgwNGQ4MzRiODIzMzgwYWQ0NzI2ZTU2NjZhYThjOTk5OGQ=","url":"https://github.com/assertj/assertj/pull/2215/commits/afa9d8804d834b823380ad4726e5666aa8c9998d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2210,"url":"https://github.com/assertj/assertj/issues/2210","title":"`hasAllNullFieldsOrProperties` and primitive types","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\"><code class=\"notranslate\">hasAllNullFieldsOrProperties</code> check that the actual object has only null fields or properties.</p>\n<p dir=\"auto\">All fields and properties are inspected but fields with primitive types always will have some value.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    class Book {\n        String title;\n        int pages;\n    }\n\n    @Test\n    void testHasAllNullFieldsOrProperties() {\n        Book book = new Book();\n        assertThat(book).hasAllNullFieldsOrProperties();\n    }\"><pre>    <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Book</span> {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">title</span>;\n        <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">pages</span>;\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testHasAllNullFieldsOrProperties</span>() {\n        <span class=\"pl-smi\">Book</span> <span class=\"pl-s1\">book</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Book</span>();\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">book</span>).<span class=\"pl-en\">hasAllNullFieldsOrProperties</span>();\n    }</pre></div>\n<p dir=\"auto\">test will fail because of field <code class=\"notranslate\">pages</code> is not null.</p>\n<h4 dir=\"auto\">Proposition</h4>\n<p dir=\"auto\">Exclude by default all field with primitive types from assertion.</p>","resourcePath":"/assertj/assertj/issues/2210","createdAt":"2021-05-13T21:28:06Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"isReachable (isHTTPReachable)","url":"https://github.com/assertj/assertj/pull/2218","resourcePath":"/assertj/assertj/pull/2218","createdAt":"2021-05-18T13:09:27Z","number":2218,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractUrlAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/uri/ShouldBeReachableHTTP.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Urls.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/url/UrlAssert_isReachableHTTP_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/uri/ShouldBeReachableHTTP_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjQ2NzM5Mzg4Ojg1OWU0ODExNTY4ZTk4OGNjOGE1M2U5ODEyZmMxZTUyOTFjYzJjMGQ=","url":"https://github.com/assertj/assertj/pull/2218/commits/859e4811568e988cc8a53e9812fc1e5291cc2c0d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2196,"url":"https://github.com/assertj/assertj/issues/2196","title":"Add `isReachable` / `isUnreachable` for URL assertions","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Inspired by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"869681278\" data-permission-text=\"Title is private\" data-url=\"https://github.com/junit-pioneer/junit-pioneer/issues/468\" data-hovercard-type=\"issue\" data-hovercard-url=\"/junit-pioneer/junit-pioneer/issues/468/hovercard\" href=\"https://github.com/junit-pioneer/junit-pioneer/issues/468\">junit-pioneer/junit-pioneer#468</a>, <code class=\"notranslate\">isReachable</code> / <code class=\"notranslate\">isUnreachable</code> assertions could be added to <code class=\"notranslate\">AbstractUrlAssert</code>.</p>\n<p dir=\"auto\">One of the most valuable use cases could be when the assertion is used as an assumption, allowing to skip a test if a remote dependency is not available.</p>\n<p dir=\"auto\">The assertion name could be generic enough (i.e., not strictly bound to HTTP) and internally we could have different behaviors based on the protocol.</p>\n<p dir=\"auto\">At first, the target should be only HTTP URLs.</p>\n<p dir=\"auto\"><a href=\"https://gist.github.com/nipafx/a21f1d1c5211617453e43a88c9df439c\">This gist</a> might inspire the assertion implementation.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(new URL(&quot;http://google.com&quot;)).isReachable();\nassertThat(new URL(&quot;http://invalid&quot;)).isUnreachable();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">URL</span>(<span class=\"pl-s\">\"http://google.com\"</span>)).<span class=\"pl-en\">isReachable</span>();\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">URL</span>(<span class=\"pl-s\">\"http://invalid\"</span>)).<span class=\"pl-en\">isUnreachable</span>();</pre></div>\n<h4 dir=\"auto\">Points to discuss</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Naming: <code class=\"notranslate\">isReachable</code> good enough, especially if we want to have it generic? What about <code class=\"notranslate\">isAccessible</code> or <code class=\"notranslate\">exists</code>?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Testing: <a href=\"https://www.mock-server.com/\" rel=\"nofollow\">MockServer</a>? Something else?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Should we support HTTPS? We might need to <a href=\"https://nakov.com/blog/2009/07/16/disable-certificate-validation-in-java-ssl-connections/\" rel=\"nofollow\">disable certificate chain and hostname validation</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Method: <a href=\"https://www.baeldung.com/java-check-url-exists#using-a-head-request\" rel=\"nofollow\"><code class=\"notranslate\">GET</code> vs <code class=\"notranslate\">HEAD</code></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> What to do with <a href=\"https://www.baeldung.com/java-check-url-exists#redirects\" rel=\"nofollow\">redirects</a></li>\n</ul>","resourcePath":"/assertj/assertj/issues/2196","createdAt":"2021-05-04T10:26:37Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"fix issue 971: to have ability to ignore all assert when expected value is null","url":"https://github.com/assertj/assertj/pull/2187","resourcePath":"/assertj/assertj/pull/2187","createdAt":"2021-04-25T03:42:56Z","number":2187,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_as_with_description_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/bytearray/ByteArrayAssert_asString_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_setLenientDateParsing_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/double_/DoubleAssert_isEqualTo_double_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjIyNjg4MTY2OjMyN2M1YTNjMGVjYzhiMGIzYWQwZGM1MjA3MjcwZTUyN2JmYzMzZWE=","url":"https://github.com/assertj/assertj/pull/2187/commits/327c5a3c0ecc8b0b3ad0dc5207270e527bfc33ea"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":971,"url":"https://github.com/assertj/assertj/issues/971","title":"New Feature: to have ability to ignore all assert when expected value is null","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">to have ability to ignore all assert when expected value is null.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Let's call the new method \"ignoreAssertWhenExpectedIsNull\"</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;Hello World!&quot;).ignoreAssertWhenExpectedIsNull().isEqualTo(null); // will pass\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Hello World!\"</span>).<span class=\"pl-en\">ignoreAssertWhenExpectedIsNull</span>().<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// will pass</span></pre></div>\n<h4 dir=\"auto\">Further more</h4>\n<p dir=\"auto\">If go further, we could have a method as ignoreAssertWhen(IgnoreType ignoreType)</p>\n<p dir=\"auto\">Above would be</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;Hello World!&quot;).ignoreAssertWhen(IgnoreType.ExpectedIsNull).isEqualTo(null); // will pass\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Hello World!\"</span>).<span class=\"pl-en\">ignoreAssertWhen</span>(<span class=\"pl-smi\">IgnoreType</span>.<span class=\"pl-s1\">ExpectedIsNull</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// will pass</span></pre></div>\n<p dir=\"auto\">IgnoreType could contains</p>\n<ul dir=\"auto\">\n<li>ExpectedIsNull</li>\n<li>ActualIsNull</li>\n<li>EitherIsNull</li>\n</ul>","resourcePath":"/assertj/assertj/issues/971","createdAt":"2017-04-11T11:19:48Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"status: pending investigation"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix NullPointerException in primitive double assertions.","url":"https://github.com/assertj/assertj/pull/2176","resourcePath":"/assertj/assertj/pull/2176","createdAt":"2021-04-19T08:23:33Z","number":2176,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractSoftAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/DefaultAssertionErrorCollector.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjE3Nzc2MTY3OjIwNDQ2ZjQyZmFmMDg2OGNiOTEwZjI0MGY0MTNkZTRmMWZlOWU0NjU=","url":"https://github.com/assertj/assertj/pull/2176/commits/20446f42faf0868cb910f240f413de4f1fe9e465"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2092,"url":"https://github.com/assertj/assertj/issues/2092","title":"SoftAssertionsExtension does not show line numbers","bodyHTML":"<p dir=\"auto\">assertj 3.18.1<br>\njunit 5.7.0</p>\n<h3 dir=\"auto\">Extension</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@ExtendWith(SoftAssertionsExtension.class)\nclass MyTest {\n\n    @Test\n    void bla(SoftAssertions softly) {\n        softly.assertThat(&quot;a&quot;).isEqualTo(&quot;a&quot;);\n        softly.assertThat(&quot;b&quot;).isEqualTo(&quot;a&quot;);\n        softly.assertThat(&quot;c&quot;).isEqualTo(&quot;a&quot;);\n        softly.assertThat(&quot;a&quot;).isEqualTo(&quot;a&quot;);\n\n    }\n}\"><pre><span class=\"pl-c1\">@</span><span class=\"pl-c1\">ExtendWith</span>(<span class=\"pl-smi\">SoftAssertionsExtension</span>.<span class=\"pl-s1\">class</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyTest</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">bla</span>(<span class=\"pl-smi\">SoftAssertions</span> <span class=\"pl-s1\">softly</span>) {\n        <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"a\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n        <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"b\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n        <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"c\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n        <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"a\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n\n    }\n}</pre></div>\n<p dir=\"auto\">The output does not contain the line numbers:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"INFO: Using test instance lifecycle mode 'PER_CLASS' set via the 'junit.jupiter.testinstance.lifecycle.default' configuration parameter.\n\n\nExpecting:\n &lt;&quot;b&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\nComparison Failure: \nExpected :&quot;a&quot;\nActual   :&quot;b&quot;\n&lt;Click to see difference&gt;\n\n\n\n\nExpecting:\n &lt;&quot;c&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\nComparison Failure: \nExpected :&quot;a&quot;\nActual   :&quot;c&quot;\n&lt;Click to see difference&gt;\n\n\n\norg.assertj.core.error.AssertJMultipleFailuresError: \nMultiple Failures (2 failures)\n-- failure 1 --\nExpecting:\n &lt;&quot;b&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\n-- failure 2 --\nExpecting:\n &lt;&quot;c&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\n\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAfterTestExecutionCallbacks$8(TestMethodTestDescriptor.java:229)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$12(TestMethodTestDescriptor.java:269)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$13(TestMethodTestDescriptor.java:269)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAllAfterMethodsOrCallbacks(TestMethodTestDescriptor.java:268)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAfterTestExecutionCallbacks(TestMethodTestDescriptor.java:228)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:133)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\"><pre class=\"notranslate\"><code>INFO: Using test instance lifecycle mode 'PER_CLASS' set via the 'junit.jupiter.testinstance.lifecycle.default' configuration parameter.\n\n\nExpecting:\n &lt;\"b\"&gt;\nto be equal to:\n &lt;\"a\"&gt;\nbut was not.\nComparison Failure: \nExpected :\"a\"\nActual   :\"b\"\n&lt;Click to see difference&gt;\n\n\n\n\nExpecting:\n &lt;\"c\"&gt;\nto be equal to:\n &lt;\"a\"&gt;\nbut was not.\nComparison Failure: \nExpected :\"a\"\nActual   :\"c\"\n&lt;Click to see difference&gt;\n\n\n\norg.assertj.core.error.AssertJMultipleFailuresError: \nMultiple Failures (2 failures)\n-- failure 1 --\nExpecting:\n &lt;\"b\"&gt;\nto be equal to:\n &lt;\"a\"&gt;\nbut was not.\n-- failure 2 --\nExpecting:\n &lt;\"c\"&gt;\nto be equal to:\n &lt;\"a\"&gt;\nbut was not.\n\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAfterTestExecutionCallbacks$8(TestMethodTestDescriptor.java:229)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$12(TestMethodTestDescriptor.java:269)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$13(TestMethodTestDescriptor.java:269)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAllAfterMethodsOrCallbacks(TestMethodTestDescriptor.java:268)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAfterTestExecutionCallbacks(TestMethodTestDescriptor.java:228)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:133)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\n</code></pre></div>\n<h3 dir=\"auto\">Static method</h3>\n<p dir=\"auto\">But using the static method it does show the line number and even the full stack trace (arguably too much though):</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyTest {\n\n    @Test\n    void bla() {\n        SoftAssertions.assertSoftly(softly -&gt; {\n            softly.assertThat(&quot;a&quot;).isEqualTo(&quot;a&quot;);\n            softly.assertThat(&quot;b&quot;).isEqualTo(&quot;a&quot;);\n            softly.assertThat(&quot;c&quot;).isEqualTo(&quot;a&quot;);\n            softly.assertThat(&quot;a&quot;).isEqualTo(&quot;a&quot;);\n        });\n    }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyTest</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">bla</span>() {\n        <span class=\"pl-s1\">SoftAssertions</span>.<span class=\"pl-en\">assertSoftly</span>(<span class=\"pl-s1\">softly</span> -&gt; {\n            <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"a\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n            <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"b\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n            <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"c\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n            <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"a\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n        });\n    }\n}</pre></div>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"INFO: Using test instance lifecycle mode 'PER_CLASS' set via the 'junit.jupiter.testinstance.lifecycle.default' configuration parameter.\n\norg.opentest4j.AssertionFailedError: \nExpecting:\n &lt;&quot;b&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\nat MyTest.lambda$bla$0(MyTest.java:18)\n\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat com.MyTest.lambda$bla$0(MyTest.java:18)\n\tat com.MyTest.bla(MyTest.java:16)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\n\n\norg.opentest4j.AssertionFailedError: \nExpecting:\n &lt;&quot;c&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\nat MyTest.lambda$bla$0(MyTest.java:19)\n\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat com.MyTest.lambda$bla$0(MyTest.java:19)\n\tat com.MyTest.bla(MyTest.java:16)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\n\n\norg.assertj.core.error.AssertJMultipleFailuresError: \nMultiple Failures (2 failures)\n-- failure 1 --\nExpecting:\n &lt;&quot;b&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\nat MyTest.lambda$bla$0(MyTest.java:18)\n-- failure 2 --\nExpecting:\n &lt;&quot;c&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\nat MyTest.lambda$bla$0(MyTest.java:19)\n\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat com.MyTest.bla(MyTest.java:16)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\"><pre><span class=\"pl-c1\">INFO</span>: <span class=\"pl-smi\">Using</span> <span class=\"pl-s1\">test</span> <span class=\"pl-smi\">instance</span> <span class=\"pl-s1\">lifecycle</span> <span class=\"pl-s1\">mode</span> <span class=\"pl-s\">'PER_CLASS'</span> <span class=\"pl-s1\">set</span> <span class=\"pl-s1\">via</span> <span class=\"pl-s1\">the</span> <span class=\"pl-s\">'junit.jupiter.testinstance.lifecycle.default'</span> <span class=\"pl-s1\">configuration</span> <span class=\"pl-smi\">parameter</span>.\n\n<span class=\"pl-smi\">org</span>.<span class=\"pl-smi\">opentest4j</span>.<span class=\"pl-smi\">AssertionFailedError</span>: \n<span class=\"pl-s1\">Expecting</span>:\n &lt;<span class=\"pl-s\">\"b\"</span>&gt;\n<span class=\"pl-k\">to</span> <span class=\"pl-s1\">be</span> <span class=\"pl-smi\">equal</span> <span class=\"pl-s1\">to</span>:\n &lt;<span class=\"pl-s\">\"a\"</span>&gt;\n<span class=\"pl-smi\">but</span> <span class=\"pl-s1\">was</span> <span class=\"pl-smi\">not</span>.\n<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">MyTest</span>.<span class=\"pl-en\">lambda$bla$0</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">18</span>)\n\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeConstructorAccessorImpl</span>.<span class=\"pl-en\">newInstance0</span>(<span class=\"pl-smi\">Native</span> <span class=\"pl-s1\">Method</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeConstructorAccessorImpl</span>.<span class=\"pl-s1\">newInstance</span>(<span class=\"pl-smi\">NativeConstructorAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">62</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">DelegatingConstructorAccessorImpl</span>.<span class=\"pl-en\">newInstance</span>(<span class=\"pl-smi\">DelegatingConstructorAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">45</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">MyTest</span>.<span class=\"pl-s1\">lambda$bla$0</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">18</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">MyTest</span>.<span class=\"pl-en\">bla</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">16</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeMethodAccessorImpl</span>.<span class=\"pl-en\">invoke0</span>(<span class=\"pl-smi\">Native</span> <span class=\"pl-s1\">Method</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeMethodAccessorImpl</span>.<span class=\"pl-s1\">invoke</span>(<span class=\"pl-smi\">NativeMethodAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">62</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">DelegatingMethodAccessorImpl</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">DelegatingMethodAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">43</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">lang</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">Method</span>.<span class=\"pl-s1\">invoke</span>(<span class=\"pl-smi\">Method</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">566</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">commons</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ReflectionUtils</span>.<span class=\"pl-en\">invokeMethod</span>(<span class=\"pl-smi\">ReflectionUtils</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">688</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">MethodInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">MethodInvocation</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">60</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain$ValidatingInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">131</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">intercept</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">149</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">interceptTestableMethod</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">140</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">interceptTestMethod</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker$ReflectiveInterceptorCall</span>.<span class=\"pl-en\">lambda$ofVoidMethod$0</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">115</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">lambda$invoke$0</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">105</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain$InterceptedInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">106</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">64</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">chainAndInvoke</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">45</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">37</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">104</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">98</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">lambda$invokeTestMethod$6</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">210</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">invokeTestMethod</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">206</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">131</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">65</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">139</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ArrayList</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-smi\">ArrayList</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">1541</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-s1\">invokeAll</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">38</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">143</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ArrayList</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-smi\">ArrayList</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">1541</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-s1\">invokeAll</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">38</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">143</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-en\">submit</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">32</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">HierarchicalTestExecutor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">HierarchicalTestExecutor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">57</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">HierarchicalTestEngine</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">HierarchicalTestEngine</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">51</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">108</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">88</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">lambda$execute$0</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">54</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">withInterceptedStreams</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">67</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">52</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">DefaultLauncher</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">DefaultLauncher</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">96</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">DefaultLauncher</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">DefaultLauncher</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">75</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">junit5</span>.<span class=\"pl-c1\">JUnit5IdeaTestRunner</span>.<span class=\"pl-en\">startRunnerWithArgs</span>(<span class=\"pl-smi\">JUnit5IdeaTestRunner</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">71</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">IdeaTestRunner$Repeater</span>.<span class=\"pl-en\">startRunnerWithArgs</span>(<span class=\"pl-smi\">IdeaTestRunner</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">33</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">JUnitStarter</span>.<span class=\"pl-en\">prepareStreamsAndStart</span>(<span class=\"pl-smi\">JUnitStarter</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">220</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">JUnitStarter</span>.<span class=\"pl-en\">main</span>(<span class=\"pl-smi\">JUnitStarter</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">53</span>)\n\n\n<span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">opentest4j</span>.<span class=\"pl-s1\">AssertionFailedError</span>: \n<span class=\"pl-s1\">Expecting</span>:\n &lt;<span class=\"pl-s\">\"c\"</span>&gt;\n<span class=\"pl-smi\">to</span> <span class=\"pl-s1\">be</span> <span class=\"pl-smi\">equal</span> <span class=\"pl-s1\">to</span>:\n &lt;<span class=\"pl-s\">\"a\"</span>&gt;\n<span class=\"pl-smi\">but</span> <span class=\"pl-s1\">was</span> <span class=\"pl-smi\">not</span>.\n<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">MyTest</span>.<span class=\"pl-en\">lambda$bla$0</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">19</span>)\n\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeConstructorAccessorImpl</span>.<span class=\"pl-en\">newInstance0</span>(<span class=\"pl-smi\">Native</span> <span class=\"pl-s1\">Method</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeConstructorAccessorImpl</span>.<span class=\"pl-s1\">newInstance</span>(<span class=\"pl-smi\">NativeConstructorAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">62</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">DelegatingConstructorAccessorImpl</span>.<span class=\"pl-en\">newInstance</span>(<span class=\"pl-smi\">DelegatingConstructorAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">45</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">MyTest</span>.<span class=\"pl-s1\">lambda$bla$0</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">19</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">MyTest</span>.<span class=\"pl-en\">bla</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">16</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeMethodAccessorImpl</span>.<span class=\"pl-en\">invoke0</span>(<span class=\"pl-smi\">Native</span> <span class=\"pl-s1\">Method</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeMethodAccessorImpl</span>.<span class=\"pl-s1\">invoke</span>(<span class=\"pl-smi\">NativeMethodAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">62</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">DelegatingMethodAccessorImpl</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">DelegatingMethodAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">43</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">lang</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">Method</span>.<span class=\"pl-s1\">invoke</span>(<span class=\"pl-smi\">Method</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">566</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">commons</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ReflectionUtils</span>.<span class=\"pl-en\">invokeMethod</span>(<span class=\"pl-smi\">ReflectionUtils</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">688</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">MethodInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">MethodInvocation</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">60</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain$ValidatingInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">131</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">intercept</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">149</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">interceptTestableMethod</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">140</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">interceptTestMethod</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker$ReflectiveInterceptorCall</span>.<span class=\"pl-en\">lambda$ofVoidMethod$0</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">115</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">lambda$invoke$0</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">105</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain$InterceptedInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">106</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">64</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">chainAndInvoke</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">45</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">37</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">104</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">98</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">lambda$invokeTestMethod$6</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">210</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">invokeTestMethod</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">206</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">131</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">65</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">139</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ArrayList</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-smi\">ArrayList</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">1541</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-s1\">invokeAll</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">38</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">143</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ArrayList</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-smi\">ArrayList</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">1541</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-s1\">invokeAll</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">38</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">143</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-en\">submit</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">32</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">HierarchicalTestExecutor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">HierarchicalTestExecutor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">57</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">HierarchicalTestEngine</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">HierarchicalTestEngine</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">51</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">108</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">88</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">lambda$execute$0</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">54</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">withInterceptedStreams</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">67</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">52</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">DefaultLauncher</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">DefaultLauncher</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">96</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">DefaultLauncher</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">DefaultLauncher</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">75</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">junit5</span>.<span class=\"pl-c1\">JUnit5IdeaTestRunner</span>.<span class=\"pl-en\">startRunnerWithArgs</span>(<span class=\"pl-smi\">JUnit5IdeaTestRunner</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">71</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">IdeaTestRunner$Repeater</span>.<span class=\"pl-en\">startRunnerWithArgs</span>(<span class=\"pl-smi\">IdeaTestRunner</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">33</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">JUnitStarter</span>.<span class=\"pl-en\">prepareStreamsAndStart</span>(<span class=\"pl-smi\">JUnitStarter</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">220</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">JUnitStarter</span>.<span class=\"pl-en\">main</span>(<span class=\"pl-smi\">JUnitStarter</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">53</span>)\n\n\n<span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">assertj</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">error</span>.<span class=\"pl-s1\">AssertJMultipleFailuresError</span>: \n<span class=\"pl-s1\">Multiple</span> <span class=\"pl-s1\">Failures</span> (<span class=\"pl-c1\">2</span> <span class=\"pl-s1\">failures</span>)\n-- <span class=\"pl-s1\">failure</span> <span class=\"pl-c1\">1</span> --\n<span class=\"pl-s1\">Expecting</span>:\n &lt;<span class=\"pl-s\">\"b\"</span>&gt;\n<span class=\"pl-smi\">to</span> <span class=\"pl-s1\">be</span> <span class=\"pl-smi\">equal</span> <span class=\"pl-s1\">to</span>:\n &lt;<span class=\"pl-s\">\"a\"</span>&gt;\n<span class=\"pl-smi\">but</span> <span class=\"pl-s1\">was</span> <span class=\"pl-smi\">not</span>.\n<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">MyTest</span>.<span class=\"pl-en\">lambda$bla$0</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">18</span>)\n-- <span class=\"pl-s1\">failure</span> <span class=\"pl-c1\">2</span> --\n<span class=\"pl-s1\">Expecting</span>:\n &lt;<span class=\"pl-s\">\"c\"</span>&gt;\n<span class=\"pl-smi\">to</span> <span class=\"pl-s1\">be</span> <span class=\"pl-smi\">equal</span> <span class=\"pl-s1\">to</span>:\n &lt;<span class=\"pl-s\">\"a\"</span>&gt;\n<span class=\"pl-smi\">but</span> <span class=\"pl-s1\">was</span> <span class=\"pl-smi\">not</span>.\n<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">MyTest</span>.<span class=\"pl-en\">lambda$bla$0</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">19</span>)\n\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeConstructorAccessorImpl</span>.<span class=\"pl-en\">newInstance0</span>(<span class=\"pl-smi\">Native</span> <span class=\"pl-s1\">Method</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeConstructorAccessorImpl</span>.<span class=\"pl-s1\">newInstance</span>(<span class=\"pl-smi\">NativeConstructorAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">62</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">DelegatingConstructorAccessorImpl</span>.<span class=\"pl-en\">newInstance</span>(<span class=\"pl-smi\">DelegatingConstructorAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">45</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">MyTest</span>.<span class=\"pl-s1\">bla</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">16</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeMethodAccessorImpl</span>.<span class=\"pl-en\">invoke0</span>(<span class=\"pl-smi\">Native</span> <span class=\"pl-s1\">Method</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeMethodAccessorImpl</span>.<span class=\"pl-s1\">invoke</span>(<span class=\"pl-smi\">NativeMethodAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">62</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">DelegatingMethodAccessorImpl</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">DelegatingMethodAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">43</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">lang</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">Method</span>.<span class=\"pl-s1\">invoke</span>(<span class=\"pl-smi\">Method</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">566</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">commons</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ReflectionUtils</span>.<span class=\"pl-en\">invokeMethod</span>(<span class=\"pl-smi\">ReflectionUtils</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">688</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">MethodInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">MethodInvocation</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">60</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain$ValidatingInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">131</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">intercept</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">149</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">interceptTestableMethod</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">140</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">interceptTestMethod</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker$ReflectiveInterceptorCall</span>.<span class=\"pl-en\">lambda$ofVoidMethod$0</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">115</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">lambda$invoke$0</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">105</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain$InterceptedInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">106</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">64</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">chainAndInvoke</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">45</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">37</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">104</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">98</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">lambda$invokeTestMethod$6</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">210</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">invokeTestMethod</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">206</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">131</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">65</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">139</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ArrayList</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-smi\">ArrayList</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">1541</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-s1\">invokeAll</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">38</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">143</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ArrayList</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-smi\">ArrayList</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">1541</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-s1\">invokeAll</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">38</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">143</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-en\">submit</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">32</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">HierarchicalTestExecutor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">HierarchicalTestExecutor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">57</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">HierarchicalTestEngine</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">HierarchicalTestEngine</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">51</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">108</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">88</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">lambda$execute$0</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">54</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">withInterceptedStreams</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">67</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">52</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">DefaultLauncher</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">DefaultLauncher</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">96</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">DefaultLauncher</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">DefaultLauncher</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">75</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">junit5</span>.<span class=\"pl-c1\">JUnit5IdeaTestRunner</span>.<span class=\"pl-en\">startRunnerWithArgs</span>(<span class=\"pl-smi\">JUnit5IdeaTestRunner</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">71</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">IdeaTestRunner$Repeater</span>.<span class=\"pl-en\">startRunnerWithArgs</span>(<span class=\"pl-smi\">IdeaTestRunner</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">33</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">JUnitStarter</span>.<span class=\"pl-en\">prepareStreamsAndStart</span>(<span class=\"pl-smi\">JUnitStarter</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">220</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">JUnitStarter</span>.<span class=\"pl-en\">main</span>(<span class=\"pl-smi\">JUnitStarter</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">53</span>)</pre></div>","resourcePath":"/assertj/assertj/issues/2092","createdAt":"2021-01-02T18:10:12Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix #1850","url":"https://github.com/assertj/assertj/pull/2222","resourcePath":"/assertj/assertj/pull/2222","createdAt":"2021-05-22T06:31:23Z","number":2222,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractUrlAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/uri/ShouldRepresentSamePrimaryRepresentationAs.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Urls.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/urls/Urls_assertRepresentSamePrimaryResource.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjUwNTc1Njk1OmUzODk3N2ExMDYxNmJiZDMyODM0MGQzNTBmMWM5YWJiNzkzOGI1YmQ=","url":"https://github.com/assertj/assertj/pull/2222/commits/e38977a10616bbd328340d350f1c9abb7938b5bd"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1850,"url":"https://github.com/assertj/assertj/issues/1850","title":"Feature: test whether two URLs represent the same primary resource","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">If the two URLs are equal after their fragments are removed and their query parameters are sorted, it means that they represent the same resource. And in the view of the server, these two URLs are almost the same. I think this feature can be useful.</p>\n<p dir=\"auto\">See: <a href=\"https://en.wikipedia.org/wiki/Fragment_identifier\" rel=\"nofollow\">Wikipedia: Fragment identifier</a><br>\n<a href=\"https://github.com/joel-costigliola/assertj-core/issues/1796\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/1796/hovercard\">#1796 :query parameters</a></p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"URL actualUrl = new URL(&quot;http:example.com/a/b?c=d&amp;e=f#1&quot;);\nURL expectedUrl = new URL(&quot;http:example.com/a/b?e=f&amp;c=d#2&quot;);\nAssertions.assertThat(actualUrl).representSamePrimaryResource(expectedUrl);\"><pre><span class=\"pl-smi\">URL</span> <span class=\"pl-s1\">actualUrl</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">URL</span>(<span class=\"pl-s\">\"http:example.com/a/b?c=d&amp;e=f#1\"</span>);\n<span class=\"pl-smi\">URL</span> <span class=\"pl-s1\">expectedUrl</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">URL</span>(<span class=\"pl-s\">\"http:example.com/a/b?e=f&amp;c=d#2\"</span>);\n<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actualUrl</span>).<span class=\"pl-en\">representSamePrimaryResource</span>(<span class=\"pl-s1\">expectedUrl</span>);</pre></div>\n<p dir=\"auto\">Maybe the name of the assertion can be discussed.</p>","resourcePath":"/assertj/assertj/issues/1850","createdAt":"2020-04-24T11:40:02Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Mark all possible public methods leading to heap pollution with `@SafeVarargs` and make them final","url":"https://github.com/assertj/assertj/pull/2163","resourcePath":"/assertj/assertj/pull/2163","createdAt":"2021-04-07T21:28:14Z","number":2163,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/Iterable_special_assertion_methods_in_assumptions_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/List_special_assertion_methods_in_assumptions_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/Map_special_assertion_methods_in_assumptions_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/ObjectArray_special_assertion_methods_in_assumptions_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/Object_special_assertion_methods_in_assumptions_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/Predicate_final_method_assertions_in_assumptions_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/map/MapAssert_size_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsExactly_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsOnly_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/perf/SoftAssertionsPerfTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjExMDIyNzc0OmY2ODJjMzgzMGMyZjk1NDAwN2IxYjVhNGZlNjhkOTI1OGRlYjM5ZmQ=","url":"https://github.com/assertj/assertj/pull/2163/commits/f682c3830c2f954007b1b5a4fe68d9258deb39fd"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2161,"url":"https://github.com/assertj/assertj/issues/2161","title":"Using softAssertions with extracting leads to warning related to unchecked generics array creation for varargs parameter","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">When I use <code class=\"notranslate\">SoftAssertions</code> combined with <code class=\"notranslate\">extracting</code>, my IDE complains with the following warning</p>\n<blockquote>\n<p dir=\"auto\">Unchecked generics array creation for varargs parameter</p>\n</blockquote>\n<p dir=\"auto\">When I use the same code with standard <code class=\"notranslate\">Assertions</code>, the warning is not there.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">With warning</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    TolkienCharacter legolas = TolkienCharacter.of(&quot;Legolas&quot;, 1000, ELF);\n\n    softly.assertThat(legolas)\n          .extracting(TolkienCharacter::getName, TolkienCharacter::getAge)\n          .contains(&quot;Legolas&quot;, 1000);\"><pre>    <span class=\"pl-smi\">TolkienCharacter</span> <span class=\"pl-s1\">legolas</span> = <span class=\"pl-s1\">TolkienCharacter</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"Legolas\"</span>, <span class=\"pl-c1\">1000</span>, <span class=\"pl-c1\">ELF</span>);\n\n    <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">legolas</span>)\n          .<span class=\"pl-en\">extracting</span>(<span class=\"pl-s1\">TolkienCharacter</span>::<span class=\"pl-s1\">getName</span>, <span class=\"pl-s1\">TolkienCharacter</span>::<span class=\"pl-s1\">getAge</span>)\n          .<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"Legolas\"</span>, <span class=\"pl-c1\">1000</span>);</pre></div>\n<p dir=\"auto\">Without warning</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    TolkienCharacter legolas = TolkienCharacter.of(&quot;Legolas&quot;, 1000, ELF);\n\n    assertThat(legolas)\n          .extracting(TolkienCharacter::getName, TolkienCharacter::getAge)\n          .contains(&quot;Legolas&quot;, 1000);\"><pre>    <span class=\"pl-smi\">TolkienCharacter</span> <span class=\"pl-s1\">legolas</span> = <span class=\"pl-s1\">TolkienCharacter</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"Legolas\"</span>, <span class=\"pl-c1\">1000</span>, <span class=\"pl-c1\">ELF</span>);\n\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">legolas</span>)\n          .<span class=\"pl-en\">extracting</span>(<span class=\"pl-s1\">TolkienCharacter</span>::<span class=\"pl-s1\">getName</span>, <span class=\"pl-s1\">TolkienCharacter</span>::<span class=\"pl-s1\">getAge</span>)\n          .<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"Legolas\"</span>, <span class=\"pl-c1\">1000</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/2161","createdAt":"2021-04-06T16:32:41Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"add the feature mentioned in #2198","url":"https://github.com/assertj/assertj/pull/2213","resourcePath":"/assertj/assertj/pull/2213","createdAt":"2021-05-15T12:11:01Z","number":2213,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractFileAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Files.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/file/FileAssert_content_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/files/Files_getFileContent_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjQ1MTM0MzU3OmJiNzFkNzdiMmM4ZDY5ZTZiZGU0NGZmNDU5OTk4NDNhYmJhODgyNjE=","url":"https://github.com/assertj/assertj/pull/2213/commits/bb71d77b2c8d69e6bde44ff45999843abba88261"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2198,"url":"https://github.com/assertj/assertj/issues/2198","title":"Feature Request: `assertThat(file).doesNotHaveContent(\"string\")`","bodyHTML":"<p dir=\"auto\">Currently it is possible to conveniently check a file's content with <code class=\"notranslate\">hasContent</code>, but not the opposite.</p>\n<p dir=\"auto\">Also I'm regularly bumping into the absence of the possibility to directly analyse files as it is possible for strings, so to have something analogous to <code class=\"notranslate\">assertThat(\"String\").contains</code> &amp; <code class=\"notranslate\">doesNotContain</code>. Of course one can do <code class=\"notranslate\">assertThat(FileUtils.readFileToString(file))</code> but having syntactic sugar in assertJ to avoid this would be lovely as the brevity and clarity assertJ enables is one of it's main strengths IMHO.<br>\nThese last two may be a separate feature request, however i wanted to gather general feedback about feasibility first.</p>","resourcePath":"/assertj/assertj/issues/2198","createdAt":"2021-05-05T20:54:22Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix #2217","url":"https://github.com/assertj/assertj/pull/2221","resourcePath":"/assertj/assertj/pull/2221","createdAt":"2021-05-21T12:21:15Z","number":2221,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Objects.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/object/ObjectAssert_hasNoNullFieldsOrProperties_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjQ5OTIwNjA1OjdjOWU4MjAzNTcwZjg1MzU4ZDYwODIwZTdkZWRhOWExMGE3YWE2ZTI=","url":"https://github.com/assertj/assertj/pull/2221/commits/7c9e8203570f85358d60820e7deda9a10a7aa6e2"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2217,"url":"https://github.com/assertj/assertj/issues/2217","title":"exclusion non existing fields, properties","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">We can exclude fields, properties from some of checking like in <code class=\"notranslate\">ObjectAssert#hasNoNullFieldsOrPropertiesExcept</code>, <code class=\"notranslate\">RecursiveComparisonAssert#ignoringFields</code> (maybe in other place also)</p>\n<p dir=\"auto\">We can misspell in field name or filed can be removed from object in future development, so assertions in this situation should fail with message that excluded filed not exist.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    class Book {\n        String title;\n    }\n\n   Book aBook = ...\n\n   assertThat(aBook).hasNoNullFieldsOrPropertiesExcept(&quot;name&quot;);\"><pre>    <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Book</span> {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">title</span>;\n    }\n\n   <span class=\"pl-smi\">Book</span> <span class=\"pl-s1\">aBook</span> = ...\n\n   <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">aBook</span>).<span class=\"pl-en\">hasNoNullFieldsOrPropertiesExcept</span>(<span class=\"pl-s\">\"name\"</span>);</pre></div>\n<p dir=\"auto\">Assertions should fail because class <code class=\"notranslate\">Book</code> not contains field <code class=\"notranslate\">name</code></p>","resourcePath":"/assertj/assertj/issues/2217","createdAt":"2021-05-18T13:05:47Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"implement matches() in issue #2081","url":"https://github.com/assertj/assertj/pull/2170","resourcePath":"/assertj/assertj/pull/2170","createdAt":"2021-04-18T06:59:25Z","number":2170,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/BDDAssumptions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/BDDSoftAssertionsProvider.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/InstanceOfAssertFactories.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/MatcherAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/StandardSoftAssertionsProvider.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WithAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WithAssumptions.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/MatcherShouldMatch.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/matcher/MatcherAssert_matches_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/MatcherShouldMatch_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjE3NDMzODQwOjdjYTg4NDcxYzA0YTFlZTFlNDExNDc4NWZkNjNmZWUxYzY1ZjQ2NGQ=","url":"https://github.com/assertj/assertj/pull/2170/commits/7ca88471c04a1ee1e4114785fd63fee1c65f464d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2081,"url":"https://github.com/assertj/assertj/issues/2081","title":"Add assertions for java.util.regex.Matcher?","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Add custom assertions for <code class=\"notranslate\">java.util.regex.Matcher</code>.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.util.Pattern pattern = ...;\nString input = ...;\njava.util.regex.Mather matcher = Pattern.matcher(input);\nassertThat(matcher).matches()\"><pre><span class=\"pl-smi\">java</span>.<span class=\"pl-smi\">util</span>.<span class=\"pl-smi\">Pattern</span> <span class=\"pl-s1\">pattern</span> = ...;\n<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">input</span> = ...;\n<span class=\"pl-smi\">java</span>.<span class=\"pl-smi\">util</span>.<span class=\"pl-smi\">regex</span>.<span class=\"pl-smi\">Mather</span> <span class=\"pl-s1\">matcher</span> = <span class=\"pl-s1\">Pattern</span>.<span class=\"pl-en\">matcher</span>(<span class=\"pl-s1\">input</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">matcher</span>).<span class=\"pl-en\">matches</span>()</pre></div>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    .hasGroupCount(1);\"><pre>    .<span class=\"pl-en\">hasGroupCount</span>(<span class=\"pl-c1\">1</span>);</pre></div>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    (\n        .extractingGroup()\n        .extractingGroup(index)\n        .extractingGroup(name)\n    )\n    .isEqualTo(&quot;some&quot;);\"><pre>    (\n        .<span class=\"pl-en\">extractingGroup</span>()\n        .<span class=\"pl-en\">extractingGroup</span>(<span class=\"pl-s1\">index</span>)\n        .<span class=\"pl-en\">extractingGroup</span>(<span class=\"pl-s1\">name</span>)\n    )\n    .<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"some\"</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/2081","createdAt":"2020-12-18T05:06:57Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"FIX #2011 wrap in method withAdditionalFailMessage","url":"https://github.com/assertj/assertj/pull/2188","resourcePath":"/assertj/assertj/pull/2188","createdAt":"2021-04-25T05:58:47Z","number":2188,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjIyNzAzNDM4OmFkOGE3ZDJiYWE5YjNmODljNTQzYTIwZGY1MzE2Y2I4NDRjODM0ODE=","url":"https://github.com/assertj/assertj/pull/2188/commits/ad8a7d2baa9b3f89c543a20df5316cb844c83481"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2011,"url":"https://github.com/assertj/assertj/issues/2011","title":"Add functionality to append supplied String (or Supplier<String>) to default error message","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Currently we can call <code class=\"notranslate\">withFailMessage</code> with either a <code class=\"notranslate\">String</code> or <code class=\"notranslate\">Supplier&lt;String&gt;</code> parameter. This is nice but the default error message can be useful <strong>along with</strong> a custom error message. Please add this kind of method with both <code class=\"notranslate\">String</code> and <code class=\"notranslate\">Supplier&lt;String&gt;</code> signatures.</p>\n<p dir=\"auto\">Thanks for the consideration!</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// logs &quot;Inconceivable!&quot; only\nAssertions.assertThat(&quot;string&quot;).withFailMessage(&quot;Inconceivable!&quot;).contains(&quot;sub&quot;);\n/** Would log the following:\nExpecting:\n &lt;&quot;string&quot;&gt;\nto contain:\n &lt;&quot;sub&quot;&gt;\nInconceivable!\n */\nAssertions.assertThat(&quot;string&quot;).withAdditionalFailMessage(&quot;Inconceivable!&quot;).contains(&quot;sub&quot;);\n\n// currently I am effecting this with the following workaround method...I'm guessing it's a bit of a rig\nprivate static void assertThatTextContainsContent(final String text, final String description,\n\t\tfinal Supplier&lt;String&gt; additionalErrorMessageSupplier, final String... requiredContents) {\n\ttry {\n\t\tfinal AbstractStringAssert&lt;? extends AbstractStringAssert&lt;?&gt;&gt; contentAssert =\n\t\t\t\tAssertions.assertThat(text).describedAs(description);\n\t\tStrings.instance().assertContains(contentAssert.getWritableAssertionInfo(), text, requiredContents);\n\t} catch (final AssertionError ae) {\n\t\tthrow new AssertionError(\n\t\t\t\tString.format(&quot;%s%n%s&quot;, ae.getMessage().trim(), additionalErrorMessageSupplier.get()));\n\t}\n}\"><pre><span class=\"pl-c\">// logs \"Inconceivable!\" only</span>\n<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"string\"</span>).<span class=\"pl-en\">withFailMessage</span>(<span class=\"pl-s\">\"Inconceivable!\"</span>).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"sub\"</span>);\n<span class=\"pl-c\">/** Would log the following:</span>\n<span class=\"pl-c\">Expecting:</span>\n<span class=\"pl-c\"> &lt;\"string\"&gt;</span>\n<span class=\"pl-c\">to contain:</span>\n<span class=\"pl-c\"> &lt;\"sub\"&gt;</span>\n<span class=\"pl-c\">Inconceivable!</span>\n<span class=\"pl-c\"> */</span>\n<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"string\"</span>).<span class=\"pl-en\">withAdditionalFailMessage</span>(<span class=\"pl-s\">\"Inconceivable!\"</span>).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"sub\"</span>);\n\n<span class=\"pl-c\">// currently I am effecting this with the following workaround method...I'm guessing it's a bit of a rig</span>\n<span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">assertThatTextContainsContent</span>(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">text</span>, <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">description</span>,\n\t\t<span class=\"pl-k\">final</span> <span class=\"pl-smi\">Supplier</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">additionalErrorMessageSupplier</span>, <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span>... <span class=\"pl-s1\">requiredContents</span>) {\n\t<span class=\"pl-k\">try</span> {\n\t\t<span class=\"pl-k\">final</span> <span class=\"pl-smi\">AbstractStringAssert</span>&lt;? <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">AbstractStringAssert</span>&lt;?&gt;&gt; <span class=\"pl-s1\">contentAssert</span> =\n\t\t\t\t<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">text</span>).<span class=\"pl-en\">describedAs</span>(<span class=\"pl-s1\">description</span>);\n\t\t<span class=\"pl-s1\">Strings</span>.<span class=\"pl-en\">instance</span>().<span class=\"pl-en\">assertContains</span>(<span class=\"pl-s1\">contentAssert</span>.<span class=\"pl-en\">getWritableAssertionInfo</span>(), <span class=\"pl-s1\">text</span>, <span class=\"pl-s1\">requiredContents</span>);\n\t} <span class=\"pl-k\">catch</span> (<span class=\"pl-k\">final</span> <span class=\"pl-smi\">AssertionError</span> <span class=\"pl-s1\">ae</span>) {\n\t\t<span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AssertionError</span>(\n\t\t\t\t<span class=\"pl-s1\">String</span>.<span class=\"pl-en\">format</span>(<span class=\"pl-s\">\"%s%n%s\"</span>, <span class=\"pl-s1\">ae</span>.<span class=\"pl-en\">getMessage</span>().<span class=\"pl-en\">trim</span>(), <span class=\"pl-s1\">additionalErrorMessageSupplier</span>.<span class=\"pl-en\">get</span>()));\n\t}\n}</pre></div>","resourcePath":"/assertj/assertj/issues/2011","createdAt":"2020-10-06T18:01:29Z","labels":{"edges":[{"node":{"name":"status: waiting for interest"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix SoftAssertionsExtension does not show line numbers","url":"https://github.com/assertj/assertj/pull/2177","resourcePath":"/assertj/assertj/pull/2177","createdAt":"2021-04-19T13:07:40Z","number":2177,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractSoftAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/DefaultAssertionErrorCollector.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjE3OTc5MDMyOjc0ZGJmZjFjNzRmN2YxMTExZTdmNzZlOGZlMGM2ZDQwNzQ2ZmFiMDc=","url":"https://github.com/assertj/assertj/pull/2177/commits/74dbff1c74f7f1111e7f76e8fe0c6d40746fab07"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2092,"url":"https://github.com/assertj/assertj/issues/2092","title":"SoftAssertionsExtension does not show line numbers","bodyHTML":"<p dir=\"auto\">assertj 3.18.1<br>\njunit 5.7.0</p>\n<h3 dir=\"auto\">Extension</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@ExtendWith(SoftAssertionsExtension.class)\nclass MyTest {\n\n    @Test\n    void bla(SoftAssertions softly) {\n        softly.assertThat(&quot;a&quot;).isEqualTo(&quot;a&quot;);\n        softly.assertThat(&quot;b&quot;).isEqualTo(&quot;a&quot;);\n        softly.assertThat(&quot;c&quot;).isEqualTo(&quot;a&quot;);\n        softly.assertThat(&quot;a&quot;).isEqualTo(&quot;a&quot;);\n\n    }\n}\"><pre><span class=\"pl-c1\">@</span><span class=\"pl-c1\">ExtendWith</span>(<span class=\"pl-smi\">SoftAssertionsExtension</span>.<span class=\"pl-s1\">class</span>)\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyTest</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">bla</span>(<span class=\"pl-smi\">SoftAssertions</span> <span class=\"pl-s1\">softly</span>) {\n        <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"a\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n        <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"b\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n        <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"c\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n        <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"a\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n\n    }\n}</pre></div>\n<p dir=\"auto\">The output does not contain the line numbers:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"INFO: Using test instance lifecycle mode 'PER_CLASS' set via the 'junit.jupiter.testinstance.lifecycle.default' configuration parameter.\n\n\nExpecting:\n &lt;&quot;b&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\nComparison Failure: \nExpected :&quot;a&quot;\nActual   :&quot;b&quot;\n&lt;Click to see difference&gt;\n\n\n\n\nExpecting:\n &lt;&quot;c&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\nComparison Failure: \nExpected :&quot;a&quot;\nActual   :&quot;c&quot;\n&lt;Click to see difference&gt;\n\n\n\norg.assertj.core.error.AssertJMultipleFailuresError: \nMultiple Failures (2 failures)\n-- failure 1 --\nExpecting:\n &lt;&quot;b&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\n-- failure 2 --\nExpecting:\n &lt;&quot;c&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\n\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAfterTestExecutionCallbacks$8(TestMethodTestDescriptor.java:229)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$12(TestMethodTestDescriptor.java:269)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$13(TestMethodTestDescriptor.java:269)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAllAfterMethodsOrCallbacks(TestMethodTestDescriptor.java:268)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAfterTestExecutionCallbacks(TestMethodTestDescriptor.java:228)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:133)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\"><pre class=\"notranslate\"><code>INFO: Using test instance lifecycle mode 'PER_CLASS' set via the 'junit.jupiter.testinstance.lifecycle.default' configuration parameter.\n\n\nExpecting:\n &lt;\"b\"&gt;\nto be equal to:\n &lt;\"a\"&gt;\nbut was not.\nComparison Failure: \nExpected :\"a\"\nActual   :\"b\"\n&lt;Click to see difference&gt;\n\n\n\n\nExpecting:\n &lt;\"c\"&gt;\nto be equal to:\n &lt;\"a\"&gt;\nbut was not.\nComparison Failure: \nExpected :\"a\"\nActual   :\"c\"\n&lt;Click to see difference&gt;\n\n\n\norg.assertj.core.error.AssertJMultipleFailuresError: \nMultiple Failures (2 failures)\n-- failure 1 --\nExpecting:\n &lt;\"b\"&gt;\nto be equal to:\n &lt;\"a\"&gt;\nbut was not.\n-- failure 2 --\nExpecting:\n &lt;\"c\"&gt;\nto be equal to:\n &lt;\"a\"&gt;\nbut was not.\n\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAfterTestExecutionCallbacks$8(TestMethodTestDescriptor.java:229)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$12(TestMethodTestDescriptor.java:269)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeAllAfterMethodsOrCallbacks$13(TestMethodTestDescriptor.java:269)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAllAfterMethodsOrCallbacks(TestMethodTestDescriptor.java:268)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeAfterTestExecutionCallbacks(TestMethodTestDescriptor.java:228)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:133)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\n</code></pre></div>\n<h3 dir=\"auto\">Static method</h3>\n<p dir=\"auto\">But using the static method it does show the line number and even the full stack trace (arguably too much though):</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyTest {\n\n    @Test\n    void bla() {\n        SoftAssertions.assertSoftly(softly -&gt; {\n            softly.assertThat(&quot;a&quot;).isEqualTo(&quot;a&quot;);\n            softly.assertThat(&quot;b&quot;).isEqualTo(&quot;a&quot;);\n            softly.assertThat(&quot;c&quot;).isEqualTo(&quot;a&quot;);\n            softly.assertThat(&quot;a&quot;).isEqualTo(&quot;a&quot;);\n        });\n    }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyTest</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-en\">bla</span>() {\n        <span class=\"pl-s1\">SoftAssertions</span>.<span class=\"pl-en\">assertSoftly</span>(<span class=\"pl-s1\">softly</span> -&gt; {\n            <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"a\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n            <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"b\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n            <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"c\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n            <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"a\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"a\"</span>);\n        });\n    }\n}</pre></div>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"INFO: Using test instance lifecycle mode 'PER_CLASS' set via the 'junit.jupiter.testinstance.lifecycle.default' configuration parameter.\n\norg.opentest4j.AssertionFailedError: \nExpecting:\n &lt;&quot;b&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\nat MyTest.lambda$bla$0(MyTest.java:18)\n\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat com.MyTest.lambda$bla$0(MyTest.java:18)\n\tat com.MyTest.bla(MyTest.java:16)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\n\n\norg.opentest4j.AssertionFailedError: \nExpecting:\n &lt;&quot;c&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\nat MyTest.lambda$bla$0(MyTest.java:19)\n\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat com.MyTest.lambda$bla$0(MyTest.java:19)\n\tat com.MyTest.bla(MyTest.java:16)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\n\n\norg.assertj.core.error.AssertJMultipleFailuresError: \nMultiple Failures (2 failures)\n-- failure 1 --\nExpecting:\n &lt;&quot;b&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\nat MyTest.lambda$bla$0(MyTest.java:18)\n-- failure 2 --\nExpecting:\n &lt;&quot;c&quot;&gt;\nto be equal to:\n &lt;&quot;a&quot;&gt;\nbut was not.\nat MyTest.lambda$bla$0(MyTest.java:19)\n\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)\n\tat com.MyTest.bla(MyTest.java:16)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566)\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1541)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:220)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:53)\"><pre><span class=\"pl-c1\">INFO</span>: <span class=\"pl-smi\">Using</span> <span class=\"pl-s1\">test</span> <span class=\"pl-smi\">instance</span> <span class=\"pl-s1\">lifecycle</span> <span class=\"pl-s1\">mode</span> <span class=\"pl-s\">'PER_CLASS'</span> <span class=\"pl-s1\">set</span> <span class=\"pl-s1\">via</span> <span class=\"pl-s1\">the</span> <span class=\"pl-s\">'junit.jupiter.testinstance.lifecycle.default'</span> <span class=\"pl-s1\">configuration</span> <span class=\"pl-smi\">parameter</span>.\n\n<span class=\"pl-smi\">org</span>.<span class=\"pl-smi\">opentest4j</span>.<span class=\"pl-smi\">AssertionFailedError</span>: \n<span class=\"pl-s1\">Expecting</span>:\n &lt;<span class=\"pl-s\">\"b\"</span>&gt;\n<span class=\"pl-k\">to</span> <span class=\"pl-s1\">be</span> <span class=\"pl-smi\">equal</span> <span class=\"pl-s1\">to</span>:\n &lt;<span class=\"pl-s\">\"a\"</span>&gt;\n<span class=\"pl-smi\">but</span> <span class=\"pl-s1\">was</span> <span class=\"pl-smi\">not</span>.\n<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">MyTest</span>.<span class=\"pl-en\">lambda$bla$0</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">18</span>)\n\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeConstructorAccessorImpl</span>.<span class=\"pl-en\">newInstance0</span>(<span class=\"pl-smi\">Native</span> <span class=\"pl-s1\">Method</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeConstructorAccessorImpl</span>.<span class=\"pl-s1\">newInstance</span>(<span class=\"pl-smi\">NativeConstructorAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">62</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">DelegatingConstructorAccessorImpl</span>.<span class=\"pl-en\">newInstance</span>(<span class=\"pl-smi\">DelegatingConstructorAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">45</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">MyTest</span>.<span class=\"pl-s1\">lambda$bla$0</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">18</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">MyTest</span>.<span class=\"pl-en\">bla</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">16</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeMethodAccessorImpl</span>.<span class=\"pl-en\">invoke0</span>(<span class=\"pl-smi\">Native</span> <span class=\"pl-s1\">Method</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeMethodAccessorImpl</span>.<span class=\"pl-s1\">invoke</span>(<span class=\"pl-smi\">NativeMethodAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">62</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">DelegatingMethodAccessorImpl</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">DelegatingMethodAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">43</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">lang</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">Method</span>.<span class=\"pl-s1\">invoke</span>(<span class=\"pl-smi\">Method</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">566</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">commons</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ReflectionUtils</span>.<span class=\"pl-en\">invokeMethod</span>(<span class=\"pl-smi\">ReflectionUtils</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">688</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">MethodInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">MethodInvocation</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">60</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain$ValidatingInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">131</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">intercept</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">149</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">interceptTestableMethod</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">140</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">interceptTestMethod</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker$ReflectiveInterceptorCall</span>.<span class=\"pl-en\">lambda$ofVoidMethod$0</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">115</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">lambda$invoke$0</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">105</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain$InterceptedInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">106</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">64</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">chainAndInvoke</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">45</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">37</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">104</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">98</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">lambda$invokeTestMethod$6</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">210</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">invokeTestMethod</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">206</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">131</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">65</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">139</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ArrayList</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-smi\">ArrayList</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">1541</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-s1\">invokeAll</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">38</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">143</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ArrayList</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-smi\">ArrayList</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">1541</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-s1\">invokeAll</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">38</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">143</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-en\">submit</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">32</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">HierarchicalTestExecutor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">HierarchicalTestExecutor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">57</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">HierarchicalTestEngine</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">HierarchicalTestEngine</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">51</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">108</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">88</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">lambda$execute$0</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">54</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">withInterceptedStreams</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">67</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">52</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">DefaultLauncher</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">DefaultLauncher</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">96</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">DefaultLauncher</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">DefaultLauncher</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">75</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">junit5</span>.<span class=\"pl-c1\">JUnit5IdeaTestRunner</span>.<span class=\"pl-en\">startRunnerWithArgs</span>(<span class=\"pl-smi\">JUnit5IdeaTestRunner</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">71</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">IdeaTestRunner$Repeater</span>.<span class=\"pl-en\">startRunnerWithArgs</span>(<span class=\"pl-smi\">IdeaTestRunner</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">33</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">JUnitStarter</span>.<span class=\"pl-en\">prepareStreamsAndStart</span>(<span class=\"pl-smi\">JUnitStarter</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">220</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">JUnitStarter</span>.<span class=\"pl-en\">main</span>(<span class=\"pl-smi\">JUnitStarter</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">53</span>)\n\n\n<span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">opentest4j</span>.<span class=\"pl-s1\">AssertionFailedError</span>: \n<span class=\"pl-s1\">Expecting</span>:\n &lt;<span class=\"pl-s\">\"c\"</span>&gt;\n<span class=\"pl-smi\">to</span> <span class=\"pl-s1\">be</span> <span class=\"pl-smi\">equal</span> <span class=\"pl-s1\">to</span>:\n &lt;<span class=\"pl-s\">\"a\"</span>&gt;\n<span class=\"pl-smi\">but</span> <span class=\"pl-s1\">was</span> <span class=\"pl-smi\">not</span>.\n<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">MyTest</span>.<span class=\"pl-en\">lambda$bla$0</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">19</span>)\n\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeConstructorAccessorImpl</span>.<span class=\"pl-en\">newInstance0</span>(<span class=\"pl-smi\">Native</span> <span class=\"pl-s1\">Method</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeConstructorAccessorImpl</span>.<span class=\"pl-s1\">newInstance</span>(<span class=\"pl-smi\">NativeConstructorAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">62</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">DelegatingConstructorAccessorImpl</span>.<span class=\"pl-en\">newInstance</span>(<span class=\"pl-smi\">DelegatingConstructorAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">45</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">MyTest</span>.<span class=\"pl-s1\">lambda$bla$0</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">19</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">MyTest</span>.<span class=\"pl-en\">bla</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">16</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeMethodAccessorImpl</span>.<span class=\"pl-en\">invoke0</span>(<span class=\"pl-smi\">Native</span> <span class=\"pl-s1\">Method</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeMethodAccessorImpl</span>.<span class=\"pl-s1\">invoke</span>(<span class=\"pl-smi\">NativeMethodAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">62</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">DelegatingMethodAccessorImpl</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">DelegatingMethodAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">43</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">lang</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">Method</span>.<span class=\"pl-s1\">invoke</span>(<span class=\"pl-smi\">Method</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">566</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">commons</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ReflectionUtils</span>.<span class=\"pl-en\">invokeMethod</span>(<span class=\"pl-smi\">ReflectionUtils</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">688</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">MethodInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">MethodInvocation</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">60</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain$ValidatingInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">131</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">intercept</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">149</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">interceptTestableMethod</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">140</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">interceptTestMethod</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker$ReflectiveInterceptorCall</span>.<span class=\"pl-en\">lambda$ofVoidMethod$0</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">115</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">lambda$invoke$0</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">105</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain$InterceptedInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">106</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">64</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">chainAndInvoke</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">45</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">37</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">104</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">98</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">lambda$invokeTestMethod$6</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">210</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">invokeTestMethod</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">206</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">131</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">65</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">139</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ArrayList</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-smi\">ArrayList</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">1541</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-s1\">invokeAll</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">38</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">143</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ArrayList</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-smi\">ArrayList</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">1541</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-s1\">invokeAll</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">38</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">143</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-en\">submit</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">32</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">HierarchicalTestExecutor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">HierarchicalTestExecutor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">57</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">HierarchicalTestEngine</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">HierarchicalTestEngine</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">51</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">108</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">88</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">lambda$execute$0</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">54</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">withInterceptedStreams</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">67</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">52</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">DefaultLauncher</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">DefaultLauncher</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">96</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">DefaultLauncher</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">DefaultLauncher</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">75</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">junit5</span>.<span class=\"pl-c1\">JUnit5IdeaTestRunner</span>.<span class=\"pl-en\">startRunnerWithArgs</span>(<span class=\"pl-smi\">JUnit5IdeaTestRunner</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">71</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">IdeaTestRunner$Repeater</span>.<span class=\"pl-en\">startRunnerWithArgs</span>(<span class=\"pl-smi\">IdeaTestRunner</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">33</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">JUnitStarter</span>.<span class=\"pl-en\">prepareStreamsAndStart</span>(<span class=\"pl-smi\">JUnitStarter</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">220</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">JUnitStarter</span>.<span class=\"pl-en\">main</span>(<span class=\"pl-smi\">JUnitStarter</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">53</span>)\n\n\n<span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">assertj</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">error</span>.<span class=\"pl-s1\">AssertJMultipleFailuresError</span>: \n<span class=\"pl-s1\">Multiple</span> <span class=\"pl-s1\">Failures</span> (<span class=\"pl-c1\">2</span> <span class=\"pl-s1\">failures</span>)\n-- <span class=\"pl-s1\">failure</span> <span class=\"pl-c1\">1</span> --\n<span class=\"pl-s1\">Expecting</span>:\n &lt;<span class=\"pl-s\">\"b\"</span>&gt;\n<span class=\"pl-smi\">to</span> <span class=\"pl-s1\">be</span> <span class=\"pl-smi\">equal</span> <span class=\"pl-s1\">to</span>:\n &lt;<span class=\"pl-s\">\"a\"</span>&gt;\n<span class=\"pl-smi\">but</span> <span class=\"pl-s1\">was</span> <span class=\"pl-smi\">not</span>.\n<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">MyTest</span>.<span class=\"pl-en\">lambda$bla$0</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">18</span>)\n-- <span class=\"pl-s1\">failure</span> <span class=\"pl-c1\">2</span> --\n<span class=\"pl-s1\">Expecting</span>:\n &lt;<span class=\"pl-s\">\"c\"</span>&gt;\n<span class=\"pl-smi\">to</span> <span class=\"pl-s1\">be</span> <span class=\"pl-smi\">equal</span> <span class=\"pl-s1\">to</span>:\n &lt;<span class=\"pl-s\">\"a\"</span>&gt;\n<span class=\"pl-smi\">but</span> <span class=\"pl-s1\">was</span> <span class=\"pl-smi\">not</span>.\n<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">MyTest</span>.<span class=\"pl-en\">lambda$bla$0</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">19</span>)\n\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeConstructorAccessorImpl</span>.<span class=\"pl-en\">newInstance0</span>(<span class=\"pl-smi\">Native</span> <span class=\"pl-s1\">Method</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeConstructorAccessorImpl</span>.<span class=\"pl-s1\">newInstance</span>(<span class=\"pl-smi\">NativeConstructorAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">62</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">DelegatingConstructorAccessorImpl</span>.<span class=\"pl-en\">newInstance</span>(<span class=\"pl-smi\">DelegatingConstructorAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">45</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">MyTest</span>.<span class=\"pl-s1\">bla</span>(<span class=\"pl-smi\">MyTest</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">16</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeMethodAccessorImpl</span>.<span class=\"pl-en\">invoke0</span>(<span class=\"pl-smi\">Native</span> <span class=\"pl-s1\">Method</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">NativeMethodAccessorImpl</span>.<span class=\"pl-s1\">invoke</span>(<span class=\"pl-smi\">NativeMethodAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">62</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">jdk</span>.<span class=\"pl-s1\">internal</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">DelegatingMethodAccessorImpl</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">DelegatingMethodAccessorImpl</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">43</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">lang</span>.<span class=\"pl-s1\">reflect</span>.<span class=\"pl-s1\">Method</span>.<span class=\"pl-s1\">invoke</span>(<span class=\"pl-smi\">Method</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">566</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">commons</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ReflectionUtils</span>.<span class=\"pl-en\">invokeMethod</span>(<span class=\"pl-smi\">ReflectionUtils</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">688</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">MethodInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">MethodInvocation</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">60</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain$ValidatingInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">131</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">intercept</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">149</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">interceptTestableMethod</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">140</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">extension</span>.<span class=\"pl-s1\">TimeoutExtension</span>.<span class=\"pl-en\">interceptTestMethod</span>(<span class=\"pl-smi\">TimeoutExtension</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker$ReflectiveInterceptorCall</span>.<span class=\"pl-en\">lambda$ofVoidMethod$0</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">115</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">lambda$invoke$0</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">105</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain$InterceptedInvocation</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">106</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">proceed</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">64</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">chainAndInvoke</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">45</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">InvocationInterceptorChain</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">InvocationInterceptorChain</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">37</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">104</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">execution</span>.<span class=\"pl-s1\">ExecutableInvoker</span>.<span class=\"pl-en\">invoke</span>(<span class=\"pl-smi\">ExecutableInvoker</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">98</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">lambda$invokeTestMethod$6</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">210</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">invokeTestMethod</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">206</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">131</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">jupiter</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">descriptor</span>.<span class=\"pl-s1\">TestMethodTestDescriptor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">TestMethodTestDescriptor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">65</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">139</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ArrayList</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-smi\">ArrayList</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">1541</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-s1\">invokeAll</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">38</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">143</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">base</span>/<span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ArrayList</span>.<span class=\"pl-en\">forEach</span>(<span class=\"pl-smi\">ArrayList</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">1541</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-s1\">invokeAll</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">38</span>)\n\t<span class=\"pl-smi\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$5</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">143</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$7</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">129</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">Node</span>.<span class=\"pl-en\">around</span>(<span class=\"pl-smi\">Node</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">137</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">lambda$executeRecursively$8</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">127</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">ThrowableCollector</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">ThrowableCollector</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">73</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">executeRecursively</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">126</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">NodeTestTask</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">NodeTestTask</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">84</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-en\">submit</span>(<span class=\"pl-smi\">SameThreadHierarchicalTestExecutorService</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">32</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">HierarchicalTestExecutor</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">HierarchicalTestExecutor</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">57</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">engine</span>.<span class=\"pl-s1\">support</span>.<span class=\"pl-s1\">hierarchical</span>.<span class=\"pl-s1\">HierarchicalTestEngine</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">HierarchicalTestEngine</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">51</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">108</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">88</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">lambda$execute$0</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">54</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">withInterceptedStreams</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">67</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">EngineExecutionOrchestrator</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">EngineExecutionOrchestrator</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">52</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">DefaultLauncher</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">DefaultLauncher</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">96</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">platform</span>.<span class=\"pl-s1\">launcher</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">DefaultLauncher</span>.<span class=\"pl-en\">execute</span>(<span class=\"pl-smi\">DefaultLauncher</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">75</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">junit5</span>.<span class=\"pl-c1\">JUnit5IdeaTestRunner</span>.<span class=\"pl-en\">startRunnerWithArgs</span>(<span class=\"pl-smi\">JUnit5IdeaTestRunner</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">71</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">IdeaTestRunner$Repeater</span>.<span class=\"pl-en\">startRunnerWithArgs</span>(<span class=\"pl-smi\">IdeaTestRunner</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">33</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">JUnitStarter</span>.<span class=\"pl-en\">prepareStreamsAndStart</span>(<span class=\"pl-smi\">JUnitStarter</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">220</span>)\n\t<span class=\"pl-s1\">at</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">intellij</span>.<span class=\"pl-s1\">rt</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-c1\">JUnitStarter</span>.<span class=\"pl-en\">main</span>(<span class=\"pl-smi\">JUnitStarter</span>.<span class=\"pl-smi\">java</span>:<span class=\"pl-c1\">53</span>)</pre></div>","resourcePath":"/assertj/assertj/issues/2092","createdAt":"2021-01-02T18:10:12Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"fix issue 971:to have ability to ignore all assert when expected value is null","url":"https://github.com/assertj/assertj/pull/2179","resourcePath":"/assertj/assertj/pull/2179","createdAt":"2021-04-20T09:11:30Z","number":2179,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_describedAs_with_description_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_describedAs_with_text_description_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_equal_hashCode_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/atomic/referencearray/AtomicReferenceArrayAssert_filteredOn_function_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/bytearray/ByteArrayAssert_asHexString_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/bytearray/ByteArrayAssert_asString_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/bytearray/ByteArrayAssert_asString_with_charset_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/date/DateAssert_setLenientDateParsing_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/double_/DoubleAssert_isEqualTo_double_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/filter/Filter_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjE5MTQ0ODE0Ojg1MTQyNGMxMjFkNjUyMjkyMzQ4MWI0YWRiODMzNWZlODIyNzA2NDM=","url":"https://github.com/assertj/assertj/pull/2179/commits/851424c121d6522923481b4adb8335fe82270643"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":971,"url":"https://github.com/assertj/assertj/issues/971","title":"New Feature: to have ability to ignore all assert when expected value is null","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">to have ability to ignore all assert when expected value is null.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Let's call the new method \"ignoreAssertWhenExpectedIsNull\"</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;Hello World!&quot;).ignoreAssertWhenExpectedIsNull().isEqualTo(null); // will pass\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Hello World!\"</span>).<span class=\"pl-en\">ignoreAssertWhenExpectedIsNull</span>().<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// will pass</span></pre></div>\n<h4 dir=\"auto\">Further more</h4>\n<p dir=\"auto\">If go further, we could have a method as ignoreAssertWhen(IgnoreType ignoreType)</p>\n<p dir=\"auto\">Above would be</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;Hello World!&quot;).ignoreAssertWhen(IgnoreType.ExpectedIsNull).isEqualTo(null); // will pass\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Hello World!\"</span>).<span class=\"pl-en\">ignoreAssertWhen</span>(<span class=\"pl-smi\">IgnoreType</span>.<span class=\"pl-s1\">ExpectedIsNull</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// will pass</span></pre></div>\n<p dir=\"auto\">IgnoreType could contains</p>\n<ul dir=\"auto\">\n<li>ExpectedIsNull</li>\n<li>ActualIsNull</li>\n<li>EitherIsNull</li>\n</ul>","resourcePath":"/assertj/assertj/issues/971","createdAt":"2017-04-11T11:19:48Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"status: pending investigation"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"GH-2134 avoid a copy in assertContains when actual is already a Collection","url":"https://github.com/assertj/assertj/pull/2220","resourcePath":"/assertj/assertj/pull/2220","createdAt":"2021-05-18T21:06:25Z","number":2220,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Iterables.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/iterables/Iterables_assertContains_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjQ3MDk4MTMwOmFlYjNhY2Y5ZjBhMzg4ZDgwYTQ3OGM1OGI4NWE0ZGI5Y2VkYmYyMjE=","url":"https://github.com/assertj/assertj/pull/2220/commits/aeb3acf9f0a388d80a478c58b85a4db9cedbf221"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2134,"url":"https://github.com/assertj/assertj/issues/2134","title":"Avoid copy of Collection instances in Iterables#assertContains and Iterables#assertContainsAll","bodyHTML":"<p dir=\"auto\">Following <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"814750868\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2132\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2132/hovercard?comment_id=784523615&amp;comment_type=issue_comment\" href=\"https://github.com/assertj/assertj/issues/2132#issuecomment-784523615\">#2132 (comment)</a> and <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"814750868\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2132\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2132/hovercard?comment_id=785406008&amp;comment_type=issue_comment\" href=\"https://github.com/assertj/assertj/issues/2132#issuecomment-785406008\">#2132 (comment)</a>, the current implementation of <code class=\"notranslate\">Iterables#assertContains</code> and <code class=\"notranslate\">Iterables#assertContainsAll</code> could be improved avoiding the creation of a new array list when <code class=\"notranslate\">actual</code> is a <code class=\"notranslate\">Collection</code> instance.</p>","resourcePath":"/assertj/assertj/issues/2134","createdAt":"2021-02-24T23:10:12Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix containsSubsequence failing when multiple empty subsequence.","url":"https://github.com/assertj/assertj/pull/2169","resourcePath":"/assertj/assertj/pull/2169","createdAt":"2021-04-16T09:00:31Z","number":2169,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Strings.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertContainsSubsequence_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjE2NjY4MDUwOmE2MDczZGVjNTg2ODA0NjJiNjFmY2U0MDA0OWYyYTkxYmEwZWE0ZjY=","url":"https://github.com/assertj/assertj/pull/2169/commits/a6073dec58680462b61fce40049f2a91ba0ea4f6"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2158,"url":"https://github.com/assertj/assertj/issues/2158","title":"containsSubsequence fails to check presence of multiple EMPTY Strings","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">containsSubsequence should not fail to check presence of multiple EMPTY Strings in EMPTY String</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import org.assertj.core.api.Assertions;\nimport org.testng.annotations.Test;\n\npublic class T {\n\n    @Test\n    public void test(){\n        Assertions.assertThat(&quot;&quot;)\n            .containsSubsequence(&quot;&quot;) // passes\n            .containsSubsequence(&quot;&quot;, &quot;&quot;); // fails\n    }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">assertj</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">api</span>.<span class=\"pl-s1\">Assertions</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">testng</span>.<span class=\"pl-s1\">annotations</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">T</span> {\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">test</span>(){\n        <span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"\"</span>)\n            .<span class=\"pl-en\">containsSubsequence</span>(<span class=\"pl-s\">\"\"</span>) <span class=\"pl-c\">// passes</span>\n            .<span class=\"pl-en\">containsSubsequence</span>(<span class=\"pl-s\">\"\"</span>, <span class=\"pl-s\">\"\"</span>); <span class=\"pl-c\">// fails</span>\n    }\n}</pre></div>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\n\tat java.base/java.lang.String.substring(String.java:1837)\n\tat org.assertj.core.internal.Strings.removeUpTo(Strings.java:1049)\n\tat org.assertj.core.internal.Strings.assertContainsSubsequence(Strings.java:1038)\n\tat org.assertj.core.api.AbstractCharSequenceAssert.containsSubsequence(AbstractCharSequenceAssert.java:769)\"><pre class=\"notranslate\"><code>java.lang.StringIndexOutOfBoundsException: String index out of range: -1\n\n\tat java.base/java.lang.String.substring(String.java:1837)\n\tat org.assertj.core.internal.Strings.removeUpTo(Strings.java:1049)\n\tat org.assertj.core.internal.Strings.assertContainsSubsequence(Strings.java:1038)\n\tat org.assertj.core.api.AbstractCharSequenceAssert.containsSubsequence(AbstractCharSequenceAssert.java:769)\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/2158","createdAt":"2021-04-03T12:34:24Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Make map containsAllEntriesOf assertion pass on empty other map ","url":"https://github.com/assertj/assertj/pull/2140","resourcePath":"/assertj/assertj/pull/2140","createdAt":"2021-03-07T15:27:29Z","number":2140,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractMapAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/ErrorMessages.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Maps.java"}},{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/api/map/MapAssert_containsAllEntriesOf_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsAllEntriesOf_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTg2MjcxNjM4OmU5N2M0ZDhlMWE2N2Y2NzVhZmYzYzI2NTFlYjM0OWIxODRlZmFmYzY=","url":"https://github.com/assertj/assertj/pull/2140/commits/e97c4d8e1a67f675aff3c2651eb349b184efafc6"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2124,"url":"https://github.com/assertj/assertj/issues/2124","title":"MapAssert::containsAllEntriesOf fails for non-empty actual and empty other map","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\"><code class=\"notranslate\">MapAssert::containsAllEntriesOf</code> throws assertion error for non empty actual and empty other map:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: actual is not empty\n\n\tat org.assertj.core.internal.Maps.failIfEmptySinceActualIsNotEmpty(Maps.java:884)\n\tat org.assertj.core.internal.Maps.assertContains(Maps.java:350)\n\tat org.assertj.core.api.AbstractMapAssert.containsAllEntriesOf(AbstractMapAssert.java:580)\n        // ...\"><pre class=\"notranslate\"><code>java.lang.AssertionError: actual is not empty\n\n\tat org.assertj.core.internal.Maps.failIfEmptySinceActualIsNotEmpty(Maps.java:884)\n\tat org.assertj.core.internal.Maps.assertContains(Maps.java:350)\n\tat org.assertj.core.api.AbstractMapAssert.containsAllEntriesOf(AbstractMapAssert.java:580)\n        // ...\n</code></pre></div>\n<p dir=\"auto\">Shouldn't this succeed as it does contain all 0 entries in the expected map? IMHO this would be more consistent with  <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"716394106\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2013\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2013/hovercard\" href=\"https://github.com/assertj/assertj/issues/2013\">#2013</a> and non empty check should be explicit.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Map&lt;Ring, TolkienCharacter&gt; ringBearers = new HashMap&lt;&gt;();\nringBearers.put(nenya, galadriel);\nringBearers.put(narya, gandalf);\nringBearers.put(vilya, elrond);\nringBearers.put(oneRing, frodo);\n\nMap&lt;Ring, TolkienCharacter&gt; octopusRingBearers = new HashMap&lt;&gt;();\n\n// java.lang.AssertionError: actual is not empty\nassertThat(ringBearers).containsAllEntriesOf(octopusRingBearers);\"><pre><span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">Ring</span>, <span class=\"pl-smi\">TolkienCharacter</span>&gt; <span class=\"pl-s1\">ringBearers</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span>&lt;&gt;();\n<span class=\"pl-s1\">ringBearers</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">nenya</span>, <span class=\"pl-s1\">galadriel</span>);\n<span class=\"pl-s1\">ringBearers</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">narya</span>, <span class=\"pl-s1\">gandalf</span>);\n<span class=\"pl-s1\">ringBearers</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">vilya</span>, <span class=\"pl-s1\">elrond</span>);\n<span class=\"pl-s1\">ringBearers</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s1\">oneRing</span>, <span class=\"pl-s1\">frodo</span>);\n\n<span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">Ring</span>, <span class=\"pl-smi\">TolkienCharacter</span>&gt; <span class=\"pl-s1\">octopusRingBearers</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span>&lt;&gt;();\n\n<span class=\"pl-c\">// java.lang.AssertionError: actual is not empty</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">ringBearers</span>).<span class=\"pl-en\">containsAllEntriesOf</span>(<span class=\"pl-s1\">octopusRingBearers</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/2124","createdAt":"2021-02-17T20:21:24Z","labels":{"edges":[{"node":{"name":"breaking change"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Do not create new map when testing for containsOnly and containsOnlyKeys for maps","url":"https://github.com/assertj/assertj/pull/2160","resourcePath":"/assertj/assertj/pull/2160","createdAt":"2021-04-06T15:44:23Z","number":2160,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"pom.xml"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Maps.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsExactly_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsKey_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsOnlyKeys_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsOnly_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjA5OTU5NDU3OjY0MzE4YzRjMzkyMzQzZWM5OWM4MjczN2Q0YjE2ZjY2ZjY0MmU0YTE=","url":"https://github.com/assertj/assertj/pull/2160/commits/64318c4c392343ec99c82737d4b16f66f642e4a1"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2159,"url":"https://github.com/assertj/assertj/issues/2159","title":"Map `containsOnly` assertions don't work correctly with case insensitive keys","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">When using case insensitive maps the map assertions for containsOnly are not working correctly.<br>\nThe reason for this is due to the fact that the actual map is copied into a <code class=\"notranslate\">LinkedHashMap</code> and thus the checks are not using the map.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Map&lt;String, String&gt; map = new LinkedCaseInsensitiveMap&lt;&gt;();\nmap.put(&quot;TEST&quot;, &quot;value&quot;);\"><pre><span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">map</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">LinkedCaseInsensitiveMap</span>&lt;&gt;();\n<span class=\"pl-s1\">map</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s\">\"TEST\"</span>, <span class=\"pl-s\">\"value\"</span>);</pre></div>\n<p dir=\"auto\">The following assertions will pass</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(map).containsKey(&quot;test&quot;);\nassertThat(map).contains(entry(&quot;test&quot;, &quot;value&quot;));\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">map</span>).<span class=\"pl-en\">containsKey</span>(<span class=\"pl-s\">\"test\"</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">map</span>).<span class=\"pl-en\">contains</span>(<span class=\"pl-en\">entry</span>(<span class=\"pl-s\">\"test\"</span>, <span class=\"pl-s\">\"value\"</span>));</pre></div>\n<p dir=\"auto\">The following assertions will fail</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(map).containsOnlyKeys(&quot;test&quot;);\nassertThat(map).containsOnly(entry(&quot;test&quot;, &quot;value&quot;));\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">map</span>).<span class=\"pl-en\">containsOnlyKeys</span>(<span class=\"pl-s\">\"test\"</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">map</span>).<span class=\"pl-en\">containsOnly</span>(<span class=\"pl-en\">entry</span>(<span class=\"pl-s\">\"test\"</span>, <span class=\"pl-s\">\"value\"</span>));</pre></div>\n<p dir=\"auto\">Note: <code class=\"notranslate\">LinkedCaseInsensitiveMap</code> is from Spring.</p>\n<p dir=\"auto\">If you agree I can work on a PR to change the mechanism that is used for validating <code class=\"notranslate\">containsOnly</code> entries.</p>","resourcePath":"/assertj/assertj/issues/2159","createdAt":"2021-04-06T07:20:13Z","labels":{"edges":[{"node":{"name":"type: bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":" fix issue 971:to have ability to ignore all assert when expected value is null","url":"https://github.com/assertj/assertj/pull/2182","resourcePath":"/assertj/assertj/pull/2182","createdAt":"2021-04-21T07:07:33Z","number":2182,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_as_with_description_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_as_with_text_description_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_describedAs_with_description_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_describedAs_with_text_description_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_equal_hashCode_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjE5OTEyOTYxOmU3ZmNmZWNmNDlhNDIwOTY0YmJiNzZlMTQ5OTY3NjQ0NGJkODViZGM=","url":"https://github.com/assertj/assertj/pull/2182/commits/e7fcfecf49a420964bbb76e1499676444bd85bdc"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":971,"url":"https://github.com/assertj/assertj/issues/971","title":"New Feature: to have ability to ignore all assert when expected value is null","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">to have ability to ignore all assert when expected value is null.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Let's call the new method \"ignoreAssertWhenExpectedIsNull\"</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;Hello World!&quot;).ignoreAssertWhenExpectedIsNull().isEqualTo(null); // will pass\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Hello World!\"</span>).<span class=\"pl-en\">ignoreAssertWhenExpectedIsNull</span>().<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// will pass</span></pre></div>\n<h4 dir=\"auto\">Further more</h4>\n<p dir=\"auto\">If go further, we could have a method as ignoreAssertWhen(IgnoreType ignoreType)</p>\n<p dir=\"auto\">Above would be</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;Hello World!&quot;).ignoreAssertWhen(IgnoreType.ExpectedIsNull).isEqualTo(null); // will pass\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Hello World!\"</span>).<span class=\"pl-en\">ignoreAssertWhen</span>(<span class=\"pl-smi\">IgnoreType</span>.<span class=\"pl-s1\">ExpectedIsNull</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// will pass</span></pre></div>\n<p dir=\"auto\">IgnoreType could contains</p>\n<ul dir=\"auto\">\n<li>ExpectedIsNull</li>\n<li>ActualIsNull</li>\n<li>EitherIsNull</li>\n</ul>","resourcePath":"/assertj/assertj/issues/971","createdAt":"2017-04-11T11:19:48Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"status: pending investigation"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Prevent compiler warning when using extracting with SoftAssertions","url":"https://github.com/assertj/assertj/pull/2162","resourcePath":"/assertj/assertj/pull/2162","createdAt":"2021-04-06T16:41:07Z","number":2162,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractObjectAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/SoftAssertionsTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjA5OTk5MTEyOjM4OGZiMGFiMGM5MjY0NWEzMTE5OGZjNDNmMTUzNmJmZTYxY2ZiZjI=","url":"https://github.com/assertj/assertj/pull/2162/commits/388fb0ab0c92645a31198fc43f1536bfe61cfbf2"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2161,"url":"https://github.com/assertj/assertj/issues/2161","title":"Using softAssertions with extracting leads to warning related to unchecked generics array creation for varargs parameter","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">When I use <code class=\"notranslate\">SoftAssertions</code> combined with <code class=\"notranslate\">extracting</code>, my IDE complains with the following warning</p>\n<blockquote>\n<p dir=\"auto\">Unchecked generics array creation for varargs parameter</p>\n</blockquote>\n<p dir=\"auto\">When I use the same code with standard <code class=\"notranslate\">Assertions</code>, the warning is not there.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">With warning</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    TolkienCharacter legolas = TolkienCharacter.of(&quot;Legolas&quot;, 1000, ELF);\n\n    softly.assertThat(legolas)\n          .extracting(TolkienCharacter::getName, TolkienCharacter::getAge)\n          .contains(&quot;Legolas&quot;, 1000);\"><pre>    <span class=\"pl-smi\">TolkienCharacter</span> <span class=\"pl-s1\">legolas</span> = <span class=\"pl-s1\">TolkienCharacter</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"Legolas\"</span>, <span class=\"pl-c1\">1000</span>, <span class=\"pl-c1\">ELF</span>);\n\n    <span class=\"pl-s1\">softly</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">legolas</span>)\n          .<span class=\"pl-en\">extracting</span>(<span class=\"pl-s1\">TolkienCharacter</span>::<span class=\"pl-s1\">getName</span>, <span class=\"pl-s1\">TolkienCharacter</span>::<span class=\"pl-s1\">getAge</span>)\n          .<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"Legolas\"</span>, <span class=\"pl-c1\">1000</span>);</pre></div>\n<p dir=\"auto\">Without warning</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    TolkienCharacter legolas = TolkienCharacter.of(&quot;Legolas&quot;, 1000, ELF);\n\n    assertThat(legolas)\n          .extracting(TolkienCharacter::getName, TolkienCharacter::getAge)\n          .contains(&quot;Legolas&quot;, 1000);\"><pre>    <span class=\"pl-smi\">TolkienCharacter</span> <span class=\"pl-s1\">legolas</span> = <span class=\"pl-s1\">TolkienCharacter</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"Legolas\"</span>, <span class=\"pl-c1\">1000</span>, <span class=\"pl-c1\">ELF</span>);\n\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">legolas</span>)\n          .<span class=\"pl-en\">extracting</span>(<span class=\"pl-s1\">TolkienCharacter</span>::<span class=\"pl-s1\">getName</span>, <span class=\"pl-s1\">TolkienCharacter</span>::<span class=\"pl-s1\">getAge</span>)\n          .<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"Legolas\"</span>, <span class=\"pl-c1\">1000</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/2161","createdAt":"2021-04-06T16:32:41Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Honor map key comparison semantics with `containsOnly` assertions","url":"https://github.com/assertj/assertj/pull/2167","resourcePath":"/assertj/assertj/pull/2167","createdAt":"2021-04-11T10:56:21Z","number":2167,"mergeCommit":{"oid":"ae1c70e70d16f5bee969e7f6925fee9777e29025","message":"Honor map key comparison semantics with `containsOnly` assertions (#2167)\n\n* Honor map key comparison semantics\r\nFixes #2159\r\n\r\nCo-authored-by: Filip Hrisafov <filip.hrisafov@flowable.com>\r\nCo-authored-by: Stefano Cordio <stefano.cordio@gmail.com>","commitUrl":"https://github.com/assertj/assertj/commit/ae1c70e70d16f5bee969e7f6925fee9777e29025","parents":{"nodes":[{"oid":"1c41f5383c1801d8ec5accb23cae27fa61ee48a5","message":"Use the pitest update PR flow.\nWas previously a copy of the receive flow (dumb copy paste of mine)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractMapAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Maps.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/util/Lists.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/util/Sets.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/MapsBaseTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsKey_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsOnlyKeys_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsOnly_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertDoesNotContainKeys_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/test/Maps.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjEzMDUyMzEzOmU5OGU3YmU1ZmQ2YTk3NDg1M2RlMWU3NmI4ZjA1OTJlMGU2OTJmZTM=","url":"https://github.com/assertj/assertj/pull/2167/commits/e98e7be5fd6a974853de1e76b8f0592e0e692fe3"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2159,"url":"https://github.com/assertj/assertj/issues/2159","title":"Map `containsOnly` assertions don't work correctly with case insensitive keys","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">When using case insensitive maps the map assertions for containsOnly are not working correctly.<br>\nThe reason for this is due to the fact that the actual map is copied into a <code class=\"notranslate\">LinkedHashMap</code> and thus the checks are not using the map.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Map&lt;String, String&gt; map = new LinkedCaseInsensitiveMap&lt;&gt;();\nmap.put(&quot;TEST&quot;, &quot;value&quot;);\"><pre><span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">map</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">LinkedCaseInsensitiveMap</span>&lt;&gt;();\n<span class=\"pl-s1\">map</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s\">\"TEST\"</span>, <span class=\"pl-s\">\"value\"</span>);</pre></div>\n<p dir=\"auto\">The following assertions will pass</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(map).containsKey(&quot;test&quot;);\nassertThat(map).contains(entry(&quot;test&quot;, &quot;value&quot;));\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">map</span>).<span class=\"pl-en\">containsKey</span>(<span class=\"pl-s\">\"test\"</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">map</span>).<span class=\"pl-en\">contains</span>(<span class=\"pl-en\">entry</span>(<span class=\"pl-s\">\"test\"</span>, <span class=\"pl-s\">\"value\"</span>));</pre></div>\n<p dir=\"auto\">The following assertions will fail</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(map).containsOnlyKeys(&quot;test&quot;);\nassertThat(map).containsOnly(entry(&quot;test&quot;, &quot;value&quot;));\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">map</span>).<span class=\"pl-en\">containsOnlyKeys</span>(<span class=\"pl-s\">\"test\"</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">map</span>).<span class=\"pl-en\">containsOnly</span>(<span class=\"pl-en\">entry</span>(<span class=\"pl-s\">\"test\"</span>, <span class=\"pl-s\">\"value\"</span>));</pre></div>\n<p dir=\"auto\">Note: <code class=\"notranslate\">LinkedCaseInsensitiveMap</code> is from Spring.</p>\n<p dir=\"auto\">If you agree I can work on a PR to change the mechanism that is used for validating <code class=\"notranslate\">containsOnly</code> entries.</p>","resourcePath":"/assertj/assertj/issues/2159","createdAt":"2021-04-06T07:20:13Z","labels":{"edges":[{"node":{"name":"type: bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"#2239 added AbstractCharSequenceAssert.isMixedCase method","url":"https://github.com/assertj/assertj/pull/2246","resourcePath":"/assertj/assertj/pull/2246","createdAt":"2021-06-05T12:49:55Z","number":2246,"mergeCommit":{"oid":"e5b568de7d7c473054ef99597e01a96a12aa3fe9","message":"Add `isMixedCase`to `CharSequence` assertions (#2246)","commitUrl":"https://github.com/assertj/assertj/commit/e5b568de7d7c473054ef99597e01a96a12aa3fe9","parents":{"nodes":[{"oid":"bce5cfd6bc11bfed3fc59357c7273ec9d0f9bbe5","message":"Bump pitest-maven from 1.6.8 to 1.6.9 (#2308)\n\nBumps [pitest-maven](https://github.com/hcoles/pitest) from 1.6.8 to 1.6.9.\n- [Release notes](https://github.com/hcoles/pitest/releases)\n- [Commits](https://github.com/hcoles/pitest/compare/pitest-parent-1.6.8...1.6.9)\n\n---\nupdated-dependencies:\n- dependency-name: org.pitest:pitest-maven\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldBeMixedCase.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Strings.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_isMixedCase_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldBeLowerCase_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldBeMixedCase_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldBeUpperCase_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertIsLowerCase_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertIsMixedCase_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertIsUpperCase_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjYyNDI4Mjk1OmNmMjNhNWI4MGMyNWVlNjZhZjBhMTBhNGEzYzIzMzdjZTc5YzIzZTM=","url":"https://github.com/assertj/assertj/pull/2246/commits/cf23a5b80c25ee66af0a10a4a3c2337ce79c23e3"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2239,"url":"https://github.com/assertj/assertj/issues/2239","title":"Add `isMixedCase`to `CharSequence` assertions","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">The assertion should verify that the input is neither uppercase nor lowercase.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;Hello World&quot;).isMixedCase();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Hello World\"</span>).<span class=\"pl-en\">isMixedCase</span>();</pre></div>","resourcePath":"/assertj/assertj/issues/2239","createdAt":"2021-06-01T15:58:52Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Added isMixedCase","url":"https://github.com/assertj/assertj/pull/2241","resourcePath":"/assertj/assertj/pull/2241","createdAt":"2021-06-02T09:56:25Z","number":2241,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/strings_assertMixedCase_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjU5OTEyMjE1OjAzMGM5ODA2MGNhNTgyNWI5YjVmNzc2Y2VhMjI5NzhhZGM3ZTdmYmU=","url":"https://github.com/assertj/assertj/pull/2241/commits/030c98060ca5825b9b5f776cea22978adc7e7fbe"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2239,"url":"https://github.com/assertj/assertj/issues/2239","title":"Add `isMixedCase`to `CharSequence` assertions","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">The assertion should verify that the input is neither uppercase nor lowercase.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;Hello World&quot;).isMixedCase();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Hello World\"</span>).<span class=\"pl-en\">isMixedCase</span>();</pre></div>","resourcePath":"/assertj/assertj/issues/2239","createdAt":"2021-06-01T15:58:52Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Added containsAnyOf to CharSequence assertions","url":"https://github.com/assertj/assertj/pull/2309","resourcePath":"/assertj/assertj/pull/2309","createdAt":"2021-08-13T10:41:58Z","number":2309,"mergeCommit":{"oid":"cf63f1d8cf511dc76cd5a80fa06837265b74872e","message":"Add `containsAnyOf` to `CharSequence` assertions (#2309)","commitUrl":"https://github.com/assertj/assertj/commit/cf63f1d8cf511dc76cd5a80fa06837265b74872e","parents":{"nodes":[{"oid":"5fc69d002aac2a97dbfedfdd6085638ff1fca3f5","message":"Add `isMixedCase` to `CharSequence` assertions (#2246)\n\nCo-authored-by: Stefano Cordio <stefano.cordio@gmail.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldContainAnyOf.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Strings.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_containsAnyOf_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldContainAnyOf_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/Arrays_containsAnyOf_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/iterables/Iterables_assertContainsAnyOf_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertContainsAnyOf_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertContains_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzEyMjU2OTg4OjJhZTQ0ZWMzOTUyY2NmNDQ5YjUxYzc0ODk3MTA3MWFkNjNiM2FhODM=","url":"https://github.com/assertj/assertj/pull/2309/commits/2ae44ec3952ccf449b51c748971071ad63b3aa83"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2303,"url":"https://github.com/assertj/assertj/issues/2303","title":"Add `containsAnyOf` to `CharSequence` assertions","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Currently, checking if a String contains at least one substring can be done with <code class=\"notranslate\">satisfiesAnyOf</code> or <code class=\"notranslate\">containsPattern</code>. The former is quite verbose, while the latter does not provide specific details in case of failures.</p>\n<p dir=\"auto\">To improve this use case, <code class=\"notranslate\">containsAnyOf(CharSequence...)</code> could be added to <code class=\"notranslate\">AbstractCharSequenceAssert</code>.</p>\n<p dir=\"auto\">Inspired by <a href=\"https://stackoverflow.com/q/68643040/9714611\" rel=\"nofollow\">https://stackoverflow.com/q/68643040/9714611</a></p>\n<h4 dir=\"auto\">Example</h4>\n<h5 dir=\"auto\"><code class=\"notranslate\">satisfiesAnyOf</code></h5>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;I am a string&quot;).satisfiesAnyOf(s -&gt; assertThat(s).contains(&quot;am&quot;),\n                                           s -&gt; assertThat(s).contains(&quot;some string&quot;));\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"I am a string\"</span>).<span class=\"pl-en\">satisfiesAnyOf</span>(<span class=\"pl-s1\">s</span> -&gt; <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">s</span>).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"am\"</span>),\n                                           <span class=\"pl-s1\">s</span> -&gt; <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">s</span>).<span class=\"pl-en\">contains</span>(<span class=\"pl-s\">\"some string\"</span>));</pre></div>\n<p dir=\"auto\">Failure message:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Multiple Failures (2 failures)\n-- failure 1 --\nExpecting actual:\n  &quot;I a string&quot;\nto contain:\n  &quot;am&quot; \n-- failure 2 --\nExpecting actual:\n  &quot;I a string&quot;\nto contain:\n  &quot;some string&quot; \"><pre class=\"notranslate\"><code>Multiple Failures (2 failures)\n-- failure 1 --\nExpecting actual:\n  \"I a string\"\nto contain:\n  \"am\" \n-- failure 2 --\nExpecting actual:\n  \"I a string\"\nto contain:\n  \"some string\" \n</code></pre></div>\n<h5 dir=\"auto\"><code class=\"notranslate\">containsPattern</code></h5>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;I am a string&quot;).containsPattern(&quot;.(?:am|some string).*&quot;);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"I am a string\"</span>).<span class=\"pl-en\">containsPattern</span>(<span class=\"pl-s\">\".(?:am|some string).*\"</span>);</pre></div>\n<p dir=\"auto\">Failure message:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Expecting actual:\n  &quot;I a string&quot;\nto contain pattern:\n  &quot;.(?:am|some string).*&quot;\"><pre class=\"notranslate\"><code>Expecting actual:\n  \"I a string\"\nto contain pattern:\n  \".(?:am|some string).*\"\n</code></pre></div>\n<h5 dir=\"auto\"><code class=\"notranslate\">containsAnyOf</code></h5>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;I am a string&quot;).containsAnyOf(&quot;am&quot;, &quot;some string&quot;);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"I am a string\"</span>).<span class=\"pl-en\">containsAnyOf</span>(<span class=\"pl-s\">\"am\"</span>, <span class=\"pl-s\">\"some string\"</span>);</pre></div>\n<p dir=\"auto\">Failure message:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Expecting actual:\n  &quot;I a string&quot;\nto contain any of:\n  [&quot;am&quot;, &quot;some string&quot;]\"><pre class=\"notranslate\"><code>Expecting actual:\n  \"I a string\"\nto contain any of:\n  [\"am\", \"some string\"]\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/2303","createdAt":"2021-08-05T07:21:43Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add isReadable as an alias of canRead for File assertions","url":"https://github.com/assertj/assertj/pull/2249","resourcePath":"/assertj/assertj/pull/2249","createdAt":"2021-06-09T06:26:08Z","number":2249,"mergeCommit":{"oid":"f3d2bf407379fcad19af87ca42dc4dd313d3691c","message":"Add isReadable as an alias of canRead for File assertions (#2249)","commitUrl":"https://github.com/assertj/assertj/commit/f3d2bf407379fcad19af87ca42dc4dd313d3691c","parents":{"nodes":[{"oid":"f2d7c1b28f51b1fe7de23f6acb080262d7841237","message":"Add isWritable as an alias of canWrite for File assertions (#2273)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractFileAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/file/FileAssert_isReadable_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjY1NTk1MjE0OjIwYjhjNmE0NDExM2JkMTkzOTVhYzA5MDRiYTlkOGJkY2ZlY2U1YzI=","url":"https://github.com/assertj/assertj/pull/2249/commits/20b8c6a44113bd19395ac0904ba9d8bdcfece5c2"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2234,"url":"https://github.com/assertj/assertj/issues/2234","title":"Add `isReadable` as an alias of `canRead` for `File` assertions","bodyHTML":"<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(new File(&quot;file.txt&quot;)).isReadable();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(<span class=\"pl-s\">\"file.txt\"</span>)).<span class=\"pl-en\">isReadable</span>();</pre></div>\n<p dir=\"auto\">Related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"889164852\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2205\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2205/hovercard\" href=\"https://github.com/assertj/assertj/issues/2205\">#2205</a>.</p>","resourcePath":"/assertj/assertj/issues/2234","createdAt":"2021-05-29T08:58:42Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Configure assumption exception","url":"https://github.com/assertj/assertj/pull/2276","resourcePath":"/assertj/assertj/pull/2276","createdAt":"2021-07-01T10:40:29Z","number":2276,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WithAssumptions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/configuration/Configuration.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/configuration/PreferredAssumptionException.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assumptions_is_in_sync_with_WithAssumptions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/EntryPoint_Assumptions_setPreferredAssumptionException_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/configuration/Configuration_apply_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/configuration/Configuration_describe_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/configuration/NonDefaultConfiguration.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/test/ConfigurationForTests.java"}},{"node":{"changeType":"MODIFIED","path":"verify.bndrun"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjgxNzI4ODk5OmNhNGY5YjhmY2VkN2YxMmY5NjgxMWQ0NTE4ODc5NWQ4ZTE3N2U3ZjA=","url":"https://github.com/assertj/assertj/pull/2276/commits/ca4f9b8fced7f12f96811d45188795d8e177e7f0"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2267,"url":"https://github.com/assertj/assertj/issues/2267","title":"Allow configuring the order of assumption exception classes","bodyHTML":"<h4 dir=\"auto\">Problem</h4>\n<p dir=\"auto\">Our project has dependencies on both JUnit5 and TestNG. Most test cases are written by JUnit5.<br>\n<code class=\"notranslate\">Assumptions.assumeThat()</code> is also used with JUnit5. TestNG is only used for running Reactive Streams TCK.<br>\n<a href=\"https://github.com/reactive-streams/reactive-streams-jvm/blob/899f17ffc2927bf89fad73dfde182f5018359bdf/tck/build.gradle#L19\">https://github.com/reactive-streams/reactive-streams-jvm/blob/899f17ffc2927bf89fad73dfde182f5018359bdf/tck/build.gradle#L19</a><br>\nWhen I tried to upgrade AssertJ from 3.17.1, our JUnit test suits failed with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"FlagsTest &gt; epollAvailableOnLinux() FAILED\n    org.testng.SkipException: assumption was not met due to: \n    Expecting:\n      ...\"><pre class=\"notranslate\"><code>FlagsTest &gt; epollAvailableOnLinux() FAILED\n    org.testng.SkipException: assumption was not met due to: \n    Expecting:\n      ...\n</code></pre></div>\n<p dir=\"auto\">The error seems to be caused by the change of the order of assumption exceptions in <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/cf65f6a069814abbf478b9fda47db0978e6dfa75/hovercard\" href=\"https://github.com/assertj/assertj/commit/cf65f6a069814abbf478b9fda47db0978e6dfa75\"><tt>cf65f6a</tt></a>.</p>\n<h4 dir=\"auto\">Suggestion</h4>\n<p dir=\"auto\">It would be nice to give an option that changes the order of assumption exceptions using a property file or a JVM system property.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"-Dorg.assertj.assumeption.exceptions=org.opentest4j.TestAbortedException,org.testng.SkipException,org.junit.AssumptionViolatedException\"><pre class=\"notranslate\"><code>-Dorg.assertj.assumeption.exceptions=org.opentest4j.TestAbortedException,org.testng.SkipException,org.junit.AssumptionViolatedException\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/2267","createdAt":"2021-06-20T08:56:12Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add default method lookup to `hasMethods`","url":"https://github.com/assertj/assertj/pull/2324","resourcePath":"/assertj/assertj/pull/2324","createdAt":"2021-08-23T20:36:25Z","number":2324,"mergeCommit":{"oid":"391b688863002fe50bdf9f7f70e542096fb0ece1","message":"Add default method lookup to `hasMethods` (#2324)","commitUrl":"https://github.com/assertj/assertj/commit/391b688863002fe50bdf9f7f70e542096fb0ece1","parents":{"nodes":[{"oid":"71b9e77976dd089340fd0d996e99cb12dd55a79e","message":"Use setup-java cache support"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Classes.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/classes/Classes_assertHasMethods_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzE4MTYyNzEyOmZmZjEyMWFiYmQ0MGNiYzEzY2Q4NjBlZWM3ZmI4ZTNhOGY5MTNiNGY=","url":"https://github.com/assertj/assertj/pull/2324/commits/fff121abbd40cbc13cd860eec7fb8e3a8f913b4f"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2319,"url":"https://github.com/assertj/assertj/issues/2319","title":"hasMethods does not work on default methods","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">IMO <code class=\"notranslate\">hasMethod</code> should really follow the same contract as <code class=\"notranslate\">Class.getMethod()</code>, but it doesn't when it comes to default methods inherited from an interface (that are not overridden with an implementation in the class being asserted).</p>\n<p dir=\"auto\">This is because <code class=\"notranslate\">org.assertj.core.internal.Classes.getAllMethods(Class&lt;?&gt;)</code> only looks at parent classes and not any implemented interfaces.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class DefaultHasMethodTest {\n\n  interface HasDefault {\n    default void method() {}\n  }\n\n  static class Impl implements HasDefault {\n  }\n\n  @Test\n  void testHasMethod() throws Exception {\n    assertThat(Impl.class).hasMethods(&quot;method&quot;);\n  }\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">DefaultHasMethodTest</span> {\n\n  <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">HasDefault</span> {\n    <span class=\"pl-k\">default</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">method</span>() {}\n  }\n\n  <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Impl</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">HasDefault</span> {\n  }\n\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-smi\">void</span> <span class=\"pl-en\">testHasMethod</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">Impl</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">hasMethods</span>(<span class=\"pl-s\">\"method\"</span>);\n  }\n}</pre></div>\n<p dir=\"auto\">This might be related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"200368017\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/880\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/880/hovercard\" href=\"https://github.com/assertj/assertj/issues/880\">#880</a>.</p>","resourcePath":"/assertj/assertj/issues/2319","createdAt":"2021-08-20T17:29:57Z","labels":{"edges":[{"node":{"name":"type: bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Improve assertion error for hasSameElementsAs(emptyList())","url":"https://github.com/assertj/assertj/pull/2295","resourcePath":"/assertj/assertj/pull/2295","createdAt":"2021-07-20T06:43:23Z","number":2295,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Iterables.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_hasSameElementsAs_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjkzMTkyNzIzOjdhNzZmZDEwMjkzZWMxZGViNDUyYTYwYTkyZWE3Y2FlNWQ5YmVhNjc=","url":"https://github.com/assertj/assertj/pull/2295/commits/7a76fd10293ec1deb452a60a92ea7cae5d9bea67"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2294,"url":"https://github.com/assertj/assertj/issues/2294","title":"nondescript assertion error for hasSameElementsAs(emptyList())","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Compared to other asserts, <code class=\"notranslate\">hasSameElementsAs</code> has only a brief and generic assertion error given an empty expected collection.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    List&lt;String&gt; actual = List.of(&quot;element&quot;);\n    Assertions.assertThat(actual).as(&quot;helpful message&quot;).hasSameElementsAs(Collections.emptyList());\"><pre>    <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">List</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"element\"</span>);\n    <span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">as</span>(<span class=\"pl-s\">\"helpful message\"</span>).<span class=\"pl-en\">hasSameElementsAs</span>(<span class=\"pl-s1\">Collections</span>.<span class=\"pl-en\">emptyList</span>());</pre></div>\n<p dir=\"auto\">fails with</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: actual is not empty\"><pre class=\"notranslate\"><code>java.lang.AssertionError: actual is not empty\n</code></pre></div>\n<p dir=\"auto\">In comparision</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    List&lt;String&gt; actual = List.of(&quot;element&quot;);\n    Assertions.assertThat(actual).as(&quot;helpful message&quot;).containsExactlyElementsOf(Collections.emptyList());\"><pre>    <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">List</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"element\"</span>);\n    <span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">as</span>(<span class=\"pl-s\">\"helpful message\"</span>).<span class=\"pl-en\">containsExactlyElementsOf</span>(<span class=\"pl-s1\">Collections</span>.<span class=\"pl-en\">emptyList</span>());</pre></div>\n<p dir=\"auto\">has a much richer message as I would expect from AssertJ:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: [helpful message] \nExpecting actual:\n  [&quot;element&quot;]\nto contain exactly (and in same order):\n  []\nbut some elements were not expected:\n  [&quot;element&quot;]\"><pre class=\"notranslate\"><code>java.lang.AssertionError: [helpful message] \nExpecting actual:\n  [\"element\"]\nto contain exactly (and in same order):\n  []\nbut some elements were not expected:\n  [\"element\"]\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/2294","createdAt":"2021-07-19T12:29:52Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"[MappedCondition] fix handling of mappings to null","url":"https://github.com/assertj/assertj/pull/2282","resourcePath":"/assertj/assertj/pull/2282","createdAt":"2021-07-08T07:59:07Z","number":2282,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/condition/MappedCondition.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/condition/MappedConditionTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0Njg1Nzc5Mzc5OmUwODQyMzkwOTQ0ZmQyY2RiOGFlYzU0MTJhZDhkNjMyNWZjYTZlNzY=","url":"https://github.com/assertj/assertj/pull/2282/commits/e0842390944fd2cdb8aec5412ad8d6325fca6e76"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2281,"url":"https://github.com/assertj/assertj/issues/2281","title":"MappedCondition must prevent NPE","bodyHTML":"<p dir=\"auto\">when calling <code class=\"notranslate\">to.getClass()</code></p>\n<p dir=\"auto\"><a href=\"https://github.com/assertj/assertj-core/blob/c964ea6d3f94286ac33fce2de6180288a4794313/src/main/java/org/assertj/core/condition/MappedCondition.java#L137\">https://github.com/assertj/assertj-core/blob/c964ea6d3f94286ac33fce2de6180288a4794313/src/main/java/org/assertj/core/condition/MappedCondition.java#L137</a></p>","resourcePath":"/assertj/assertj/issues/2281","createdAt":"2021-07-06T22:58:21Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"File size assert","url":"https://github.com/assertj/assertj/pull/2323","resourcePath":"/assertj/assertj/pull/2323","createdAt":"2021-08-23T11:40:24Z","number":2323,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractFileAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/AbstractFileSizeAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assumptions.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/FileSizeAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/ProxifyMethodChangingTheObjectUnderTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/SoftProxies.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/file/FileAssert_size_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzE3NzU1MzU5OjFkZTRlN2QwZDI0YjkyYzI1N2U3NTU0MDAwYzRiNmU4MWViNDUzZWQ=","url":"https://github.com/assertj/assertj/pull/2323/commits/1de4e7d0d24b92c257e7554000c4b6e81eb453ed"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2322,"url":"https://github.com/assertj/assertj/issues/2322","title":"Additional File Assertions","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">At the moment, it's possible to check file sizes using the file assertions (see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"354202838\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/1311\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/1311/hovercard\" href=\"https://github.com/assertj/assertj/issues/1311\">#1311</a>), but it's not possible to check if a file is bigger or smaller than a certain size. I'd propose to add these assertions too, and match the signature with the collection assertions, like this.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(file).hasSizeBetween(1_000_000, 2_000_000));\nassertThat(file).hasGreaterThan(1_000_000));\nassertThat(file).hasLessThanOrEqual(2_000_000));\n// etc\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">file</span>).<span class=\"pl-en\">hasSizeBetween</span>(<span class=\"pl-c1\">1_000_000</span>, <span class=\"pl-c1\">2_000_000</span>));\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">file</span>).<span class=\"pl-en\">hasGreaterThan</span>(<span class=\"pl-c1\">1_000_000</span>));\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">file</span>).<span class=\"pl-en\">hasLessThanOrEqual</span>(<span class=\"pl-c1\">2_000_000</span>));\n<span class=\"pl-c\">// etc</span></pre></div>\n<p dir=\"auto\">I'm willing to do a PR for this, but I'd like to know first if this is something which would be welcome in AssertJ, or not.</p>","resourcePath":"/assertj/assertj/issues/2322","createdAt":"2021-08-23T06:55:55Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add satisfies with ThrowingConsumer that allow consumers to throw che…","url":"https://github.com/assertj/assertj/pull/2297","resourcePath":"/assertj/assertj/pull/2297","createdAt":"2021-07-26T10:30:08Z","number":2297,"mergeCommit":{"oid":"480a4a43e6b87597aa20f4845b8bedc3729f0b60","message":"Add satisfies with ThrowingConsumer that allow consumers to throw checked exception (#2297)","commitUrl":"https://github.com/assertj/assertj/commit/480a4a43e6b87597aa20f4845b8bedc3729f0b60","parents":{"nodes":[{"oid":"fe1c4630da8a38e378a6baa703191d9860e3df2d","message":"Bump byte-buddy.version from 1.11.8 to 1.11.9 (#2299)\n\nBumps `byte-buddy.version` from 1.11.8 to 1.11.9.\n\nUpdates `byte-buddy` from 1.11.8 to 1.11.9\n- [Release notes](https://github.com/raphw/byte-buddy/releases)\n- [Changelog](https://github.com/raphw/byte-buddy/blob/master/release-notes.md)\n- [Commits](https://github.com/raphw/byte-buddy/compare/byte-buddy-1.11.8...byte-buddy-1.11.9)\n\nUpdates `byte-buddy-agent` from 1.11.8 to 1.11.9\n- [Release notes](https://github.com/raphw/byte-buddy/releases)\n- [Changelog](https://github.com/raphw/byte-buddy/blob/master/release-notes.md)\n- [Commits](https://github.com/raphw/byte-buddy/compare/byte-buddy-1.11.8...byte-buddy-1.11.9)\n\n---\nupdated-dependencies:\n- dependency-name: net.bytebuddy:byte-buddy\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n- dependency-name: net.bytebuddy:byte-buddy-agent\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/ThrowingConsumer.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/ThrowingConsumer_accept_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_satisfies_with_Consumer_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_satisfies_with_ThrowingConsumer_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/resources/empty.txt"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0Njk2OTAwMTI2OjYzOTZmNDRmYjVhYmZiZDg0YzFmNjQ3NWExNWM0NDM4Y2QyNzg2NzI=","url":"https://github.com/assertj/assertj/pull/2297/commits/6396f44fb5abfbd84c1f6475a15c4438cd278672"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":731,"url":"https://github.com/assertj/assertj/issues/731","title":"Add satisfies with checked exceptions consumer.","bodyHTML":"<p dir=\"auto\">Hello,</p>\n<p dir=\"auto\">Currently it is not possible to write code like that:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\nassertThat(item).satisfies(i -&gt; {\n   assertThat(i.getContent()).isEqualTo(&quot;data&quot;); // i.getContent() throws IOException\n});\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">item</span>).<span class=\"pl-en\">satisfies</span>(<span class=\"pl-s1\">i</span> -&gt; {\n   <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">i</span>.<span class=\"pl-en\">getContent</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"data\"</span>); <span class=\"pl-c\">// i.getContent() throws IOException</span>\n});</pre></div>\n<p dir=\"auto\">Would it be possible to add satisfies method which can handle consumer throwing checked exception? If exception would be thrown then it would be assumed that condition failed.</p>\n<p dir=\"auto\">Thanks,<br>\nMichał</p>","resourcePath":"/assertj/assertj/issues/731","createdAt":"2016-08-05T14:37:01Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix #2296 : 2D arrays - assert size of first dimension only","url":"https://github.com/assertj/assertj/pull/2316","resourcePath":"/assertj/assertj/pull/2316","createdAt":"2021-08-18T03:46:24Z","number":2316,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Short2DArrayAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/boolean2darray/Boolean2DArrayAssert_hasRowSize_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/byte2darray/Byte2DArrayAssert_hasRowSize_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/char2darray/Char2DArrayAssert_hasRowSize_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/double2darray/Double2DArrayAssert_hasRowSize_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/float2darray/Float2DArrayAssert_hasRowSize_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/int2darray/Int2DArrayAssert_hasRowSize_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/long2darray/Long2DArrayAssert_hasRowSize_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/object2darray/Object2DArrayAssert_hasRowSize_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/short2darray/Short2DArrayAssert_hasRowSize_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzE0NzE4NDc3OjRhZDVkYzg1MzNkMDMxNjJlNTcxOWNkMTAyZDQwMzhjZTAwMGU3NDc=","url":"https://github.com/assertj/assertj/pull/2316/commits/4ad5dc8533d03162e5719cd102d4038ce000e747"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2296,"url":"https://github.com/assertj/assertj/issues/2296","title":"2D arrays: assert size of first dimension only","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">In assertj 3.17.0, for 2D arrays like <code class=\"notranslate\">byte[][]</code> the <code class=\"notranslate\">hasSize(int)</code> method has been replaced by <code class=\"notranslate\">hasDimensions(int, int)</code>.</p>\n<p dir=\"auto\">It would be useful to keep the <code class=\"notranslate\">hasSize(int)</code> as well. The length of the second dimension might be different for each entry, or it might simply be irrelevant to the test.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"byte[][] bytes = {{1}, {1, 2}, {1, 2, 3}};\nassertThat(bytes).hasDimensions(3, /* problem: second dimension is variable length */);\"><pre><span class=\"pl-smi\">byte</span>[][] <span class=\"pl-s1\">bytes</span> = {{<span class=\"pl-c1\">1</span>}, {<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>}, {<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>}};\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">bytes</span>).<span class=\"pl-en\">hasDimensions</span>(<span class=\"pl-c1\">3</span>, <span class=\"pl-c\">/* problem: second dimension is variable length */</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/2296","createdAt":"2021-07-23T09:05:30Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add type parameter to `ThrowableAssert`","url":"https://github.com/assertj/assertj/pull/2311","resourcePath":"/assertj/assertj/pull/2311","createdAt":"2021-08-14T02:11:35Z","number":2311,"mergeCommit":{"oid":"f88123340fad5acb9a150819c2add5e4157048a3","message":"Add type parameter to `ThrowableAssert` (#2311)\n\nThis allows chaining assertions like `extracting(Function)` using\r\ntype-specific extractors.","commitUrl":"https://github.com/assertj/assertj/commit/f88123340fad5acb9a150819c2add5e4157048a3","parents":{"nodes":[{"oid":"62539afb2337c696a16e3b47a7748ac25132e44e","message":"Bump equalsverifier from 3.7 to 3.7.1 (#2310)\n\nBumps [equalsverifier](https://github.com/jqno/equalsverifier) from 3.7 to 3.7.1.\n- [Release notes](https://github.com/jqno/equalsverifier/releases)\n- [Changelog](https://github.com/jqno/equalsverifier/blob/main/CHANGELOG.md)\n- [Commits](https://github.com/jqno/equalsverifier/compare/equalsverifier-3.7...equalsverifier-3.7.1)\n\n---\nupdated-dependencies:\n- dependency-name: nl.jqno.equalsverifier:equalsverifier\n  dependency-type: direct:development\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/throwable/ThrowableAssert_hasNoCause_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/throwable/ThrowableAssert_hasNoSuppressedExceptions_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/throwable/ThrowableAssert_hasRootCauseExactlyInstanceOf_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/throwable/ThrowableAssert_hasRootCauseInstanceOf_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/throwable/ThrowableAssert_hasRootCauseMessage_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/throwable/ThrowableAssert_hasRootCauseMessage_with_String_format_syntax_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/throwable/ThrowableAssert_hasRootCause_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/throwable/ThrowableAssert_hasStackTraceContaining_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/throwable/ThrowableAssert_hasStackTraceContaining_with_String_format_syntax_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/throwable/ThrowableAssert_hasSuppressedException_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzEyNjk2Nzk5OjAyMzgwOTVmNDRmNWMyYzg2OGJlOWY1MGMyNzQwNjYxODNiZTdmZDg=","url":"https://github.com/assertj/assertj/pull/2311/commits/0238095f44f5c2c868be9f50c274066183be7fd8"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2242,"url":"https://github.com/assertj/assertj/issues/2242","title":"`ThrowableAssert` should have a type parameter","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Currently <code class=\"notranslate\">assertThatExceptionOfType</code> allows chaining type-specific assertions like <code class=\"notranslate\">extracting(Function)</code>, but <code class=\"notranslate\">assertThat</code> with an instance of the same exception type does not allow chaining them.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Having an exception type like:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyException extends RuntimeException {\n\n    private final int field;\n\n    MyException(int field) {\n        this.field = field;\n    }\n\n    int getField() {\n        return field;\n    }\n\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyException</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">RuntimeException</span> {\n\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">field</span>;\n\n    <span class=\"pl-smi\">MyException</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">field</span>) {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">field</span> = <span class=\"pl-s1\">field</span>;\n    }\n\n    <span class=\"pl-smi\">int</span> <span class=\"pl-en\">getField</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">field</span>;\n    }\n\n}</pre></div>\n<p dir=\"auto\">The following works:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThatExceptionOfType(MyException.class).isThrownBy(() -&gt; doSomething())\n    .extracting(MyException::getField)\n    .isEqualTo(10);\"><pre><span class=\"pl-en\">assertThatExceptionOfType</span>(<span class=\"pl-smi\">MyException</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isThrownBy</span>(() -&gt; <span class=\"pl-en\">doSomething</span>())\n    .<span class=\"pl-en\">extracting</span>(<span class=\"pl-s1\">MyException</span>::<span class=\"pl-s1\">getField</span>)\n    .<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">10</span>);</pre></div>\n<p dir=\"auto\">but the following does not:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"MyException myException = catchThrowableOfType(() -&gt; doSomething(), MyException.class);\n\nassertThat(myException)\n    .extracting(MyException::getField) // does not compile\n    .isEqualTo(10);\"><pre><span class=\"pl-smi\">MyException</span> <span class=\"pl-s1\">myException</span> = <span class=\"pl-en\">catchThrowableOfType</span>(() -&gt; <span class=\"pl-en\">doSomething</span>(), <span class=\"pl-smi\">MyException</span>.<span class=\"pl-s1\">class</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">myException</span>)\n    .<span class=\"pl-en\">extracting</span>(<span class=\"pl-s1\">MyException</span>::<span class=\"pl-s1\">getField</span>) <span class=\"pl-c\">// does not compile</span>\n    .<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">10</span>);</pre></div>\n<p dir=\"auto\">Adding a type parameter to <code class=\"notranslate\">ThrowableAssert</code> should fix the issue. E.g.:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class ThrowableAssert&lt;ACTUAL extends Throwable&gt; extends AbstractThrowableAssert&lt;ThrowableAssert&lt;ACTUAL&gt;, ACTUAL&gt; {\n   // implementation\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ThrowableAssert</span>&lt;<span class=\"pl-c1\">ACTUAL</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">Throwable</span>&gt; <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">AbstractThrowableAssert</span>&lt;<span class=\"pl-smi\">ThrowableAssert</span>&lt;<span class=\"pl-smi\">ACTUAL</span>&gt;, <span class=\"pl-smi\">ACTUAL</span>&gt; {\n   <span class=\"pl-c\">// implementation</span>\n}</pre></div>","resourcePath":"/assertj/assertj/issues/2242","createdAt":"2021-06-03T08:18:33Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Issue #2237 Implement hasSize to Path assertions","url":"https://github.com/assertj/assertj/pull/2243","resourcePath":"/assertj/assertj/pull/2243","createdAt":"2021-06-03T20:25:24Z","number":2243,"mergeCommit":{"oid":"b3d504f8f37558fb19a73acc3f3f527c66efae7b","message":"Add `hasSize` to `Path` assertions (#2243)","commitUrl":"https://github.com/assertj/assertj/commit/b3d504f8f37558fb19a73acc3f3f527c66efae7b","parents":{"nodes":[{"oid":"d3b14c299cca522db00bfaff839fdd319cedad5b","message":"Bump memoryfilesystem from 2.1.0 to 2.2.0 (#2287)\n\nBumps [memoryfilesystem](https://github.com/marschall/memoryfilesystem) from 2.1.0 to 2.2.0.\r\n- [Release notes](https://github.com/marschall/memoryfilesystem/releases)\r\n- [Commits](https://github.com/marschall/memoryfilesystem/compare/2.1.0...2.2.0)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: com.github.marschall:memoryfilesystem\r\n  dependency-type: direct:development\r\n  update-type: version-update:semver-minor\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractPathAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveSize.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Paths.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/path/PathAssert_hasSize_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldHaveSize_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertHasSize_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjYxMTkxODM5OjkwZjE3ZmQ5Y2RkZWQ5ZDFhOGQyZGFhYWU2MmMxMzhhOGU4ZjA5YjI=","url":"https://github.com/assertj/assertj/pull/2243/commits/90f17fd9cdded9d1a8d2daaae62c138a8e8f09b2"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2237,"url":"https://github.com/assertj/assertj/issues/2237","title":"Add `hasSize` to `Path` assertions","bodyHTML":"<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(Paths.get(&quot;file.txt&quot;)).hasSize(10);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Paths</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s\">\"file.txt\"</span>)).<span class=\"pl-en\">hasSize</span>(<span class=\"pl-c1\">10</span>);</pre></div>\n<p dir=\"auto\">Related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"889164852\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2205\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2205/hovercard\" href=\"https://github.com/assertj/assertj/issues/2205\">#2205</a>.</p>","resourcePath":"/assertj/assertj/issues/2237","createdAt":"2021-05-29T09:25:13Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"#2233 Add hasExtension to Path assertions","url":"https://github.com/assertj/assertj/pull/2255","resourcePath":"/assertj/assertj/pull/2255","createdAt":"2021-06-13T16:35:26Z","number":2255,"mergeCommit":{"oid":"b606cae91ccd13b43d9176c3a7f2dedbb2a60cf9","message":"Add `hasExtension` to `Path` assertions (#2255)","commitUrl":"https://github.com/assertj/assertj/commit/b606cae91ccd13b43d9176c3a7f2dedbb2a60cf9","parents":{"nodes":[{"oid":"80558e5f28d739d15ef81a66a48b2d498252b840","message":"Bump mockito.version from 3.11.2 to 3.12.0"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractPathAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveExtension.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Paths.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/path/PathAssert_hasExtension_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldHaveExtension_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertHasExtension_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjY5MDgxMTMyOjU2ZjhjYjg5ODEzYjEyN2MwMDA5MzNiODFhZTdhODcxNmUzZWMyNTk=","url":"https://github.com/assertj/assertj/pull/2255/commits/56f8cb89813b127c000933b81ae7a8716e3ec259"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2233,"url":"https://github.com/assertj/assertj/issues/2233","title":"Add `hasExtension` to `Path` assertions","bodyHTML":"<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(Paths.get(&quot;file.txt&quot;)).hasExtension(&quot;txt&quot;);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Paths</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s\">\"file.txt\"</span>)).<span class=\"pl-en\">hasExtension</span>(<span class=\"pl-s\">\"txt\"</span>);</pre></div>\n<p dir=\"auto\">Related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"889164852\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2205\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2205/hovercard\" href=\"https://github.com/assertj/assertj/issues/2205\">#2205</a>.</p>","resourcePath":"/assertj/assertj/issues/2233","createdAt":"2021-05-29T08:55:43Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Map entry values handle deep equality comparison again","url":"https://github.com/assertj/assertj/pull/2265","resourcePath":"/assertj/assertj/pull/2265","createdAt":"2021-06-17T17:49:20Z","number":2265,"mergeCommit":{"oid":"e3d9e070dfe11465d1fd30b705f8ba66224424bb","message":"Restore deep equality comparison for map `containsOnly` assertions (#2265)","commitUrl":"https://github.com/assertj/assertj/commit/e3d9e070dfe11465d1fd30b705f8ba66224424bb","parents":{"nodes":[{"oid":"f8ee3f36ecccdfb49adb9e24b8bebc44db46a3db","message":"[maven-release-plugin] prepare for next development iteration"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Maps.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsOnly_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjcyODYxOTg1OjUzNWZkMDg1N2ViMzVmMzA5YzA5NDI4YTQ4OGRmNzQyNzBlMTNlMWI=","url":"https://github.com/assertj/assertj/pull/2265/commits/535fd0857eb35f309c09428a488df74270e13e1b"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2264,"url":"https://github.com/assertj/assertj/issues/2264","title":"Regression in `AbstractMapAssert#containsExactlyInAnyOrderEntriesOf`","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">After upgrading from assertj 3.19.0 to 3.20.0 (and 3.20.1), I am <a href=\"https://23469-36960637-gh.circle-artifacts.com/3/home/circleci/artifacts/junit/timelock-server/integTest/classes/com.palantir.atlasdb.timelock.LockWatchValueIntegrationTest.html#readWriteTransactionsPublishValuesToCentralCache\" rel=\"nofollow\">seeing tests fail</a> using <code class=\"notranslate\">org.assertj.core.api.AbstractMapAssert#containsExactlyInAnyOrderEntriesOf</code> where the map value is a byte array (e.g. <code class=\"notranslate\">Map&lt;String, byte[]&gt;</code>.</p>\n<p dir=\"auto\">This appears to have broken in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"855276721\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2167\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/assertj/assertj/pull/2167/hovercard\" href=\"https://github.com/assertj/assertj/pull/2167\">#2167</a> specifically with the <a href=\"https://github.com/assertj/assertj-core/pull/2167/files#diff-abf21eb7e9d518345dcc39f1097da30169084ee0a538e0b174fba36807cf7386R490\">use of <code class=\"notranslate\">Map.remove(Object, Object)</code></a> that does not perform deep equality checking on the map entry value (e.g. arrays).</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Adding the following test to <code class=\"notranslate\">org.assertj.core.api.map.MapAssert_containsExactlyInAnyOrderEntriesOf_Test</code> against <code class=\"notranslate\">assertj-core-3.19.0</code> passes, but fails on <code class=\"notranslate\">assertj-core-3.20.0</code>, <code class=\"notranslate\">assertj-core-3.20.1</code>, and <code class=\"notranslate\">main</code></p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  void invoke_api_like_user_with_value_array() {\n\n    // GIVEN\n    Map&lt;String, byte[]&gt; actualMap = mapOf(entry(&quot;key1&quot;, new byte[]{1, 2}),\n      entry(&quot;key2&quot;, new byte[]{3, 4, 5}));\n    Map&lt;String, byte[]&gt; expectedMap = mapOf(entry(&quot;key2&quot;, new byte[]{3, 4, 5}),\n      entry(&quot;key1&quot;, new byte[]{1, 2}));\n    // THEN\n    assertThat(actualMap).containsExactlyInAnyOrderEntriesOf(expectedMap);\n  }\"><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">invoke_api_like_user_with_value_array</span>() {\n\n    <span class=\"pl-c\">// GIVEN</span>\n    <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">byte</span>[]&gt; <span class=\"pl-s1\">actualMap</span> = <span class=\"pl-en\">mapOf</span>(<span class=\"pl-en\">entry</span>(<span class=\"pl-s\">\"key1\"</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>}),\n      <span class=\"pl-en\">entry</span>(<span class=\"pl-s\">\"key2\"</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[]{<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>}));\n    <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">byte</span>[]&gt; <span class=\"pl-s1\">expectedMap</span> = <span class=\"pl-en\">mapOf</span>(<span class=\"pl-en\">entry</span>(<span class=\"pl-s\">\"key2\"</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[]{<span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">5</span>}),\n      <span class=\"pl-en\">entry</span>(<span class=\"pl-s\">\"key1\"</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">byte</span>[]{<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>}));\n    <span class=\"pl-c\">// THEN</span>\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actualMap</span>).<span class=\"pl-en\">containsExactlyInAnyOrderEntriesOf</span>(<span class=\"pl-s1\">expectedMap</span>);\n  }</pre></div>\n<p dir=\"auto\">With output:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting map:\n  {&quot;key1&quot;=[1, 2], &quot;key2&quot;=[3, 4, 5]}\nto contain only:\n  [key2=[B@551a20d6, key1=[B@578524c3]\nbut the following map entries were unexpected:\n  [MapEntry[key=&quot;key1&quot;, value=[1, 2]], MapEntry[key=&quot;key2&quot;, value=[3, 4, 5]]]\n\n\n\tat org.assertj.core.error.AssertionErrorCreator.assertionError(AssertionErrorCreator.java:93)\n\tat org.assertj.core.internal.Failures.failure(Failures.java:126)\n\tat org.assertj.core.internal.Maps.assertContainsOnly(Maps.java:462)\n\tat org.assertj.core.api.AbstractMapAssert.containsOnlyForProxy(AbstractMapAssert.java:1350)\n\tat org.assertj.core.api.AbstractMapAssert.containsOnly(AbstractMapAssert.java:1343)\n\tat org.assertj.core.api.AbstractMapAssert.containsExactlyInAnyOrderEntriesOf(AbstractMapAssert.java:685)\n\tat org.assertj.core.api.map.MapAssert_containsExactlyInAnyOrderEntriesOf_Test.invoke_api_like_user_with_value_array(MapAssert_containsExactlyInAnyOrderEntriesOf_Test.java:63)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:567)\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:221)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)\"><pre class=\"notranslate\"><code>java.lang.AssertionError: \nExpecting map:\n  {\"key1\"=[1, 2], \"key2\"=[3, 4, 5]}\nto contain only:\n  [key2=[B@551a20d6, key1=[B@578524c3]\nbut the following map entries were unexpected:\n  [MapEntry[key=\"key1\", value=[1, 2]], MapEntry[key=\"key2\", value=[3, 4, 5]]]\n\n\n\tat org.assertj.core.error.AssertionErrorCreator.assertionError(AssertionErrorCreator.java:93)\n\tat org.assertj.core.internal.Failures.failure(Failures.java:126)\n\tat org.assertj.core.internal.Maps.assertContainsOnly(Maps.java:462)\n\tat org.assertj.core.api.AbstractMapAssert.containsOnlyForProxy(AbstractMapAssert.java:1350)\n\tat org.assertj.core.api.AbstractMapAssert.containsOnly(AbstractMapAssert.java:1343)\n\tat org.assertj.core.api.AbstractMapAssert.containsExactlyInAnyOrderEntriesOf(AbstractMapAssert.java:685)\n\tat org.assertj.core.api.map.MapAssert_containsExactlyInAnyOrderEntriesOf_Test.invoke_api_like_user_with_value_array(MapAssert_containsExactlyInAnyOrderEntriesOf_Test.java:63)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:78)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:567)\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:688)\n\tat org.junit.jupiter.engine.execution.MethodInvocation.proceed(MethodInvocation.java:60)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$ValidatingInvocation.proceed(InvocationInterceptorChain.java:131)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.intercept(TimeoutExtension.java:149)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestableMethod(TimeoutExtension.java:140)\n\tat org.junit.jupiter.engine.extension.TimeoutExtension.interceptTestMethod(TimeoutExtension.java:84)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker$ReflectiveInterceptorCall.lambda$ofVoidMethod$0(ExecutableInvoker.java:115)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.lambda$invoke$0(ExecutableInvoker.java:105)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain$InterceptedInvocation.proceed(InvocationInterceptorChain.java:106)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.proceed(InvocationInterceptorChain.java:64)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.chainAndInvoke(InvocationInterceptorChain.java:45)\n\tat org.junit.jupiter.engine.execution.InvocationInterceptorChain.invoke(InvocationInterceptorChain.java:37)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:104)\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:98)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$6(TestMethodTestDescriptor.java:210)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:206)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:131)\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:65)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat java.base/java.util.ArrayList.forEach(ArrayList.java:1511)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:143)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:129)\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:137)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:127)\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:126)\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:84)\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:108)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:88)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.lambda$execute$0(EngineExecutionOrchestrator.java:54)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.withInterceptedStreams(EngineExecutionOrchestrator.java:67)\n\tat org.junit.platform.launcher.core.EngineExecutionOrchestrator.execute(EngineExecutionOrchestrator.java:52)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:96)\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:75)\n\tat com.intellij.junit5.JUnit5IdeaTestRunner.startRunnerWithArgs(JUnit5IdeaTestRunner.java:71)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:221)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/2264","createdAt":"2021-06-17T17:48:29Z","labels":{"edges":[{"node":{"name":"type: bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"[#2236] Add hasFileName as an alias of hasName for File assertions","url":"https://github.com/assertj/assertj/pull/2247","resourcePath":"/assertj/assertj/pull/2247","createdAt":"2021-06-05T17:57:43Z","number":2247,"mergeCommit":{"oid":"5e0b6f22909ce22be8ecbb4beead724e22d6d5dd","message":"Add hasFileName as an alias of hasName for File assertions (#2247)","commitUrl":"https://github.com/assertj/assertj/commit/5e0b6f22909ce22be8ecbb4beead724e22d6d5dd","parents":{"nodes":[{"oid":"e57c9b98b02ade99e526897c68542c4439490496","message":"Apply missing license header"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractFileAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/file/FileAssert_hasFileName_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjYyNTM2MzI5OjZlM2YzOTgxNDBmOGVjOWJhMTQ0YzlmNDU5ZDBjMzc0ZjAzMWRkNzk=","url":"https://github.com/assertj/assertj/pull/2247/commits/6e3f398140f8ec9ba144c9f459d0c374f031dd79"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2236,"url":"https://github.com/assertj/assertj/issues/2236","title":"Add `hasFileName` as an alias of `hasName` for `File` assertions","bodyHTML":"<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(new File(&quot;file.txt&quot;)).hasFileName(&quot;file.txt&quot;);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(<span class=\"pl-s\">\"file.txt\"</span>)).<span class=\"pl-en\">hasFileName</span>(<span class=\"pl-s\">\"file.txt\"</span>);</pre></div>\n<p dir=\"auto\">Related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"889164852\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2205\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2205/hovercard\" href=\"https://github.com/assertj/assertj/issues/2205\">#2205</a>.</p>","resourcePath":"/assertj/assertj/issues/2236","createdAt":"2021-05-29T09:09:16Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add isWritable as an alias of canWrite for File assertions","url":"https://github.com/assertj/assertj/pull/2273","resourcePath":"/assertj/assertj/pull/2273","createdAt":"2021-06-25T02:43:50Z","number":2273,"mergeCommit":{"oid":"f2d7c1b28f51b1fe7de23f6acb080262d7841237","message":"Add isWritable as an alias of canWrite for File assertions (#2273)","commitUrl":"https://github.com/assertj/assertj/commit/f2d7c1b28f51b1fe7de23f6acb080262d7841237","parents":{"nodes":[{"oid":"5e0b6f22909ce22be8ecbb4beead724e22d6d5dd","message":"Add hasFileName as an alias of hasName for File assertions (#2247)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractFileAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/file/FileAssert_isWritable_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0Njc3NTc3Mzg4OjliYTk0YjI2MTZhMjMzNGZjOTM2MWFjZTk4YzVmOWFjMzU2MjczZTg=","url":"https://github.com/assertj/assertj/pull/2273/commits/9ba94b2616a2334fc9361ace98c5f9ac356273e8"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2235,"url":"https://github.com/assertj/assertj/issues/2235","title":"Add `isWritable` as an alias of `canWrite` for `File` assertions","bodyHTML":"<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(new File(&quot;file.txt&quot;)).isWritable();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">File</span>(<span class=\"pl-s\">\"file.txt\"</span>)).<span class=\"pl-en\">isWritable</span>();</pre></div>\n<p dir=\"auto\">Related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"889164852\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2205\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2205/hovercard\" href=\"https://github.com/assertj/assertj/issues/2205\">#2205</a>.</p>","resourcePath":"/assertj/assertj/issues/2235","createdAt":"2021-05-29T09:00:24Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add hasNoExtension to Path assertions","url":"https://github.com/assertj/assertj/pull/2334","resourcePath":"/assertj/assertj/pull/2334","createdAt":"2021-09-05T12:52:01Z","number":2334,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractPathAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldHaveNoExtension.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Paths.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/path/PathAssert_hasNoExtension_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldHaveNoExtension_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertHasNoExtension_Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzI3Mzk3NTgwOjA1ZTMxYmIxYzkzYmU4MjVhNjRlNzk5OGZiOTQzNzg0YjJkMmMzOGI=","url":"https://github.com/assertj/assertj/pull/2334/commits/05e31bb1c93be825a64e7998fb943784b2d2c38b"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2318,"url":"https://github.com/assertj/assertj/issues/2318","title":"Add `hasNoExtension` to `Path` assertions","bodyHTML":"<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(Paths.get(&quot;file&quot;)).hasNoExtension();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Paths</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s\">\"file\"</span>)).<span class=\"pl-en\">hasNoExtension</span>();</pre></div>\n<p dir=\"auto\">Related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"906422663\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2233\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2233/hovercard\" href=\"https://github.com/assertj/assertj/issues/2233\">#2233</a>.</p>","resourcePath":"/assertj/assertj/issues/2318","createdAt":"2021-08-20T08:26:51Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"issue-2401 extracting should throw an assertion error if actual is null","url":"https://github.com/assertj/assertj/pull/2408","resourcePath":"/assertj/assertj/pull/2408","createdAt":"2021-11-13T08:47:56Z","number":2408,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_extracting_with_Function_and_AssertFactory_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4ue71W2gAoMTQ2ZDY3NWE1YWY0ODNlZWUzNjFjNmI2ZmY2ZDZiZGNiNzM4MzA2Zg","url":"https://github.com/assertj/assertj/pull/2408/commits/146d675a5af483eee361c6b6ff6d6bdcb738306f"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2401,"url":"https://github.com/assertj/assertj/issues/2401","title":"`extracting` should throw a proper assertion error if `actual` is null","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Based on <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1045678767\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2392\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2392/hovercard?comment_id=961969975&amp;comment_type=issue_comment\" href=\"https://github.com/assertj/assertj/issues/2392#issuecomment-961969975\">#2392 (comment)</a> and further comments, the implementation of <code class=\"notranslate\">extracting(Function, AssertFactory)</code> and <code class=\"notranslate\">extracting(String, AssertFactory)</code> in <code class=\"notranslate\">AbstractAssert</code> should be improved to ensure that a preliminary <code class=\"notranslate\">isNotNull</code> check is performed.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">The following assertions:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThatObject(null).extracting(Object::getClass);\nassertThatObject(null).extracting(&quot;class&quot;);\"><pre><span class=\"pl-en\">assertThatObject</span>(<span class=\"pl-c1\">null</span>).<span class=\"pl-en\">extracting</span>(<span class=\"pl-s1\">Object</span>::<span class=\"pl-s1\">getClass</span>);\n<span class=\"pl-en\">assertThatObject</span>(<span class=\"pl-c1\">null</span>).<span class=\"pl-en\">extracting</span>(<span class=\"pl-s\">\"class\"</span>);</pre></div>\n<p dir=\"auto\">should fail with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting actual not to be null\"><pre class=\"notranslate\"><code>java.lang.AssertionError: \nExpecting actual not to be null\n</code></pre></div>\n<p dir=\"auto\">instead of failing with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.NullPointerException\n\tat org.assertj.core.api.AbstractAssert.extracting(AbstractAssert.java:1016)\n\tat org.assertj.core.api.AbstractObjectAssert.extracting(AbstractObjectAssert.java:953)\n\t...\"><pre class=\"notranslate\"><code>java.lang.NullPointerException\n\tat org.assertj.core.api.AbstractAssert.extracting(AbstractAssert.java:1016)\n\tat org.assertj.core.api.AbstractObjectAssert.extracting(AbstractObjectAssert.java:953)\n\t...\n</code></pre></div>\n<p dir=\"auto\">and:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.IllegalArgumentException: The object to extract property/field from should not be null\n\tat org.assertj.core.util.Preconditions.checkArgument(Preconditions.java:129)\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:49)\n\tat org.assertj.core.extractor.ByNameSingleExtractor.apply(ByNameSingleExtractor.java:29)\n\tat org.assertj.core.api.AbstractAssert.extracting(AbstractAssert.java:990)\n\tat org.assertj.core.api.AbstractObjectAssert.extracting(AbstractObjectAssert.java:834)\n\t...\"><pre class=\"notranslate\"><code>java.lang.IllegalArgumentException: The object to extract property/field from should not be null\n\tat org.assertj.core.util.Preconditions.checkArgument(Preconditions.java:129)\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:49)\n\tat org.assertj.core.extractor.ByNameSingleExtractor.apply(ByNameSingleExtractor.java:29)\n\tat org.assertj.core.api.AbstractAssert.extracting(AbstractAssert.java:990)\n\tat org.assertj.core.api.AbstractObjectAssert.extracting(AbstractObjectAssert.java:834)\n\t...\n</code></pre></div>\n<p dir=\"auto\">respectively.</p>","resourcePath":"/assertj/assertj/issues/2401","createdAt":"2021-11-09T22:59:26Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Issue 2379 map assert throws npe on null key and value","url":"https://github.com/assertj/assertj/pull/2382","resourcePath":"/assertj/assertj/pull/2382","createdAt":"2021-10-21T08:33:40Z","number":2382,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Maps.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/util/NonaryFunction.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/MapAssertBaseTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/map/MapAssert_containsKey_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/map/MapAssert_containsValue_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/map/MapAssert_doesNotContainKey_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/map/MapAssert_doesNotContainValue_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4tevFI2gAoOWViMjdkNzAwNWNlODA3ZDAxZDAxODBkZjc5NDYyNWRiMjc4YzYxZQ","url":"https://github.com/assertj/assertj/pull/2382/commits/9eb27d7005ce807d01d0180df794625db278c61e"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2379,"url":"https://github.com/assertj/assertj/issues/2379","title":"MapAssert throws NPE on null key and value","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\"><code class=\"notranslate\">MapAssert</code> throws NPE on <code class=\"notranslate\">null</code> key and value, if <code class=\"notranslate\">Map</code> implementation does not accept <code class=\"notranslate\">null</code> values like <code class=\"notranslate\">java.util.Map#of(*)</code>.<br>\nFor <code class=\"notranslate\">List</code> there ist a special method  <code class=\"notranslate\">ListAssert#doesNotContainNull()</code>.<br>\nMaybe <code class=\"notranslate\">MapAssert</code> should also have special treatment for <code class=\"notranslate\">null</code> keys and values.<br>\nAt least the negative verification methods shouldn't throw an exception.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(List.of(&quot;a&quot;, &quot;b&quot;)).doesNotContainNull(); // OK\n\nassertThat(Map.of(&quot;a&quot;, &quot;b&quot;)).containsValue(null); // NPE\nassertThat(Map.of(&quot;a&quot;, &quot;b&quot;)).containsKey(null); // NPE\n\nassertThat(Map.of(&quot;a&quot;, &quot;b&quot;)).doesNotContainKey(null); // NPE\nassertThat(Map.of(&quot;a&quot;, &quot;b&quot;)).doesNotContainValue(null); // NPE\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">List</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"a\"</span>, <span class=\"pl-s\">\"b\"</span>)).<span class=\"pl-en\">doesNotContainNull</span>(); <span class=\"pl-c\">// OK</span>\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Map</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"a\"</span>, <span class=\"pl-s\">\"b\"</span>)).<span class=\"pl-en\">containsValue</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// NPE</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Map</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"a\"</span>, <span class=\"pl-s\">\"b\"</span>)).<span class=\"pl-en\">containsKey</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// NPE</span>\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Map</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"a\"</span>, <span class=\"pl-s\">\"b\"</span>)).<span class=\"pl-en\">doesNotContainKey</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// NPE</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Map</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"a\"</span>, <span class=\"pl-s\">\"b\"</span>)).<span class=\"pl-en\">doesNotContainValue</span>(<span class=\"pl-c1\">null</span>); <span class=\"pl-c\">// NPE</span></pre></div>\n<p dir=\"auto\">run with org.assertj:assertj-core:3.21.0</p>","resourcePath":"/assertj/assertj/issues/2379","createdAt":"2021-10-20T06:11:52Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Avoid reflection when extracting `Optional` value","url":"https://github.com/assertj/assertj/pull/2364","resourcePath":"/assertj/assertj/pull/2364","createdAt":"2021-10-09T21:35:09Z","number":2364,"mergeCommit":{"oid":"7d78fa8f9f72f4f3b252c21bce9b03d77426a8b6","message":"Avoid reflection when extracting `Optional` value (#2364)","commitUrl":"https://github.com/assertj/assertj/commit/7d78fa8f9f72f4f3b252c21bce9b03d77426a8b6","parents":{"nodes":[{"oid":"c91eb66ab36c2d733b1c5ec3bcbb5c8b1410278a","message":"Bump japicmp-maven-plugin from 0.15.3 to 0.15.4 (#2362)\n\nBumps [japicmp-maven-plugin](https://github.com/siom79/japicmp) from 0.15.3 to 0.15.4.\n- [Release notes](https://github.com/siom79/japicmp/releases)\n- [Changelog](https://github.com/siom79/japicmp/blob/master/release.py)\n- [Commits](https://github.com/siom79/japicmp/compare/japicmp-base-0.15.3...japicmp-base-0.15.4)\n\n---\nupdated-dependencies:\n- dependency-name: com.github.siom79.japicmp:japicmp-maven-plugin\n  dependency-type: direct:production\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/util/introspection/PropertyOrFieldSupport.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/object/ObjectAssert_extracting_with_String_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/introspection/PropertyOrFieldSupport_getSimpleValue_with_Map_input_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/util/introspection/PropertyOrFieldSupport_getSimpleValue_with_Optional_input_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4s-hWT2gAoYjNkNjIyNWYzYjVhYWMwMDZiZWIzZDFiZWRjZmRjOWU2MzA2YjA4ZA","url":"https://github.com/assertj/assertj/pull/2364/commits/b3d6225f3b5aac006beb3d1bedcfdc9e6306b08d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2363,"url":"https://github.com/assertj/assertj/issues/2363","title":"Extracting through field names not supported for optional in java 17","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I'm upgrading to java 17 (from java 11), and I have some tests failing due to an incompatibility between java 17 and assertJ.<br>\nOne of the breaking changes introduced by java 17 is <a href=\"https://openjdk.java.net/jeps/396\" rel=\"nofollow\">JEP 396: Strongly Encapsulate JDK Internals by Default</a>.<br>\nIt seems that assertJ try to force access to non public value (not public) when extracting them through field name =&gt; extract the value from an optional (\"object.value\") and since the value is not public I got this exception:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"org.assertj.core.util.introspection.IntrospectionError: \nCan't find any field or property with name 'value'.\nError when introspecting properties was :\n- No getter for property 'value' in java.util.Optional \nError when introspecting fields was :\n- Unable to obtain the value of the field &lt;'value'&gt; from &lt;Optional[john]&gt;\n\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getSimpleValue(PropertyOrFieldSupport.java:88)\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:60)\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:57)\n\tat org.assertj.core.extractor.ByNameSingleExtractor.apply(ByNameSingleExtractor.java:29)\n\tat org.assertj.core.api.AbstractAssert.extracting(AbstractAssert.java:1059)\n\tat org.assertj.core.api.AbstractObjectAssert.extracting(AbstractObjectAssert.java:834)\n\tat fr.witchbird.cl.negotiation.test.functional.VersionIT.should_access(VersionIT.java:165)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)\nCaused by: org.assertj.core.util.introspection.IntrospectionError: Unable to obtain the value of the field &lt;'value'&gt; from &lt;Optional[john]&gt;\n\tat org.assertj.core.util.introspection.FieldSupport.readSimpleField(FieldSupport.java:248)\n\tat org.assertj.core.util.introspection.FieldSupport.fieldValue(FieldSupport.java:202)\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getSimpleValue(PropertyOrFieldSupport.java:70)\n\t... 28 more\nCaused by: java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.lang.Object java.util.Optional.value accessible: module java.base does not &quot;opens java.util&quot; to unnamed module @7fbe847c\n\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)\n\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)\n\tat java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)\n\tat java.base/java.lang.reflect.Field.setAccessible(Field.java:172)\n\tat org.assertj.core.util.introspection.FieldUtils.getField(FieldUtils.java:67)\n\tat org.assertj.core.util.introspection.FieldUtils.readField(FieldUtils.java:143)\n\tat org.assertj.core.util.introspection.FieldSupport.readSimpleField(FieldSupport.java:208)\n\t... 30 more\"><pre class=\"notranslate\"><code>org.assertj.core.util.introspection.IntrospectionError: \nCan't find any field or property with name 'value'.\nError when introspecting properties was :\n- No getter for property 'value' in java.util.Optional \nError when introspecting fields was :\n- Unable to obtain the value of the field &lt;'value'&gt; from &lt;Optional[john]&gt;\n\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getSimpleValue(PropertyOrFieldSupport.java:88)\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:60)\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:57)\n\tat org.assertj.core.extractor.ByNameSingleExtractor.apply(ByNameSingleExtractor.java:29)\n\tat org.assertj.core.api.AbstractAssert.extracting(AbstractAssert.java:1059)\n\tat org.assertj.core.api.AbstractObjectAssert.extracting(AbstractObjectAssert.java:834)\n\tat fr.witchbird.cl.negotiation.test.functional.VersionIT.should_access(VersionIT.java:165)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:69)\n\tat com.intellij.rt.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:33)\n\tat com.intellij.rt.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:235)\n\tat com.intellij.rt.junit.JUnitStarter.main(JUnitStarter.java:54)\nCaused by: org.assertj.core.util.introspection.IntrospectionError: Unable to obtain the value of the field &lt;'value'&gt; from &lt;Optional[john]&gt;\n\tat org.assertj.core.util.introspection.FieldSupport.readSimpleField(FieldSupport.java:248)\n\tat org.assertj.core.util.introspection.FieldSupport.fieldValue(FieldSupport.java:202)\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getSimpleValue(PropertyOrFieldSupport.java:70)\n\t... 28 more\nCaused by: java.lang.reflect.InaccessibleObjectException: Unable to make field private final java.lang.Object java.util.Optional.value accessible: module java.base does not \"opens java.util\" to unnamed module @7fbe847c\n\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)\n\tat java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)\n\tat java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)\n\tat java.base/java.lang.reflect.Field.setAccessible(Field.java:172)\n\tat org.assertj.core.util.introspection.FieldUtils.getField(FieldUtils.java:67)\n\tat org.assertj.core.util.introspection.FieldUtils.readField(FieldUtils.java:143)\n\tat org.assertj.core.util.introspection.FieldSupport.readSimpleField(FieldSupport.java:208)\n\t... 30 more\n</code></pre></div>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"       private static class Person {\n\t\tprivate final Optional&lt;String&gt; name;\n\n\t\tpublic Person(final Optional&lt;String&gt; name) {\n\t\t\tthis.name = name;\n\t\t}\n\n\t\tpublic Optional&lt;String&gt; getName() {\n\t\t\treturn name;\n\t\t}\n\t}\n\n\t@Test\n\tpublic void should_access() {\n\t\tfinal Optional&lt;String&gt; name = Optional.of(&quot;john&quot;);\n\t\tfinal var person = new Person(name);\n\t\tAssertions.assertThat(person)\n\t\t        .extracting(&quot;name.value&quot;)\n\t\t        .isEqualTo(&quot;john&quot;);\n\t}\"><pre>       <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Person</span> {\n\t\t<span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Optional</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">name</span>;\n\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">Person</span>(<span class=\"pl-k\">final</span> <span class=\"pl-smi\">Optional</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">name</span>) {\n\t\t\t<span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">name</span> = <span class=\"pl-s1\">name</span>;\n\t\t}\n\n\t\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">Optional</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-en\">getName</span>() {\n\t\t\t<span class=\"pl-k\">return</span> <span class=\"pl-s1\">name</span>;\n\t\t}\n\t}\n\n\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">should_access</span>() {\n\t\t<span class=\"pl-k\">final</span> <span class=\"pl-smi\">Optional</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">name</span> = <span class=\"pl-s1\">Optional</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"john\"</span>);\n\t\t<span class=\"pl-k\">final</span> <span class=\"pl-smi\">var</span> <span class=\"pl-s1\">person</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Person</span>(<span class=\"pl-s1\">name</span>);\n\t\t<span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">person</span>)\n\t\t        .<span class=\"pl-en\">extracting</span>(<span class=\"pl-s\">\"name.value\"</span>)\n\t\t        .<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"john\"</span>);\n\t}</pre></div>","resourcePath":"/assertj/assertj/issues/2363","createdAt":"2021-10-08T18:18:16Z","labels":{"edges":[{"node":{"name":"type: bug"}},{"node":{"name":"java: 17+"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Extracting/map for iterable/array should throw a proper assertion error if any element is null","url":"https://github.com/assertj/assertj/pull/2427","resourcePath":"/assertj/assertj/pull/2427","createdAt":"2021-12-07T19:44:38Z","number":2427,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractIterableAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractListAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_extracting_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_map_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4vhKeE2gAoNDY2MTRmYmUwY2JhYjhlYzAwZTYzNDNjZmNhZmMwZDllNzU2ZWQzMg","url":"https://github.com/assertj/assertj/pull/2427/commits/46614fbe0cbab8ec00e6343cfcafc0d9e756ed32"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2411,"url":"https://github.com/assertj/assertj/issues/2411","title":"Extracting/map for iterable now throws an assertion error if actual iterable null","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Similar to  <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1049211176\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2401\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2401/hovercard\" href=\"https://github.com/assertj/assertj/issues/2401\">#2401</a> but for iterable/arrays</p>\n<p dir=\"auto\">There are quite a few variations to cover and tests;</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">extracting(Function)</code>, <code class=\"notranslate\">map(Function) </code>, <code class=\"notranslate\">extracting(ThrowingExtractor)</code> and <code class=\"notranslate\">map(ThrowingExtractor)</code>, will be fixed by changing <code class=\"notranslate\">internalExtracting</code>, tests needed for the 4 methods exposed in the API.</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">extracting(Function...)</code> and <code class=\"notranslate\">map(Function...)</code>, will be fixed by changing <code class=\"notranslate\">extractingForProxy</code>, tests needed for both</li>\n</ul>","resourcePath":"/assertj/assertj/issues/2411","createdAt":"2021-11-15T09:53:20Z","labels":{"edges":[{"node":{"name":"breaking change"}},{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"modified all subclasses of FilesBaseTest to use real filesystem file","url":"https://github.com/assertj/assertj/pull/2422","resourcePath":"/assertj/assertj/pull/2422","createdAt":"2021-11-24T09:19:51Z","number":2422,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsDirectoryNotContaining_Predicate_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsDirectoryNotContaining_SyntaxAndPattern_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsDirectory_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsEmptyDirectory_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsEmptyFile_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsFile_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsNotEmptyDirectory_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsNotEmptyFile_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsRelative_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertSameContentAs_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4u8_lS2gAoZWFhNGMyN2Q3NDFmMzQ3MTRhYWNjNWE4NDg3MjIyMWQ1YzBhZGRlYg","url":"https://github.com/assertj/assertj/pull/2422/commits/eaa4c27d741f34714aacc5a84872221d5c0addeb"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2337,"url":"https://github.com/assertj/assertj/issues/2337","title":"Avoid mocks for testing `File` assertions","bodyHTML":"<p dir=\"auto\">Similar to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"945465650\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2292\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/assertj/assertj/pull/2292/hovercard\" href=\"https://github.com/assertj/assertj/pull/2292\">#2292</a>, all the test cases in subclasses of <code class=\"notranslate\">FilesBaseTest</code> should use real filesystem elements and not mocks.</p>\n<p dir=\"auto\">We might still favor the NIO2 File API to initialize the test prerequisites, so <code class=\"notranslate\">actual</code> would be obtained via <code class=\"notranslate\">Path::toFile</code>.</p>","resourcePath":"/assertj/assertj/issues/2337","createdAt":"2021-09-08T21:30:29Z","labels":{"edges":[{"node":{"name":"type: refactoring"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add `catchThrowableOfType` enriched alternatives","url":"https://github.com/assertj/assertj/pull/2410","resourcePath":"/assertj/assertj/pull/2410","createdAt":"2021-11-14T09:30:05Z","number":2410,"mergeCommit":{"oid":"6cd581150bcf2a2527378578d6c548f2071489b9","message":"Add `catchThrowableOfType` enriched alternatives (#2410)\n\nThis introduces the following alternatives:\r\n* `catchException`\r\n* `catchIllegalArgumentException`\r\n* `catchIllegalStateException`\r\n* `catchIndexOutOfBoundsException`\r\n* `catchIOException`\r\n* `catchNullPointerException`\r\n* `catchReflectiveOperationException`\r\n* `catchRuntimeException`","commitUrl":"https://github.com/assertj/assertj/commit/6cd581150bcf2a2527378578d6c548f2071489b9","parents":{"nodes":[{"oid":"367d1104a80c8b562db90e0105c796dd5e48ac84","message":"Javadoc typo"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_catchReflectiveOperationException_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_catchRuntimeException_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/EntryPointAssertions_catchException_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/EntryPointAssertions_catchIOException_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/EntryPointAssertions_catchIllegalArgumentException_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/EntryPointAssertions_catchIllegalStateException_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/EntryPointAssertions_catchIndexOutOfBoundsException_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/EntryPointAssertions_catchNullPointerException_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/EntryPointAssertions_catchReflectiveOperationException_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/EntryPointAssertions_catchRuntimeException_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4ufqQe2gAoZDIyYWJkOWYwZDMwOGE4MTg3ZjBlZWVhMGFmODdjNDI3NjZmOWY1YQ","url":"https://github.com/assertj/assertj/pull/2410/commits/d22abd9f0d308a8187f0eeea0af87c42766f9f5a"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2397,"url":"https://github.com/assertj/assertj/issues/2397","title":"`catchThrowableOfType` enriched alternatives","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Similarly to the enriched alternatives of <a href=\"https://assertj.github.io/doc/#assertj-core-exception-assertions-assertThatExceptionOfType\" rel=\"nofollow\"><code class=\"notranslate\">assertThatExceptionOfType</code></a>, we could introduce enriched versions of <code class=\"notranslate\">catchThrowableOfType</code>.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"NullPointerException npe = catchNullPointerException( () -&gt; ... );\nIllegalArgumentException iae = catchIllegalArgumentException( () -&gt; ... );\nIllegalStateException ise = catchIllegalStateException( () -&gt; ... );\nIOException ioe = catchIOException( () -&gt; ... );\"><pre><span class=\"pl-smi\">NullPointerException</span> <span class=\"pl-s1\">npe</span> = <span class=\"pl-en\">catchNullPointerException</span>( () -&gt; ... );\n<span class=\"pl-smi\">IllegalArgumentException</span> <span class=\"pl-s1\">iae</span> = <span class=\"pl-en\">catchIllegalArgumentException</span>( () -&gt; ... );\n<span class=\"pl-smi\">IllegalStateException</span> <span class=\"pl-s1\">ise</span> = <span class=\"pl-en\">catchIllegalStateException</span>( () -&gt; ... );\n<span class=\"pl-smi\">IOException</span> <span class=\"pl-s1\">ioe</span> = <span class=\"pl-en\">catchIOException</span>( () -&gt; ... );</pre></div>","resourcePath":"/assertj/assertj/issues/2397","createdAt":"2021-11-08T16:27:49Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Is directory recursively containing string","url":"https://github.com/assertj/assertj/pull/2413","resourcePath":"/assertj/assertj/pull/2413","createdAt":"2021-11-17T23:16:39Z","number":2413,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertIsDirectoryRecursivelyContaining_Predicate_Test.java"}},{"node":{"changeType":"DELETED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertIsDirectoryRecursivelyContaining_SyntaxAndPattern_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertIsDirectoryRecursivelyContaining_with_String_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4urr_T2gAoN2ZmMjU4YTY0YzgwNjE0NjMwMmY4ZDNkNGU2OGI4YTU1ZDI5ODQxMg","url":"https://github.com/assertj/assertj/pull/2413/commits/7ff258a64c806146302f8d3d4e68b8a55d298412"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2338,"url":"https://github.com/assertj/assertj/issues/2338","title":"`isDirectoryRecursivelyContaining(String)` should apply filter pattern to filenames only","bodyHTML":"<p dir=\"auto\">Similar to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"984933367\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2329\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2329/hovercard\" href=\"https://github.com/assertj/assertj/issues/2329\">#2329</a>, <code class=\"notranslate\">isDirectoryRecursivelyContaining(String)</code> should apply the filter pattern to filenames only and not to the entire path.</p>\n<p dir=\"auto\">Together with this change, the existing assertion tests for both variants with <code class=\"notranslate\">String</code> and <code class=\"notranslate\">Predicate</code> should be refactored to use the same style introduced with <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"945465650\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2292\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/assertj/assertj/pull/2292/hovercard\" href=\"https://github.com/assertj/assertj/pull/2292\">#2292</a> and to inherit from <code class=\"notranslate\">PathsBaseTest</code> instead of <code class=\"notranslate\">PathsSimpleBaseTest</code>, which should be deleted eventually.</p>","resourcePath":"/assertj/assertj/issues/2338","createdAt":"2021-09-09T19:35:41Z","labels":{"edges":[{"node":{"name":"breaking change"}},{"node":{"name":"status: team discussion"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Issue2211 has no null fields or properties recurrence","url":"https://github.com/assertj/assertj/pull/2393","resourcePath":"/assertj/assertj/pull/2393","createdAt":"2021-11-06T12:07:39Z","number":2393,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/api/recursive/FieldLocation_startsWith_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/recursive/assertion/AbstractRecursiveAssertionDriverTestBase.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionDriver_AssertionApplicationTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionDriver_CollectionHandlingTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionDriver_JavaClassLibraryRecursionTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionDriver_MapHandlingTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionDriver_OptionalHandlingTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionDriver_PrimitiveFieldHandlingTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/recursive/assertion/RecursiveAssertionDriver_RecursionTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration_shouldIgnoreCollectionOrder_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4uLk1Q2gAoZjdiZmIwZTFjN2RiNDg3ZDUxMTQ2NDFiN2VjYTEwZTUwZjliMGM0Mg","url":"https://github.com/assertj/assertj/pull/2393/commits/f7bfb0e1c7db487d5114641b7eca10e50f9b0c42"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2211,"url":"https://github.com/assertj/assertj/issues/2211","title":"`hasNoNullFieldsOrProperties` - recurrence","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">When we have more complicated objects structure it will be useful to have possibility to check that all fields for actual object and all fields in included object are also not null.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    class Author {\n        String name;\n        String email;\n\n        Author(String name, String email) {\n            this.name = name;\n            this.email = email;\n        }\n    }\n\n    class Book {\n        String title;\n        Author author;\n\n        Book(String title, Author author) {\n            this.title = title;\n            this.author = author;\n        }\n    }\n\n    @Test\n    void testHasNoNullFieldsOrProperties() {\n        Book book = new Book(&quot;title&quot;, new Author(null, null));\n        assertThat(book).hasNoNullFieldsOrProperties();\n        assertThat(book.author).hasNoNullFieldsOrProperties();\n    }\n\"><pre>    <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Author</span> {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">name</span>;\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">email</span>;\n\n        <span class=\"pl-smi\">Author</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">name</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">email</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">name</span> = <span class=\"pl-s1\">name</span>;\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">email</span> = <span class=\"pl-s1\">email</span>;\n        }\n    }\n\n    <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Book</span> {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">title</span>;\n        <span class=\"pl-smi\">Author</span> <span class=\"pl-s1\">author</span>;\n\n        <span class=\"pl-smi\">Book</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">title</span>, <span class=\"pl-smi\">Author</span> <span class=\"pl-s1\">author</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">title</span> = <span class=\"pl-s1\">title</span>;\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">author</span> = <span class=\"pl-s1\">author</span>;\n        }\n    }\n\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">testHasNoNullFieldsOrProperties</span>() {\n        <span class=\"pl-smi\">Book</span> <span class=\"pl-s1\">book</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Book</span>(<span class=\"pl-s\">\"title\"</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Author</span>(<span class=\"pl-c1\">null</span>, <span class=\"pl-c1\">null</span>));\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">book</span>).<span class=\"pl-en\">hasNoNullFieldsOrProperties</span>();\n        <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">book</span>.<span class=\"pl-s1\">author</span>).<span class=\"pl-en\">hasNoNullFieldsOrProperties</span>();\n    }</pre></div>\n<p dir=\"auto\">assertion <code class=\"notranslate\">assertThat(book).hasNoNullFieldsOrProperties()</code> will pass and it is true<br>\nsecond assertion <code class=\"notranslate\">assertThat(book.author).hasNoNullFieldsOrProperties()</code> will fail and it is also ok.</p>\n<p dir=\"auto\">When we have object with many other object we must write many assertions for each fields.<br>\nWhen we add new field to object we must also remember to add new assertion.</p>\n<h4 dir=\"auto\">Proposition</h4>\n<p dir=\"auto\">assertion <code class=\"notranslate\">assertThat(book).hasNoNullFieldsOrProperties()</code> should fail because object <code class=\"notranslate\">book.author</code> has fields with <code class=\"notranslate\">null</code> values.</p>","resourcePath":"/assertj/assertj/issues/2211","createdAt":"2021-05-13T21:58:22Z","labels":{"edges":[{"node":{"name":"Hacktoberfest"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Issue-2401 throw an assertion error if actual is null","url":"https://github.com/assertj/assertj/pull/2407","resourcePath":"/assertj/assertj/pull/2407","createdAt":"2021-11-13T08:22:25Z","number":2407,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_extracting_with_Function_and_AssertFactory_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4ue7Hn2gAoY2RmYmE5NTY2MDcyYWZkZGNjOTM0NmQ0YjFhODBhMTg1ZTljN2MyYQ","url":"https://github.com/assertj/assertj/pull/2407/commits/cdfba9566072afddcc9346d4b1a80a185e9c7c2a"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2401,"url":"https://github.com/assertj/assertj/issues/2401","title":"`extracting` should throw a proper assertion error if `actual` is null","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Based on <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1045678767\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2392\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2392/hovercard?comment_id=961969975&amp;comment_type=issue_comment\" href=\"https://github.com/assertj/assertj/issues/2392#issuecomment-961969975\">#2392 (comment)</a> and further comments, the implementation of <code class=\"notranslate\">extracting(Function, AssertFactory)</code> and <code class=\"notranslate\">extracting(String, AssertFactory)</code> in <code class=\"notranslate\">AbstractAssert</code> should be improved to ensure that a preliminary <code class=\"notranslate\">isNotNull</code> check is performed.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">The following assertions:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThatObject(null).extracting(Object::getClass);\nassertThatObject(null).extracting(&quot;class&quot;);\"><pre><span class=\"pl-en\">assertThatObject</span>(<span class=\"pl-c1\">null</span>).<span class=\"pl-en\">extracting</span>(<span class=\"pl-s1\">Object</span>::<span class=\"pl-s1\">getClass</span>);\n<span class=\"pl-en\">assertThatObject</span>(<span class=\"pl-c1\">null</span>).<span class=\"pl-en\">extracting</span>(<span class=\"pl-s\">\"class\"</span>);</pre></div>\n<p dir=\"auto\">should fail with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting actual not to be null\"><pre class=\"notranslate\"><code>java.lang.AssertionError: \nExpecting actual not to be null\n</code></pre></div>\n<p dir=\"auto\">instead of failing with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.NullPointerException\n\tat org.assertj.core.api.AbstractAssert.extracting(AbstractAssert.java:1016)\n\tat org.assertj.core.api.AbstractObjectAssert.extracting(AbstractObjectAssert.java:953)\n\t...\"><pre class=\"notranslate\"><code>java.lang.NullPointerException\n\tat org.assertj.core.api.AbstractAssert.extracting(AbstractAssert.java:1016)\n\tat org.assertj.core.api.AbstractObjectAssert.extracting(AbstractObjectAssert.java:953)\n\t...\n</code></pre></div>\n<p dir=\"auto\">and:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.IllegalArgumentException: The object to extract property/field from should not be null\n\tat org.assertj.core.util.Preconditions.checkArgument(Preconditions.java:129)\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:49)\n\tat org.assertj.core.extractor.ByNameSingleExtractor.apply(ByNameSingleExtractor.java:29)\n\tat org.assertj.core.api.AbstractAssert.extracting(AbstractAssert.java:990)\n\tat org.assertj.core.api.AbstractObjectAssert.extracting(AbstractObjectAssert.java:834)\n\t...\"><pre class=\"notranslate\"><code>java.lang.IllegalArgumentException: The object to extract property/field from should not be null\n\tat org.assertj.core.util.Preconditions.checkArgument(Preconditions.java:129)\n\tat org.assertj.core.util.introspection.PropertyOrFieldSupport.getValueOf(PropertyOrFieldSupport.java:49)\n\tat org.assertj.core.extractor.ByNameSingleExtractor.apply(ByNameSingleExtractor.java:29)\n\tat org.assertj.core.api.AbstractAssert.extracting(AbstractAssert.java:990)\n\tat org.assertj.core.api.AbstractObjectAssert.extracting(AbstractObjectAssert.java:834)\n\t...\n</code></pre></div>\n<p dir=\"auto\">respectively.</p>","resourcePath":"/assertj/assertj/issues/2401","createdAt":"2021-11-09T22:59:26Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Apply pattern to file name only with `isDirectoryContaining` / `isDirectoryNotContaining`","url":"https://github.com/assertj/assertj/pull/2333","resourcePath":"/assertj/assertj/pull/2333","createdAt":"2021-09-02T23:12:50Z","number":2333,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldNotContain_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/FilesBaseTest.java"}},{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsDirectoryContaining_with_Predicate_Test.java"}},{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsDirectoryContaining_with_String_Test.java"}},{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsDirectoryNotContaining_with_Predicate_Test.java"}},{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsDirectoryNotContaining_with_String_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertIsDirectoryContaining_with_String_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertIsDirectoryNotContaining_with_String_Test.java"}},{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertIsDirectoryRecursivelyContaining_with_Predicate_Test.java"}},{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertIsDirectoryRecursivelyContaining_with_String_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4rS1S42gAoOTZmNzk2M2NiMDZjOGNkMDczNzQ3NGExNWU3NTY4N2YzZjgwZWI5ZQ","url":"https://github.com/assertj/assertj/pull/2333/commits/96f7963cb06c8cd0737474a15e75687f3f80eb9e"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2329,"url":"https://github.com/assertj/assertj/issues/2329","title":"isDirectoryContaining fails for expected patterns","bodyHTML":"<p dir=\"auto\">Let's assume that there is a directory <code class=\"notranslate\">C:\\Temp\\junit12854012982575283912</code> which contains a file <code class=\"notranslate\">test-6e672c4ba0be4f0886d434125a0d062c.txt</code>.</p>\n<p dir=\"auto\">The assertion of <code class=\"notranslate\">assertThat(dir).isDirectoryContaining(\"glob:test-[0-9a-f]*.txt\")</code> and <code class=\"notranslate\">assertThat(dir).isDirectoryContaining(\"regex:test-[0-9a-f]+\\\\.txt\")</code> fails although it is not expected do so.</p>\n<p dir=\"auto\">The error messages is confusing and does not give a hint why this pattern would be wrong.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Expecting directory:\n  C:\\Temp\\junit12854012982575283912\\out\nto contain at least one file matching the 'glob:test-[0-9a-f]*.txt' pattern but there was none.\nThe directory content was:\n  [test-6e672c4ba0be4f0886d434125a0d062c.txt]\"><pre class=\"notranslate\"><code>Expecting directory:\n  C:\\Temp\\junit12854012982575283912\\out\nto contain at least one file matching the 'glob:test-[0-9a-f]*.txt' pattern but there was none.\nThe directory content was:\n  [test-6e672c4ba0be4f0886d434125a0d062c.txt]\n</code></pre></div>\n<p dir=\"auto\">Using the same with a <code class=\"notranslate\">PathMatcher</code> succeeds.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(dir.getFileSystem().getPathMatcher(&quot;glob:test-[0-9a-f]*.txt&quot;).matches(Path.of(&quot;test-6e672c4ba0be4f0886d434125a0d062c.txt&quot;))).isTrue();\nassertThat(dir.getFileSystem().getPathMatcher(&quot;regex:test-[0-9a-f]+\\\\.txt&quot;).matches(Path.of(&quot;test-6e672c4ba0be4f0886d434125a0d062c.txt&quot;))).isTrue();\"><pre class=\"notranslate\"><code>assertThat(dir.getFileSystem().getPathMatcher(\"glob:test-[0-9a-f]*.txt\").matches(Path.of(\"test-6e672c4ba0be4f0886d434125a0d062c.txt\"))).isTrue();\nassertThat(dir.getFileSystem().getPathMatcher(\"regex:test-[0-9a-f]+\\\\.txt\").matches(Path.of(\"test-6e672c4ba0be4f0886d434125a0d062c.txt\"))).isTrue();\n</code></pre></div>\n<p dir=\"auto\">There is also a difference between using <code class=\"notranslate\">Path</code> instead of <code class=\"notranslate\">File</code>. If the directory variable is of type <code class=\"notranslate\">Path</code>, the error outputs the absolute paths of the file in the directory. That gives a hint about what might be wrong.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Expecting directory:\n  C:\\Temp\\junit12854012982575283912\\out\nto contain at least one file matching the 'glob:test-[0-9a-f]*.txt' pattern but there was none.\nThe directory content was:\n  [C:\\Temp\\junit12854012982575283912\\out\\test-6e672c4ba0be4f0886d434125a0d062c.txt]\"><pre class=\"notranslate\"><code>Expecting directory:\n  C:\\Temp\\junit12854012982575283912\\out\nto contain at least one file matching the 'glob:test-[0-9a-f]*.txt' pattern but there was none.\nThe directory content was:\n  [C:\\Temp\\junit12854012982575283912\\out\\test-6e672c4ba0be4f0886d434125a0d062c.txt]\n</code></pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">isDirectoryContaining</code> tests against the absolute path of the files although it should test against their relative paths. The patterns from my example will of course never match against the absolute path! Using <code class=\"notranslate\">\"glob:**test-[0-9a-f]*.txt\"</code> works but the expectation when using the API is that the paths are relative. If it is really the intention to test against the absolute path, the docs should be very clear about this.</p>\n<p dir=\"auto\">p.s.<br>\nThis example in the javadoc <code class=\"notranslate\">.isDirectoryContaining(\"glob:**.{ext,bin\")</code> is missing a closing \"}\". It should be <code class=\"notranslate\">.isDirectoryContaining(\"glob:**.{ext,bin}\")</code>.</p>","resourcePath":"/assertj/assertj/issues/2329","createdAt":"2021-09-01T09:38:49Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"#2374 Accept vararg for AbstractAssert.satisfies","url":"https://github.com/assertj/assertj/pull/2389","resourcePath":"/assertj/assertj/pull/2389","createdAt":"2021-10-30T20:16:01Z","number":2389,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/BDDAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WithAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/Assertions_assertWith_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/BDDAssertions_then_Test.java"}},{"node":{"changeType":"DELETED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_satisfies_with_Consumer_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_satisfies_with_Consumers_Test.java"}},{"node":{"changeType":"RENAMED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractAssert_satisfies_with_ThrowingConsumers_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4t4hIK2gAoNTRhNDU0NGZkOTFiNTcyNTdiZThkZjQ4N2Q2MDM3YzY1NTVmMzRmZA","url":"https://github.com/assertj/assertj/pull/2389/commits/54a4544fd91b57257be8df487d6037c6555f34fd"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2374,"url":"https://github.com/assertj/assertj/issues/2374","title":"Add `satisfiesAllOf` to `AbstractAssert`","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">AssertJ already has support for soft assertions. However, that feature might be difficult to discover as it's not part of the main API and also a bit error-prone considering that you have to remember to call <code class=\"notranslate\">assertAll</code> in the end.</p>\n<p dir=\"auto\"><code class=\"notranslate\">AbstractAssert</code> already contains a <code class=\"notranslate\">satisfiesAnyOf</code> method, so this proposed method would be a nice complement to that. It would be easy to discover and would be less error-prone.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"TolkienCharacter frodo = new TolkienCharacter(&quot;Frodo&quot;, HOBBIT);\n    \nConsumer&lt;TolkienCharacter&gt; isHobbit = tolkienCharacter -&gt; assertThat(tolkienCharacter.getRace()).isEqualTo(HOBBIT);\nConsumer&lt;TolkienCharacter&gt; isElf = tolkienCharacter -&gt; assertThat(tolkienCharacter.getRace()).isEqualTo(ELF);\nConsumer&lt;TolkienCharacter&gt; isFrodo = tolkienCharacter -&gt; assertThat(tolkienCharacter.getName()).isEqualTo(&quot;Frodo&quot;);\nConsumer&lt;TolkienCharacter&gt; isBoromir = tolkienCharacter -&gt; assertThat(tolkienCharacter.getRace()).isEqualTo(&quot;Boromir&quot;);\n    \n// assertion succeeds:\nassertThat(frodo).satisfiesAllOf(isHobbit, isFrodo);\n    \n// assertion fails reporting all failures:\nassertThat(boromir).satisfiesAllOf(isElf, isBoromir);\"><pre><span class=\"pl-smi\">TolkienCharacter</span> <span class=\"pl-s1\">frodo</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TolkienCharacter</span>(<span class=\"pl-s\">\"Frodo\"</span>, <span class=\"pl-c1\">HOBBIT</span>);\n    \n<span class=\"pl-smi\">Consumer</span>&lt;<span class=\"pl-smi\">TolkienCharacter</span>&gt; <span class=\"pl-s1\">isHobbit</span> = <span class=\"pl-s1\">tolkienCharacter</span> -&gt; <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">tolkienCharacter</span>.<span class=\"pl-en\">getRace</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">HOBBIT</span>);\n<span class=\"pl-smi\">Consumer</span>&lt;<span class=\"pl-smi\">TolkienCharacter</span>&gt; <span class=\"pl-s1\">isElf</span> = <span class=\"pl-s1\">tolkienCharacter</span> -&gt; <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">tolkienCharacter</span>.<span class=\"pl-en\">getRace</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">ELF</span>);\n<span class=\"pl-smi\">Consumer</span>&lt;<span class=\"pl-smi\">TolkienCharacter</span>&gt; <span class=\"pl-s1\">isFrodo</span> = <span class=\"pl-s1\">tolkienCharacter</span> -&gt; <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">tolkienCharacter</span>.<span class=\"pl-en\">getName</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"Frodo\"</span>);\n<span class=\"pl-smi\">Consumer</span>&lt;<span class=\"pl-smi\">TolkienCharacter</span>&gt; <span class=\"pl-s1\">isBoromir</span> = <span class=\"pl-s1\">tolkienCharacter</span> -&gt; <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">tolkienCharacter</span>.<span class=\"pl-en\">getRace</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"Boromir\"</span>);\n    \n<span class=\"pl-c\">// assertion succeeds:</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">frodo</span>).<span class=\"pl-en\">satisfiesAllOf</span>(<span class=\"pl-s1\">isHobbit</span>, <span class=\"pl-s1\">isFrodo</span>);\n    \n<span class=\"pl-c\">// assertion fails reporting all failures:</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">boromir</span>).<span class=\"pl-en\">satisfiesAllOf</span>(<span class=\"pl-s1\">isElf</span>, <span class=\"pl-s1\">isBoromir</span>);</pre></div>\n<p dir=\"auto\">If the proposal is accepted I would be happy to contribute.</p>","resourcePath":"/assertj/assertj/issues/2374","createdAt":"2021-10-17T16:39:35Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Issue 2060 StringAssert: add variants with \"Ignoring\"","url":"https://github.com/assertj/assertj/pull/2416","resourcePath":"/assertj/assertj/pull/2416","createdAt":"2021-11-19T00:44:05Z","number":2416,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsNotEmptyFile_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertIsRelative_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/files/Files_assertSameContentAs_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertIsDirectoryRecursivelyContaining_Predicate_Test.java"}},{"node":{"changeType":"DELETED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertIsDirectoryRecursivelyContaining_SyntaxAndPattern_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/paths/Paths_assertIsDirectoryRecursivelyContaining_with_String_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertContainsIgnoringNewLines_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/test/ObjectWithOptionalField.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/example/custom/map_test.java"}},{"node":{"changeType":"ADDED","path":"src/test/resources/to_write.txt"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4uvtIr2gAoYmVlYzlkNDRhNzQ1NTA2YjY1ZDUyOTVhYzlkZjdiNDhiZmM5YTg5Ng","url":"https://github.com/assertj/assertj/pull/2416/commits/beec9d44a745506b65d5295ac9df7b48bfc9a896"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2060,"url":"https://github.com/assertj/assertj/issues/2060","title":"StringAssert: add variants with \"Ignoring\"","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Currently the <code class=\"notranslate\">AbstractCharSequenceAssert</code> has a method <code class=\"notranslate\">containsIgnoringCase(...)</code>. It would appreciable to have the same variants as the <code class=\"notranslate\">isEqualToIgnoring...</code>. So:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">containsIgnoringWhitespaces(CharSequence sequence)</code></li>\n<li><code class=\"notranslate\">containsIgnoringNewLines(CharSequence sequence)</code></li>\n</ul>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;gandalf is a \\r\\nwizard&quot;).containsIgnoringNewLines(&quot;gandalf is a wizard&quot;) // SUCCESS\nassertThat(&quot;gandalf is a wizard&quot;).containsIgnoringNewLines(&quot;gandalf is a \\nwizard&quot;) // SUCCESS\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"gandalf is a \\r\\nwizard\"</span>).<span class=\"pl-en\">containsIgnoringNewLines</span>(<span class=\"pl-s\">\"gandalf is a wizard\"</span>) <span class=\"pl-c\">// SUCCESS</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"gandalf is a wizard\"</span>).<span class=\"pl-en\">containsIgnoringNewLines</span>(<span class=\"pl-s\">\"gandalf is a \\nwizard\"</span>) <span class=\"pl-c\">// SUCCESS</span></pre></div>","resourcePath":"/assertj/assertj/issues/2060","createdAt":"2020-12-04T10:21:55Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix #2366: Multiline object formatting","url":"https://github.com/assertj/assertj/pull/2373","resourcePath":"/assertj/assertj/pull/2373","createdAt":"2021-10-17T11:31:02Z","number":2373,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/presentation/StandardRepresentation.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/presentation/StandardRepresentation_toStringOf_multiline_format_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/test/Xml.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4tSeid2gAoY2RhMmVlZTg4MTI5M2NjMTBlZjdhMzAwYzAzMDVmNDY5NTRhYTZmOQ","url":"https://github.com/assertj/assertj/pull/2373/commits/cda2eee881293cc10ef7a300c0305f46954aa6f9"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2366,"url":"https://github.com/assertj/assertj/issues/2366","title":"Create beautiful error messages for multi-line values and nested asserts","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">AssertJ error messages currently do not take into account that <code class=\"notranslate\">toString</code> of asserted values may contain new lines.</p>\n<p dir=\"auto\">The resulting error messages can at times look awkward due to missing indentation.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">For example let's consider a class where <code class=\"notranslate\">toString</code> returns multi-line XML:</p>\n<div class=\"highlight highlight-text-xml notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&lt;xml&gt;\n  &lt;value&gt;A&lt;/value&gt;\n&lt;/xml&gt;\"><pre>&lt;<span class=\"pl-ent\">xml</span>&gt;\n  &lt;<span class=\"pl-ent\">value</span>&gt;A&lt;/<span class=\"pl-ent\">value</span>&gt;\n&lt;/<span class=\"pl-ent\">xml</span>&gt;</pre></div>\n<p dir=\"auto\">For simplicity I will use the following:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  public static class Xml {\n    private final String value;\n    public Xml(String value) {\n      this.value = value;\n    }\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) return true;\n      if (o == null || getClass() != o.getClass()) return false;\n      Xml xml = (Xml) o;\n      return Objects.equals(value, xml.value);\n    }\n    @Override\n    public int hashCode() {\n      return Objects.hash(value);\n    }\n    @Override\n    public String toString() {\n      return &quot;&lt;xml&gt;\\n  &lt;value&gt;&quot; + value + &quot;&lt;/value&gt;\\n&lt;/xml&gt;&quot;;\n    }\n  }\n\n  private static Xml xml(String value) {\n    return new Xml(value);\n  }\"><pre>  <span class=\"pl-k\">public</span> <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Xml</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>;\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Xml</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>) {\n      <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">value</span> = <span class=\"pl-s1\">value</span>;\n    }\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">equals</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">o</span>) {\n      <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">this</span> == <span class=\"pl-s1\">o</span>) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;\n      <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">o</span> == <span class=\"pl-c1\">null</span> || <span class=\"pl-en\">getClass</span>() != <span class=\"pl-s1\">o</span>.<span class=\"pl-en\">getClass</span>()) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n      <span class=\"pl-smi\">Xml</span> <span class=\"pl-s1\">xml</span> = (<span class=\"pl-smi\">Xml</span>) <span class=\"pl-s1\">o</span>;\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">Objects</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">value</span>, <span class=\"pl-s1\">xml</span>.<span class=\"pl-s1\">value</span>);\n    }\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">hashCode</span>() {\n      <span class=\"pl-k\">return</span> <span class=\"pl-s1\">Objects</span>.<span class=\"pl-en\">hash</span>(<span class=\"pl-s1\">value</span>);\n    }\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">toString</span>() {\n      <span class=\"pl-k\">return</span> <span class=\"pl-s\">\"&lt;xml&gt;\\n  &lt;value&gt;\"</span> + <span class=\"pl-s1\">value</span> + <span class=\"pl-s\">\"&lt;/value&gt;\\n&lt;/xml&gt;\"</span>;\n    }\n  }\n\n  <span class=\"pl-k\">private</span> <span class=\"pl-k\">static</span> <span class=\"pl-smi\">Xml</span> <span class=\"pl-s1\">xml</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">value</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Xml</span>(<span class=\"pl-s1\">value</span>);\n  }</pre></div>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(xml(&quot;A&quot;)).isNull();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-en\">xml</span>(<span class=\"pl-s\">\"A\"</span>)).<span class=\"pl-en\">isNull</span>();</pre></div>\n<p dir=\"auto\">This will produce the following error message:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"org.opentest4j.AssertionFailedError: \nexpected: null\n but was: &lt;xml&gt;\n  &lt;value&gt;A&lt;/value&gt;\n&lt;/xml&gt;\"><pre class=\"notranslate\"><code>org.opentest4j.AssertionFailedError: \nexpected: null\n but was: &lt;xml&gt;\n  &lt;value&gt;A&lt;/value&gt;\n&lt;/xml&gt;\n</code></pre></div>\n<p dir=\"auto\">Notice that the first line is awkwardly placed directly after \"but was\". Also notice that last line has same indentation as \"expected\".</p>\n<p dir=\"auto\">This message could be improved to e.g.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"org.opentest4j.AssertionFailedError: \nexpected: \n  null\nbut was: \n  &lt;xml&gt;\n    &lt;value&gt;A&lt;/value&gt;\n  &lt;/xml&gt;\"><pre class=\"notranslate\"><code>org.opentest4j.AssertionFailedError: \nexpected: \n  null\nbut was: \n  &lt;xml&gt;\n    &lt;value&gt;A&lt;/value&gt;\n  &lt;/xml&gt;\n</code></pre></div>\n<p dir=\"auto\">Similarly:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(xml(&quot;A&quot;)).isEqualTo(xml(&quot;B&quot;));\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-en\">xml</span>(<span class=\"pl-s\">\"A\"</span>)).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-en\">xml</span>(<span class=\"pl-s\">\"B\"</span>));</pre></div>\n<p dir=\"auto\">currently produces the following error:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"org.opentest4j.AssertionFailedError: \nexpected: &lt;xml&gt;\n  &lt;value&gt;B&lt;/value&gt;\n&lt;/xml&gt;\n but was: &lt;xml&gt;\n  &lt;value&gt;A&lt;/value&gt;\n&lt;/xml&gt;\"><pre class=\"notranslate\"><code>org.opentest4j.AssertionFailedError: \nexpected: &lt;xml&gt;\n  &lt;value&gt;B&lt;/value&gt;\n&lt;/xml&gt;\n but was: &lt;xml&gt;\n  &lt;value&gt;A&lt;/value&gt;\n&lt;/xml&gt;\n</code></pre></div>\n<p dir=\"auto\">This could be improved to e.g.:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"org.opentest4j.AssertionFailedError: \nexpected: \n  &lt;xml&gt;\n    &lt;value&gt;B&lt;/value&gt;\n  &lt;/xml&gt;\nbut was: \n  &lt;xml&gt;\n    &lt;value&gt;A&lt;/value&gt;\n  &lt;/xml&gt;\"><pre class=\"notranslate\"><code>org.opentest4j.AssertionFailedError: \nexpected: \n  &lt;xml&gt;\n    &lt;value&gt;B&lt;/value&gt;\n  &lt;/xml&gt;\nbut was: \n  &lt;xml&gt;\n    &lt;value&gt;A&lt;/value&gt;\n  &lt;/xml&gt;\n</code></pre></div>\n<p dir=\"auto\">Indentation becomes even more useful to decipher error messages when we use <code class=\"notranslate\">anySatisfy</code>:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(Arrays.asList(xml(&quot;A&quot;), xml(&quot;B&quot;))).anySatisfy(v1 -&gt; {\n  assertThat(v1).isEqualTo(xml(&quot;C&quot;));\n});\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-en\">xml</span>(<span class=\"pl-s\">\"A\"</span>), <span class=\"pl-en\">xml</span>(<span class=\"pl-s\">\"B\"</span>))).<span class=\"pl-en\">anySatisfy</span>(<span class=\"pl-s1\">v1</span> -&gt; {\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">v1</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-en\">xml</span>(<span class=\"pl-s\">\"C\"</span>));\n});</pre></div>\n<p dir=\"auto\">Currently AssertJ produces:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting any element of:\n  [&lt;xml&gt;\n  &lt;value&gt;A&lt;/value&gt;\n&lt;/xml&gt;, &lt;xml&gt;\n  &lt;value&gt;B&lt;/value&gt;\n&lt;/xml&gt;]\nto satisfy the given assertions requirements but none did:\n\n&lt;xml&gt;\n  &lt;value&gt;A&lt;/value&gt;\n&lt;/xml&gt;\nerror: \nexpected: &lt;xml&gt;\n  &lt;value&gt;C&lt;/value&gt;\n&lt;/xml&gt;\n but was: &lt;xml&gt;\n  &lt;value&gt;A&lt;/value&gt;\n&lt;/xml&gt;\n\n&lt;xml&gt;\n  &lt;value&gt;B&lt;/value&gt;\n&lt;/xml&gt;\nerror: \nexpected: &lt;xml&gt;\n  &lt;value&gt;C&lt;/value&gt;\n&lt;/xml&gt;\n but was: &lt;xml&gt;\n  &lt;value&gt;B&lt;/value&gt;\n&lt;/xml&gt;\"><pre class=\"notranslate\"><code>java.lang.AssertionError: \nExpecting any element of:\n  [&lt;xml&gt;\n  &lt;value&gt;A&lt;/value&gt;\n&lt;/xml&gt;, &lt;xml&gt;\n  &lt;value&gt;B&lt;/value&gt;\n&lt;/xml&gt;]\nto satisfy the given assertions requirements but none did:\n\n&lt;xml&gt;\n  &lt;value&gt;A&lt;/value&gt;\n&lt;/xml&gt;\nerror: \nexpected: &lt;xml&gt;\n  &lt;value&gt;C&lt;/value&gt;\n&lt;/xml&gt;\n but was: &lt;xml&gt;\n  &lt;value&gt;A&lt;/value&gt;\n&lt;/xml&gt;\n\n&lt;xml&gt;\n  &lt;value&gt;B&lt;/value&gt;\n&lt;/xml&gt;\nerror: \nexpected: &lt;xml&gt;\n  &lt;value&gt;C&lt;/value&gt;\n&lt;/xml&gt;\n but was: &lt;xml&gt;\n  &lt;value&gt;B&lt;/value&gt;\n&lt;/xml&gt;\n</code></pre></div>\n<p dir=\"auto\">This could be improved to e.g.:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting any element of:\n  [\n    &lt;xml&gt;\n      &lt;value&gt;A&lt;/value&gt;\n    &lt;/xml&gt;\n  , \n    &lt;xml&gt;\n      &lt;value&gt;B&lt;/value&gt;\n    &lt;/xml&gt;\n  ]\nto satisfy the given assertions requirements but none did:\n\n  Element\n    &lt;xml&gt;\n      &lt;value&gt;A&lt;/value&gt;\n    &lt;/xml&gt;\n  : \n    expected: \n      &lt;xml&gt;\n        &lt;value&gt;C&lt;/value&gt;\n      &lt;/xml&gt;\n    but was: \n      &lt;xml&gt;\n        &lt;value&gt;A&lt;/value&gt;\n      &lt;/xml&gt;\n  \n  Element\n    &lt;xml&gt;\n      &lt;value&gt;B&lt;/value&gt;\n    &lt;/xml&gt;\n  : \n    expected: \n      &lt;xml&gt;\n        &lt;value&gt;C&lt;/value&gt;\n      &lt;/xml&gt;\n    but was: \n      &lt;xml&gt;\n        &lt;value&gt;B&lt;/value&gt;\n      &lt;/xml&gt;\"><pre class=\"notranslate\"><code>java.lang.AssertionError: \nExpecting any element of:\n  [\n    &lt;xml&gt;\n      &lt;value&gt;A&lt;/value&gt;\n    &lt;/xml&gt;\n  , \n    &lt;xml&gt;\n      &lt;value&gt;B&lt;/value&gt;\n    &lt;/xml&gt;\n  ]\nto satisfy the given assertions requirements but none did:\n\n  Element\n    &lt;xml&gt;\n      &lt;value&gt;A&lt;/value&gt;\n    &lt;/xml&gt;\n  : \n    expected: \n      &lt;xml&gt;\n        &lt;value&gt;C&lt;/value&gt;\n      &lt;/xml&gt;\n    but was: \n      &lt;xml&gt;\n        &lt;value&gt;A&lt;/value&gt;\n      &lt;/xml&gt;\n  \n  Element\n    &lt;xml&gt;\n      &lt;value&gt;B&lt;/value&gt;\n    &lt;/xml&gt;\n  : \n    expected: \n      &lt;xml&gt;\n        &lt;value&gt;C&lt;/value&gt;\n      &lt;/xml&gt;\n    but was: \n      &lt;xml&gt;\n        &lt;value&gt;B&lt;/value&gt;\n      &lt;/xml&gt;\n</code></pre></div>\n<p dir=\"auto\">The following extreme case produces very long and hard to decipher error messages.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(Arrays.asList(xml(&quot;A&quot;), xml(&quot;B&quot;))).anySatisfy(v1 -&gt; {\n  assertThat(Arrays.asList(xml(&quot;C&quot;), xml(&quot;D&quot;))).anySatisfy(v2 -&gt; {\n    assertThat(v1).isEqualTo(v2);\n  });\n});\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-en\">xml</span>(<span class=\"pl-s\">\"A\"</span>), <span class=\"pl-en\">xml</span>(<span class=\"pl-s\">\"B\"</span>))).<span class=\"pl-en\">anySatisfy</span>(<span class=\"pl-s1\">v1</span> -&gt; {\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-en\">xml</span>(<span class=\"pl-s\">\"C\"</span>), <span class=\"pl-en\">xml</span>(<span class=\"pl-s\">\"D\"</span>))).<span class=\"pl-en\">anySatisfy</span>(<span class=\"pl-s1\">v2</span> -&gt; {\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">v1</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">v2</span>);\n  });\n});</pre></div>\n<p dir=\"auto\">I will not include the long error here but I think indentation could also help a lot here to make errors parsable by humans.</p>","resourcePath":"/assertj/assertj/issues/2366","createdAt":"2021-10-11T12:15:30Z","labels":{"edges":[{"node":{"name":"Hacktoberfest"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"New Feature: AbstractThrowableAssert#message()  #2378","url":"https://github.com/assertj/assertj/pull/2387","resourcePath":"/assertj/assertj/pull/2387","createdAt":"2021-10-29T17:13:53Z","number":2387,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractThrowableAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/abstract_/AbstractThrowableAssert_message_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4t3F_C2gAoMTBhZTRjM2JkMDdmNTM1OWMxMmJjYzc4NDcwYTViOWRjNGE5OGYzOQ","url":"https://github.com/assertj/assertj/pull/2387/commits/10ae4c3bd07f5359c12bcc78470a5b9dc4a98f39"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2378,"url":"https://github.com/assertj/assertj/issues/2378","title":"New Feature: AbstractThrowableAssert#message()","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Please add a shortcut for <code class=\"notranslate\">extracting(Throwable::getMessage, as(InstanceOfAssertFactories.STRING))</code> to perform assertions on an exception's message (discussed in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"3636119\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/discussions/2376\" data-hovercard-type=\"discussion\" data-hovercard-url=\"/assertj/assertj/discussions/2376/hovercard?comment_id=1501664\" href=\"https://github.com/assertj/assertj/discussions/2376#discussioncomment-1501664\">#2376 (comment)</a>).</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Instead of</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThatThrownBy(() -&gt; {\n  /* code to test */\n})\n  .isInstanceOf(CertPathValidatorException.class)\n  .extracting(Throwable::getMessage, as(InstanceOfAssertFactories.STRING))\n  .containsAnyOf(\n    &quot;could not be determined&quot;,\n    &quot;could not determine revocation status&quot;,\n    &quot;revocation status check failed&quot;\n  );\"><pre><span class=\"pl-en\">assertThatThrownBy</span>(() -&gt; {\n  <span class=\"pl-c\">/* code to test */</span>\n})\n  .<span class=\"pl-en\">isInstanceOf</span>(<span class=\"pl-smi\">CertPathValidatorException</span>.<span class=\"pl-s1\">class</span>)\n  .<span class=\"pl-en\">extracting</span>(<span class=\"pl-s1\">Throwable</span>::<span class=\"pl-s1\">getMessage</span>, <span class=\"pl-en\">as</span>(<span class=\"pl-smi\">InstanceOfAssertFactories</span>.<span class=\"pl-c1\">STRING</span>))\n  .<span class=\"pl-en\">containsAnyOf</span>(\n    <span class=\"pl-s\">\"could not be determined\"</span>,\n    <span class=\"pl-s\">\"could not determine revocation status\"</span>,\n    <span class=\"pl-s\">\"revocation status check failed\"</span>\n  );</pre></div>\n<p dir=\"auto\">one can then use</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThatThrownBy(() -&gt; {\n  /* code to test */\n})\n  .isInstanceOf(CertPathValidatorException.class)\n  .message()\n  .containsAnyOf(\n    &quot;could not be determined&quot;,\n    &quot;could not determine revocation status&quot;,\n    &quot;revocation status check failed&quot;\n  );\"><pre><span class=\"pl-en\">assertThatThrownBy</span>(() -&gt; {\n  <span class=\"pl-c\">/* code to test */</span>\n})\n  .<span class=\"pl-en\">isInstanceOf</span>(<span class=\"pl-smi\">CertPathValidatorException</span>.<span class=\"pl-s1\">class</span>)\n  .<span class=\"pl-en\">message</span>()\n  .<span class=\"pl-en\">containsAnyOf</span>(\n    <span class=\"pl-s\">\"could not be determined\"</span>,\n    <span class=\"pl-s\">\"could not determine revocation status\"</span>,\n    <span class=\"pl-s\">\"revocation status check failed\"</span>\n  );</pre></div>","resourcePath":"/assertj/assertj/issues/2378","createdAt":"2021-10-19T11:33:05Z","labels":{"edges":[{"node":{"name":"good first issue"}},{"node":{"name":"Hacktoberfest"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add AbstractThrowableAssert#causesChain to simplify performing assertions on a chain of throwables","url":"https://github.com/assertj/assertj/pull/2423","resourcePath":"/assertj/assertj/pull/2423","createdAt":"2021-11-26T15:35:05Z","number":2423,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractThrowableAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/util/Throwables.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/throwable/ThrowableAssert_asCausesChain_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4vEVZL2gAoMmE1YjdmYWY0NmQzN2EwYWI5M2UwOTNjZjMwZWRmOTRkYTM4YzJiNg","url":"https://github.com/assertj/assertj/pull/2423/commits/2a5b7faf46d37a0ab93e093cf30edf94da38c2b6"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1147,"url":"https://github.com/assertj/assertj/issues/1147","title":"Provide semantic ways to test n-level (n>1) causes of an Exception, not only direct cause and root cause","bodyHTML":"<p dir=\"auto\">Assertj currently provides methods to test a thrown exception, its direct cause, or its root cause. It does not offer a semantic way to test the exceptions/causes in between the first cause and the root cause.</p>\n<p dir=\"auto\">Exceptions tend to get wrapped and wrapped by frameworks and libraries, and by project code. Sometimes the most meaningful exception is neither the one thrown nor its cause nor the root cause, but one somewhere in the middle.</p>\n<p dir=\"auto\">For example, BackendEx caused by BusinessLogicEx caused by SqlRollbackEx caused by UnableToExecuteSqlEx in a test where I just want to assert that my sql will be rolled back by finding the SqlRollbackEx in the stack.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThatThrownBy(() -&gt; {}).hasAnyLevelCauseInstanceOf(type);\nassertThatThrownBy(() -&gt; {}).hasAnyLevelCauseWithMessageMatching(condition);\n// etc\"><pre><span class=\"pl-en\">assertThatThrownBy</span>(() -&gt; {}).<span class=\"pl-en\">hasAnyLevelCauseInstanceOf</span>(<span class=\"pl-s1\">type</span>);\n<span class=\"pl-en\">assertThatThrownBy</span>(() -&gt; {}).<span class=\"pl-en\">hasAnyLevelCauseWithMessageMatching</span>(<span class=\"pl-s1\">condition</span>);\n<span class=\"pl-c\">// etc</span></pre></div>","resourcePath":"/assertj/assertj/issues/1147","createdAt":"2018-01-06T22:29:08Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Print offending token in error message from containsSubsequence","url":"https://github.com/assertj/assertj/pull/2396","resourcePath":"/assertj/assertj/pull/2396","createdAt":"2021-11-08T16:27:36Z","number":2396,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldContainSubsequence.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Iterables.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/iterables/Iterables_assertContainsSubsequence_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4uPLwa2gAoMmY4ZDI4Yzc3YjI4ZTlkYTE0N2M4OWVhMjYxOWJmZjU2ZDVjZWM0Yg","url":"https://github.com/assertj/assertj/pull/2396/commits/2f8d28c77b28e9da147c89ea2619bff56d5cec4b"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2395,"url":"https://github.com/assertj/assertj/issues/2395","title":"Error message from `containsSubsequence` should print offending token","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">The error message from <code class=\"notranslate\">containsSubsequence</code> should print the contents and index of the first token that was not contained in the actual value.<br>\nSee the example below.<br>\nIn this case, the offending token is the following line:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&quot;@DaggerGenerated\n@Generated(    value = &quot;dagger.internal.codegen.ComponentProcessor&quot;,    comments = &quot;https://github.com/jbock-java/dapper&quot;)\n@SuppressWarnings({    &quot;unchecked&quot;,    &quot;rawtypes&quot;})&quot;\"><pre class=\"notranslate\"><code>\"@DaggerGenerated\n@Generated(    value = \"dagger.internal.codegen.ComponentProcessor\",    comments = \"https://github.com/jbock-java/dapper\")\n@SuppressWarnings({    \"unchecked\",    \"rawtypes\"})\"\n</code></pre></div>\n<p dir=\"auto\">Eyeball search for the offending token is taking too long, if you have a lot of failing tests.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting actual:\n  [&quot;package test;&quot;,\n    &quot;&quot;,\n    &quot;import dagger.Lazy;&quot;,\n    &quot;import dagger.internal.DaggerGenerated;&quot;,\n    &quot;import dagger.internal.DoubleCheck;&quot;,\n    &quot;import jakarta.inject.Provider;&quot;,\n    &quot;import javax.annotation.processing.Generated;&quot;,\n    &quot;&quot;,\n    &quot;@DaggerGenerated&quot;,\n    &quot;@Generated(&quot;,\n    &quot;    value = &quot;dagger.internal.codegen.ComponentProcessor&quot;,&quot;,\n    &quot;    comments = &quot;https://github.com/jbock-java/dapper&quot;&quot;,\n    &quot;)&quot;,\n    &quot;@SuppressWarnings({&quot;,\n    &quot;    &quot;unchecked&quot;,&quot;,\n    &quot;    &quot;rawtypes&quot;&quot;,\n    &quot;})&quot;,\n    &quot;final class DaggerSimpleComponent implements SimpleComponent {&quot;,\n    &quot;  private final DaggerSimpleComponent simpleComponent = this;&quot;,\n    &quot;&quot;,\n    &quot;  private Provider&lt;SomeInjectableType&gt; someInjectableTypeProvider;&quot;,\n    &quot;&quot;,\n    &quot;  private DaggerSimpleComponent() {&quot;,\n    &quot;&quot;,\n    &quot;    initialize();&quot;,\n    &quot;&quot;,\n    &quot;  }&quot;,\n    &quot;&quot;,\n    &quot;  public static Builder builder() {&quot;,\n    &quot;    return new Builder();&quot;,\n    &quot;  }&quot;,\n    &quot;&quot;,\n    &quot;  public static SimpleComponent create() {&quot;,\n    &quot;    return new Builder().build();&quot;,\n    &quot;  }&quot;,\n    &quot;&quot;,\n    &quot;  @SuppressWarnings(&quot;unchecked&quot;)&quot;,\n    &quot;  private void initialize() {&quot;,\n    &quot;    this.someInjectableTypeProvider = DoubleCheck.provider(SomeInjectableType_Factory.create());&quot;,\n    &quot;  }&quot;,\n    &quot;&quot;,\n    &quot;  @Override&quot;,\n    &quot;  public SomeInjectableType someInjectableType() {&quot;,\n    &quot;    return someInjectableTypeProvider.get();&quot;,\n    &quot;  }&quot;,\n    &quot;&quot;,\n    &quot;  @Override&quot;,\n    &quot;  public Lazy&lt;SomeInjectableType&gt; lazySomeInjectableType() {&quot;,\n    &quot;    return DoubleCheck.lazy(someInjectableTypeProvider);&quot;,\n    &quot;  }&quot;,\n    &quot;&quot;,\n    &quot;  @Override&quot;,\n    &quot;  public Provider&lt;SomeInjectableType&gt; someInjectableTypeProvider() {&quot;,\n    &quot;    return someInjectableTypeProvider;&quot;,\n    &quot;  }&quot;,\n    &quot;&quot;,\n    &quot;  static final class Builder {&quot;,\n    &quot;    private Builder() {&quot;,\n    &quot;    }&quot;,\n    &quot;&quot;,\n    &quot;    public SimpleComponent build() {&quot;,\n    &quot;      return new DaggerSimpleComponent();&quot;,\n    &quot;    }&quot;,\n    &quot;  }&quot;,\n    &quot;}&quot;]\nto contain sequence:\n  [&quot;package test;&quot;,\n    &quot;&quot;,\n    &quot;@DaggerGenerated\n@Generated(    value = &quot;dagger.internal.codegen.ComponentProcessor&quot;,    comments = &quot;https://github.com/jbock-java/dapper&quot;)\n@SuppressWarnings({    &quot;unchecked&quot;,    &quot;rawtypes&quot;})&quot;,\n    &quot;final class DaggerSimpleComponent implements SimpleComponent {&quot;,\n    &quot;  private final DaggerSimpleComponent simpleComponent = this;&quot;,\n    &quot;  private Provider&lt;SomeInjectableType&gt; someInjectableTypeProvider;&quot;,\n    &quot;&quot;,\n    &quot;  @SuppressWarnings(&quot;unchecked&quot;)&quot;,\n    &quot;  private void initialize() {&quot;,\n    &quot;    this.someInjectableTypeProvider =&quot;,\n    &quot;        DoubleCheck.provider(SomeInjectableType_Factory.create());&quot;,\n    &quot;  }&quot;,\n    &quot;&quot;,\n    &quot;  @Override&quot;,\n    &quot;  public SomeInjectableType someInjectableType() {&quot;,\n    &quot;    return someInjectableTypeProvider.get();&quot;,\n    &quot;  }&quot;,\n    &quot;&quot;,\n    &quot;  @Override&quot;,\n    &quot;  public Lazy&lt;SomeInjectableType&gt; lazySomeInjectableType() {&quot;,\n    &quot;    return DoubleCheck.lazy(someInjectableTypeProvider);&quot;,\n    &quot;  }&quot;,\n    &quot;&quot;,\n    &quot;  @Override&quot;,\n    &quot;  public Provider&lt;SomeInjectableType&gt; someInjectableTypeProvider() {&quot;,\n    &quot;    return someInjectableTypeProvider;&quot;,\n    &quot;  }&quot;,\n    &quot;}&quot;]\n\"><pre class=\"notranslate\"><code>java.lang.AssertionError: \nExpecting actual:\n  [\"package test;\",\n    \"\",\n    \"import dagger.Lazy;\",\n    \"import dagger.internal.DaggerGenerated;\",\n    \"import dagger.internal.DoubleCheck;\",\n    \"import jakarta.inject.Provider;\",\n    \"import javax.annotation.processing.Generated;\",\n    \"\",\n    \"@DaggerGenerated\",\n    \"@Generated(\",\n    \"    value = \"dagger.internal.codegen.ComponentProcessor\",\",\n    \"    comments = \"https://github.com/jbock-java/dapper\"\",\n    \")\",\n    \"@SuppressWarnings({\",\n    \"    \"unchecked\",\",\n    \"    \"rawtypes\"\",\n    \"})\",\n    \"final class DaggerSimpleComponent implements SimpleComponent {\",\n    \"  private final DaggerSimpleComponent simpleComponent = this;\",\n    \"\",\n    \"  private Provider&lt;SomeInjectableType&gt; someInjectableTypeProvider;\",\n    \"\",\n    \"  private DaggerSimpleComponent() {\",\n    \"\",\n    \"    initialize();\",\n    \"\",\n    \"  }\",\n    \"\",\n    \"  public static Builder builder() {\",\n    \"    return new Builder();\",\n    \"  }\",\n    \"\",\n    \"  public static SimpleComponent create() {\",\n    \"    return new Builder().build();\",\n    \"  }\",\n    \"\",\n    \"  @SuppressWarnings(\"unchecked\")\",\n    \"  private void initialize() {\",\n    \"    this.someInjectableTypeProvider = DoubleCheck.provider(SomeInjectableType_Factory.create());\",\n    \"  }\",\n    \"\",\n    \"  @Override\",\n    \"  public SomeInjectableType someInjectableType() {\",\n    \"    return someInjectableTypeProvider.get();\",\n    \"  }\",\n    \"\",\n    \"  @Override\",\n    \"  public Lazy&lt;SomeInjectableType&gt; lazySomeInjectableType() {\",\n    \"    return DoubleCheck.lazy(someInjectableTypeProvider);\",\n    \"  }\",\n    \"\",\n    \"  @Override\",\n    \"  public Provider&lt;SomeInjectableType&gt; someInjectableTypeProvider() {\",\n    \"    return someInjectableTypeProvider;\",\n    \"  }\",\n    \"\",\n    \"  static final class Builder {\",\n    \"    private Builder() {\",\n    \"    }\",\n    \"\",\n    \"    public SimpleComponent build() {\",\n    \"      return new DaggerSimpleComponent();\",\n    \"    }\",\n    \"  }\",\n    \"}\"]\nto contain sequence:\n  [\"package test;\",\n    \"\",\n    \"@DaggerGenerated\n@Generated(    value = \"dagger.internal.codegen.ComponentProcessor\",    comments = \"https://github.com/jbock-java/dapper\")\n@SuppressWarnings({    \"unchecked\",    \"rawtypes\"})\",\n    \"final class DaggerSimpleComponent implements SimpleComponent {\",\n    \"  private final DaggerSimpleComponent simpleComponent = this;\",\n    \"  private Provider&lt;SomeInjectableType&gt; someInjectableTypeProvider;\",\n    \"\",\n    \"  @SuppressWarnings(\"unchecked\")\",\n    \"  private void initialize() {\",\n    \"    this.someInjectableTypeProvider =\",\n    \"        DoubleCheck.provider(SomeInjectableType_Factory.create());\",\n    \"  }\",\n    \"\",\n    \"  @Override\",\n    \"  public SomeInjectableType someInjectableType() {\",\n    \"    return someInjectableTypeProvider.get();\",\n    \"  }\",\n    \"\",\n    \"  @Override\",\n    \"  public Lazy&lt;SomeInjectableType&gt; lazySomeInjectableType() {\",\n    \"    return DoubleCheck.lazy(someInjectableTypeProvider);\",\n    \"  }\",\n    \"\",\n    \"  @Override\",\n    \"  public Provider&lt;SomeInjectableType&gt; someInjectableTypeProvider() {\",\n    \"    return someInjectableTypeProvider;\",\n    \"  }\",\n    \"}\"]\n\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/2395","createdAt":"2021-11-08T15:15:40Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Issue 2060 StringAssert: add variants with \"Ignoring\"","url":"https://github.com/assertj/assertj/pull/2431","resourcePath":"/assertj/assertj/pull/2431","createdAt":"2021-12-09T03:10:17Z","number":2431,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractCharSequenceAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldContainCharSequence.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Strings.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/charsequence/CharSequenceAssert_containsIgnoringNewLines_CharSequence_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldContainCharSequence_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertContainsIgnoringNewLines_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4vlsCv2gAoNTA2NGJhYjA1OTc2YmYxOWVlY2UwZGZjZWMzMzljZjY5MWUxZTFhMg","url":"https://github.com/assertj/assertj/pull/2431/commits/5064bab05976bf19eece0dfcec339cf691e1e1a2"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2060,"url":"https://github.com/assertj/assertj/issues/2060","title":"StringAssert: add variants with \"Ignoring\"","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Currently the <code class=\"notranslate\">AbstractCharSequenceAssert</code> has a method <code class=\"notranslate\">containsIgnoringCase(...)</code>. It would appreciable to have the same variants as the <code class=\"notranslate\">isEqualToIgnoring...</code>. So:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">containsIgnoringWhitespaces(CharSequence sequence)</code></li>\n<li><code class=\"notranslate\">containsIgnoringNewLines(CharSequence sequence)</code></li>\n</ul>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;gandalf is a \\r\\nwizard&quot;).containsIgnoringNewLines(&quot;gandalf is a wizard&quot;) // SUCCESS\nassertThat(&quot;gandalf is a wizard&quot;).containsIgnoringNewLines(&quot;gandalf is a \\nwizard&quot;) // SUCCESS\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"gandalf is a \\r\\nwizard\"</span>).<span class=\"pl-en\">containsIgnoringNewLines</span>(<span class=\"pl-s\">\"gandalf is a wizard\"</span>) <span class=\"pl-c\">// SUCCESS</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"gandalf is a wizard\"</span>).<span class=\"pl-en\">containsIgnoringNewLines</span>(<span class=\"pl-s\">\"gandalf is a \\nwizard\"</span>) <span class=\"pl-c\">// SUCCESS</span></pre></div>","resourcePath":"/assertj/assertj/issues/2060","createdAt":"2020-12-04T10:21:55Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"enriched assertThat...Exception and synced BDDAssertions, WithAssertions","url":"https://github.com/assertj/assertj/pull/2462","resourcePath":"/assertj/assertj/pull/2462","createdAt":"2022-01-10T06:39:17Z","number":2462,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/BDDAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WithAssertions.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_assertThatException_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_assertThatIndexOutOfBoundsException_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_assertThatReflectiveOperationException_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_assertThatRuntimeException_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_sync_assertThatException_with_BDDAssertions_and_WithAssertions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_sync_assertThatIndexOutOfBoundsException_with_BDDAssertions_and_WithAssertions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_sync_assertThatReflectiveOperationException_with_BDDAssertions_and_WithAssertions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_sync_assertThatRuntimeException_with_BDDAssertions_and_WithAssertions_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4wtsp42gAoY2E5NzliOTMxZDBmOTQ2ZjMzMjAzNDdiM2RkOTk1MGI0NGM2YjYwNQ","url":"https://github.com/assertj/assertj/pull/2462/commits/ca979b931d0f946f3320347b3dd9950b44c6b605"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2454,"url":"https://github.com/assertj/assertj/issues/2454","title":"Additional `assertThat...Exception` and `then...Exception` alternatives","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\"><a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1052892185\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2410\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/assertj/assertj/pull/2410/hovercard\" href=\"https://github.com/assertj/assertj/pull/2410\">#2410</a> added some <code class=\"notranslate\">catchThrowable</code> alternatives:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">catchException</code></li>\n<li><code class=\"notranslate\">catchIndexOutOfBoundsException</code></li>\n<li><code class=\"notranslate\">catchReflectiveOperationException</code></li>\n<li><code class=\"notranslate\">catchRuntimeException</code></li>\n</ul>\n<p dir=\"auto\">These do not have the corresponding <code class=\"notranslate\">Assertions.assertThat...Exception</code>, <code class=\"notranslate\">WithAssertions.assertThat...Exception</code> and <code class=\"notranslate\">BDDAssertions.then...Exception</code> static methods.</p>\n<p dir=\"auto\">We should add them and create a sync test between the three classes.</p>","resourcePath":"/assertj/assertj/issues/2454","createdAt":"2022-01-01T12:01:28Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Remove Byte Buddy shading","url":"https://github.com/assertj/assertj/pull/2477","resourcePath":"/assertj/assertj/pull/2477","createdAt":"2022-01-29T12:04:35Z","number":2477,"mergeCommit":{"oid":"c61eb478a8dec8a838b0f04f7045c1bbd8251a05","message":"Remove Byte Buddy shading (#2477)","commitUrl":"https://github.com/assertj/assertj/commit/c61eb478a8dec8a838b0f04f7045c1bbd8251a05","parents":{"nodes":[{"oid":"bc758d74affebdda0374fc96899869a3f0026953","message":"Bump actions/github-script from 5 to 6 (#2494)\n\nBumps [actions/github-script](https://github.com/actions/github-script) from 5 to 6.\r\n- [Release notes](https://github.com/actions/github-script/releases)\r\n- [Commits](https://github.com/actions/github-script/compare/v5...v6)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: actions/github-script\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-major\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"pom.xml"}},{"node":{"changeType":"MODIFIED","path":"verify.bndrun"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4xxs2I2gAoYzFlODI5ZDU4NmE5OTJlNTcyZWY3NDY1MDdjZTA5ZWQ1Zjc4MmM5OA","url":"https://github.com/assertj/assertj/pull/2477/commits/c1e829d586a992e572ef746507ce09ed5f782c98"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2470,"url":"https://github.com/assertj/assertj/issues/2470","title":"Do not shade Byte Buddy","bodyHTML":"<p dir=\"auto\">Byte Buddy is currently shaded. As Byte Buddy retains compatibility, not shading the library would allow running recent JVMs without an update of assertj but only BB. Other libraries like Mockito or Hibernate do not shade BB and there are no known issues with this approach. In case of an error, stack traces would also be easier to process as break points remain intact.</p>","resourcePath":"/assertj/assertj/issues/2470","createdAt":"2022-01-21T14:02:08Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Issue#2381: isUnmodifiable assertion for Maps","url":"https://github.com/assertj/assertj/pull/2458","resourcePath":"/assertj/assertj/pull/2458","createdAt":"2022-01-05T19:10:49Z","number":2458,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractCollectionAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractMapAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/internal/Immutables.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/map/MapAssert_isUnmodifiable_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4wk4H02gAoZmQwNTRiZDI0ZDE2MWQ1ODJkMjFkMmJkZjdhMzQyNTkzMTk1ZDMzOA","url":"https://github.com/assertj/assertj/pull/2458/commits/fd054bd24d161d582d21d2bdf7a342593195d338"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2381,"url":"https://github.com/assertj/assertj/issues/2381","title":"`isUnmodifiable` assertion for Maps","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Similarly to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"787041364\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj-core/issues/2102\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj-core/issues/2102/hovercard\" href=\"https://github.com/assertj/assertj-core/issues/2102\">#2102</a>, we could add a <code class=\"notranslate\">isUnmodifiable()</code> method to the assertion methods for <code class=\"notranslate\">Map</code> types.</p>\n<h4 dir=\"auto\">Implementation Proposal</h4>\n<p dir=\"auto\">Under the hood, the assertion should try to call all the map APIs which are expected to throw <code class=\"notranslate\">UnsupportedOperationException</code>. The assertion succeeds if all of them are throwing the expected exception, otherwise it fails.</p>\n<p dir=\"auto\">Below is the mapping between the map type and the APIs to test. Each subtype would cover also the methods of the parent type. E.g., if we have a <code class=\"notranslate\">NavigableMap</code>, the assertion should also verify <code class=\"notranslate\">Map</code> methods.</p>\n<table role=\"table\">\n<thead>\n<tr>\n<th>Instance Of</th>\n<th>APIs to test</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"notranslate\">Map</code></td>\n<td><code class=\"notranslate\">clear()</code>, <code class=\"notranslate\">compute(K, BiFunction)</code>, <code class=\"notranslate\">computeIfAbsent(K, Function)</code>, <code class=\"notranslate\">computeIfPresent(K, BiFunction)</code>, <code class=\"notranslate\">iterator().remove()</code>, <code class=\"notranslate\">merge(K, V, BiFunction)</code>, <code class=\"notranslate\">put(K, V)</code>, <code class=\"notranslate\">putAll(Map)</code>, <code class=\"notranslate\">putIfAbsent(K, V)</code>, <code class=\"notranslate\">replace(K, V)</code>, <code class=\"notranslate\">replace(K, V, V)</code>, <code class=\"notranslate\">remove(Object)</code>, <code class=\"notranslate\">remove(Object, Object)</code>, <code class=\"notranslate\">replaceAll(BiFunction)</code></td>\n</tr>\n<tr>\n<td><code class=\"notranslate\">NavigableMap</code></td>\n<td><code class=\"notranslate\">pollFirstEntry()</code>, <code class=\"notranslate\">pollLastEntry() </code></td>\n</tr>\n<tr>\n<td><code class=\"notranslate\">SortedMap</code></td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Map&lt;String, String&gt; map = new HashMap&lt;&gt;();\nmap.put(&quot;key&quot;, &quot;value&quot;);\n\nassertThat(map).isUnmodifiable(); // should fail\n\nMap&lt;String, String&gt; unmodifiableMap = Collections.unmodifiableMap(map);\n\nassertThat(unmodifiableMap).isUnmodifiable(); // should succeed\"><pre><span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">map</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span>&lt;&gt;();\n<span class=\"pl-s1\">map</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s\">\"key\"</span>, <span class=\"pl-s\">\"value\"</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">map</span>).<span class=\"pl-en\">isUnmodifiable</span>(); <span class=\"pl-c\">// should fail</span>\n\n<span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">unmodifiableMap</span> = <span class=\"pl-s1\">Collections</span>.<span class=\"pl-en\">unmodifiableMap</span>(<span class=\"pl-s1\">map</span>);\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">unmodifiableMap</span>).<span class=\"pl-en\">isUnmodifiable</span>(); <span class=\"pl-c\">// should succeed</span></pre></div>","resourcePath":"/assertj/assertj/issues/2381","createdAt":"2021-10-20T10:42:22Z","labels":{"edges":[{"node":{"name":"good first issue"}},{"node":{"name":"Hacktoberfest"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Improve `Class` representation for anonymous and local types","url":"https://github.com/assertj/assertj/pull/2445","resourcePath":"/assertj/assertj/pull/2445","createdAt":"2021-12-19T11:24:00Z","number":2445,"mergeCommit":{"oid":"ce1113f1c4f3f2d7698c3db189884ce1f8a6bab4","message":"Improve `Class` representation for anonymous and local types (#2445)","commitUrl":"https://github.com/assertj/assertj/commit/ce1113f1c4f3f2d7698c3db189884ce1f8a6bab4","parents":{"nodes":[{"oid":"2839906331e8a81566d977d75ccf9dd3d19ed19e","message":"Treat class cast exception as comparison failure\nFix #2434"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/presentation/StandardRepresentation.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/presentation/StandardRepresentation_toStringOf_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4wCz_p2gAoOTY3NTQ3Yjk0NzVlMzZhNDMyZjIwZWJlN2I1YjMzOGU0NTliMmY5OQ","url":"https://github.com/assertj/assertj/pull/2445/commits/967547b9475e36a432f20ebe7b5b338e459b2f99"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2444,"url":"https://github.com/assertj/assertj/issues/2444","title":"isExactlyInstanceOf gives confusing error message when instance is an anonymous inner class","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">When using isExactlyInstanceOf and the actual value is an anonymous inner class, the message is confusing as it claims that the actual value is an \"instance of null\".</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    assertThat(x.red).isNotNull().isExactlyInstanceOf(A.class);\"><pre>    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">x</span>.<span class=\"pl-s1\">red</span>).<span class=\"pl-en\">isNotNull</span>().<span class=\"pl-en\">isExactlyInstanceOf</span>(<span class=\"pl-smi\">A</span>.<span class=\"pl-s1\">class</span>);</pre></div>\n<p dir=\"auto\">Will not fail <code class=\"notranslate\">isNotNull</code> but fails on <code class=\"notranslate\">isExactlyInstanceOf</code> with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting:\n &lt;hs.ddif.core.inject.store.BindingProvider$ProviderBinding$1@4f1bfe23&gt;\nto be exactly an instance of:\n &lt;hs.ddif.core.InjectorProviderTest.A&gt;\nbut was an instance of:\n &lt;null&gt;\"><pre class=\"notranslate\"><code>java.lang.AssertionError: \nExpecting:\n &lt;hs.ddif.core.inject.store.BindingProvider$ProviderBinding$1@4f1bfe23&gt;\nto be exactly an instance of:\n &lt;hs.ddif.core.InjectorProviderTest.A&gt;\nbut was an instance of:\n &lt;null&gt;\n</code></pre></div>\n<p dir=\"auto\">This led me to believe the value in <code class=\"notranslate\">x.red</code> is <code class=\"notranslate\">null</code>, but it clearly isn't.</p>\n<p dir=\"auto\">If it is not possible to detect the anonymous inner class type here  (it in this case is an anonymous implementation of the interface <code class=\"notranslate\">Provider</code>) perhaps change the message to <code class=\"notranslate\">but was an instance of an anonymous class</code>.</p>","resourcePath":"/assertj/assertj/issues/2444","createdAt":"2021-12-18T18:46:29Z","labels":{"edges":[{"node":{"name":"type: bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Preliminary code to ensure AbstractMapAssert uses correct containsKey…","url":"https://github.com/assertj/assertj/pull/2433","resourcePath":"/assertj/assertj/pull/2433","createdAt":"2021-12-10T02:51:51Z","number":2433,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"CODE_ANALYSIS/PMD/BEFORE_PMD_AbstractMapAssert.html"}},{"node":{"changeType":"ADDED","path":"CODE_ANALYSIS/PMD/BEFORE_PMD_MapTest.html"}},{"node":{"changeType":"ADDED","path":"CODE_ANALYSIS/PMD/BEFORE_PMD_Maps.html"}},{"node":{"changeType":"ADDED","path":"CODE_ANALYSIS/SpotBugs/AFTER_SpotBugs_AbstractMapAssert.html"}},{"node":{"changeType":"ADDED","path":"CODE_ANALYSIS/SpotBugs/AFTER_SpotBugs_Maps.html"}},{"node":{"changeType":"ADDED","path":"CODE_ANALYSIS/SpotBugs/BEFORE_SpotBugs_AbstractMapAssert.html"}},{"node":{"changeType":"ADDED","path":"CODE_ANALYSIS/SpotBugs/BEFORE_SpotBugs_Maps.html"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractMapAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Maps.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/Assertions_assertThat_with_Map_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4vp4wx2gAoZTBlMzk4ZTY0MjcxMThmNGFiMTBjNDY0NTMzNjBhMzExZjU0MjRlYw","url":"https://github.com/assertj/assertj/pull/2433/commits/e0e398e6427118f4ab10c46453360a311f5424ec"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2428,"url":"https://github.com/assertj/assertj/issues/2428","title":"`containsKey` in `AbstractMapAssert` overuses `containsKeys` implementation","bodyHTML":"<p dir=\"auto\">Currently, <code class=\"notranslate\">containsKey</code> of <code class=\"notranslate\">AbstractMapAssert</code> reuses the implementation of <code class=\"notranslate\">containsKeys</code>, wrapping the expected key in an array and getting the error message from <code class=\"notranslate\">ShouldContainKeys</code>.</p>\n<p dir=\"auto\">Ideally, <code class=\"notranslate\">containsKey</code> should have its simplified implementation, backed by <code class=\"notranslate\">Maps#assertContainsKey</code> with a dedicated error message coming from <code class=\"notranslate\">ShouldContainKey</code>.</p>\n<p dir=\"auto\">Almost the same situation is with <code class=\"notranslate\">doesNotContainKey</code> and <code class=\"notranslate\">doesNotContainKeys</code>.</p>","resourcePath":"/assertj/assertj/issues/2428","createdAt":"2021-12-07T22:43:23Z","labels":{"edges":[{"node":{"name":"type: refactoring"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add IgnoringCase variants of startsWith and endsWith (#2449)","url":"https://github.com/assertj/assertj/pull/2451","resourcePath":"/assertj/assertj/pull/2451","createdAt":"2021-12-23T16:49:34Z","number":2451,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldEndWith_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldNotEndWithIgnoringCase_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldNotStartWithIgnoringCase_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldStartWithIgnoringCase_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldStartWith_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertDoesNotEndWithIgnoringCase_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertDoesNotStartWithIgnoringCase_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertEndsWithIgnoringCase_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertStartsWithIgnoringCase_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/util/StringHashCodeTestComparator.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4wPNOX2gAoOWFkYzVjOTgwZDQyNzMyMjU4OWQ3ODMxNDEwYzE5ZjU0MTAyZTliNQ","url":"https://github.com/assertj/assertj/pull/2451/commits/9adc5c980d427322589d7831410c19f54102e9b5"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2449,"url":"https://github.com/assertj/assertj/issues/2449","title":"Add `startsWithIgnoringCase` and `endsWithIgnoringCase` to AbstractCharSequenceAssert","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">While migrating assertions from Hamcrest to AssertJ I noticed there was no AssertJ equivalent to Hamcrest's <code class=\"notranslate\">org.hamcrest.Matchers#startsWithIgnoringCase</code> and <code class=\"notranslate\">org.hamcrest.Matchers#endsWithIgnoringCase</code>. However, AssertJ does provide <code class=\"notranslate\">org.assertj.core.api.AbstractCharSequenceAssert#containsIgnoringCase</code> which is equivalent to Hamcrest's <code class=\"notranslate\">org.hamcrest.Matchers#containsStringIgnoringCase</code>, so there is precedence in providing \"ignoringCase\" alternatives.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// assertion will pass\nassertThat(&quot;Gandalf the grey&quot;).startsWithIgnoringCase(&quot;Gandalf&quot;);\nassertThat(&quot;Gandalf the grey&quot;).startsWithIgnoringCase(&quot;gandalf&quot;);\n\n//assertions will fail\nassertThat(&quot;Gandalf the grey&quot;).startsWithIgnoringCase(&quot;grey&quot;);\"><pre><span class=\"pl-c\">// assertion will pass</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Gandalf the grey\"</span>).<span class=\"pl-en\">startsWithIgnoringCase</span>(<span class=\"pl-s\">\"Gandalf\"</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Gandalf the grey\"</span>).<span class=\"pl-en\">startsWithIgnoringCase</span>(<span class=\"pl-s\">\"gandalf\"</span>);\n\n<span class=\"pl-c\">//assertions will fail</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Gandalf the grey\"</span>).<span class=\"pl-en\">startsWithIgnoringCase</span>(<span class=\"pl-s\">\"grey\"</span>);</pre></div>\n<p dir=\"auto\">and</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// assertion will pass\nassertThat(&quot;Gandalf the grey&quot;).endsWithIgnoringCase(&quot;grey&quot;);\nassertThat(&quot;Gandalf the grey&quot;).endsWithIgnoringCase(&quot;Grey&quot;);\n\n//assertions will fail\nassertThat(&quot;Gandalf the grey&quot;).endsWithIgnoringCase(&quot;Gandalf&quot;);\"><pre><span class=\"pl-c\">// assertion will pass</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Gandalf the grey\"</span>).<span class=\"pl-en\">endsWithIgnoringCase</span>(<span class=\"pl-s\">\"grey\"</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Gandalf the grey\"</span>).<span class=\"pl-en\">endsWithIgnoringCase</span>(<span class=\"pl-s\">\"Grey\"</span>);\n\n<span class=\"pl-c\">//assertions will fail</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"Gandalf the grey\"</span>).<span class=\"pl-en\">endsWithIgnoringCase</span>(<span class=\"pl-s\">\"Gandalf\"</span>);</pre></div>\n<p dir=\"auto\">If you agree that this would be a reasonable addition to the API, I would be happy to take first stab at implementing this.</p>","resourcePath":"/assertj/assertj/issues/2449","createdAt":"2021-12-22T10:03:36Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix `containsExactly` not working properly with maps not using equals to compare keys","url":"https://github.com/assertj/assertj/pull/2500","resourcePath":"/assertj/assertj/pull/2500","createdAt":"2022-02-21T18:30:17Z","number":2500,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Maps.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/MapsBaseTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsExactly_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4zPrPx2gAoZWYxMWVkYWVjNjI2M2M3ZDJjYzcwY2MwY2VhYWQ2MDU4Yjg2OGVkZQ","url":"https://github.com/assertj/assertj/pull/2500/commits/ef11edaec6263c7d2cc70cc0ceaad6058b868ede"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2165,"url":"https://github.com/assertj/assertj/issues/2165","title":"`containsExactly` does not work properly with maps not using equals to compare keys","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">This test should pass but fails.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  void should_pass_if_case_insensitive_actual_contains_given_entries_in_rder() {\n    // GIVEN\n    actual = new CaseInsensitiveMap&lt;&gt;();\n    actual.put( &quot;Color&quot;, &quot;green&quot; );\n    actual.put( &quot;NAME&quot;, &quot;Yoda&quot; );\n\n    // THEN\n    maps.assertContainsExactly(someInfo(), actual, entry(&quot;COLOR&quot;, &quot;green&quot;), entry(&quot;Name&quot;, &quot;Yoda&quot;));\n  }\"><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">should_pass_if_case_insensitive_actual_contains_given_entries_in_rder</span>() {\n    <span class=\"pl-c\">// GIVEN</span>\n    <span class=\"pl-s1\">actual</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CaseInsensitiveMap</span>&lt;&gt;();\n    <span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">put</span>( <span class=\"pl-s\">\"Color\"</span>, <span class=\"pl-s\">\"green\"</span> );\n    <span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">put</span>( <span class=\"pl-s\">\"NAME\"</span>, <span class=\"pl-s\">\"Yoda\"</span> );\n\n    <span class=\"pl-c\">// THEN</span>\n    <span class=\"pl-s1\">maps</span>.<span class=\"pl-en\">assertContainsExactly</span>(<span class=\"pl-en\">someInfo</span>(), <span class=\"pl-s1\">actual</span>, <span class=\"pl-en\">entry</span>(<span class=\"pl-s\">\"COLOR\"</span>, <span class=\"pl-s\">\"green\"</span>), <span class=\"pl-en\">entry</span>(<span class=\"pl-s\">\"Name\"</span>, <span class=\"pl-s\">\"Yoda\"</span>));\n  }</pre></div>\n<p dir=\"auto\">The underlying issue is when <code class=\"notranslate\">containsExactly</code> verifies that the entries are in the same order, it ends up comparing <code class=\"notranslate\">\"Color\"</code> against <code class=\"notranslate\">\"COLOR\"</code> with <code class=\"notranslate\">equals</code> instead of the actual map key comparison strategy (case insensitive string in the example).</p>\n<p dir=\"auto\">It's not yet clear if there is a way to address this issue, if not we would have to mention the limitation in the javadoc.</p>","resourcePath":"/assertj/assertj/issues/2165","createdAt":"2021-04-09T11:01:09Z","labels":{"edges":[{"node":{"name":"type: bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix usingRecursiveComparison with usingOverriddenEquals ignores equal…","url":"https://github.com/assertj/assertj/pull/2493","resourcePath":"/assertj/assertj/pull/2493","createdAt":"2022-02-11T14:09:28Z","number":2493,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonDifferenceCalculator.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonAssert_isEqualTo_usingOverriddenEquals_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4yhqf_2gAoZWYzZThlOTVkMDBmMzUwYmZmMDZmZGVmNTMwNDIwOTQ2NmFjYTdjNA","url":"https://github.com/assertj/assertj/pull/2493/commits/ef3e8e95d00f350bff06fdef5304209466aca7c4"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2479,"url":"https://github.com/assertj/assertj/issues/2479","title":"usingRecursiveComparison with usingOverriddenEquals ignores equals method of the compared object","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Version 3.22.0<br>\nI expect if I use usingRecursiveComparison with usingOverriddenEquals, field \"age\" should be ignored.<br>\nBut as result I get</p>\n<blockquote>\n<p dir=\"auto\">java.lang.AssertionError:<br>\nExpecting actual:<br>\ncom.ComparatorDevices$Person@63be0d6<br>\nto be equal to:<br>\ncom.ComparatorDevices$Person@63be0b6<br>\nwhen recursively comparing field by field, but found the following difference:</p>\n<p dir=\"auto\">field/property 'age' differ:</p>\n<ul dir=\"auto\">\n<li>actual value  : \"22\"</li>\n<li>expected value: \"11\"</li>\n</ul>\n<p dir=\"auto\">The recursive comparison was performed with this configuration:</p>\n<ul dir=\"auto\">\n<li>overridden equals methods were used in the comparison</li>\n<li>these types were compared with the following comparators:\n<ul dir=\"auto\">\n<li>java.lang.Double -&gt; DoubleComparator[precision=1.0E-15]</li>\n<li>java.lang.Float -&gt; FloatComparator[precision=1.0E-6]</li>\n<li>java.nio.file.Path -&gt; lexicographic comparator (Path natural order)</li>\n</ul>\n</li>\n<li>actual and expected objects and their fields were compared field by field recursively even if they were not of the same type, this allows for example to compare a Person to a PersonDto (call strictTypeChecking(true) to change that behavior).</li>\n</ul>\n</blockquote>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class Person {\n        String name;\n        String age;\n\n        public Person(String name, String age) {\n            this.name = name;\n            this.age = age;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Person person = (Person) o;\n            return Objects.equals(name, person.name);\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(name, age);\n        }\n    }\n\n@Test()\n    public void personTest() {\n        Person expectedPerson = new Person(&quot;name&quot;, &quot;11&quot;);\n        Person actualPerson = new Person(&quot;name&quot;, &quot;22&quot;);\n        Assertions.assertThat(actualPerson)\n                .usingRecursiveComparison()\n                .usingOverriddenEquals()\n                .isEqualTo(expectedPerson);\n    }\n\n    \"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">Person</span> {\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">name</span>;\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">age</span>;\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Person</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">name</span>, <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">age</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">name</span> = <span class=\"pl-s1\">name</span>;\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">age</span> = <span class=\"pl-s1\">age</span>;\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">boolean</span> <span class=\"pl-en\">equals</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">o</span>) {\n            <span class=\"pl-k\">if</span> (<span class=\"pl-smi\">this</span> == <span class=\"pl-s1\">o</span>) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;\n            <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">o</span> == <span class=\"pl-c1\">null</span> || <span class=\"pl-en\">getClass</span>() != <span class=\"pl-s1\">o</span>.<span class=\"pl-en\">getClass</span>()) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n            <span class=\"pl-smi\">Person</span> <span class=\"pl-s1\">person</span> = (<span class=\"pl-smi\">Person</span>) <span class=\"pl-s1\">o</span>;\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">Objects</span>.<span class=\"pl-en\">equals</span>(<span class=\"pl-s1\">name</span>, <span class=\"pl-s1\">person</span>.<span class=\"pl-s1\">name</span>);\n        }\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">hashCode</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s1\">Objects</span>.<span class=\"pl-en\">hash</span>(<span class=\"pl-s1\">name</span>, <span class=\"pl-s1\">age</span>);\n        }\n    }\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>()\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">personTest</span>() {\n        <span class=\"pl-smi\">Person</span> <span class=\"pl-s1\">expectedPerson</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Person</span>(<span class=\"pl-s\">\"name\"</span>, <span class=\"pl-s\">\"11\"</span>);\n        <span class=\"pl-smi\">Person</span> <span class=\"pl-s1\">actualPerson</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Person</span>(<span class=\"pl-s\">\"name\"</span>, <span class=\"pl-s\">\"22\"</span>);\n        <span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actualPerson</span>)\n                .<span class=\"pl-en\">usingRecursiveComparison</span>()\n                .<span class=\"pl-en\">usingOverriddenEquals</span>()\n                .<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">expectedPerson</span>);\n    }\n\n    </pre></div>","resourcePath":"/assertj/assertj/issues/2479","createdAt":"2022-01-31T11:14:00Z","labels":{"edges":[{"node":{"name":"type: bug"}},{"node":{"name":"theme: recursive comparison"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Draft of #1652","url":"https://github.com/assertj/assertj/pull/2516","resourcePath":"/assertj/assertj/pull/2516","createdAt":"2022-03-06T09:55:18Z","number":2516,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AssertionsForClassTypes.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_assertThatValueReturnedBy_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs40ACWL2gAoZDE0NWYzMDVhMzk5NDJhZjFlOTU5M2I1M2Q1ODU1ZDdjYTY0MGI3Yw","url":"https://github.com/assertj/assertj/pull/2516/commits/d145f305a39942af1e9593b53d5855d7ca640b7c"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1652,"url":"https://github.com/assertj/assertj/issues/1652","title":"Assert return value of callable throwing exception","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">It would be nice if the <code class=\"notranslate\">assertThatCode().doesNotThrowException()</code> API would be able execute functions that return a value and then return that value for further inspection.<br>\nThis would make it easy to provide a nice description to an otherwise maybe nondescript exception that is thrown.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Test \npublic void intendedApi() {\n  int x = assertThatCode(this::doStuff)\n    .describedAs(&quot;doing things&quot;)\n    .doesNotThrowAnyException();\n  assertThat(x).isEqualTo(3);\n}\n\n@Test\npublic void currentSolution1() {\n  int x;\n  try {\n    x = doStuff();\n  } catch (Exception e) {\n    fail(&quot;doing things&quot;);\n    return; // never reached; needed because fail() is not recognized by the java compiler as method exit\n  }\n  assertThat(x).isEqualTo(3);\n}\n\n@Test\npublic void currentSolution2() {\n  AtomicReference&lt;Integer&gt; x = new AtomicReference&lt;&gt;();\n  assertThatCode(() -&gt; x.set(doStuff()))\n    .describedAs(&quot;doing things&quot;)\n    .doesNotThrowAnyException();\n  assertThat(x.get()).isEqualTo(3);\n}\n\n// utility for demonstration purposes\npublic int doStuff() throws Exception {\n  if (new Random().nextBoolean()) {\n    throw new Exception();\n  }\n  return 3;\n}\"><pre><span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span> \n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">intendedApi</span>() {\n  <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">x</span> = <span class=\"pl-en\">assertThatCode</span>(<span class=\"pl-smi\">this</span>::<span class=\"pl-s1\">doStuff</span>)\n    .<span class=\"pl-en\">describedAs</span>(<span class=\"pl-s\">\"doing things\"</span>)\n    .<span class=\"pl-en\">doesNotThrowAnyException</span>();\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">x</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">3</span>);\n}\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">currentSolution1</span>() {\n  <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">x</span>;\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-s1\">x</span> = <span class=\"pl-en\">doStuff</span>();\n  } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> <span class=\"pl-s1\">e</span>) {\n    <span class=\"pl-en\">fail</span>(<span class=\"pl-s\">\"doing things\"</span>);\n    <span class=\"pl-k\">return</span>; <span class=\"pl-c\">// never reached; needed because fail() is not recognized by the java compiler as method exit</span>\n  }\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">x</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">3</span>);\n}\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">currentSolution2</span>() {\n  <span class=\"pl-smi\">AtomicReference</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">x</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AtomicReference</span>&lt;&gt;();\n  <span class=\"pl-en\">assertThatCode</span>(() -&gt; <span class=\"pl-s1\">x</span>.<span class=\"pl-en\">set</span>(<span class=\"pl-en\">doStuff</span>()))\n    .<span class=\"pl-en\">describedAs</span>(<span class=\"pl-s\">\"doing things\"</span>)\n    .<span class=\"pl-en\">doesNotThrowAnyException</span>();\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">x</span>.<span class=\"pl-en\">get</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">3</span>);\n}\n\n<span class=\"pl-c\">// utility for demonstration purposes</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">doStuff</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">Exception</span> {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Random</span>().<span class=\"pl-en\">nextBoolean</span>()) {\n    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Exception</span>();\n  }\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">3</span>;\n}</pre></div>","resourcePath":"/assertj/assertj/issues/1652","createdAt":"2019-10-25T12:07:07Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"implement matches() in #2081","url":"https://github.com/assertj/assertj/pull/2510","resourcePath":"/assertj/assertj/pull/2510","createdAt":"2022-03-02T16:44:53Z","number":2510,"mergeCommit":{"oid":"f115e9d3cb12fcebe8e2b340898252caca9d7eec","message":"implement matches() in #2081 (#2510)\n\n* migrate\r\n\r\n* fix\r\n\r\n* license info and other minor fix","commitUrl":"https://github.com/assertj/assertj/commit/f115e9d3cb12fcebe8e2b340898252caca9d7eec","parents":{"nodes":[{"oid":"519313869f848e6755f4d071c77b6a414d1d25fb","message":"Increase AbstractIntegerAssert test coverage to 100% (#2515)\n\n* Increase IntegerAssert test coverage to 100%\r\n\r\n* Update documentation and author on IntegerAssert tests"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/BDDAssumptions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/BDDSoftAssertionsProvider.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/InstanceOfAssertFactories.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/MatcherAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/StandardSoftAssertionsProvider.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WithAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WithAssumptions.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/MatcherShouldMatch.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/matcher/MatcherAssert_matches_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/MatcherShouldMatch_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4z13VJ2gAoNjgyYzY2NjJkNmIwMjgxZGI4MTJlMjYyODA0YzljNGUwMGRjNWE5Ng","url":"https://github.com/assertj/assertj/pull/2510/commits/682c6662d6b0281db812e262804c9c4e00dc5a96"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2081,"url":"https://github.com/assertj/assertj/issues/2081","title":"Add assertions for java.util.regex.Matcher?","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Add custom assertions for <code class=\"notranslate\">java.util.regex.Matcher</code>.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.util.Pattern pattern = ...;\nString input = ...;\njava.util.regex.Mather matcher = Pattern.matcher(input);\nassertThat(matcher).matches()\"><pre><span class=\"pl-smi\">java</span>.<span class=\"pl-smi\">util</span>.<span class=\"pl-smi\">Pattern</span> <span class=\"pl-s1\">pattern</span> = ...;\n<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">input</span> = ...;\n<span class=\"pl-smi\">java</span>.<span class=\"pl-smi\">util</span>.<span class=\"pl-smi\">regex</span>.<span class=\"pl-smi\">Mather</span> <span class=\"pl-s1\">matcher</span> = <span class=\"pl-s1\">Pattern</span>.<span class=\"pl-en\">matcher</span>(<span class=\"pl-s1\">input</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">matcher</span>).<span class=\"pl-en\">matches</span>()</pre></div>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    .hasGroupCount(1);\"><pre>    .<span class=\"pl-en\">hasGroupCount</span>(<span class=\"pl-c1\">1</span>);</pre></div>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    (\n        .extractingGroup()\n        .extractingGroup(index)\n        .extractingGroup(name)\n    )\n    .isEqualTo(&quot;some&quot;);\"><pre>    (\n        .<span class=\"pl-en\">extractingGroup</span>()\n        .<span class=\"pl-en\">extractingGroup</span>(<span class=\"pl-s1\">index</span>)\n        .<span class=\"pl-en\">extractingGroup</span>(<span class=\"pl-s1\">name</span>)\n    )\n    .<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"some\"</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/2081","createdAt":"2020-12-18T05:06:57Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fixes #2459: Avoid ValueNode being considered as iterable while using recursive comparison","url":"https://github.com/assertj/assertj/pull/2460","resourcePath":"/assertj/assertj/pull/2460","createdAt":"2022-01-09T11:52:59Z","number":2460,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/recursive/comparison/DualValue.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/DualValue_iterableValues_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4wsr882gAoYTRjNmY0YjNjNzU2MTM0YTQ0NjA5ZTQwZjEyOTRjZTIxMzNhZjgyNw","url":"https://github.com/assertj/assertj/pull/2460/commits/a4c6f4b3c756134a44609e40f1294ce2133af827"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2459,"url":"https://github.com/assertj/assertj/issues/2459","title":"Different behavior between recursive comparison and JsonUnit with Jackson `JsonNode`","bodyHTML":"<p dir=\"auto\">Given:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ObjectMapper om = new ObjectMapper();\n\nJsonNode objectNode0 = om.readTree(&quot;{\\&quot;someNotImportantValue\\&quot;:1,\\&quot;importantValue\\&quot;:\\&quot;10\\&quot;}&quot;);\nJsonNode objectNode1 = om.readTree(&quot;{\\&quot;someNotImportantValue\\&quot;:15,\\&quot;importantValue\\&quot;:\\&quot;1\\&quot;}&quot;);\"><pre><span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">om</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n\n<span class=\"pl-smi\">JsonNode</span> <span class=\"pl-s1\">objectNode0</span> = <span class=\"pl-s1\">om</span>.<span class=\"pl-en\">readTree</span>(<span class=\"pl-s\">\"{\\\"someNotImportantValue\\\":1,\\\"importantValue\\\":\\\"10\\\"}\"</span>);\n<span class=\"pl-smi\">JsonNode</span> <span class=\"pl-s1\">objectNode1</span> = <span class=\"pl-s1\">om</span>.<span class=\"pl-en\">readTree</span>(<span class=\"pl-s\">\"{\\\"someNotImportantValue\\\":15,\\\"importantValue\\\":\\\"1\\\"}\"</span>);</pre></div>\n<p dir=\"auto\">with JsonUnit:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"JsonAssertions.assertThatJson(objectNode0).isEqualTo(objectNode1);\"><pre><span class=\"pl-s1\">JsonAssertions</span>.<span class=\"pl-en\">assertThatJson</span>(<span class=\"pl-s1\">objectNode0</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">objectNode1</span>);</pre></div>\n<p dir=\"auto\">we get a failure with:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory$JsonAssertError: JSON documents are different:\nDifferent value found in node &quot;importantValue&quot;, expected: &lt;&quot;1&quot;&gt; but was: &lt;&quot;10&quot;&gt;.\nDifferent value found in node &quot;someNotImportantValue&quot;, expected: &lt;15&gt; but was: &lt;1&gt;.\"><pre class=\"notranslate\"><code>net.javacrumbs.jsonunit.core.internal.Opentest4jExceptionFactory$JsonAssertError: JSON documents are different:\nDifferent value found in node \"importantValue\", expected: &lt;\"1\"&gt; but was: &lt;\"10\"&gt;.\nDifferent value found in node \"someNotImportantValue\", expected: &lt;15&gt; but was: &lt;1&gt;.\n</code></pre></div>\n<p dir=\"auto\">but with AssertJ and recursive comparison:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(objectNode0).usingRecursiveComparison().isEqualTo(objectNode1);\"><pre class=\"notranslate\"><code>assertThat(objectNode0).usingRecursiveComparison().isEqualTo(objectNode1);\n</code></pre></div>\n<p dir=\"auto\">the assertion passes.</p>\n<p dir=\"auto\">Being <code class=\"notranslate\">JsonNode</code> an <code class=\"notranslate\">Iterable</code>, it seems that something is not working properly with AssertJ.</p>\n<p dir=\"auto\">Source: <a href=\"https://stackoverflow.com/questions/70602371/assertj-not-working-with-jackson-jsonnode\" rel=\"nofollow\">https://stackoverflow.com/questions/70602371/assertj-not-working-with-jackson-jsonnode</a></p>","resourcePath":"/assertj/assertj/issues/2459","createdAt":"2022-01-06T13:13:41Z","labels":{"edges":[{"node":{"name":"type: bug"}},{"node":{"name":"theme: recursive comparison"}},{"node":{"name":"3rd-party: JsonUnit"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Issue#2455: isStatic / isNotStatic for Class assertions","url":"https://github.com/assertj/assertj/pull/2457","resourcePath":"/assertj/assertj/pull/2457","createdAt":"2022-01-05T12:52:16Z","number":2457,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractClassAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ClassModifierShouldBe.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Classes.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_isNotStatic_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_isStatic_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/classes/Classes_assertIsNotStatic_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/classes/Classes_assertIsStatic_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4wjwZ92gAoYzUzNzBlZDQzODIyMjhiMDRjZTc1NDA0Zjk1YmFlZjRiOGQ1NDgyNQ","url":"https://github.com/assertj/assertj/pull/2457/commits/c5370ed4382228b04ce75404f95baef4b8d54825"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2455,"url":"https://github.com/assertj/assertj/issues/2455","title":"`isStatic` / `isNotStatic` for `Class` assertions","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\"><code class=\"notranslate\">isStatic</code> and <code class=\"notranslate\">isNotStatic</code> could be added to <code class=\"notranslate\">Class</code> assertions, mostly relevant for nested classes.</p>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">Having:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class OuterClass {\n\n  class InnerClass {\n  }\n\n  static class StaticNestedClass {\n  }\n\n  interface NestedInterface {\n  }\n\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">OuterClass</span> {\n\n  <span class=\"pl-k\">class</span> <span class=\"pl-smi\">InnerClass</span> {\n  }\n\n  <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">StaticNestedClass</span> {\n  }\n\n  <span class=\"pl-k\">interface</span> <span class=\"pl-smi\">NestedInterface</span> {\n  }\n\n}</pre></div>\n<p dir=\"auto\">the following assertions should pass:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(OuterClass.class).isNotStatic();\nassertThat(OuterClass.InnerClass.class).isNotStatic();\n\nassertThat(OuterClass.StaticNestedClass.class).isStatic();\nassertThat(OuterClass.NestedInterface.class).isStatic();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">OuterClass</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isNotStatic</span>();\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">OuterClass</span>.<span class=\"pl-s1\">InnerClass</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isNotStatic</span>();\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">OuterClass</span>.<span class=\"pl-s1\">StaticNestedClass</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isStatic</span>();\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">OuterClass</span>.<span class=\"pl-s1\">NestedInterface</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isStatic</span>();</pre></div>","resourcePath":"/assertj/assertj/issues/2455","createdAt":"2022-01-03T22:42:02Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add `hasNumberOfRows` to two-dimensional array assertions","url":"https://github.com/assertj/assertj/pull/2461","resourcePath":"/assertj/assertj/pull/2461","createdAt":"2022-01-09T13:00:52Z","number":2461,"mergeCommit":{"oid":"9ba08a2130540af2ab5601e5a83c96373a8fd6c8","message":"Add `hasNumberOfRows` to two-dimensional array assertions (#2461)\n\nCo-authored-by: Sekar Mylsamy <sekar.mylsamy@aexp.com>","commitUrl":"https://github.com/assertj/assertj/commit/9ba08a2130540af2ab5601e5a83c96373a8fd6c8","parents":{"nodes":[{"oid":"f115e9d3cb12fcebe8e2b340898252caca9d7eec","message":"implement matches() in #2081 (#2510)\n\n* migrate\r\n\r\n* fix\r\n\r\n* license info and other minor fix"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/arrays2d/Arrays2D_assertNumberOfRows_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/boolean2darrays/Boolean2DArrays_assertNumberOfRows_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/byte2darrays/Byte2DArrays_assertNumberOfRows_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/char2darrays/Char2DArrays_assertNumberOfRows_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/double2darrays/Double2DArrays_assertNumberOfRows_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/float2darrays/Float2DArrays_assertNumberOfRows_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/int2darrays/Int2DArrays_assertNumberOfRows_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/long2darrays/Long2DArrays_assertNumberOfRows_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/object2darrays/Object2DArrays_assertNumberOfRows_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/short2darrays/Short2DArrays_assertNumberOfRows_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4wsuh42gAoOTUzYzMzOWFiMTc5MDFhYTVjZTVhOTY2NzFlOTQ1NDNjYjQ4MzNkYg","url":"https://github.com/assertj/assertj/pull/2461/commits/953c339ab17901aa5ce5a96671e94543cb4833db"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2296,"url":"https://github.com/assertj/assertj/issues/2296","title":"2D arrays: assert size of first dimension only","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">In assertj 3.17.0, for 2D arrays like <code class=\"notranslate\">byte[][]</code> the <code class=\"notranslate\">hasSize(int)</code> method has been replaced by <code class=\"notranslate\">hasDimensions(int, int)</code>.</p>\n<p dir=\"auto\">It would be useful to keep the <code class=\"notranslate\">hasSize(int)</code> as well. The length of the second dimension might be different for each entry, or it might simply be irrelevant to the test.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"byte[][] bytes = {{1}, {1, 2}, {1, 2, 3}};\nassertThat(bytes).hasDimensions(3, /* problem: second dimension is variable length */);\"><pre><span class=\"pl-smi\">byte</span>[][] <span class=\"pl-s1\">bytes</span> = {{<span class=\"pl-c1\">1</span>}, {<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>}, {<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>}};\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">bytes</span>).<span class=\"pl-en\">hasDimensions</span>(<span class=\"pl-c1\">3</span>, <span class=\"pl-c\">/* problem: second dimension is variable length */</span>);</pre></div>","resourcePath":"/assertj/assertj/issues/2296","createdAt":"2021-07-23T09:05:30Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add additional assertions for `CharSequence`","url":"https://github.com/assertj/assertj/pull/2482","resourcePath":"/assertj/assertj/pull/2482","createdAt":"2022-02-01T03:19:55Z","number":2482,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldBeNumeric_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldBePrintable_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldBeVisible_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertIsASCII_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertIsAlphabetic_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertIsAlphanumeric_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertIsHexadecimal_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertIsNumeric_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertIsPrintable_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertIsVisible_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4x4IoT2gAoYzZkMTBmZTI1NDA1Yzk5MzIxYjgyMzAwYzAyMWRjOTY0ZjU5NWRhMQ","url":"https://github.com/assertj/assertj/pull/2482/commits/c6d10fe25405c99321b82300c021dc964f595da1"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2472,"url":"https://github.com/assertj/assertj/issues/2472","title":"Additional assertions for `CharSequence`","bodyHTML":"<p dir=\"auto\">Using the existing <code class=\"notranslate\">matches(Pattern)</code> and POSIX regex character classes, we can add specialized assertions to <code class=\"notranslate\">AbstractCharSequenceAssert</code>.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(string).isAlphabetic();   // \\p{Alpha}\nassertThat(string).isAlphanumeric(); // \\p{Alnum}\nassertThat(string).isASCII();        // \\p{ASCII}\nassertThat(string).isDigit();        // \\p{Digit}\nassertThat(string).isHexadecimal();  // \\p{XDigit}\nassertThat(string).isPrintable();    // \\p{Print}\nassertThat(string).isVisible();      // \\p{Graph}\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">string</span>).<span class=\"pl-en\">isAlphabetic</span>();   <span class=\"pl-c\">// \\p{Alpha}</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">string</span>).<span class=\"pl-en\">isAlphanumeric</span>(); <span class=\"pl-c\">// \\p{Alnum}</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">string</span>).<span class=\"pl-en\">isASCII</span>();        <span class=\"pl-c\">// \\p{ASCII}</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">string</span>).<span class=\"pl-en\">isDigit</span>();        <span class=\"pl-c\">// \\p{Digit}</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">string</span>).<span class=\"pl-en\">isHexadecimal</span>();  <span class=\"pl-c\">// \\p{XDigit}</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">string</span>).<span class=\"pl-en\">isPrintable</span>();    <span class=\"pl-c\">// \\p{Print}</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">string</span>).<span class=\"pl-en\">isVisible</span>();      <span class=\"pl-c\">// \\p{Graph}</span></pre></div>\n<p dir=\"auto\">Also, the existing <code class=\"notranslate\">containsOnlyDigits()</code> should be deprecated in favor of <code class=\"notranslate\">isDigit()</code>.</p>","resourcePath":"/assertj/assertj/issues/2472","createdAt":"2022-01-23T23:32:48Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"fixed issue #2412, removed tests for original behavior","url":"https://github.com/assertj/assertj/pull/2430","resourcePath":"/assertj/assertj/pull/2430","createdAt":"2021-12-09T01:01:35Z","number":2430,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractIterableAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractObjectArrayAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_flatExtracting_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_flatExtracting_with_SortedSet_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_flatExtracting_with_multiple_extractors_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_flatExtracting_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4vlTzh2gAoNjgyZGY1YzQyYTA5ZGRhNjFkMmY3YmExZTE4MDE2NGFkZmYyZGNkNQ","url":"https://github.com/assertj/assertj/pull/2430/commits/682df5c42a09dda61d2f7ba1e180164adff2dcd5"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2412,"url":"https://github.com/assertj/assertj/issues/2412","title":"flatExtracting/flatMap for iterable should throw a proper assertion error if iterable is null","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Similar to  <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1049211176\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2401\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2401/hovercard\" href=\"https://github.com/assertj/assertj/issues/2401\">#2401</a> but for <code class=\"notranslate\">flatExtracting</code>/<code class=\"notranslate\">flatMap</code>.</p>","resourcePath":"/assertj/assertj/issues/2412","createdAt":"2021-11-15T09:58:52Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add Comparable assertions for URI #2487","url":"https://github.com/assertj/assertj/pull/2488","resourcePath":"/assertj/assertj/pull/2488","createdAt":"2022-02-09T00:58:43Z","number":2488,"mergeCommit":{"oid":"ab638a5142cf8ea35cbb94892b7d3757765a7d94","message":"Use `AbstractComparableAssert` as parent class for `URI` assertions (#2488)","commitUrl":"https://github.com/assertj/assertj/commit/ab638a5142cf8ea35cbb94892b7d3757765a7d94","parents":{"nodes":[{"oid":"5129ddf4f419368cb52d394cafdb0bf480de79b6","message":"Throw `AssertionError` with `extracting(String)` if actual is `null`"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractUriAssert.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs4yRPcD2gAoNzg5ODdlNDM3NGE5NDI5ZTQ4MzM3NjgyOWFhODkwMzcyZjk1ZDgyYg","url":"https://github.com/assertj/assertj/pull/2488/commits/78987e4374a9429e483376829aa890372f95d82b"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2487,"url":"https://github.com/assertj/assertj/issues/2487","title":"Provide `Comparable` assertions for `URI`","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\"><code class=\"notranslate\">java.net.URI</code> is a <code class=\"notranslate\">Comparable</code>, so <code class=\"notranslate\">AbstractUriAssert</code> should extend <code class=\"notranslate\">AbstractComparableAssert</code>.</p>\n<p dir=\"auto\">I assume this to be a minor, non-breaking change. I'd do a PR, but the overhead seems to be too big in my eyes.</p>\n<p dir=\"auto\">Note: <code class=\"notranslate\">java.net.URL</code> is <em>not</em> comparable.</p>","resourcePath":"/assertj/assertj/issues/2487","createdAt":"2022-02-08T06:21:15Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add `assertThatCode(Callable)`","url":"https://github.com/assertj/assertj/pull/2519","resourcePath":"/assertj/assertj/pull/2519","createdAt":"2022-03-08T00:38:25Z","number":2519,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/AbstractCallableAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/AbstractThrowingExecutableAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assertions.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/CallableAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/api/ThrowingExecutableAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/Assertions_sync_with_BDDAssumptions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/CallableAssert_Demo_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/ThrowableAssertAlternative_havingCause_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs40E5fz2gAoNGIwYTY1NTViOGEyY2UzNDMxMWYxZjg2Nzk0Mjk0YzA2OTU3ODQ4NQ","url":"https://github.com/assertj/assertj/pull/2519/commits/4b0a6555b8a2ce34311f1f86794294c069578485"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1652,"url":"https://github.com/assertj/assertj/issues/1652","title":"Assert return value of callable throwing exception","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">It would be nice if the <code class=\"notranslate\">assertThatCode().doesNotThrowException()</code> API would be able execute functions that return a value and then return that value for further inspection.<br>\nThis would make it easy to provide a nice description to an otherwise maybe nondescript exception that is thrown.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Test \npublic void intendedApi() {\n  int x = assertThatCode(this::doStuff)\n    .describedAs(&quot;doing things&quot;)\n    .doesNotThrowAnyException();\n  assertThat(x).isEqualTo(3);\n}\n\n@Test\npublic void currentSolution1() {\n  int x;\n  try {\n    x = doStuff();\n  } catch (Exception e) {\n    fail(&quot;doing things&quot;);\n    return; // never reached; needed because fail() is not recognized by the java compiler as method exit\n  }\n  assertThat(x).isEqualTo(3);\n}\n\n@Test\npublic void currentSolution2() {\n  AtomicReference&lt;Integer&gt; x = new AtomicReference&lt;&gt;();\n  assertThatCode(() -&gt; x.set(doStuff()))\n    .describedAs(&quot;doing things&quot;)\n    .doesNotThrowAnyException();\n  assertThat(x.get()).isEqualTo(3);\n}\n\n// utility for demonstration purposes\npublic int doStuff() throws Exception {\n  if (new Random().nextBoolean()) {\n    throw new Exception();\n  }\n  return 3;\n}\"><pre><span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span> \n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">intendedApi</span>() {\n  <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">x</span> = <span class=\"pl-en\">assertThatCode</span>(<span class=\"pl-smi\">this</span>::<span class=\"pl-s1\">doStuff</span>)\n    .<span class=\"pl-en\">describedAs</span>(<span class=\"pl-s\">\"doing things\"</span>)\n    .<span class=\"pl-en\">doesNotThrowAnyException</span>();\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">x</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">3</span>);\n}\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">currentSolution1</span>() {\n  <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">x</span>;\n  <span class=\"pl-k\">try</span> {\n    <span class=\"pl-s1\">x</span> = <span class=\"pl-en\">doStuff</span>();\n  } <span class=\"pl-k\">catch</span> (<span class=\"pl-smi\">Exception</span> <span class=\"pl-s1\">e</span>) {\n    <span class=\"pl-en\">fail</span>(<span class=\"pl-s\">\"doing things\"</span>);\n    <span class=\"pl-k\">return</span>; <span class=\"pl-c\">// never reached; needed because fail() is not recognized by the java compiler as method exit</span>\n  }\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">x</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">3</span>);\n}\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">currentSolution2</span>() {\n  <span class=\"pl-smi\">AtomicReference</span>&lt;<span class=\"pl-smi\">Integer</span>&gt; <span class=\"pl-s1\">x</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">AtomicReference</span>&lt;&gt;();\n  <span class=\"pl-en\">assertThatCode</span>(() -&gt; <span class=\"pl-s1\">x</span>.<span class=\"pl-en\">set</span>(<span class=\"pl-en\">doStuff</span>()))\n    .<span class=\"pl-en\">describedAs</span>(<span class=\"pl-s\">\"doing things\"</span>)\n    .<span class=\"pl-en\">doesNotThrowAnyException</span>();\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">x</span>.<span class=\"pl-en\">get</span>()).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">3</span>);\n}\n\n<span class=\"pl-c\">// utility for demonstration purposes</span>\n<span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">doStuff</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">Exception</span> {\n  <span class=\"pl-k\">if</span> (<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Random</span>().<span class=\"pl-en\">nextBoolean</span>()) {\n    <span class=\"pl-k\">throw</span> <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Exception</span>();\n  }\n  <span class=\"pl-k\">return</span> <span class=\"pl-c1\">3</span>;\n}</pre></div>","resourcePath":"/assertj/assertj/issues/1652","createdAt":"2019-10-25T12:07:07Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add assumptions methods to be in sync with assertions methods","url":"https://github.com/assertj/assertj/pull/2562","resourcePath":"/assertj/assertj/pull/2562","createdAt":"2022-04-10T12:22:02Z","number":2562,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assumptions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/BDDAssumptions.java"}},{"node":{"changeType":"DELETED","path":"src/test/java/org/assertj/core/api/Assertions_sync_with_Assumptions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/Assertions_sync_with_Assumptions_and_BDDAssumptions_Test.java"}},{"node":{"changeType":"DELETED","path":"src/test/java/org/assertj/core/api/Assertions_sync_with_BDDAssumptions_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs419FsS2gAoZWE1MmQ3NTI2NzZjYjU3NGE4MThhYmQ0Nzg0M2IyMWY2YWEyN2YyOA","url":"https://github.com/assertj/assertj/pull/2562/commits/ea52d752676cb574a818abd47843b21f6aa27f28"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2531,"url":"https://github.com/assertj/assertj/issues/2531","title":"Add assumptions methods to be in sync with assertions methods","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Sync <code class=\"notranslate\">assertThatXxx</code> methods with assumptions <code class=\"notranslate\">assumeThatXxx</code>.</p>\n<h4 dir=\"auto\">Missing ones</h4>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">assumeThatCollection</code></li>\n<li><code class=\"notranslate\">assumeThatIterable</code></li>\n<li><code class=\"notranslate\">assumeThatIterator</code></li>\n<li><code class=\"notranslate\">assumeThatList</code></li>\n<li><code class=\"notranslate\">assumeThatPath</code></li>\n<li><code class=\"notranslate\">assumeThatPredicate</code></li>\n<li><code class=\"notranslate\">assumeThatStream</code></li>\n<li><code class=\"notranslate\">assumeThatExceptionOfType</code></li>\n<li><code class=\"notranslate\">assumeThatException</code></li>\n<li><code class=\"notranslate\">assumeThatRuntimeException</code></li>\n<li><code class=\"notranslate\">assumeThatNullPointerException</code></li>\n<li><code class=\"notranslate\">assumeThatIllegalArgumentException</code></li>\n<li><code class=\"notranslate\">assumeThatIOException</code></li>\n<li><code class=\"notranslate\">assumeThatIndexOutOfBoundsException</code></li>\n<li><code class=\"notranslate\">assumeThatReflectiveOperationException\"</code></li>\n</ul>\n<p dir=\"auto\">Refactor <code class=\"notranslate\">Assertions_sync_with_BDDAssumptions_Test</code> to be parameterized as <code class=\"notranslate\">Assertions_sync_with_BDDAssertions_WithAssertions_and_soft_assertions_variants_Test</code>.</p>\n<p dir=\"auto\">Don't add <code class=\"notranslate\">assertThatComparable</code> it is going to be done as part of another ongoing issue.</p>","resourcePath":"/assertj/assertj/issues/2531","createdAt":"2022-03-20T09:25:13Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix containsExactly that does not work properly with maps not using e…","url":"https://github.com/assertj/assertj/pull/2623","resourcePath":"/assertj/assertj/pull/2623","createdAt":"2022-05-22T06:21:49Z","number":2623,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Maps.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/MapsBaseTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsExactly_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs44Pd4H2gAoMTI0MzZlOGQzY2VjNGQzZDRiMzA4YmU1N2YxMTMxY2IyMTNjYzliYg","url":"https://github.com/assertj/assertj/pull/2623/commits/12436e8d3cec4d3d4b308be57f1131cb213cc9bb"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2165,"url":"https://github.com/assertj/assertj/issues/2165","title":"`containsExactly` does not work properly with maps not using equals to compare keys","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">This test should pass but fails.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  @Test\n  void should_pass_if_case_insensitive_actual_contains_given_entries_in_rder() {\n    // GIVEN\n    actual = new CaseInsensitiveMap&lt;&gt;();\n    actual.put( &quot;Color&quot;, &quot;green&quot; );\n    actual.put( &quot;NAME&quot;, &quot;Yoda&quot; );\n\n    // THEN\n    maps.assertContainsExactly(someInfo(), actual, entry(&quot;COLOR&quot;, &quot;green&quot;), entry(&quot;Name&quot;, &quot;Yoda&quot;));\n  }\"><pre>  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">should_pass_if_case_insensitive_actual_contains_given_entries_in_rder</span>() {\n    <span class=\"pl-c\">// GIVEN</span>\n    <span class=\"pl-s1\">actual</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">CaseInsensitiveMap</span>&lt;&gt;();\n    <span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">put</span>( <span class=\"pl-s\">\"Color\"</span>, <span class=\"pl-s\">\"green\"</span> );\n    <span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">put</span>( <span class=\"pl-s\">\"NAME\"</span>, <span class=\"pl-s\">\"Yoda\"</span> );\n\n    <span class=\"pl-c\">// THEN</span>\n    <span class=\"pl-s1\">maps</span>.<span class=\"pl-en\">assertContainsExactly</span>(<span class=\"pl-en\">someInfo</span>(), <span class=\"pl-s1\">actual</span>, <span class=\"pl-en\">entry</span>(<span class=\"pl-s\">\"COLOR\"</span>, <span class=\"pl-s\">\"green\"</span>), <span class=\"pl-en\">entry</span>(<span class=\"pl-s\">\"Name\"</span>, <span class=\"pl-s\">\"Yoda\"</span>));\n  }</pre></div>\n<p dir=\"auto\">The underlying issue is when <code class=\"notranslate\">containsExactly</code> verifies that the entries are in the same order, it ends up comparing <code class=\"notranslate\">\"Color\"</code> against <code class=\"notranslate\">\"COLOR\"</code> with <code class=\"notranslate\">equals</code> instead of the actual map key comparison strategy (case insensitive string in the example).</p>\n<p dir=\"auto\">It's not yet clear if there is a way to address this issue, if not we would have to mention the limitation in the javadoc.</p>","resourcePath":"/assertj/assertj/issues/2165","createdAt":"2021-04-09T11:01:09Z","labels":{"edges":[{"node":{"name":"type: bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix support for generic comparable","url":"https://github.com/assertj/assertj/pull/2532","resourcePath":"/assertj/assertj/pull/2532","createdAt":"2022-03-20T09:41:09Z","number":2532,"mergeCommit":{"oid":"705f34b209b37cafdca272d84b40f028dc417c10","message":"Improve compatibility of `assertThatComparable` (#2532)","commitUrl":"https://github.com/assertj/assertj/commit/705f34b209b37cafdca272d84b40f028dc417c10","parents":{"nodes":[{"oid":"dfb3a6165c396780332fb8c13399bbdb9525111f","message":"Bump jackson-databind from 2.13.2.2 to 2.13.3 (#2614)\n\nBumps [jackson-databind](https://github.com/FasterXML/jackson) from 2.13.2.2 to 2.13.3.\n- [Release notes](https://github.com/FasterXML/jackson/releases)\n- [Commits](https://github.com/FasterXML/jackson/commits)\n\n---\nupdated-dependencies:\n- dependency-name: com.fasterxml.jackson.core:jackson-databind\n  dependency-type: direct:development\n  update-type: version-update:semver-patch\n...\n\nSigned-off-by: dependabot[bot] <support@github.com>\n\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/comparable/AbstractUniversalComparableAssert_isGreaterThanOrEqualTo_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/comparable/AbstractUniversalComparableAssert_isGreaterThan_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/comparable/AbstractUniversalComparableAssert_isLessThanOrEqualTo_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/comparable/AbstractUniversalComparableAssert_isLessThan_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/comparable/AbstractUniversalComparableAssert_isNotEqualByComparingTo_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/comparable/AbstractUniversalComparableAssert_isStrictlyBetween_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/comparable/AbstractUniversalComparableAssert_usingComparator_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/comparable/AbstractUniversalComparableAssert_usingDefaultComparator_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldBeLessOrEqual_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/test/Name.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs40stQJ2gAoZmRhMmVmYWZlNzkyMjExODA5NjZjYTgyOTJlNGU0ZDgwNmQ3NzFlMQ","url":"https://github.com/assertj/assertj/pull/2532/commits/fda2efafe79221180966ca8292e4e4d806d771e1"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2557,"url":"https://github.com/assertj/assertj/issues/2557","title":"`assertThat(comparable)` returns `ObjectAssert` instead of `AbstractComparableAssert`","bodyHTML":"<h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">Given a <code class=\"notranslate\">Comparable&lt;T&gt;</code> variable, it's currently not possible to use assertions from <a href=\"https://www.javadoc.io/doc/org.assertj/assertj-core/latest/org/assertj/core/api/ComparableAssert.html\" rel=\"nofollow\"><code class=\"notranslate\">ComparableAssert</code></a> unless <code class=\"notranslate\">T</code> is <code class=\"notranslate\">Object</code>.</p>\n<p dir=\"auto\">Also, if the type implementing <code class=\"notranslate\">Comparable</code> targets a parent type that is not <code class=\"notranslate\">Object</code>, <code class=\"notranslate\">assertThat</code> always returns <code class=\"notranslate\">ObjectAssert</code> for both strongly-typed and <code class=\"notranslate\">Comparable&lt;T&gt;</code> variables.</p>\n<h3 dir=\"auto\">Example: JDK type not comparing with <code class=\"notranslate\">Object</code></h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Comparable&lt;String&gt; comparable = &quot;value&quot;;\n\nassertThat(comparable)            // ObjectAssert&lt;Comparable&lt;String&gt;&gt;\n  .isEqualByComparingTo(&quot;value&quot;); // does not compile\"><pre><span class=\"pl-smi\">Comparable</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">comparable</span> = <span class=\"pl-s\">\"value\"</span>;\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparable</span>)            <span class=\"pl-c\">// ObjectAssert&lt;Comparable&lt;String&gt;&gt;</span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-s\">\"value\"</span>); <span class=\"pl-c\">// does not compile</span></pre></div>\n<h3 dir=\"auto\">Example: Custom type comparing with self</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class ComparingWithSelf implements Comparable&lt;ComparingWithSelf&gt; {\n  @Override\n  public int compareTo(ComparingWithSelf other) {\n    return 0;\n  }\n}\n\nComparable&lt;ComparingWithSelf&gt; comparable = new ComparingWithSelf();\n\nassertThat(comparable)                            // ObjectAssert&lt;Comparable&lt;ComparingWithSelf&gt;&gt;\n  .isEqualByComparingTo(new ComparingWithSelf()); // does not compile\n\nComparingWithSelf comparingWithSelf = new ComparingWithSelf();\n\nassertThat(comparingWithSelf)                     // AbstractComparableAssert&lt;?, ComparingWithSelf&gt;\n  .isEqualByComparingTo(new ComparingWithSelf()); // compiles\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">ComparingWithSelf</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Comparable</span>&lt;<span class=\"pl-smi\">ComparingWithSelf</span>&gt; {\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">compareTo</span>(<span class=\"pl-smi\">ComparingWithSelf</span> <span class=\"pl-s1\">other</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;\n  }\n}\n\n<span class=\"pl-smi\">Comparable</span>&lt;<span class=\"pl-smi\">ComparingWithSelf</span>&gt; <span class=\"pl-s1\">comparable</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithSelf</span>();\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparable</span>)                            <span class=\"pl-c\">// ObjectAssert&lt;Comparable&lt;ComparingWithSelf&gt;&gt;</span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithSelf</span>()); <span class=\"pl-c\">// does not compile</span>\n\n<span class=\"pl-smi\">ComparingWithSelf</span> <span class=\"pl-s1\">comparingWithSelf</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithSelf</span>();\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparingWithSelf</span>)                     <span class=\"pl-c\">// AbstractComparableAssert&lt;?, ComparingWithSelf&gt;</span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithSelf</span>()); <span class=\"pl-c\">// compiles</span></pre></div>\n<h3 dir=\"auto\">Example: Custom type comparing with parent</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class Parent {}\n\nclass ComparingWithParent extends Parent implements Comparable&lt;Parent&gt; {\n  @Override\n  public int compareTo(Parent other) {\n    return 0;\n  }\n}\n\nComparable&lt;Parent&gt; comparable = new ComparingWithParent();\n\nassertThat(comparable)                              // ObjectAssert&lt;Comparable&lt;Parent&gt;&gt;\n  .isEqualByComparingTo(new ComparingWithParent()); // does not compile\n\nComparingWithParent comparingWithParent = new ComparingWithParent();\n\nassertThat(comparingWithParent)                     // ObjectAssert&lt;ComparingWithParent&gt;\n  .isEqualByComparingTo(new ComparingWithParent()); // does not compile\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">Parent</span> {}\n\n<span class=\"pl-k\">class</span> <span class=\"pl-smi\">ComparingWithParent</span> <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">Parent</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Comparable</span>&lt;<span class=\"pl-smi\">Parent</span>&gt; {\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">compareTo</span>(<span class=\"pl-smi\">Parent</span> <span class=\"pl-s1\">other</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;\n  }\n}\n\n<span class=\"pl-smi\">Comparable</span>&lt;<span class=\"pl-smi\">Parent</span>&gt; <span class=\"pl-s1\">comparable</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithParent</span>();\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparable</span>)                              <span class=\"pl-c\">// ObjectAssert&lt;Comparable&lt;Parent&gt;&gt;</span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithParent</span>()); <span class=\"pl-c\">// does not compile</span>\n\n<span class=\"pl-smi\">ComparingWithParent</span> <span class=\"pl-s1\">comparingWithParent</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithParent</span>();\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparingWithParent</span>)                     <span class=\"pl-c\">// ObjectAssert&lt;ComparingWithParent&gt;</span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithParent</span>()); <span class=\"pl-c\">// does not compile</span></pre></div>\n<h3 dir=\"auto\">Example: Custom type comparing with <code class=\"notranslate\">Object</code></h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class ComparingWithObject implements Comparable&lt;Object&gt; {\n  @Override\n  public int compareTo(Object other) {\n    return 0;\n  }\n}\n\nComparable&lt;Object&gt; comparable = new ComparingWithObject();\n\nassertThat(comparable)                              // AbstractComparableAssert&lt;?, Comparable&lt;Object&gt;\n  .isEqualByComparingTo(new ComparingWithObject()); // compiles\n\nComparingWithObject comparingWithObject = new ComparingWithObject();\n\nassertThat(comparingWithObject)                     // AbstractComparableAssert&lt;?, ComparingWithObject&gt;\n  .isEqualByComparingTo(new ComparingWithObject()); // compiles\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">ComparingWithObject</span> <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">Comparable</span>&lt;<span class=\"pl-smi\">Object</span>&gt; {\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Override</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">int</span> <span class=\"pl-en\">compareTo</span>(<span class=\"pl-smi\">Object</span> <span class=\"pl-s1\">other</span>) {\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">0</span>;\n  }\n}\n\n<span class=\"pl-smi\">Comparable</span>&lt;<span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">comparable</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithObject</span>();\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparable</span>)                              <span class=\"pl-c\">// AbstractComparableAssert&lt;?, Comparable&lt;Object&gt;</span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithObject</span>()); <span class=\"pl-c\">// compiles</span>\n\n<span class=\"pl-smi\">ComparingWithObject</span> <span class=\"pl-s1\">comparingWithObject</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithObject</span>();\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparingWithObject</span>)                     <span class=\"pl-c\">// AbstractComparableAssert&lt;?, ComparingWithObject&gt;</span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">ComparingWithObject</span>()); <span class=\"pl-c\">// compiles</span></pre></div>\n<h3 dir=\"auto\">Workaround: Raw type</h3>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Comparable comparable = &quot;value&quot;;  // &quot;rawtypes&quot; warning\n\nassertThat(comparable)            // AbstractComparableAssert&lt;?, Comparable&gt; with &quot;unchecked&quot; warning\n  .isEqualByComparingTo(&quot;value&quot;); // compiles with &quot;unchecked&quot; warning\"><pre><span class=\"pl-smi\">Comparable</span> <span class=\"pl-s1\">comparable</span> = <span class=\"pl-s\">\"value\"</span>;  <span class=\"pl-c\">// \"rawtypes\" warning</span>\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparable</span>)            <span class=\"pl-c\">// AbstractComparableAssert&lt;?, Comparable&gt; with \"unchecked\" warning</span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-s\">\"value\"</span>); <span class=\"pl-c\">// compiles with \"unchecked\" warning</span></pre></div>\n<h3 dir=\"auto\">Workaround: <code class=\"notranslate\">asInstanceOf</code></h3>\n<p dir=\"auto\">This works only with non-null instances due to the null-check performed in <code class=\"notranslate\">asInstanceOf</code>.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"Comparable&lt;String&gt; comparable = &quot;value&quot;;\n\nassertThat(comparable)                    // ObjectAssert&lt;Comparable&lt;String&gt;&gt;\n  .asInstanceOf(comparable(String.class)) // AbstractComparableAssert&lt;?, String&gt;\n  .isEqualByComparingTo(&quot;value&quot;);         // compiles\"><pre><span class=\"pl-smi\">Comparable</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">comparable</span> = <span class=\"pl-s\">\"value\"</span>;\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comparable</span>)                    <span class=\"pl-c\">// ObjectAssert&lt;Comparable&lt;String&gt;&gt;</span>\n  .<span class=\"pl-en\">asInstanceOf</span>(<span class=\"pl-en\">comparable</span>(<span class=\"pl-smi\">String</span>.<span class=\"pl-s1\">class</span>)) <span class=\"pl-c\">// AbstractComparableAssert&lt;?, String&gt;</span>\n  .<span class=\"pl-en\">isEqualByComparingTo</span>(<span class=\"pl-s\">\"value\"</span>);         <span class=\"pl-c\">// compiles</span></pre></div>\n<h3 dir=\"auto\">Current status</h3>\n<table role=\"table\">\n<thead>\n<tr>\n<th><code class=\"notranslate\">assertThat</code> use case</th>\n<th><code class=\"notranslate\">Comparable&lt;T&gt;</code> variable</th>\n<th>Strongly-typed variable</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>JDK type not comparing with <code class=\"notranslate\">Object</code></td>\n<td><code class=\"notranslate\">ObjectAssert</code></td>\n<td>N/A (dedicated assertions)</td>\n</tr>\n<tr>\n<td>Custom type comparing with self</td>\n<td><code class=\"notranslate\">ObjectAssert</code></td>\n<td><code class=\"notranslate\">AbstractComparableAssert</code></td>\n</tr>\n<tr>\n<td>Custom type comparing with parent</td>\n<td><code class=\"notranslate\">ObjectAssert</code></td>\n<td><code class=\"notranslate\">ObjectAssert</code></td>\n</tr>\n<tr>\n<td>Custom type comparing with <code class=\"notranslate\">Object</code></td>\n<td><code class=\"notranslate\">AbstractComparableAssert</code></td>\n<td><code class=\"notranslate\">AbstractComparableAssert</code></td>\n</tr>\n</tbody>\n</table>","resourcePath":"/assertj/assertj/issues/2557","createdAt":"2022-04-03T13:24:30Z","labels":{"edges":[{"node":{"name":"type: bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Avoid cloning `MultiValueMapAdapter` instances","url":"https://github.com/assertj/assertj/pull/2549","resourcePath":"/assertj/assertj/pull/2549","createdAt":"2022-03-30T20:25:27Z","number":2549,"mergeCommit":{"oid":"aa3fbf8cf56afcb11ebd9e60c4208ec0249bc81e","message":"Avoid cloning `MultiValueMapAdapter` instances (#2549)","commitUrl":"https://github.com/assertj/assertj/commit/aa3fbf8cf56afcb11ebd9e60c4208ec0249bc81e","parents":{"nodes":[{"oid":"92548d8916425787c8a60e6dea638b285825ca12","message":"Bump jackson-databind from 2.13.2.1 to 2.13.2.2 (#2546)\n\nBumps [jackson-databind](https://github.com/FasterXML/jackson) from 2.13.2.1 to 2.13.2.2.\r\n- [Release notes](https://github.com/FasterXML/jackson/releases)\r\n- [Commits](https://github.com/FasterXML/jackson/commits)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: com.fasterxml.jackson.core:jackson-databind\r\n  dependency-type: direct:development\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Maps.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsOnlyKeys_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/maps/Maps_assertContainsOnly_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs41Vpl82gAoMTkxN2EwN2Q0OGFiYzQxODQxYTYzMWI4NzhlYTVhNDA3ZTFmNDk3Mw","url":"https://github.com/assertj/assertj/pull/2549/commits/1917a07d48abc41841a631b878ea5a407e1f4973"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2547,"url":"https://github.com/assertj/assertj/issues/2547","title":"Regression in `AbstractMapAssert#containsOnlyKeys` with Spring's `MultiValueMapAdapter`","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">We saw this when updating from AssertJ 3.19.0 to 3.20.0. It appears that <code class=\"notranslate\">AbstractMapAssert#containsOnlyKeys</code> is mutating the map that we're asserting on, which leads to test failures in our case. This is happening on an instance of <code class=\"notranslate\">org.springframework.util.MultiValueMapAdapter</code></p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"var underlyingMap = new HashMap&lt;String, List&lt;String&gt;&gt;();\nunderlyingMap.put(&quot;Hello&quot;, List.of(&quot;World&quot;));\n\nvar multiValueMap = CollectionUtils.toMultiValueMap(underlyingMap);\n// This assertion passes\nassertThat(multiValueMap).containsOnlyKeys(&quot;Hello&quot;);\n// This assertion fails, as `multiValueMap` and `underlyingMap` are now empty\nassertThat(multiValueMap).containsOnlyKeys(&quot;Hello&quot;);\"><pre><span class=\"pl-smi\">var</span> <span class=\"pl-s1\">underlyingMap</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">HashMap</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt;&gt;();\n<span class=\"pl-s1\">underlyingMap</span>.<span class=\"pl-en\">put</span>(<span class=\"pl-s\">\"Hello\"</span>, <span class=\"pl-s1\">List</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"World\"</span>));\n\n<span class=\"pl-smi\">var</span> <span class=\"pl-s1\">multiValueMap</span> = <span class=\"pl-s1\">CollectionUtils</span>.<span class=\"pl-en\">toMultiValueMap</span>(<span class=\"pl-s1\">underlyingMap</span>);\n<span class=\"pl-c\">// This assertion passes</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">multiValueMap</span>).<span class=\"pl-en\">containsOnlyKeys</span>(<span class=\"pl-s\">\"Hello\"</span>);\n<span class=\"pl-c\">// This assertion fails, as `multiValueMap` and `underlyingMap` are now empty</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">multiValueMap</span>).<span class=\"pl-en\">containsOnlyKeys</span>(<span class=\"pl-s\">\"Hello\"</span>);</pre></div>\n<p dir=\"auto\">The issue seems to have been introduced in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"855276721\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2167\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/assertj/assertj/pull/2167/hovercard\" href=\"https://github.com/assertj/assertj/pull/2167\">#2167</a>, and is caused by <a href=\"https://github.com/assertj/assertj-core/pull/2167/files#diff-abf21eb7e9d518345dcc39f1097da30169084ee0a538e0b174fba36807cf7386R397\">this</a> use of <code class=\"notranslate\">Map#remove</code> on a \"clone\" of the <code class=\"notranslate\">Map</code> being asserted on. In our case that <code class=\"notranslate\">Map</code> is a Spring <code class=\"notranslate\">MultiValueMapAdapter</code>, which delegates operations to the underlying <code class=\"notranslate\">Map</code> that it was constructed from. The <code class=\"notranslate\">remove</code> call on the clone delegates to <code class=\"notranslate\">multiValueMap#remove</code> which in turn delegates to <code class=\"notranslate\">underlyingMap#remove</code>.</p>","resourcePath":"/assertj/assertj/issues/2547","createdAt":"2022-03-30T14:05:07Z","labels":{"edges":[{"node":{"name":"type: bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"2596 input stream should not be manipulated by assertions","url":"https://github.com/assertj/assertj/pull/2601","resourcePath":"/assertj/assertj/pull/2601","createdAt":"2022-05-06T20:21:51Z","number":2601,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractInputStreamAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/InputStreams.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs43b5Sm2gAoMWE2MGE0ZDFhMjA5NGQzYWVhYjM1NmM5Y2M0ZmRkODhjNzA1YTRkOQ","url":"https://github.com/assertj/assertj/pull/2601/commits/1a60a4d1a2094d3aeab356c9cc4fdd88c705a4d9"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2596,"url":"https://github.com/assertj/assertj/issues/2596","title":"`InputStream` supporting `mark` / `reset` should not be manipulated by assertions","bodyHTML":"<p dir=\"auto\">Related to <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1128851957\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2490\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2490/hovercard?comment_id=1035488261&amp;comment_type=issue_comment\" href=\"https://github.com/assertj/assertj/issues/2490#issuecomment-1035488261\">#2490 (comment)</a>, the assertions of <code class=\"notranslate\">AbstractInputStreamAssert</code> could avoid manipulating the stream position when the <code class=\"notranslate\">InputStream</code> implementation supports <a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html#mark-int-\" rel=\"nofollow\"><code class=\"notranslate\">mark</code></a> / <a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html#reset--\" rel=\"nofollow\"><code class=\"notranslate\">reset</code></a> operations, tested by <a href=\"https://docs.oracle.com/javase/8/docs/api/java/io/InputStream.html#markSupported--\" rel=\"nofollow\"><code class=\"notranslate\">markSupported</code></a>.</p>","resourcePath":"/assertj/assertj/issues/2596","createdAt":"2022-05-02T20:54:12Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"urlassert","url":"https://github.com/assertj/assertj/pull/2628","resourcePath":"/assertj/assertj/pull/2628","createdAt":"2022-05-26T13:37:43Z","number":2628,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractUrlAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/uri/ShouldBeReachable.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/uri/ShouldBeUnreachable.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Urls.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/uri/ShouldBeReachable_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/uri/ShouldBeUnreachable_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs44haMZ2gAoZGUwNTdiMTY5NjFiNzZkODdkMzQzZmI3Yzc1ZGI4Yjk2MDE4NWQ3Yg","url":"https://github.com/assertj/assertj/pull/2628/commits/de057b16961b76d87d343fb7c75db8b960185d7b"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2196,"url":"https://github.com/assertj/assertj/issues/2196","title":"Add `isReachable` / `isUnreachable` for URL assertions","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Inspired by <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"869681278\" data-permission-text=\"Title is private\" data-url=\"https://github.com/junit-pioneer/junit-pioneer/issues/468\" data-hovercard-type=\"issue\" data-hovercard-url=\"/junit-pioneer/junit-pioneer/issues/468/hovercard\" href=\"https://github.com/junit-pioneer/junit-pioneer/issues/468\">junit-pioneer/junit-pioneer#468</a>, <code class=\"notranslate\">isReachable</code> / <code class=\"notranslate\">isUnreachable</code> assertions could be added to <code class=\"notranslate\">AbstractUrlAssert</code>.</p>\n<p dir=\"auto\">One of the most valuable use cases could be when the assertion is used as an assumption, allowing to skip a test if a remote dependency is not available.</p>\n<p dir=\"auto\">The assertion name could be generic enough (i.e., not strictly bound to HTTP) and internally we could have different behaviors based on the protocol.</p>\n<p dir=\"auto\">At first, the target should be only HTTP URLs.</p>\n<p dir=\"auto\"><a href=\"https://gist.github.com/nipafx/a21f1d1c5211617453e43a88c9df439c\">This gist</a> might inspire the assertion implementation.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(new URL(&quot;http://google.com&quot;)).isReachable();\nassertThat(new URL(&quot;http://invalid&quot;)).isUnreachable();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">URL</span>(<span class=\"pl-s\">\"http://google.com\"</span>)).<span class=\"pl-en\">isReachable</span>();\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">URL</span>(<span class=\"pl-s\">\"http://invalid\"</span>)).<span class=\"pl-en\">isUnreachable</span>();</pre></div>\n<h4 dir=\"auto\">Points to discuss</h4>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Naming: <code class=\"notranslate\">isReachable</code> good enough, especially if we want to have it generic? What about <code class=\"notranslate\">isAccessible</code> or <code class=\"notranslate\">exists</code>?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Testing: <a href=\"https://www.mock-server.com/\" rel=\"nofollow\">MockServer</a>? Something else?</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Should we support HTTPS? We might need to <a href=\"https://nakov.com/blog/2009/07/16/disable-certificate-validation-in-java-ssl-connections/\" rel=\"nofollow\">disable certificate chain and hostname validation</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> Method: <a href=\"https://www.baeldung.com/java-check-url-exists#using-a-head-request\" rel=\"nofollow\"><code class=\"notranslate\">GET</code> vs <code class=\"notranslate\">HEAD</code></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> What to do with <a href=\"https://www.baeldung.com/java-check-url-exists#redirects\" rel=\"nofollow\">redirects</a></li>\n</ul>","resourcePath":"/assertj/assertj/issues/2196","createdAt":"2021-05-04T10:26:37Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"reference Fixes #1355 ","url":"https://github.com/assertj/assertj/pull/2583","resourcePath":"/assertj/assertj/pull/2583","createdAt":"2022-04-20T01:52:14Z","number":2583,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveCauseReference.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldHaveCauseReference_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs42dfZ02gAoZTM3OWNmMzBmNWVkMWYwOGM2MDZhMjZjZDZkNGM0Y2I2MWU5NmIxZg","url":"https://github.com/assertj/assertj/pull/2583/commits/e379cf30f5ed1f08c606a26cd6d4c4cb61e96b1f"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1355,"url":"https://github.com/assertj/assertj/issues/1355","title":"Describe actual Throwables when ThrowableAssert fails","bodyHTML":"<h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">When some <code class=\"notranslate\">Throwable</code>-related assertion fails the actual <code class=\"notranslate\">Throwable</code> that failed the check is not described beyond what actually caused assertion failure (e.g. message mismatch). In non trivial code when unexpected <code class=\"notranslate\">Exception</code>s are thrown this makes debugging inconvenient.</p>\n<p dir=\"auto\">Dumping more comprehensive (class, message, stack, perhaps even recursive info about causes) info about the actual <code class=\"notranslate\">Throwable</code> could ease assertion failure investigation.</p>\n<p dir=\"auto\">Relevant message factories (e.g. <code class=\"notranslate\">ShouldHaveMessage</code>) already have access to actual <code class=\"notranslate\">Throwable</code>.</p>\n<p dir=\"auto\">It may be tempting to use <code class=\"notranslate\">util.Throwables.ERROR_DESCRIPTION_EXTRACTOR</code> to describe throwables, but more powerful mechanism would be appreciated.<br>\nProviding a precise information in case of assertion failure doesn't seem to be overkill (unlike as in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"198264689\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj-core/issues/864\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj-core/issues/864/hovercard\" href=\"https://github.com/assertj/assertj-core/issues/864\">#864</a>)</p>\n<h3 dir=\"auto\">Error message to improve</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCause</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCauseExactlyInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCauseInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCauseReference - <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/weiyilei/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/weiyilei\">@weiyilei</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveNoCause</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveNoSuppressedExceptions</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveRootCauseExactlyInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveRootCauseInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveSuppressedException</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldNotContainCharSequence</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldStartWith</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldEndWith</li>\n</ul>\n<p dir=\"auto\">If you are interested contributing to this issue, select one error message, it will be assigned to you.</p>","resourcePath":"/assertj/assertj/issues/1355","createdAt":"2018-11-08T16:33:06Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix the bugs of float/double precision error in the assertions","url":"https://github.com/assertj/assertj/pull/2535","resourcePath":"/assertj/assertj/pull/2535","createdAt":"2022-03-21T17:29:30Z","number":2535,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/ComparatorFactory.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Doubles.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Floats.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/RealNumbers.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/ComparatorFactory_doubleComparatorWithPrecision_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/ComparatorFactory_floatComparatorWithPrecision_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/doubles/Doubles_assertIsCloseTo_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/doubles/Doubles_isNanOrInfinite_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/floats/Floats_assertIsCloseTo_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/floats/Floats_isNanOrInfinite_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs40wc6v2gAoNDExNTRjMGM5OTkxN2JjNjkxNTU0MDQzNjZmZjBmODY3YWIzMDQ0ZQ","url":"https://github.com/assertj/assertj/pull/2535/commits/41154c0c99917bc69155404366ff0f867ab3044e"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2537,"url":"https://github.com/assertj/assertj/issues/2537","title":"Float/Double precision bugs about assertion within the certain range","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Considering the following 2 cases, they both try to assert double values is equal to expected in the certain range. But these two assertions have different behaviours. It should be a serious bug, and hope the team can look at it.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(0.125f).isEqualTo(0.5f, within(0.375f)); // pass!\nassertThat(1.1f).isEqualTo(1.0f, within(0.1f)); // fail!\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-c1\">0.125f</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">0.5f</span>, <span class=\"pl-en\">within</span>(<span class=\"pl-c1\">0.375f</span>)); <span class=\"pl-c\">// pass!</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-c1\">1.1f</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">1.0f</span>, <span class=\"pl-en\">within</span>(<span class=\"pl-c1\">0.1f</span>)); <span class=\"pl-c\">// fail!</span></pre></div>\n<p dir=\"auto\">For the second assertion, the running result is:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting actual:\n  1.1f\nto be close to:\n  1.0f\nby less than 0.1f but difference was 0.100000024f.\n(a difference of exactly 0.1f being considered valid)\"><pre class=\"notranslate\"><code>java.lang.AssertionError: \nExpecting actual:\n  1.1f\nto be close to:\n  1.0f\nby less than 0.1f but difference was 0.100000024f.\n(a difference of exactly 0.1f being considered valid)\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/2537","createdAt":"2022-03-22T01:49:55Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Align javadoc stylesheet to be compatible with Java 17","url":"https://github.com/assertj/assertj/pull/2621","resourcePath":"/assertj/assertj/pull/2621","createdAt":"2022-05-21T07:51:33Z","number":2621,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"pom.xml"}},{"node":{"changeType":"MODIFIED","path":"src/main/javadoc/assertj-javadoc.css"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs44OtOe2gAoYmEwNTBjMzlmM2U3MDQ2NzI0MDFiMWQ1ODZhNTk2NWViZWJiYzViNg","url":"https://github.com/assertj/assertj/pull/2621/commits/ba050c39f3e704672401b1d586a5965ebebbc5b6"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2576,"url":"https://github.com/assertj/assertj/issues/2576","title":"Fix javadoc style on java 17","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">The javadoc generated style is broken in java 17</p>\n<h4 dir=\"auto\">Actual</h4>\n<p dir=\"auto\"><a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://user-images.githubusercontent.com/382613/163735532-68a27fb9-53ea-4576-b84c-283a24cadccc.png\"><img src=\"https://user-images.githubusercontent.com/382613/163735532-68a27fb9-53ea-4576-b84c-283a24cadccc.png\" alt=\"image\" style=\"max-width: 100%;\"></a></p>\n<h4 dir=\"auto\">Expected outcome</h4>\n<ul dir=\"auto\">\n<li><a href=\"https://www.javadoc.io/doc/org.assertj/assertj-core/3.21.0/index.html\" rel=\"nofollow\">https://www.javadoc.io/doc/org.assertj/assertj-core/3.21.0/index.html</a></li>\n<li><a href=\"https://www.javadoc.io/doc/org.assertj/assertj-core/3.21.0/org/assertj/core/api/AbstractIterableAssert.html#containsExactlyInAnyOrderElementsOf(java.lang.Iterable)\" rel=\"nofollow\">https://www.javadoc.io/doc/org.assertj/assertj-core/3.21.0/org/assertj/core/api/AbstractIterableAssert.html#containsExactlyInAnyOrderElementsOf(java.lang.Iterable)</a></li>\n</ul>","resourcePath":"/assertj/assertj/issues/2576","createdAt":"2022-04-17T23:09:30Z","labels":{"edges":[{"node":{"name":"java: 17+"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"2570 adding to class assert","url":"https://github.com/assertj/assertj/pull/2611","resourcePath":"/assertj/assertj/pull/2611","createdAt":"2022-05-12T23:01:55Z","number":2611,"mergeCommit":{"oid":"4307d3579bd588cd404f0d3d9b212f0b52ba995a","message":"Add `isAssignableTo(Class)` to `Class` assertions  (#2611)\n\nCo-authored-by: nith2001 <nith2001@uw.edu>","commitUrl":"https://github.com/assertj/assertj/commit/4307d3579bd588cd404f0d3d9b212f0b52ba995a","parents":{"nodes":[{"oid":"6c60672dc04f1fec00a84f16a254b6efa96727a9","message":"Bump pitest-maven from 1.9.1 to 1.9.2 (#2703)\n\nBumps [pitest-maven](https://github.com/hcoles/pitest) from 1.9.1 to 1.9.2.\r\n- [Release notes](https://github.com/hcoles/pitest/releases)\r\n- [Commits](https://github.com/hcoles/pitest/compare/1.9.1...1.9.2)\r\n\r\n---\r\nupdated-dependencies:\r\n- dependency-name: org.pitest:pitest-maven\r\n  dependency-type: direct:production\r\n  update-type: version-update:semver-patch\r\n...\r\n\r\nSigned-off-by: dependabot[bot] <support@github.com>\r\n\r\nCo-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractClassAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldBeAssignableTo.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/classes/ClassAssert_isAssignableTo_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldBeAssignableTo_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs43wB142gAoMDVjODllNWU5MDAyNjI1YzEzZjc2NWUwZjU0YmI3MWM2MGY4MjU2Ng","url":"https://github.com/assertj/assertj/pull/2611/commits/05c89e5e9002625c13f765e0f54bb71c60f82566"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2570,"url":"https://github.com/assertj/assertj/issues/2570","title":"Add more assertion on ClassAssert","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">Apologies, If I'm wrong.</p>\n<p dir=\"auto\">It's nice that the <code class=\"notranslate\">ClassAssert</code> already has an assertion for <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isAssignableFrom-java.lang.Class-\" rel=\"nofollow\">Class#isAssignableFrom</a>.<br>\nAn assertion of opposite flow may be more intuitive, I believe.<br>\nSay, we have the following class or any other class being expected to implement the <code class=\"notranslate\">MyInterface</code> interface.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class MyClass\n        extends HisClass // which extends HerClass\n        implements MyInterface {\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">MyClass</span>\n        <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">HisClass</span> <span class=\"pl-c\">// which extends HerClass</span>\n        <span class=\"pl-k\">implements</span> <span class=\"pl-smi\">MyInterface</span> {\n}</pre></div>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"HerClass\n    HisClass\n        MyClass\"><pre class=\"notranslate\"><code>HerClass\n    HisClass\n        MyClass\n</code></pre></div>\n<p dir=\"auto\">We can,</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Asserts that MyInterface.class is assignable from MyClass.class, based on Class#isAssignableFrom\nassertThat(MyInterface.class)\n        .isAssignableFrom(MyClass.class);\n// Asserts that MyClass.class has HisClass.class as direct superclass.\nassertThat(MyClass.class)\n        .hasSuperclass(HisClass.class);\"><pre><span class=\"pl-c\">// Asserts that MyInterface.class is assignable from MyClass.class, based on Class#isAssignableFrom</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyInterface</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isAssignableFrom</span>(<span class=\"pl-smi\">MyClass</span>.<span class=\"pl-s1\">class</span>);\n<span class=\"pl-c\">// Asserts that MyClass.class has HisClass.class as direct superclass.</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">hasSuperclass</span>(<span class=\"pl-smi\">HisClass</span>.<span class=\"pl-s1\">class</span>);</pre></div>\n<p dir=\"auto\">But following idiom(s) will be more intuitive.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Asserts that MyClass implements MyInterface\nassertThat(MyClass.class)\n        .implements(MyInterface.class)\n        .isAssignableTo(MyInterface.class);\n// Or\nassertThat(MyClass.class)\n        .implements(MyInterface.class)\n        .isSubclassOf(HisClass.class) // is direct subclass; opposite of hasSuperclass(superClass)\n        .isDescendentOf(HisClass.class)\n        .isDescendentOf(HerClass.class) // is direct or transitively\n;\nassertThat(HisClass.class)\n        .isAscendentOf(MyClass.class)\n        .isSubclassOf(HerClass.class)\n        .isDescendentOf(HerClass.class);\"><pre><span class=\"pl-c\">// Asserts that MyClass implements MyInterface</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">implements</span>(<span class=\"pl-smi\">MyInterface</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isAssignableTo</span>(<span class=\"pl-smi\">MyInterface</span>.<span class=\"pl-s1\">class</span>);\n<span class=\"pl-c\">// Or</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">MyClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">implements</span>(<span class=\"pl-smi\">MyInterface</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isSubclassOf</span>(<span class=\"pl-smi\">HisClass</span>.<span class=\"pl-s1\">class</span>) <span class=\"pl-c\">// is direct subclass; opposite of hasSuperclass(superClass)</span>\n        .<span class=\"pl-en\">isDescendentOf</span>(<span class=\"pl-smi\">HisClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isDescendentOf</span>(<span class=\"pl-smi\">HerClass</span>.<span class=\"pl-s1\">class</span>) <span class=\"pl-c\">// is direct or transitively</span>\n;\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">HisClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isAscendentOf</span>(<span class=\"pl-smi\">MyClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isSubclassOf</span>(<span class=\"pl-smi\">HerClass</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">isDescendentOf</span>(<span class=\"pl-smi\">HerClass</span>.<span class=\"pl-s1\">class</span>);</pre></div>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">isAssignableTo(classOrInterface)</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">implements(interfaceClass)</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">isSubclassOf(superClass)</code> - is direct subclass of</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">is(Descendant|Descendent)Of(ascendentClass)</code> - is direct or transitive descendent of</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> <code class=\"notranslate\">is(Ancestor|Ascendent)Of(descendentClass)</code> - is direct or transitive ascendent of</li>\n</ul>","resourcePath":"/assertj/assertj/issues/2570","createdAt":"2022-04-15T04:34:15Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Improved runtime of containsExactly","url":"https://github.com/assertj/assertj/pull/2589","resourcePath":"/assertj/assertj/pull/2589","createdAt":"2022-04-25T21:31:18Z","number":2589,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Iterables.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs42wXtj2gAoZGRlYmY1Y2ViNDEyODAxNmNlYTBmMmQwZDA0NWQ1MDRhOTRjNjk1NQ","url":"https://github.com/assertj/assertj/pull/2589/commits/ddebf5ceb4128016cea0f2d0d045d504a94c6955"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2548,"url":"https://github.com/assertj/assertj/issues/2548","title":"Improve the performance of `containsExactly` from quadratic to linear complexity","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">The performance of the <code class=\"notranslate\">containsExactly</code> function of <code class=\"notranslate\">Iterables</code> is currently quadratic, while it could be linear. It seems to be because of the <code class=\"notranslate\">IterableDiff</code> class it uses, which checks the extra and missing elements with an algorithm suitable for checking the elements in any order. However, this is not necessary, since they have to be present in the exact order and so a more efficient linear solution could look something like this:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"boolean compare(expected, actual) {\n    if (expected.size() != actual.size()) return false;\n    for (int i = 0; i &lt; expected.size(); i++) {\n       if (expected.get(i) != actual.get(i)) return false;\n    }\n    return true;\n}\"><pre><span class=\"pl-smi\">boolean</span> <span class=\"pl-s1\">compare</span>(<span class=\"pl-s1\">expected</span>, <span class=\"pl-s1\">actual</span>) {\n    <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">expected</span>.<span class=\"pl-en\">size</span>() != <span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">size</span>()) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n    <span class=\"pl-k\">for</span> (<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">i</span> = <span class=\"pl-c1\">0</span>; <span class=\"pl-s1\">i</span> &lt; <span class=\"pl-s1\">expected</span>.<span class=\"pl-en\">size</span>(); <span class=\"pl-s1\">i</span>++) {\n       <span class=\"pl-k\">if</span> (<span class=\"pl-s1\">expected</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s1\">i</span>) != <span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-s1\">i</span>)) <span class=\"pl-k\">return</span> <span class=\"pl-c1\">false</span>;\n    }\n    <span class=\"pl-k\">return</span> <span class=\"pl-c1\">true</span>;\n}</pre></div>\n<p dir=\"auto\">We ran a scalability analysis on various assertions, which you can find <a href=\"https://desosa2022.netlify.app/projects/assertj/posts/scalability/\" rel=\"nofollow\">here</a> if you are interested.</p>","resourcePath":"/assertj/assertj/issues/2548","createdAt":"2022-03-30T15:01:32Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Fixes #1355","url":"https://github.com/assertj/assertj/pull/2582","resourcePath":"/assertj/assertj/pull/2582","createdAt":"2022-04-20T01:28:56Z","number":2582,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractLocalDateAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractLocalTimeAssert.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveDateField.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/localdate/LocalDateAssert_hasMonthValue_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/localdate/LocalDateAssert_hasMonth_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/localtime/LocalTimeAssert_hasHour_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs42ddTl2gAoNjI4ZjI0MWYxZmVhYmYxODhmNDczOWZjNzQ5Yzc1N2FlOGIyYmIzNg","url":"https://github.com/assertj/assertj/pull/2582/commits/628f241f1feabf188f4739fc749c757ae8b2bb36"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1355,"url":"https://github.com/assertj/assertj/issues/1355","title":"Describe actual Throwables when ThrowableAssert fails","bodyHTML":"<h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">When some <code class=\"notranslate\">Throwable</code>-related assertion fails the actual <code class=\"notranslate\">Throwable</code> that failed the check is not described beyond what actually caused assertion failure (e.g. message mismatch). In non trivial code when unexpected <code class=\"notranslate\">Exception</code>s are thrown this makes debugging inconvenient.</p>\n<p dir=\"auto\">Dumping more comprehensive (class, message, stack, perhaps even recursive info about causes) info about the actual <code class=\"notranslate\">Throwable</code> could ease assertion failure investigation.</p>\n<p dir=\"auto\">Relevant message factories (e.g. <code class=\"notranslate\">ShouldHaveMessage</code>) already have access to actual <code class=\"notranslate\">Throwable</code>.</p>\n<p dir=\"auto\">It may be tempting to use <code class=\"notranslate\">util.Throwables.ERROR_DESCRIPTION_EXTRACTOR</code> to describe throwables, but more powerful mechanism would be appreciated.<br>\nProviding a precise information in case of assertion failure doesn't seem to be overkill (unlike as in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"198264689\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj-core/issues/864\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj-core/issues/864/hovercard\" href=\"https://github.com/assertj/assertj-core/issues/864\">#864</a>)</p>\n<h3 dir=\"auto\">Error message to improve</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCause</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCauseExactlyInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCauseInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCauseReference - <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/weiyilei/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/weiyilei\">@weiyilei</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveNoCause</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveNoSuppressedExceptions</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveRootCauseExactlyInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveRootCauseInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveSuppressedException</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldNotContainCharSequence</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldStartWith</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldEndWith</li>\n</ul>\n<p dir=\"auto\">If you are interested contributing to this issue, select one error message, it will be assigned to you.</p>","resourcePath":"/assertj/assertj/issues/1355","createdAt":"2018-11-08T16:33:06Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Only compare comparingOnlyFields if it is set (#2610)","url":"https://github.com/assertj/assertj/pull/2612","resourcePath":"/assertj/assertj/pull/2612","createdAt":"2022-05-13T12:37:22Z","number":2612,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonAssert_isEqualTo_comparingOnlyFields_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration_getActualNonIgnoreFields_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs43yG4L2gAoMjRhYTRiOGI2ZGY2NzhjMDE0OWNhMTI2NWRiNTYzYmI2YWMzNTQ0Zg","url":"https://github.com/assertj/assertj/pull/2612/commits/24aa4b8b6df678c0149ca1265db563bb6ac3544f"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2610,"url":"https://github.com/assertj/assertj/issues/2610","title":"Comparing only fields of different classes can pass with different values of the compared fields","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">When comparing different classes and specifying <code class=\"notranslate\">comparingOnlyFields</code> the assertion could pass even if the compared values are different if one of the classes has more fields than the other.</p>\n<p dir=\"auto\">I tested using the code in the main branch (<a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/ee52be2c7039273b81041aae2f107d90fc78fd53/hovercard\" href=\"https://github.com/assertj/assertj/commit/ee52be2c7039273b81041aae2f107d90fc78fd53\"><tt>ee52be2</tt></a>).</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public class ComparingOnlyTest {\n  static class A1 {\n    public final int a, b;\n    public A1(int a, int b) {\n      this.a = a;\n      this.b = b;\n    }\n  }\n  static class A2 {\n    public final int a;\n    public A2(int a) {\n      this.a = a;\n    }\n  }\n\n  @Test\n  public void testComparingOnly() {\n    A1 a1 = new A1(1, 2);\n    A2 a2 = new A2(2);\n\n    // This passes. Switching the places of a1 and a2 causes the assertion to fail as expected\n    Assertions.assertThat(a1).usingRecursiveComparison().comparingOnlyFields(&quot;a&quot;).isEqualTo(a2);\n  }\n}\"><pre><span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">ComparingOnlyTest</span> {\n  <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">A1</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">a</span>, <span class=\"pl-s1\">b</span>;\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">A1</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">a</span>, <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">b</span>) {\n      <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">a</span> = <span class=\"pl-s1\">a</span>;\n      <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">b</span> = <span class=\"pl-s1\">b</span>;\n    }\n  }\n  <span class=\"pl-k\">static</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">A2</span> {\n    <span class=\"pl-k\">public</span> <span class=\"pl-k\">final</span> <span class=\"pl-smi\">int</span> <span class=\"pl-s1\">a</span>;\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">A2</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">a</span>) {\n      <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">a</span> = <span class=\"pl-s1\">a</span>;\n    }\n  }\n\n  <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n  <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">testComparingOnly</span>() {\n    <span class=\"pl-smi\">A1</span> <span class=\"pl-s1\">a1</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">A1</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>);\n    <span class=\"pl-smi\">A2</span> <span class=\"pl-s1\">a2</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">A2</span>(<span class=\"pl-c1\">2</span>);\n\n    <span class=\"pl-c\">// This passes. Switching the places of a1 and a2 causes the assertion to fail as expected</span>\n    <span class=\"pl-s1\">Assertions</span>.<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">a1</span>).<span class=\"pl-en\">usingRecursiveComparison</span>().<span class=\"pl-en\">comparingOnlyFields</span>(<span class=\"pl-s\">\"a\"</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">a2</span>);\n  }\n}</pre></div>","resourcePath":"/assertj/assertj/issues/2610","createdAt":"2022-05-12T10:19:32Z","labels":{"edges":[{"node":{"name":"type: bug"}},{"node":{"name":"theme: recursive comparison"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"#2530: Add spotless check for formatting preferences","url":"https://github.com/assertj/assertj/pull/2533","resourcePath":"/assertj/assertj/pull/2533","createdAt":"2022-03-21T11:48:10Z","number":2533,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/Throwables_appendCurrentThreadStackTraceToThrowable_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/URLs_contentOf_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/URLs_linesOf_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/YearAndMonthComparator.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/diff/ChunkTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/diff/Delta_equals_hashCode_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/introspection/FieldSupport_isAllowedToReadField_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/introspection/PropertySupport_propertyValues_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/introspection/beans/SuperHero.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/util/xml/XmlStringPrettyFormatter_prettyFormat_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs40u-Vi2gAoYmNjYmE4NGY4M2RhMTQ2M2FhNzQ0NTU1YjIwNTc4MjQ4NjJmNzU2ZA","url":"https://github.com/assertj/assertj/pull/2533/commits/bccba84f83da1463aa744555b2057824862f756d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2530,"url":"https://github.com/assertj/assertj/issues/2530","title":"Spotless check for formatting preferences","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">I noticed that in your <code class=\"notranslate\">CONTRIBUTING.md</code> file, you mention to use Eclipse formatting preferences and there is an Eclipse Formatter file with all the rules defined. However, the style of the code is not actually checked with the Continuous Integration workflows.</p>\n<p dir=\"auto\">Since the Eclipse Formatter file with all the rules already exists, it should be pretty straightforward to use <a href=\"https://github.com/diffplug/spotless/blob/main/plugin-maven/README.md\">spotless</a> - this could then be used as a maven command by users and it could be easily integrated as another workflow to check PRs.</p>\n<p dir=\"auto\">Let me know if this is something that you'd want for the project, I would love to pick it up :)</p>","resourcePath":"/assertj/assertj/issues/2530","createdAt":"2022-03-19T12:00:31Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Overload returns() and add returnsValue() & returnsEmpty()","url":"https://github.com/assertj/assertj/pull/2586","resourcePath":"/assertj/assertj/pull/2586","createdAt":"2022-04-24T08:03:56Z","number":2586,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractObjectAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/TestReturnsChanging.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs42rh6Q2gAoMDBhNDQwZDQyNTgxY2Y4MGJlMjUyYjNhNDBlMTQyODBiNjk2MDBiZg","url":"https://github.com/assertj/assertj/pull/2586/commits/00a440d42581cf80be252b3a40e14280b69600bf"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2341,"url":"https://github.com/assertj/assertj/issues/2341","title":"Extending AbstractAssert.returns","bodyHTML":"<h4 dir=\"auto\">New variants of the returns assertions</h4>\n<p dir=\"auto\">The returns assertion could be even more useful if there would be variations for Optionals. I suggest <code class=\"notranslate\">returnsValue(expected, function)</code> as counterpart to the hasValue assertion to check Optional return values.</p>\n<p dir=\"auto\">It would also be nice to have a description without writing <code class=\"notranslate\">.as(\"...\")</code>. This also holds true for the normal <code class=\"notranslate\">returns</code> assertion and is already done for the <code class=\"notranslate\">matches</code> assertion.</p>\n<p dir=\"auto\">So in total I would suggest to add the following assertion functions:</p>\n<ul dir=\"auto\">\n<li><code class=\"notranslate\">returns(expected, function, description)</code></li>\n<li><code class=\"notranslate\">returnsValue(expected, function, description)</code></li>\n<li><code class=\"notranslate\">returnsEmpty(function, description)</code></li>\n</ul>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"class ObjectUnderTest {\n  private Optional&lt;String&gt; optString;\n  \n  ObjectUnderTest(Optional&lt;String&gt; o) {\n    optString = o;\n  }\n\n  Optional&lt;String&gt; getOptString() {\n    return optString;\n  }\n}\n\n@Test\nvoid should_pass_optional_returns() {\n  // GIVEN\n  ObjectUnderTest out = new ObjectUnderTest(Optional.of(&quot;test string&quot;);\n  // THEN\n  assertThat(out).returnsValue(&quot;test string&quot;, ObjectUnderTest::getOptString);\n}\"><pre><span class=\"pl-k\">class</span> <span class=\"pl-smi\">ObjectUnderTest</span> {\n  <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Optional</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">optString</span>;\n  \n  <span class=\"pl-smi\">ObjectUnderTest</span>(<span class=\"pl-smi\">Optional</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">o</span>) {\n    <span class=\"pl-s1\">optString</span> = <span class=\"pl-s1\">o</span>;\n  }\n\n  <span class=\"pl-smi\">Optional</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-en\">getOptString</span>() {\n    <span class=\"pl-k\">return</span> <span class=\"pl-s1\">optString</span>;\n  }\n}\n\n<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-smi\">void</span> <span class=\"pl-s1\">should_pass_optional_returns</span>() {\n  <span class=\"pl-c\">// GIVEN</span>\n  <span class=\"pl-smi\">ObjectUnderTest</span> <span class=\"pl-s1\">out</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectUnderTest</span>(<span class=\"pl-s1\">Optional</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s\">\"test string\"</span>);\n  <span class=\"pl-c\">// THEN</span>\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">out</span>).<span class=\"pl-en\">returnsValue</span>(<span class=\"pl-s\">\"test string\"</span>, <span class=\"pl-s1\">ObjectUnderTest</span>::<span class=\"pl-s1\">getOptString</span>);\n}</pre></div>","resourcePath":"/assertj/assertj/issues/2341","createdAt":"2021-09-13T16:23:03Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add `hasMinute` to `LocalDateTime` assertions","url":"https://github.com/assertj/assertj/pull/2600","resourcePath":"/assertj/assertj/pull/2600","createdAt":"2022-05-05T12:08:04Z","number":2600,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractLocalDateTimeAssert.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/localdatetime/LocalDateTimeAssert_hasMinute_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs43WZ0b2gAoNzE4YWQzY2JjZjBkZmY2MjliMTEwY2JhODFjY2Q1YTNlOGJjMzY4ZA","url":"https://github.com/assertj/assertj/pull/2600/commits/718ad3cbcf0dff629b110cba81ccd5a3e8bc368d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2541,"url":"https://github.com/assertj/assertj/issues/2541","title":"Add more basic assertions for Local(Date|Time)","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">It would be nice if <code class=\"notranslate\">AbstractLocal(Date|Time)Assert</code> has basic assertions for field values of <code class=\"notranslate\">actual</code>.</p>\n<p dir=\"auto\">LocalDate</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasYear</code> - <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/9dc086d82aa58a755f36cf88449b0ca74288bb63/hovercard\" href=\"https://github.com/assertj/assertj/commit/9dc086d82aa58a755f36cf88449b0ca74288bb63\"><tt>9dc086d</tt></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasMonth</code> / <code class=\"notranslate\">hasMonthValue</code> - <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/40c979c253571743af8d68f18921a061e10cfcec/hovercard\" href=\"https://github.com/assertj/assertj/commit/40c979c253571743af8d68f18921a061e10cfcec\"><tt>40c979c</tt></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasDayOfMonth</code> - <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/253194d00395e1568e1be752b0075c2033672f97/hovercard\" href=\"https://github.com/assertj/assertj/commit/253194d00395e1568e1be752b0075c2033672f97\"><tt>253194d</tt></a></li>\n</ul>\n<p dir=\"auto\">LocalTime</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasHour</code> - <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/8c54e417b697314e55170668bd96c236fa3c96d6/hovercard\" href=\"https://github.com/assertj/assertj/commit/8c54e417b697314e55170668bd96c236fa3c96d6\"><tt>8c54e41</tt></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasMinute</code> - <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/ec1fcaefb767d0ed18a7e6ea48779c78635d1399/hovercard\" href=\"https://github.com/assertj/assertj/commit/ec1fcaefb767d0ed18a7e6ea48779c78635d1399\"><tt>ec1fcae</tt></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasSecond</code> - <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/6a4e54cbad5198246ae41a21d8432c503b5c70ce/hovercard\" href=\"https://github.com/assertj/assertj/commit/6a4e54cbad5198246ae41a21d8432c503b5c70ce\"><tt>6a4e54c</tt></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasNano</code> - <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/b7564592852121e871ea6162949e0226c93ee2fc/hovercard\" href=\"https://github.com/assertj/assertj/commit/b7564592852121e871ea6162949e0226c93ee2fc\"><tt>b756459</tt></a></li>\n</ul>\n<p dir=\"auto\">LocalDateTime</p>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasYear</code> - <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/710177ba360c3faac135e1f49d14a9c51116228d/hovercard\" href=\"https://github.com/assertj/assertj/commit/710177ba360c3faac135e1f49d14a9c51116228d\"><tt>710177b</tt></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasMonth</code> / <code class=\"notranslate\">hasMonthValue</code>  - <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/d0c87895c2a052473e8c4a7800fa7fee0a20dccb/hovercard\" href=\"https://github.com/assertj/assertj/commit/d0c87895c2a052473e8c4a7800fa7fee0a20dccb\"><tt>d0c8789</tt></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasDayOfMonth</code> - <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/710177ba360c3faac135e1f49d14a9c51116228d/hovercard\" href=\"https://github.com/assertj/assertj/commit/710177ba360c3faac135e1f49d14a9c51116228d\"><tt>710177b</tt></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasHour</code> - <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/7cbe45c42f0a31bc5993a8352cf5e0d4feda0fae/hovercard\" href=\"https://github.com/assertj/assertj/commit/7cbe45c42f0a31bc5993a8352cf5e0d4feda0fae\"><tt>7cbe45c</tt></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasMinute</code> - <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/02fa4a9ab8c10099293283a893bd04253cc1d7e3/hovercard\" href=\"https://github.com/assertj/assertj/commit/02fa4a9ab8c10099293283a893bd04253cc1d7e3\"><tt>02fa4a9</tt></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasSecond</code> - <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/99e4f652cecc6f4492a0aec7bcfc7e97518a032a/hovercard\" href=\"https://github.com/assertj/assertj/commit/99e4f652cecc6f4492a0aec7bcfc7e97518a032a\"><tt>99e4f65</tt></a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\" checked=\"\"> <code class=\"notranslate\">hasNano</code> -  <a class=\"commit-link\" data-hovercard-type=\"commit\" data-hovercard-url=\"https://github.com/assertj/assertj/commit/76012bb42ffe739d97b1da9e0a7185e357f6928f/hovercard\" href=\"https://github.com/assertj/assertj/commit/76012bb42ffe739d97b1da9e0a7185e357f6928f\"><tt>76012bb</tt></a></li>\n</ul>\n<h4 dir=\"auto\">Examples</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"  final LocalDate actual = LocalDate.now();\n  assertThat(actual).hasYear(actual.getYear());\n  assertThat(actual).hasMonth(actual.getMonth());\n  assertThat(actual).hasMonthValue(actual.getMonthValue());\n  assertThat(actual).hasDayOfMonth(actual.getDayOfMonth());\n\n  final LocalTime actual = LocalTime.now();\n  assertThat(actual).hasHour(actual.getHour());\n  assertThat(actual).hasMinute(actual.getMinute());\n  assertThat(actual).hasSecond(actual.getSecond());\n  assertThat(actual).hasNano(actual.getNano());\"><pre>  <span class=\"pl-k\">final</span> <span class=\"pl-smi\">LocalDate</span> <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">LocalDate</span>.<span class=\"pl-en\">now</span>();\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">hasYear</span>(<span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">getYear</span>());\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">hasMonth</span>(<span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">getMonth</span>());\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">hasMonthValue</span>(<span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">getMonthValue</span>());\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">hasDayOfMonth</span>(<span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">getDayOfMonth</span>());\n\n  <span class=\"pl-k\">final</span> <span class=\"pl-smi\">LocalTime</span> <span class=\"pl-s1\">actual</span> = <span class=\"pl-s1\">LocalTime</span>.<span class=\"pl-en\">now</span>();\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">hasHour</span>(<span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">getHour</span>());\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">hasMinute</span>(<span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">getMinute</span>());\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">hasSecond</span>(<span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">getSecond</span>());\n  <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">actual</span>).<span class=\"pl-en\">hasNano</span>(<span class=\"pl-s1\">actual</span>.<span class=\"pl-en\">getNano</span>());</pre></div>","resourcePath":"/assertj/assertj/issues/2541","createdAt":"2022-03-25T05:49:21Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add stack trace information in ShouldHaveCause, ShouldHaveSuppressedE…","url":"https://github.com/assertj/assertj/pull/2627","resourcePath":"/assertj/assertj/pull/2627","createdAt":"2022-05-26T08:51:48Z","number":2627,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveCause.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveNoSuppressedExceptions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldHaveSuppressedException.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldHaveCause_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldHaveNoSuppressedExceptions_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldHaveSuppressedException_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs44gcDL2gAoYmMwMmRhOGI3N2RjZjhlMjM2ZWIyNjJmYWE1ZGY2YmE4ZmI1YTc1Yg","url":"https://github.com/assertj/assertj/pull/2627/commits/bc02da8b77dcf8e236eb262faa5df6ba8fb5a75b"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1355,"url":"https://github.com/assertj/assertj/issues/1355","title":"Describe actual Throwables when ThrowableAssert fails","bodyHTML":"<h3 dir=\"auto\">Summary</h3>\n<p dir=\"auto\">When some <code class=\"notranslate\">Throwable</code>-related assertion fails the actual <code class=\"notranslate\">Throwable</code> that failed the check is not described beyond what actually caused assertion failure (e.g. message mismatch). In non trivial code when unexpected <code class=\"notranslate\">Exception</code>s are thrown this makes debugging inconvenient.</p>\n<p dir=\"auto\">Dumping more comprehensive (class, message, stack, perhaps even recursive info about causes) info about the actual <code class=\"notranslate\">Throwable</code> could ease assertion failure investigation.</p>\n<p dir=\"auto\">Relevant message factories (e.g. <code class=\"notranslate\">ShouldHaveMessage</code>) already have access to actual <code class=\"notranslate\">Throwable</code>.</p>\n<p dir=\"auto\">It may be tempting to use <code class=\"notranslate\">util.Throwables.ERROR_DESCRIPTION_EXTRACTOR</code> to describe throwables, but more powerful mechanism would be appreciated.<br>\nProviding a precise information in case of assertion failure doesn't seem to be overkill (unlike as in <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"198264689\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj-core/issues/864\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj-core/issues/864/hovercard\" href=\"https://github.com/assertj/assertj-core/issues/864\">#864</a>)</p>\n<h3 dir=\"auto\">Error message to improve</h3>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCause</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCauseExactlyInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCauseInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveCauseReference - <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/weiyilei/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/weiyilei\">@weiyilei</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveNoCause</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveNoSuppressedExceptions</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveRootCauseExactlyInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveRootCauseInstance</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldHaveSuppressedException</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldNotContainCharSequence</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldStartWith</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" id=\"\" disabled=\"\" class=\"task-list-item-checkbox\"> ShouldEndWith</li>\n</ul>\n<p dir=\"auto\">If you are interested contributing to this issue, select one error message, it will be assigned to you.</p>","resourcePath":"/assertj/assertj/issues/1355","createdAt":"2018-11-08T16:33:06Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add `asBoolean|Byte|Short|Int|Long|Float|Double` to `String` assertions","url":"https://github.com/assertj/assertj/pull/2580","resourcePath":"/assertj/assertj/pull/2580","createdAt":"2022-04-19T10:59:57Z","number":2580,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AbstractStringAssert.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/error/ShouldBeNumeric.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/string_/StringAssert_asBoolean_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/string_/StringAssert_asByte_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/string_/StringAssert_asDouble_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/string_/StringAssert_asFloat_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/string_/StringAssert_asInt_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/string_/StringAssert_asLong_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/string_/StringAssert_asShort_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldBeNumeric_create_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs42ap1a2gAoYWM0MzFkYjhmODVkMWJkMjcyZTYxMDk4MDkyYzI4NWNlMWM0MTVlZg","url":"https://github.com/assertj/assertj/pull/2580/commits/ac431db8f85d1bd272e61098092c285ce1c415ef"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2520,"url":"https://github.com/assertj/assertj/issues/2520","title":"Add (Abstract)StringAssert#as(Boolean|Byte|Short|Integer|Long|Float|Double)","bodyHTML":"<h4 dir=\"auto\">Summary</h4>\n<p dir=\"auto\">This is a refined feature request derived from <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1156597735\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2509\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2509/hovercard\" href=\"https://github.com/assertj/assertj/issues/2509\">#2509</a>.<br>\nPer <a class=\"user-mention notranslate\" data-hovercard-type=\"user\" data-hovercard-url=\"/users/scordio/hovercard\" data-octo-click=\"hovercard-link-click\" data-octo-dimensions=\"link_type:self\" href=\"https://github.com/scordio\">@scordio</a>'s <a href=\"https://github.com/assertj/assertj-core/issues/2509#issuecomment-1057395093\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2509/hovercard\">commented</a>, it might be reasonable to add following signatures.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"AbstractStringAssert#asBoolean() returns BooleanAssert\n\nAbstractStringAssert#asByte() returns ByteAssert\nAbstractStringAssert#asByte(int radix) returns ByteAssert\n\nAbstractStringAssert#asShort() returns ShortAssert\nAbstractStringAssert#asShort(int radix) returns ShortAssert\n\nAbstractStringAssert#asInteger() returns IntegerAssert\nAbstractStringAssert#asInteger(int radix) returns IntegerAssert\n\nAbstractStringAssert#asLong() returns LongAssert\nAbstractStringAssert#asLong(int radix) returns LongAssert\n\nAbstractStringAssert#asFloat() returns FloatAssert\n\nAbstractStringAssert#asDouble() returns DoubleAssert\"><pre><span class=\"pl-smi\">AbstractStringAssert</span>#<span class=\"pl-s1\">asBoolean</span>() <span class=\"pl-s1\">returns</span> <span class=\"pl-smi\">BooleanAssert</span>\n\n<span class=\"pl-s1\">AbstractStringAssert</span>#<span class=\"pl-s1\">asByte</span>() <span class=\"pl-s1\">returns</span> <span class=\"pl-smi\">ByteAssert</span>\n<span class=\"pl-s1\">AbstractStringAssert</span>#<span class=\"pl-s1\">asByte</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">radix</span>) <span class=\"pl-s1\">returns</span> <span class=\"pl-smi\">ByteAssert</span>\n\n<span class=\"pl-s1\">AbstractStringAssert</span>#<span class=\"pl-s1\">asShort</span>() <span class=\"pl-s1\">returns</span> <span class=\"pl-smi\">ShortAssert</span>\n<span class=\"pl-s1\">AbstractStringAssert</span>#<span class=\"pl-s1\">asShort</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">radix</span>) <span class=\"pl-s1\">returns</span> <span class=\"pl-smi\">ShortAssert</span>\n\n<span class=\"pl-s1\">AbstractStringAssert</span>#<span class=\"pl-s1\">asInteger</span>() <span class=\"pl-s1\">returns</span> <span class=\"pl-smi\">IntegerAssert</span>\n<span class=\"pl-s1\">AbstractStringAssert</span>#<span class=\"pl-s1\">asInteger</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">radix</span>) <span class=\"pl-s1\">returns</span> <span class=\"pl-smi\">IntegerAssert</span>\n\n<span class=\"pl-s1\">AbstractStringAssert</span>#<span class=\"pl-s1\">asLong</span>() <span class=\"pl-s1\">returns</span> <span class=\"pl-smi\">LongAssert</span>\n<span class=\"pl-s1\">AbstractStringAssert</span>#<span class=\"pl-s1\">asLong</span>(<span class=\"pl-smi\">int</span> <span class=\"pl-s1\">radix</span>) <span class=\"pl-s1\">returns</span> <span class=\"pl-smi\">LongAssert</span>\n\n<span class=\"pl-s1\">AbstractStringAssert</span>#<span class=\"pl-s1\">asFloat</span>() <span class=\"pl-s1\">returns</span> <span class=\"pl-smi\">FloatAssert</span>\n\n<span class=\"pl-s1\">AbstractStringAssert</span>#<span class=\"pl-s1\">asDouble</span>() <span class=\"pl-smi\">returns</span> <span class=\"pl-s1\">DoubleAssert</span></pre></div>\n<p dir=\"auto\"><code class=\"notranslate\">NumberFormatException</code> throwable from those <code class=\"notranslate\">parse...(String)</code> methods, except the <a href=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Boolean.html#parseBoolean(java.lang.String)\" rel=\"nofollow\"><code class=\"notranslate\">Boolean#parseBoolean</code></a>, should be regarded as failing assertions.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(&quot;yes&quot;)\n//        .isNotNull() // implicit\n        .asBoolean()\n        .isTrue(); // fails\nassertThat(&quot;32&quot;)\n        .asInteger()\n        .isEqualTo(32); // succeeds\nassertThat(&quot;.0d&quot;)\n        .asDouble()\n        .isZero();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"yes\"</span>)\n<span class=\"pl-c\">//        .isNotNull() // implicit</span>\n        .<span class=\"pl-en\">asBoolean</span>()\n        .<span class=\"pl-en\">isTrue</span>(); <span class=\"pl-c\">// fails</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\"32\"</span>)\n        .<span class=\"pl-en\">asInteger</span>()\n        .<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-c1\">32</span>); <span class=\"pl-c\">// succeeds</span>\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s\">\".0d\"</span>)\n        .<span class=\"pl-en\">asDouble</span>()\n        .<span class=\"pl-en\">isZero</span>();</pre></div>","resourcePath":"/assertj/assertj/issues/2520","createdAt":"2022-03-08T13:50:22Z","labels":{"edges":[{"node":{"name":"status: team discussion"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add `linesOf` variants for a `Path` content","url":"https://github.com/assertj/assertj/pull/2618","resourcePath":"/assertj/assertj/pull/2618","createdAt":"2022-05-20T06:24:27Z","number":2618,"mergeCommit":{"oid":"59e27a0aa603705032c9ef2e764113991a79d10b","message":"Add `linesOf` variants for a `Path` content (#2618)","commitUrl":"https://github.com/assertj/assertj/commit/59e27a0aa603705032c9ef2e764113991a79d10b","parents":{"nodes":[{"oid":"24c4fcb4f1d67dd5b51e085951f5702f87e12170","message":"Add binary compatibility result to job summary"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/Assertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/AssertionsForClassTypes.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/BDDAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/WithAssertions.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/util/Files.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/util/Paths.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/Assertions_linesOf_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/EntryPointAssertions_linesOf_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/util/Paths_linesOf_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs44Kq-02gAoOGM5MmMyZDAzMWZjMDlhZmQ3NzlmZWM2ZDQxNTY4OTU2MjJiNWVkYQ","url":"https://github.com/assertj/assertj/pull/2618/commits/8c92c2d031fc09afd779fec6d4156895622b5eda"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2617,"url":"https://github.com/assertj/assertj/issues/2617","title":"`linesOf` variants for `Path` content","bodyHTML":"<p dir=\"auto\"><code class=\"notranslate\">Path</code> related variants of <a href=\"https://www.javadoc.io/doc/org.assertj/assertj-core/latest/org/assertj/core/api/Assertions.html#linesOf(java.io.File)\" rel=\"nofollow\"><code class=\"notranslate\">linesOf</code></a> are currently not available.</p>","resourcePath":"/assertj/assertj/issues/2617","createdAt":"2022-05-19T15:56:11Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add `ignoringFieldsWithAnnotations` for `RecursiveComparisonAssert`","url":"https://github.com/assertj/assertj/pull/2630","resourcePath":"/assertj/assertj/pull/2630","createdAt":"2022-05-27T15:31:00Z","number":2630,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonAssert_fluent_API_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonAssert_isEqualTo_ignoringFields_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration_multiLineDescription_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/recursive/comparison/RecursiveComparisonConfiguration_shouldIgnoreFields_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/objects/data/AddressAnnotation.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/objects/data/DateAnnotation.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/objects/data/HomeWithAnnotation.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/objects/data/NameAnnotation.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/objects/data/PersonWithAnnotation.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs44lw0Y2gAoMWNlMTAzODZmNWQ5ZDljYjRiOWQ2YjM3OGY0Nzk5NTAyYWE4OGQ2NA","url":"https://github.com/assertj/assertj/pull/2630/commits/1ce10386f5d9d9cb4b9d6b378f4799502aa88d64"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2272,"url":"https://github.com/assertj/assertj/issues/2272","title":"Add functionality of ignoring fields of specific annotation","bodyHTML":"<p dir=\"auto\">It would be great to add a functionality of ignoring fields with specific annotation.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface TimeField {\n    public boolean included() default true;\n}\n\n@Data\npublic class User {\n  @TimeField String created;\n  String name;\n  String surname;\n}\n\n@Test\nvoid some(){\nUser a=new User().name(&quot;jack&quot;).created(&quot;1829&quot;);\nUser b=new User().name(&quot;jack&quot;).created(&quot;7777&quot;);\n\nassertThat(a).usingRecursiveComparison().ignoringFieldsOfAnnotation(TimeField.class).isEqualTo(b);\n}\"><pre class=\"notranslate\"><code>@Retention(RetentionPolicy.RUNTIME)\n@Target(ElementType.FIELD)\npublic @interface TimeField {\n    public boolean included() default true;\n}\n\n@Data\npublic class User {\n  @TimeField String created;\n  String name;\n  String surname;\n}\n\n@Test\nvoid some(){\nUser a=new User().name(\"jack\").created(\"1829\");\nUser b=new User().name(\"jack\").created(\"7777\");\n\nassertThat(a).usingRecursiveComparison().ignoringFieldsOfAnnotation(TimeField.class).isEqualTo(b);\n}\n</code></pre></div>","resourcePath":"/assertj/assertj/issues/2272","createdAt":"2021-06-23T12:35:01Z","labels":{"edges":[{"node":{"name":"theme: recursive comparison"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add satisfiesOnlyOnce to ObjectEnumerableAssert","url":"https://github.com/assertj/assertj/pull/2691","resourcePath":"/assertj/assertj/pull/2691","createdAt":"2022-06-28T12:47:22Z","number":2691,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/Iterable_special_assertion_methods_in_assumptions_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/api/assumptions/List_special_assertion_methods_in_assumptions_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/atomic/referencearray/AtomicReferenceArrayAssert_satisfiesOnlyOnce_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/atomic/referencearray/AtomicReferenceArrayAssert_satisfiesOnlyOnce_with_ThrowingConsumer_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_satisfiesOnlyOnce_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/iterable/IterableAssert_satisfiesOnlyOnce_with_ThrowingConsumer_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_satisfiesOnlyOnce_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/api/objectarray/ObjectArrayAssert_satisfiesOnlyOnce_with_ThrowingConsumer_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/error/ShouldSatisfyOnlyOnce_create_Test.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/org/assertj/core/internal/iterables/Iterables_assertSatisfiesOnlyOnce_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs46fmHA2gAoNGJjMjRmZTQzMTM3YTQwM2I1MzE4NTcxYTg3YTAwNzY5ZjdmMjE1NQ","url":"https://github.com/assertj/assertj/pull/2691/commits/4bc24fe43137a403b5318571a87a00769f7f2155"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2675,"url":"https://github.com/assertj/assertj/issues/2675","title":"Add method satisfyOnlyOnce for ListAssert","bodyHTML":"<h4 dir=\"auto\">Feature summary</h4>\n<p dir=\"auto\">Would it be possible to add method something like <code class=\"notranslate\">satisfyOnlyOnce</code> for <code class=\"notranslate\">ListAssert</code>. It would work the same way <code class=\"notranslate\">containsOnlyOnce</code> but with <code class=\"notranslate\">satisfy</code>?</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"\n// positive case\nComment comment1 = new Comment();\ncomment.setText(&quot;bla_1&quot;);\n\nComment comment2 = new Comment();\ncomment.setText(&quot;bla_2&quot;);\nassertThat(List.of(comment1, comment2)).satisfyOnlyOnce(comment -&gt; assertThat(comment.getText).isEqualTo(&quot;bla_1&quot;));\n\n// negative case 1\n\nassertThat(List.of()).satisfyOnlyOnce(comment -&gt; assertThat(comment.getText).isEqualTo(bla1));\n\n// negative case 2\nComment comment1 = new Comment();\ncomment.setText(&quot;bla_1&quot;);\n\nComment comment2 = new Comment();\ncomment.setText(&quot;bla_1&quot;);\nassertThat(List.of(comment1, comment2)).satisfyOnlyOnce(comment -&gt; assertThat(comment.getText).isEqualTo(&quot;bla_1&quot;));\"><pre><span class=\"pl-c\">// positive case</span>\n<span class=\"pl-smi\">Comment</span> <span class=\"pl-s1\">comment1</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Comment</span>();\n<span class=\"pl-s1\">comment</span>.<span class=\"pl-en\">setText</span>(<span class=\"pl-s\">\"bla_1\"</span>);\n\n<span class=\"pl-smi\">Comment</span> <span class=\"pl-s1\">comment2</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Comment</span>();\n<span class=\"pl-s1\">comment</span>.<span class=\"pl-en\">setText</span>(<span class=\"pl-s\">\"bla_2\"</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">List</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s1\">comment1</span>, <span class=\"pl-s1\">comment2</span>)).<span class=\"pl-en\">satisfyOnlyOnce</span>(<span class=\"pl-s1\">comment</span> -&gt; <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comment</span>.<span class=\"pl-s1\">getText</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"bla_1\"</span>));\n\n<span class=\"pl-c\">// negative case 1</span>\n\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">List</span>.<span class=\"pl-en\">of</span>()).<span class=\"pl-en\">satisfyOnlyOnce</span>(<span class=\"pl-s1\">comment</span> -&gt; <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comment</span>.<span class=\"pl-s1\">getText</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s1\">bla1</span>));\n\n<span class=\"pl-c\">// negative case 2</span>\n<span class=\"pl-smi\">Comment</span> <span class=\"pl-s1\">comment1</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Comment</span>();\n<span class=\"pl-s1\">comment</span>.<span class=\"pl-en\">setText</span>(<span class=\"pl-s\">\"bla_1\"</span>);\n\n<span class=\"pl-smi\">Comment</span> <span class=\"pl-s1\">comment2</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Comment</span>();\n<span class=\"pl-s1\">comment</span>.<span class=\"pl-en\">setText</span>(<span class=\"pl-s\">\"bla_1\"</span>);\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">List</span>.<span class=\"pl-en\">of</span>(<span class=\"pl-s1\">comment1</span>, <span class=\"pl-s1\">comment2</span>)).<span class=\"pl-en\">satisfyOnlyOnce</span>(<span class=\"pl-s1\">comment</span> -&gt; <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">comment</span>.<span class=\"pl-s1\">getText</span>).<span class=\"pl-en\">isEqualTo</span>(<span class=\"pl-s\">\"bla_1\"</span>));</pre></div>","resourcePath":"/assertj/assertj/issues/2675","createdAt":"2022-06-20T13:10:48Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"[ISSUE 2629] Improve readability of containsExactly","url":"https://github.com/assertj/assertj/pull/2638","resourcePath":"/assertj/assertj/pull/2638","createdAt":"2022-06-01T23:24:41Z","number":2638,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/configuration/Configuration.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/error/ShouldContainExactly.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/org/assertj/core/internal/IndexedDiff.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Iterables.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/error/ShouldContainExactly_create_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/iterables/Iterables_assertContainsExactly_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs447bDV2gAoNGJhOTYzMTE2MzU2OTZkODQwOTc1YjAzYzczM2UxNGRlOTgxMGVhNQ","url":"https://github.com/assertj/assertj/pull/2638/commits/4ba96311635696d840975b03c733e14de9810ea5"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2629,"url":"https://github.com/assertj/assertj/issues/2629","title":"Display Improve readability of containsExactly when the order of elements does not match","bodyHTML":"<h4 dir=\"auto\">Feature summary</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(Arrays.asList(1, 2, 3, 4)).containsExactly(1, 3, 2, 4);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>)).<span class=\"pl-en\">containsExactly</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>);</pre></div>\n<p dir=\"auto\">yields the following error message:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nActual and expected have the same elements but not in the same order, at index 1 actual element was:\n  2\nwhereas expected element was:\n  3\"><pre class=\"notranslate\"><code>java.lang.AssertionError: \nActual and expected have the same elements but not in the same order, at index 1 actual element was:\n  2\nwhereas expected element was:\n  3\n</code></pre></div>\n<p dir=\"auto\">Note that <code class=\"notranslate\">1</code> and <code class=\"notranslate\">4</code> are not displayed in the error message.</p>\n<p dir=\"auto\"><strong>I suggest</strong> that AssertJ should print the full expected and actual set of elements in case the order does not match.</p>\n<p dir=\"auto\">For instance, when the value does not match, then AssertJ does print all the elements:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(Arrays.asList(1, 2, 3, 4)).containsExactly(1, 2, 4, 4);\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">Arrays</span>.<span class=\"pl-en\">asList</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">3</span>, <span class=\"pl-c1\">4</span>)).<span class=\"pl-en\">containsExactly</span>(<span class=\"pl-c1\">1</span>, <span class=\"pl-c1\">2</span>, <span class=\"pl-c1\">4</span>, <span class=\"pl-c1\">4</span>);</pre></div>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"java.lang.AssertionError: \nExpecting actual:\n  [1, 2, 3, 4]\nto contain exactly (and in same order):\n  [1, 2, 4, 4]\nbut some elements were not found:\n  [4]\nand others were not expected:\n  [3]\"><pre class=\"notranslate\"><code>java.lang.AssertionError: \nExpecting actual:\n  [1, 2, 3, 4]\nto contain exactly (and in same order):\n  [1, 2, 4, 4]\nbut some elements were not found:\n  [4]\nand others were not expected:\n  [3]\n</code></pre></div>\n<h4 dir=\"auto\">Example</h4>\n<p dir=\"auto\">The following methods seems to be affected:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"org.assertj.core.api.AbstractIterableAssert#containsExactly(ELEMENT... values)\norg.assertj.core.api.AbstractIterableAssert#containsExactlyElementsOf(Iterable&lt;? extends ELEMENT&gt; iterable)\"><pre><span class=\"pl-smi\">org</span>.<span class=\"pl-smi\">assertj</span>.<span class=\"pl-smi\">core</span>.<span class=\"pl-smi\">api</span>.<span class=\"pl-smi\">AbstractIterableAssert</span>#<span class=\"pl-s1\">containsExactly</span>(<span class=\"pl-smi\">ELEMENT</span>... <span class=\"pl-s1\">values</span>)\n<span class=\"pl-smi\">org</span>.<span class=\"pl-smi\">assertj</span>.<span class=\"pl-smi\">core</span>.<span class=\"pl-smi\">api</span>.<span class=\"pl-smi\">AbstractIterableAssert</span>#<span class=\"pl-s1\">containsExactlyElementsOf</span>(<span class=\"pl-smi\">Iterable</span>&lt;? <span class=\"pl-k\">extends</span> <span class=\"pl-smi\">ELEMENT</span>&gt; <span class=\"pl-s1\">iterable</span>)</pre></div>","resourcePath":"/assertj/assertj/issues/2629","createdAt":"2022-05-27T08:17:42Z","labels":{"edges":[{"node":{"name":"good first issue"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Honor custom type comparators with `returns` and `doesNotReturn`","url":"https://github.com/assertj/assertj/pull/2725","resourcePath":"/assertj/assertj/pull/2725","createdAt":"2022-07-30T21:54:26Z","number":2725,"mergeCommit":{"oid":"5677d848fb3d1188de12cbefeb66c93b1a940e3c","message":"Honor custom type comparators with `returns` and `doesNotReturn` (#2725)","commitUrl":"https://github.com/assertj/assertj/commit/5677d848fb3d1188de12cbefeb66c93b1a940e3c","parents":{"nodes":[{"oid":"54fba280ddcd66a852e9f18242705f9bff081c34","message":"CharSequenceAssert: add support for checking pattern matchers to e.g.… (#2723)\n\nCharSequenceAssert: add support for checking pattern followed by assertion on matchers groups\r\nFixes #1858\r\n\r\nCo-authored-by: Steven Schlansker <stevenschlansker@gmail.com>"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"assertj-core/src/main/java/org/assertj/core/api/AbstractObjectAssert.java"}},{"node":{"changeType":"MODIFIED","path":"assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_doesNotReturn_Test.java"}},{"node":{"changeType":"MODIFIED","path":"assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_extracting_with_Function_Test.java"}},{"node":{"changeType":"MODIFIED","path":"assertj-core/src/test/java/org/assertj/core/api/object/ObjectAssert_returns_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs48X6v52gAoYzg3N2M5MzVhZmQ0YjdhNjc2N2IwNzFmY2ZmYjlkZTc0ZjRhYTEyNw","url":"https://github.com/assertj/assertj/pull/2725/commits/c877c935afd4b7a6767b071fcffb9de74f4aa127"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2724,"url":"https://github.com/assertj/assertj/issues/2724","title":"`returns` and `doesNotReturn` should honor custom type comparators","bodyHTML":"<h4 dir=\"auto\">Feature summary</h4>\n<p dir=\"auto\">Currently, comparators set via <code class=\"notranslate\">usingComparatorForType</code> are ignored by <code class=\"notranslate\">returns</code> and <code class=\"notranslate\">doesNotReturn</code> assertions.</p>\n<p dir=\"auto\">We could enhance the implementation so that custom comparators are also used with these two methods.</p>\n<p dir=\"auto\">Source: <a href=\"https://stackoverflow.com/questions/73121345/\" rel=\"nofollow\">https://stackoverflow.com/questions/73121345/</a></p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"@Test\nvoid test() {\n    assertThat(new BigDecimal(&quot;10.00&quot;))\n        .usingComparatorForType(BigDecimalComparator.BIG_DECIMAL_COMPARATOR, BigDecimal.class)\n        .returns(BigDecimal.TEN, BigDecimal::abs); // currently fails\n}\"><pre><span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n<span class=\"pl-smi\">void</span> <span class=\"pl-s1\">test</span>() {\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">BigDecimal</span>(<span class=\"pl-s\">\"10.00\"</span>))\n        .<span class=\"pl-en\">usingComparatorForType</span>(<span class=\"pl-smi\">BigDecimalComparator</span>.<span class=\"pl-c1\">BIG_DECIMAL_COMPARATOR</span>, <span class=\"pl-smi\">BigDecimal</span>.<span class=\"pl-s1\">class</span>)\n        .<span class=\"pl-en\">returns</span>(<span class=\"pl-smi\">BigDecimal</span>.<span class=\"pl-c1\">TEN</span>, <span class=\"pl-s1\">BigDecimal</span>::<span class=\"pl-s1\">abs</span>); <span class=\"pl-c\">// currently fails</span>\n}</pre></div>","resourcePath":"/assertj/assertj/issues/2724","createdAt":"2022-07-30T21:53:21Z","labels":{"edges":[{"node":{"name":"type: enhancement"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix locale handling for ignoring case assertions","url":"https://github.com/assertj/assertj/pull/2685","resourcePath":"/assertj/assertj/pull/2685","createdAt":"2022-06-25T14:10:08Z","number":2685,"mergeCommit":{"oid":"befef07f172031847cbdd7a7e0622d52a64a9033","message":"Fix locale handling for ignoring case assertions (#2685)","commitUrl":"https://github.com/assertj/assertj/commit/befef07f172031847cbdd7a7e0622d52a64a9033","parents":{"nodes":[{"oid":"d5180a6d7c1af6ac7272268ee87dad54ae01ee7c","message":"Fix incomplete test for given(Duration) in BDDAssumptionsTest (#2686)\n\nFIxed a test that was not asserting anything on the result."}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/org/assertj/core/internal/Strings.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertContainsIgnoringCase_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertDoesNotContainIgnoringCase_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertDoesNotEndWithIgnoringCase_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertDoesNotStartWithIgnoringCase_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertEndsWithIgnoringCase_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertEqualsIgnoringCase_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertNotEqualsIgnoringCase_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/internal/strings/Strings_assertStartsWithIgnoringCase_Test.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/org/assertj/core/test/CaseInsensitiveStringComparatorTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs46Wz8m2gAoMDdhNDk1MDA4OGQ1NzI5YmI0YjAwZDMxMmY5NWNlMjhiYTUzZTRlMQ","url":"https://github.com/assertj/assertj/pull/2685/commits/07a4950088d5729bb4b00d312f95ce28ba53e4e1"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2666,"url":"https://github.com/assertj/assertj/issues/2666","title":"assertContainsIgnoringCase fails to compare i and I in tr_TR locale","bodyHTML":"<p dir=\"auto\">See <code class=\"notranslate\">org.assertj.core.internal.Strings#assertContainsIgnoringCase</code></p>\n<p dir=\"auto\"><a href=\"https://github.com/assertj/assertj-core/blob/9051a958e6ab0a750bb243060aef57001ab97e6e/src/main/java/org/assertj/core/internal/Strings.java#L528-L531\">https://github.com/assertj/assertj-core/blob/9051a958e6ab0a750bb243060aef57001ab97e6e/src/main/java/org/assertj/core/internal/Strings.java#L528-L531</a></p>\n<p dir=\"auto\">I would suggest adding <a href=\"https://github.com/policeman-tools/forbidden-apis\">https://github.com/policeman-tools/forbidden-apis</a> verification to just ban <code class=\"notranslate\">toLowerCase()</code>, <code class=\"notranslate\">toUpperCase()</code> and other unsafe methods: <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"1273791793\" data-permission-text=\"Title is private\" data-url=\"https://github.com/assertj/assertj/issues/2664\" data-hovercard-type=\"issue\" data-hovercard-url=\"/assertj/assertj/issues/2664/hovercard\" href=\"https://github.com/assertj/assertj/issues/2664\">#2664</a></p>","resourcePath":"/assertj/assertj/issues/2666","createdAt":"2022-06-17T21:38:03Z","labels":{"edges":[{"node":{"name":"type: bug"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add AbstractClassAssert#isPrimitive() and AbstractClassAssert#isNotPrimitive()","url":"https://github.com/assertj/assertj/pull/2722","resourcePath":"/assertj/assertj/pull/2722","createdAt":"2022-07-29T21:53:43Z","number":2722,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"assertj-core/src/main/java/org/assertj/core/api/AbstractClassAssert.java"}},{"node":{"changeType":"ADDED","path":"assertj-core/src/main/java/org/assertj/core/error/ShouldBePrimitive.java"}},{"node":{"changeType":"MODIFIED","path":"assertj-core/src/main/java/org/assertj/core/internal/Classes.java"}},{"node":{"changeType":"ADDED","path":"assertj-core/src/test/java/org/assertj/core/api/classes/ClassAssert_isNotPrimitive_Test.java"}},{"node":{"changeType":"ADDED","path":"assertj-core/src/test/java/org/assertj/core/api/classes/ClassAssert_isPrimitive_Test.java"}},{"node":{"changeType":"ADDED","path":"assertj-core/src/test/java/org/assertj/core/internal/classes/Classes_assertIsNotPrimitive_Test.java"}},{"node":{"changeType":"ADDED","path":"assertj-core/src/test/java/org/assertj/core/internal/classes/Classes_assertIsPrimitive_Test.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAIX3Vs48V5b-2gAoMzNkMDMxOTkzNzJhZjcxNjM4YTA5NmI1ODkwNDlkOGJjMDU3MjMzMw","url":"https://github.com/assertj/assertj/pull/2722/commits/33d03199372af71638a096b589049d8bc0572333"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2717,"url":"https://github.com/assertj/assertj/issues/2717","title":"Add AbstractClassAssert#is(Not)Primitive()","bodyHTML":"<h4 dir=\"auto\">Feature summary</h4>\n<p dir=\"auto\">The <code class=\"notranslate\">AbstractClassAssert</code> lacks with <code class=\"notranslate\">is(Not)Primitive()</code>.</p>\n<h4 dir=\"auto\">Example</h4>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(int.class).isPrimitive();\nassertThat(String.class).isNotPrimitive();\"><pre><span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">int</span>.<span class=\"pl-k\">class</span>).<span class=\"pl-en\">isPrimitive</span>();\n<span class=\"pl-en\">assertThat</span>(<span class=\"pl-smi\">String</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">isNotPrimitive</span>();</pre></div>\n<p dir=\"auto\">There is already workarounds for the case, I know.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"assertThat(c.isPrimitive()).isTrue();\"><pre class=\"notranslate\"><code>assertThat(c.isPrimitive()).isTrue();\n</code></pre></div>\n<p dir=\"auto\">I just found a case regarding the <code class=\"notranslate\">.as(...)</code>.</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"for (Field file : findSomeSpecificFields()) {\n    assertThat(field.getType().isPrimitive())\n        .as(&quot;@NullableBySpecification on primitive field: %s&quot;, field)\n        .isFalse();\n}\"><pre><span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Field</span> <span class=\"pl-s1\">file</span> : <span class=\"pl-en\">findSomeSpecificFields</span>()) {\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">field</span>.<span class=\"pl-en\">getType</span>().<span class=\"pl-en\">isPrimitive</span>())\n        .<span class=\"pl-en\">as</span>(<span class=\"pl-s\">\"@NullableBySpecification on primitive field: %s\"</span>, <span class=\"pl-s1\">field</span>)\n        .<span class=\"pl-en\">isFalse</span>();\n}</pre></div>\n<p dir=\"auto\">which may be more fluent,</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"for (Field file : findSomeSpecificFields()) {\n    assertThat(field.getType())\n        .as(&quot;%s annotated with @NullableBySpecification, field)\n        .isNotPrimitive();\n    //  '...Class#field annotated with @NullableBySpecification should not be primitive.\n}\"><pre><span class=\"pl-k\">for</span> (<span class=\"pl-smi\">Field</span> <span class=\"pl-s1\">file</span> : <span class=\"pl-en\">findSomeSpecificFields</span>()) {\n    <span class=\"pl-en\">assertThat</span>(<span class=\"pl-s1\">field</span>.<span class=\"pl-en\">getType</span>())\n        .<span class=\"pl-s1\">as</span>(\"%s annotated with @NullableBySpecification, field)\n        .<span class=\"pl-en\">isNotPrimitive</span>();\n    <span class=\"pl-c\">//  '...Class#field annotated with @NullableBySpecification should not be primitive.</span>\n}</pre></div>","resourcePath":"/assertj/assertj/issues/2717","createdAt":"2022-07-27T03:46:36Z","labels":{"edges":[{"node":{"name":"type: enhancement"}},{"node":{"name":"good first issue"}}]}}}]}}}}]