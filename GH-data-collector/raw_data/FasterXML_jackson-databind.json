[{"repository":{"pullRequest":{"title":"implement #2636: provide overloadings of ObjectReader.readValue() taking Class valueType","url":"https://github.com/FasterXML/jackson-databind/pull/2637","resourcePath":"/FasterXML/jackson-databind/pull/2637","createdAt":"2020-03-02T13:32:33Z","number":2637,"mergeCommit":{"oid":"7e7fe80d7645e00f32ca0c456c42ea2c983d7f43","message":"Issue #2636 - Mockito tests of overloaded methods","commitUrl":"https://github.com/FasterXML/jackson-databind/commit/7e7fe80d7645e00f32ca0c456c42ea2c983d7f43","parents":{"nodes":[{"oid":"f55f8e8c012676063fee6bb319ed886a8d9961de","message":"Issue #2636 - provide overloadings of ObjectReader.readValue() taking Class valueType"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/ObjectReader.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/databind/ObjectReaderTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/com/fasterxml/jackson/databind/ObjectReaderValueOfWithValueTypeTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzgyMzg2MTk0OjJmNGNkZTBhNDQ2NmFiYjlhNmUxNDA2Y2E4OTBiOGFiZjY0NmMyZTA=","url":"https://github.com/FasterXML/jackson-databind/pull/2637/commits/2f4cde0a4466abb9a6e1406ca890b8abf646c2e0"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2636,"url":"https://github.com/FasterXML/jackson-databind/issues/2636","title":"ObjectReader readValue lacks Class<T> argument","bodyHTML":"<p dir=\"auto\">Since ObjectMappers are mutable, I am exposing ObjectReader and ObjectWriter through a factory.</p>\n<p dir=\"auto\">Whereas ObjectMapper.readValue(String content, Class valueType) is of known Type =valueType, the equivalent methods on ObjectReader are declared as returning  T but do not take a Class valueType parameter.</p>\n<p dir=\"auto\">Even ObjectReader.forType(Class&lt;?&gt; valueType) does not return a parameterized instance of ObjectReader.</p>\n<p dir=\"auto\">The impact is that, whereas with ObjectMapper.readValue(String,Class) I do not have to typecast the returned value, when I start using ObjectReader.readValue(String) or ObjectReader.forType(Class).readValue(String) I must explicitly typecast the result.</p>\n<p dir=\"auto\">Surely either ObjectReader.readValue should be overloaded with Class valueType (presumably this is trivially easy), or ObjectReader.forType(Class valueType) should return a fully parameterized ObjectReader (more complicated as ObjectReader is not a parameterized class)?</p>","resourcePath":"/FasterXML/jackson-databind/issues/2636","createdAt":"2020-03-02T12:28:18Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Add new Serialization Feature to avoid fractions","url":"https://github.com/FasterXML/jackson-databind/pull/2630","resourcePath":"/FasterXML/jackson-databind/pull/2630","createdAt":"2020-02-27T11:12:18Z","number":2630,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/SerializationFeature.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0MzgwNzgyNjczOjExNzY3MjU5ZTljOGFjODhlY2M0MDQ0MGUxODZmZTE2NDlmOGY1MmU=","url":"https://github.com/FasterXML/jackson-databind/pull/2630/commits/11767259e9c8ac88ecc40440e186fe1649f8f52e"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":116,"url":"https://github.com/FasterXML/jackson-modules-java8/issues/116","title":"Allow Instant to be serialized as epochSecond without the fraction part","bodyHTML":"<p dir=\"auto\">I have an <code class=\"notranslate\">Instant</code> field that represents an epoch timestamp in seconds.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @JsonProperty(&quot;registered_at&quot;)\n    @JsonFormat(shape = JsonFormat.Shape.NUMBER)\n    private Instant registeredAt;\"><pre class=\"notranslate\"><code>    @JsonProperty(\"registered_at\")\n    @JsonFormat(shape = JsonFormat.Shape.NUMBER)\n    private Instant registeredAt;\n</code></pre></div>\n<p dir=\"auto\">the mapper is configured this way</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    .featuresToDisable(ADJUST_DATES_TO_CONTEXT_TIME_ZONE,\n                       FAIL_ON_UNKNOWN_PROPERTIES,\n                       WRITE_DATES_AS_TIMESTAMPS,\n                       SORT_PROPERTIES_ALPHABETICALLY)\"><pre class=\"notranslate\"><code>    .featuresToDisable(ADJUST_DATES_TO_CONTEXT_TIME_ZONE,\n                       FAIL_ON_UNKNOWN_PROPERTIES,\n                       WRITE_DATES_AS_TIMESTAMPS,\n                       SORT_PROPERTIES_ALPHABETICALLY)\n</code></pre></div>\n<p dir=\"auto\">However when this gets serialized as</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"&quot;registered_at&quot; : 1420324047.000000000\"><pre class=\"notranslate\"><code>\"registered_at\" : 1420324047.000000000\n</code></pre></div>\n<p dir=\"auto\">By looking at the code there's no way to serialize this value as epoch seconds using the standard mechanism.</p>\n<p dir=\"auto\"><code class=\"notranslate\">InstantSerializerBase.serialize(T value, JsonGenerator generator, SerializerProvider provider)</code></p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        if (useTimestamp(provider)) {\n            if (useNanoseconds(provider)) {\n                generator.writeNumber(DecimalUtils.toBigDecimal(\n                        getEpochSeconds.applyAsLong(value), getNanoseconds.applyAsInt(value)\n                ));\n                return;\n            }\n            generator.writeNumber(getEpochMillis.applyAsLong(value));\n            return;\n        }\"><pre class=\"notranslate\"><code>        if (useTimestamp(provider)) {\n            if (useNanoseconds(provider)) {\n                generator.writeNumber(DecimalUtils.toBigDecimal(\n                        getEpochSeconds.applyAsLong(value), getNanoseconds.applyAsInt(value)\n                ));\n                return;\n            }\n            generator.writeNumber(getEpochMillis.applyAsLong(value));\n            return;\n        }\n</code></pre></div>\n<p dir=\"auto\">The only option is to use :</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    @JsonGetter(&quot;registered_at&quot;)\n    public long getRegisteredAtEpoch() {\n        return registeredAt.getEpochSecond();\n    }\"><pre class=\"notranslate\"><code>    @JsonGetter(\"registered_at\")\n    public long getRegisteredAtEpoch() {\n        return registeredAt.getEpochSecond();\n    }\n</code></pre></div>\n<p dir=\"auto\">It could be nice if there could be way to tell jackson to avoid serializing the fraction part.</p>","resourcePath":"/FasterXML/jackson-modules-java8/issues/116","createdAt":"2019-07-04T14:21:40Z","labels":{"edges":[{"node":{"name":"new-feature"}},{"node":{"name":"date-time-config"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Ignore the explicit names of READONLY properties when they are available","url":"https://github.com/FasterXML/jackson-databind/pull/2720","resourcePath":"/FasterXML/jackson-databind/pull/2720","createdAt":"2020-05-13T13:41:20Z","number":2720,"mergeCommit":{"oid":"75f0777e17f425616287697a631cd78fa0c1463d","message":"Ignore the explicit names of READONLY properties when they are available (#2720)","commitUrl":"https://github.com/FasterXML/jackson-databind/commit/75f0777e17f425616287697a631cd78fa0c1463d","parents":{"nodes":[{"oid":"a061742d08b9d1c5bc80950ff933a6cc6487646d","message":"Merge branch '2.12'"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/com/fasterxml/jackson/databind/deser/ReadOnlyDeser2719Test.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDE3MzcwNzAzOmRkNWU2ZDA0NmYyYjQzYzM1ZjU4YTE3OTE5ZWIyZWQ5MTk3ZGMwZWM=","url":"https://github.com/FasterXML/jackson-databind/pull/2720/commits/dd5e6d046f2b43c35f58a17919eb2ed9197dc0ec"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2719,"url":"https://github.com/FasterXML/jackson-databind/issues/2719","title":"`FAIL_ON_IGNORED_PROPERTIES` does not throw on `READONLY` properties with an explicit name","bodyHTML":"<p dir=\"auto\">As mentioned in the title, <code class=\"notranslate\">FAIL_ON_IGNORED_PROPERTIES</code> does not throw on properties annotated with <code class=\"notranslate\">@JsonProperty(value = 'XXX', access = JsonProperty.Access.READ_ONLY)</code>. I believe that it is because the implicit name of the property is added to the list of ignorals in <code class=\"notranslate\">POJOPropertiesCollector</code> rather than the explicit names when at least one is available.</p>\n<p dir=\"auto\">I have prepared a Pull Request for this issue, I'll provide it as soon as possible.</p>","resourcePath":"/FasterXML/jackson-databind/issues/2719","createdAt":"2020-05-13T13:33:26Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"FasterXML/jackson-databind#1296 @JsonIncludeProperties","url":"https://github.com/FasterXML/jackson-databind/pull/2771","resourcePath":"/FasterXML/jackson-databind/pull/2771","createdAt":"2020-06-18T01:36:29Z","number":2771,"mergeCommit":{"oid":"d9c0332e5ad76d7e4f35d9906f0b8e94a5237627","message":"FasterXML/jackson-databind#1296 @JsonIncludeProperties (#2771)\n\nImplement #1296 (add and support `@JsonIncludeProperties`)","commitUrl":"https://github.com/FasterXML/jackson-databind/commit/d9c0332e5ad76d7e4f35d9906f0b8e94a5237627","parents":{"nodes":[{"oid":"5758c6bce6773108beeadd8090641f21778ba5e0","message":"Update release notes wrt #2215"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializer.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/ser/BeanSerializerFactory.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/ser/impl/BeanAsArraySerializer.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/ser/impl/UnwrappingBeanSerializer.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/ser/std/BeanSerializerBase.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/ser/std/MapSerializer.java"}},{"node":{"changeType":"ADDED","path":"src/main/java/com/fasterxml/jackson/databind/util/IgnorePropertiesUtil.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/com/fasterxml/jackson/databind/deser/IncludeWithDeserTest.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/com/fasterxml/jackson/databind/ser/filter/IncludePropsForSerTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDM2MTc3MzM3OmZiZjRjMTJhY2JhZTI0YjkxYWVhOTJkMzVkMDhkZjA3MzQ3MDgxYzM=","url":"https://github.com/FasterXML/jackson-databind/pull/2771/commits/fbf4c12acbae24b91aea92d35d08df07347081c3"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":1296,"url":"https://github.com/FasterXML/jackson-databind/issues/1296","title":"Add `@JsonIncludeProperties(propertyNames)` (reverse of `@JsonIgnoreProperties`)","bodyHTML":"<p dir=\"auto\">In some/many cases it'd be easier to just name properties to include, reverse of <code class=\"notranslate\">@JsonIgnoreProperties</code>. And similarly, it should be possible to define baselines by type as well as property overrides; and if ever we support inheritance-merging in class hierarchy, use similar merging strategies (merge vs replace).</p>\n<p dir=\"auto\">NOTE: for this (2.12.0) implementation, no merging exists for class annotations -- sub-class definitions will always simply replace super-class/super-interface definitions. Similarly there is no way to specify inclusions using \"ConfigOverride\" system, although ignoral is possible. Latter would likely be relatively easy to implement (so feel free to file a follow-up request); former (annotation merging) is a more difficult ask (but likewise feel free to file a feature request).</p>","resourcePath":"/FasterXML/jackson-databind/issues/1296","createdAt":"2016-07-14T03:12:47Z","labels":{"edges":[{"node":{"name":"most-wanted"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Make some java platform modules optional","url":"https://github.com/FasterXML/jackson-databind/pull/2913","resourcePath":"/FasterXML/jackson-databind/pull/2913","createdAt":"2020-11-02T11:16:27Z","number":2913,"mergeCommit":{"oid":"5ad9f04624669cb0c493665c31e19d681f94c21f","message":"Make some java platform modules optional (#2913)\n\n* Remove java.logging module dependency\r\n* Make java.xml module optional (static)\r\n* Make java.sql module optional (static)\r\n* Make java.desktop module optional (static)\r\n\r\nSome java environments already don't have java.sql classes\r\nMake DateDeserializers weakly depend on java.sql classes\r\nSerialization is already weak, as pe [databind#1073]\r\n\r\njava.desktop classes (java.beans.ConstructorProperties and java.beans.Transient) are used in com.fasterxml.jackson.databind.ext.Java7SupportImpl, if java.beans classes are not present, then jackson will not load Java7SupportImpl\r\n\r\nCo-authored-by: Xakep_SDK <admin@xakeps.dk>","commitUrl":"https://github.com/FasterXML/jackson-databind/commit/5ad9f04624669cb0c493665c31e19d681f94c21f","parents":{"nodes":[{"oid":"dd8d755f6c828c2300ea69d5b517bbd8c5b9165c","message":"Remove java8 API invocation from AnnotatedConstructor (#2918)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/deser/std/DateDeserializers.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/ext/Java7Handlers.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/ext/OptionalHandlerFactory.java"}},{"node":{"changeType":"MODIFIED","path":"src/moditect/module-info.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTEzOTg2NjU2OmRjZTcxYzAyMGZiNDliM2YwZDcwN2EwYzI2NTRiOGZjZjhhMjE3Njg=","url":"https://github.com/FasterXML/jackson-databind/pull/2913/commits/dce71c020fb49b3f0d707a0c2654b8fcf8a21768"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2910,"url":"https://github.com/FasterXML/jackson-databind/issues/2910","title":"Make some java platform modules optional","bodyHTML":"<p dir=\"auto\"><strong>Is your feature request related to a problem? Please describe.</strong><br>\nJackson module descriptor implicitly depends on these modules:</p>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">requires java.desktop</code></li>\n<li><code class=\"notranslate\">requires java.logging</code></li>\n<li><code class=\"notranslate\">requires java.sql</code></li>\n<li><code class=\"notranslate\">requires java.xml</code><br>\nCan they become optional?</li>\n</ol>\n<p dir=\"auto\"><strong>Describe the solution you'd like</strong><br>\nMake these modules optional</p>\n<ol dir=\"auto\">\n<li><code class=\"notranslate\">requires static java.desktop</code></li>\n<li><code class=\"notranslate\">requires static java.logging</code></li>\n<li><code class=\"notranslate\">requires static java.sql</code></li>\n<li><code class=\"notranslate\">requires static java.xml</code><br>\nThis may require some code changes, since making module optional means that module may not be present at runtime.<br>\nSo code should check, if relevant classes are present.</li>\n</ol>\n<p dir=\"auto\"><strong>Usage example</strong><br>\njlink and jpackage will produce smaller images. <code class=\"notranslate\">java.sql</code> itself brings 10MB+ of dependencies, according to this <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"623953987\" data-permission-text=\"Title is private\" data-url=\"https://github.com/google/gson/issues/1707\" data-hovercard-type=\"pull_request\" data-hovercard-url=\"/google/gson/pull/1707/hovercard?comment_id=696492821&amp;comment_type=issue_comment\" href=\"https://github.com/google/gson/pull/1707#issuecomment-696492821\">google/gson#1707 (comment)</a></p>","resourcePath":"/FasterXML/jackson-databind/issues/2910","createdAt":"2020-10-30T08:38:33Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Adds support for `@JsonKey` annotation","url":"https://github.com/FasterXML/jackson-databind/pull/2905","resourcePath":"/FasterXML/jackson-databind/pull/2905","createdAt":"2020-10-26T20:37:11Z","number":2905,"mergeCommit":{"oid":"ecc9bfedde013bcc53e08199ef1ff58cfa7833ce","message":"Adds support for `@JsonKey` annotation (#2905)\n\nAdds support for `@JsonKey` annotation\r\n\r\nWhen serializing the key of a Map, look for a `@JsonKey` annotation.\r\nWhen present (taking priority over `@JsonValue`), skip the\r\nStdKey:Serializer and attempt to find a serializer for the inner type.\r\n\r\nFixes #2871","commitUrl":"https://github.com/FasterXML/jackson-databind/commit/ecc9bfedde013bcc53e08199ef1ff58cfa7833ce","parents":{"nodes":[{"oid":"3de2de0d97d8edd87ec3d4311dd174a7f3aa58c3","message":"Rename test class"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/AnnotationIntrospector.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/BeanDescription.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/introspect/BasicBeanDescription.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/introspect/JacksonAnnotationIntrospector.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertiesCollector.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/ser/BasicSerializerFactory.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/com/fasterxml/jackson/databind/jsontype/MapSerializingTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTEwMjkyOTY4OjUxYWUwZDc5MDQ5ZTZlODQxNDM4ODVmZmUwNDczMmU4OWQ4NzM2YjE=","url":"https://github.com/FasterXML/jackson-databind/pull/2905/commits/51ae0d79049e6e84143885ffe04732e89d8736b1"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2871,"url":"https://github.com/FasterXML/jackson-databind/issues/2871","title":"Add `@JsonKey` annotation (similar to `@JsonValue`) for customizable serialization of Map keys","bodyHTML":"<p dir=\"auto\"><strong>Describe the bug</strong><br>\nWhen serializing a map key, if the key's type uses <code class=\"notranslate\">@JsonValue</code> on one of its attributes, and if that attribute's type uses <code class=\"notranslate\">@JsonValue</code> on one of its own attributes, the second <code class=\"notranslate\">@JsonValue</code> is ignored, and <code class=\"notranslate\">toString()</code> is used instead.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\n2.10.0</p>\n<p dir=\"auto\"><strong>To Reproduce</strong></p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    class Inner {\n\n        @JsonValue\n        String string;\n\n        Inner(String string) {\n            this.string = string;\n        }\n\n        public String toString() {\n            return &quot;Inner(String=&quot;+this.string+&quot;)&quot;;\n        }\n\n    }\n\n    class Outer {\n\n        @JsonValue\n        Inner inner;\n\n        Outer(Inner inner) {\n            this.inner = inner;\n        }\n\n    }\n\n    public void test() throws Exception {\n        Outer outer = new Outer(new Inner(&quot;key&quot;));\n        ObjectMapper mapper = new ObjectMapper();\n        System.out.println(mapper.writeValueAsString(outer)); // outputs &quot;key&quot;, as expected\n        System.out.println(mapper.writeValueAsString(Collections.singletonMap(outer,&quot;value&quot;))); // outputs {&quot;Inner(String=key)&quot;:&quot;value&quot;}, expected {&quot;key&quot;:&quot;value&quot;}\n    }\"><pre>    <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Inner</span> {\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonValue</span>\n        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">string</span>;\n\n        <span class=\"pl-smi\">Inner</span>(<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">string</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">string</span> = <span class=\"pl-s1\">string</span>;\n        }\n\n        <span class=\"pl-k\">public</span> <span class=\"pl-smi\">String</span> <span class=\"pl-en\">toString</span>() {\n            <span class=\"pl-k\">return</span> <span class=\"pl-s\">\"Inner(String=\"</span>+<span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">string</span>+<span class=\"pl-s\">\")\"</span>;\n        }\n\n    }\n\n    <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Outer</span> {\n\n        <span class=\"pl-c1\">@</span><span class=\"pl-c1\">JsonValue</span>\n        <span class=\"pl-smi\">Inner</span> <span class=\"pl-s1\">inner</span>;\n\n        <span class=\"pl-smi\">Outer</span>(<span class=\"pl-smi\">Inner</span> <span class=\"pl-s1\">inner</span>) {\n            <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">inner</span> = <span class=\"pl-s1\">inner</span>;\n        }\n\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-s1\">test</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-s1\">Exception</span> {\n        <span class=\"pl-smi\">Outer</span> <span class=\"pl-s1\">outer</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">Outer</span>(<span class=\"pl-k\">new</span> <span class=\"pl-smi\">Inner</span>(<span class=\"pl-s\">\"key\"</span>));\n        <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-s1\">outer</span>)); <span class=\"pl-c\">// outputs \"key\", as expected</span>\n        <span class=\"pl-smi\">System</span>.<span class=\"pl-s1\">out</span>.<span class=\"pl-en\">println</span>(<span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">writeValueAsString</span>(<span class=\"pl-s1\">Collections</span>.<span class=\"pl-en\">singletonMap</span>(<span class=\"pl-s1\">outer</span>,<span class=\"pl-s\">\"value\"</span>))); <span class=\"pl-c\">// outputs {\"Inner(String=key)\":\"value\"}, expected {\"key\":\"value\"}</span>\n    }</pre></div>","resourcePath":"/FasterXML/jackson-databind/issues/2871","createdAt":"2020-10-05T14:48:46Z","labels":{"edges":[{"node":{"name":"good first issue"}},{"node":{"name":"hacktoberfest-accepted"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add feature to inverse read/write access logic","url":"https://github.com/FasterXML/jackson-databind/pull/2966","resourcePath":"/FasterXML/jackson-databind/pull/2966","createdAt":"2020-12-02T14:07:22Z","number":2966,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/MapperFeature.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/introspect/POJOPropertyBuilder.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/databind/deser/ReadOrWriteOnlyTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTMxMDQxMjMzOjlhMzc5NWE2Yjc5MDMzZjQ5OWJlZjRhYTkwY2IwNTBjNjdiNWI5N2U=","url":"https://github.com/FasterXML/jackson-databind/pull/2966/commits/9a3795a6b79033f499bef4aa90cb050c67b5b97e"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":2951,"url":"https://github.com/FasterXML/jackson-databind/issues/2951","title":"Inverse access of `@JsonProperty(access=)` so it can work differently on server side and client side","bodyHTML":"<p dir=\"auto\">@JsonProperty's access mode should be inversed on server side and client side when both sides are sharing the same module class.</p>\n<p dir=\"auto\">when using access = READ_ONLY with @JsonProperty, on the server side, that means property need to be serialized but can't be deserialized. but on the client side, the same property should be able to be deserialized but not to be serialized.</p>\n<p dir=\"auto\">Is it good to have an out-of-box feature to do this inversion?</p>","resourcePath":"/FasterXML/jackson-databind/issues/2951","createdAt":"2020-11-20T15:16:56Z","labels":{"edges":[{"node":{"name":"2.14"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add Array node#set methods","url":"https://github.com/FasterXML/jackson-databind/pull/3156","resourcePath":"/FasterXML/jackson-databind/pull/3156","createdAt":"2021-05-16T15:41:44Z","number":3156,"mergeCommit":{"oid":"884a0506488c14dcfa9c3370e800fe47ef581b2b","message":"Add Array node#set methods (#3156)\n\nfeat: add ArrayNode#set methods","commitUrl":"https://github.com/FasterXML/jackson-databind/commit/884a0506488c14dcfa9c3370e800fe47ef581b2b","parents":{"nodes":[{"oid":"9202d13c121fb6c86d9e707e8c47fa032fcc5671","message":"Fix #3091"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/node/ArrayNode.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/databind/node/ArrayNodeTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjQ1MzM0NzYwOjE0NmRhZTkzMjY1MTY2MDIzZTNkOWU1OWI1MmI3NTJjMWM5Y2YzYTY=","url":"https://github.com/FasterXML/jackson-databind/pull/3156/commits/146dae93265166023e3d9e59b52b752c1c9cf3a6"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":3154,"url":"https://github.com/FasterXML/jackson-databind/issues/3154","title":"Add `ArrayNode#set(int index, primitive_type value)`","bodyHTML":"<p dir=\"auto\"><strong>Is your feature request related to a problem? Please describe.</strong><br>\nCurrently, we could <code class=\"notranslate\">add</code>/<code class=\"notranslate\">insert</code> values to <code class=\"notranslate\">ArrayNode</code> instance. but the <code class=\"notranslate\">set</code> method only accepts <code class=\"notranslate\">JsonNode</code> instance.</p>\n<p dir=\"auto\"><strong>Describe the solution you'd like</strong><br>\nIt would be nice if we have <code class=\"notranslate\">set</code> methods like <code class=\"notranslate\">add</code>/<code class=\"notranslate\">insert</code></p>\n<p dir=\"auto\"><strong>Usage example</strong></p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"ArrayNode arr = getNewArrayNode();\narr.add(&quot;a&quot;);\narr.insert(0, &quot;b&quot;);\narr.set(0, &quot;c&quot;);        // &lt;------- Missing\"><pre><span class=\"pl-smi\">ArrayNode</span> <span class=\"pl-s1\">arr</span> = <span class=\"pl-en\">getNewArrayNode</span>();\n<span class=\"pl-s1\">arr</span>.<span class=\"pl-en\">add</span>(<span class=\"pl-s\">\"a\"</span>);\n<span class=\"pl-s1\">arr</span>.<span class=\"pl-en\">insert</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\">\"b\"</span>);\n<span class=\"pl-s1\">arr</span>.<span class=\"pl-en\">set</span>(<span class=\"pl-c1\">0</span>, <span class=\"pl-s\">\"c\"</span>);        <span class=\"pl-c\">// &lt;------- Missing</span></pre></div>\n<p dir=\"auto\"><strong>Additional context</strong><br>\nN/A</p>","resourcePath":"/FasterXML/jackson-databind/issues/3154","createdAt":"2021-05-15T13:22:56Z","labels":{"edges":[{"node":{"name":"2.13"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Support `suppressed` property when deserializing `Throwable`","url":"https://github.com/FasterXML/jackson-databind/pull/3179","resourcePath":"/FasterXML/jackson-databind/pull/3179","createdAt":"2021-06-18T09:54:28Z","number":3179,"mergeCommit":{"oid":"a05e2cb80b56d4989bf1c3b605bb5ad36f8b6094","message":"Support `suppressed` property when deserializing `Throwable` (#3179)\n\nImplement #31767: support `suppressed` property when deserializing Throwable","commitUrl":"https://github.com/FasterXML/jackson-databind/commit/a05e2cb80b56d4989bf1c3b605bb5ad36f8b6094","parents":{"nodes":[{"oid":"91a98ac5058db5405dcfae62a7468798dacdc8f5","message":"Update release notes"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/deser/std/ThrowableDeserializer.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/databind/exc/ExceptionDeserializationTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjczMzMzODQ2OjAyMTAwMGZkNjVhMmRmNWNkMjY1NjJiYmM1ZmQzYWVkZTdiMWJiNGI=","url":"https://github.com/FasterXML/jackson-databind/pull/3179/commits/021000fd65a2df5cd26562bbc5fd3aede7b1bb4b"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":3177,"url":"https://github.com/FasterXML/jackson-databind/issues/3177","title":"Support `suppressed` property when deserializing `Throwable`","bodyHTML":"<p dir=\"auto\">Hi,</p>\n<p dir=\"auto\">when using Jackson 2.12.x in my project to serialize / deserialize instances of <code class=\"notranslate\">Throwable</code>, I noticed that the serialized JSON output contains the <code class=\"notranslate\">suppressed</code> property. This property is also successfully filled in JSON if the original <code class=\"notranslate\">Throwable</code> has suppressed exceptions. However, when deserializing the JSON back again to a cloned <code class=\"notranslate\">Throwable</code> then this property is getting ignored, i.e. the cloned instance has an empty array of suppressed exceptions.</p>\n<p dir=\"auto\">When debugging this issue, I think I narrowed it down to <a href=\"https://github.com/FasterXML/jackson-databind/blob/2.13/src/main/java/com/fasterxml/jackson/databind/deser/BeanDeserializerFactory.java#L443\">BeanDeserializerFactory.buildThrowableDeserializer(...)</a> where the <code class=\"notranslate\">suppressed</code> property is added to the ignorable properties.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"// Java 7 also added &quot;getSuppressed&quot;, skip if we have such data:\nbuilder.addIgnorable(&quot;suppressed&quot;);\"><pre class=\"notranslate\"><code>// Java 7 also added \"getSuppressed\", skip if we have such data:\nbuilder.addIgnorable(\"suppressed\");\n</code></pre></div>\n<p dir=\"auto\">Based on the comment, I guess this ignoring of the <code class=\"notranslate\">suppressed</code> property has historic reasons because it was only introduced in JDK 7, and only since <code class=\"notranslate\">jackson-databind</code> 2.7 the Minimum JDK version is 1.7.</p>\n<p dir=\"auto\">Given that the Minimum JDK version is even 1.8 since <code class=\"notranslate\">jackson-databind</code> 2.12, what is your opinion on introducing deserialization support for the <code class=\"notranslate\">suppressed</code> property? If you agree that this support should be introduced, I would give it a try to introduce it in <code class=\"notranslate\">BeanDeserializerFactory.buildThrowableDeserializer(...)</code> and then send you a pull request. Most likely, I would implement it in a style similar to how the <code class=\"notranslate\">cause</code> property of <code class=\"notranslate\">Throwable</code> gets deserialized, i.e. I would add a manually constructed <code class=\"notranslate\">SettableBeanProperty</code> that is using <code class=\"notranslate\">Throwable.addSuppressed(...)</code> for adding the suppressed exceptions to the <code class=\"notranslate\">Throwable</code> instance.</p>","resourcePath":"/FasterXML/jackson-databind/issues/3177","createdAt":"2021-06-16T16:46:07Z","labels":{"edges":[{"node":{"name":"2.13"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Behavior of `AnnotatedMember.equals()` (#3187)","url":"https://github.com/FasterXML/jackson-databind/pull/3195","resourcePath":"/FasterXML/jackson-databind/pull/3195","createdAt":"2021-07-01T09:57:38Z","number":3195,"mergeCommit":{"oid":"2b5a31996d9ca2170cbd61b465332863b0f291d7","message":"Behavior of `AnnotatedMember.equals()` (#3187) (#3195)","commitUrl":"https://github.com/FasterXML/jackson-databind/commit/2b5a31996d9ca2170cbd61b465332863b0f291d7","parents":{"nodes":[{"oid":"2c221ad9015cd82fc36b91b55904acb07546408f","message":"backport FUNDING link"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"release-notes/CREDITS-2.x"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedConstructor.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedField.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/introspect/AnnotatedMethod.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/com/fasterxml/jackson/databind/introspect/AnnotatedMemberEqualityTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NjgxNjkyMTI2OmU3MTE1ZjI2NjFhMDMzOWQzODk1YzAxYjY4YTIxNTM2OGQyYWM3OTQ=","url":"https://github.com/FasterXML/jackson-databind/pull/3195/commits/e7115f2661a0339d3895c01b68a215368d2ac794"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":3187,"url":"https://github.com/FasterXML/jackson-databind/issues/3187","title":"`AnnotatedMember.equals()` does not work reliably","bodyHTML":"<p dir=\"auto\">Hi,</p>\n<p dir=\"auto\">I noticed some strange behavior of the current <code class=\"notranslate\">AnnotatedMember.equals()</code> implementations. Following test case for <code class=\"notranslate\">AnnotatedConstructor.equals()</code> currently fails:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public void testAnnotatedConstructorEquality() {\n    ObjectMapper mapper = new ObjectMapper();\n    DeserializationConfig context = mapper.getDeserializationConfig();\n    JavaType beanType = mapper.constructType(SomeBean.class);\n\n    AnnotatedClass instance1 = AnnotatedClassResolver.resolve(context, beanType, context);\n    AnnotatedClass instance2 = AnnotatedClassResolver.resolve(context, beanType, context);\n\n    // Successful\n    assertEquals(instance1, instance2);\n    assertEquals(instance1.getDefaultConstructor().getAnnotated(), instance2.getDefaultConstructor().getAnnotated());\n    \n    // Fails\n    assertEquals(instance1.getDefaultConstructor(), instance2.getDefaultConstructor());\n}\"><pre class=\"notranslate\"><code>public void testAnnotatedConstructorEquality() {\n    ObjectMapper mapper = new ObjectMapper();\n    DeserializationConfig context = mapper.getDeserializationConfig();\n    JavaType beanType = mapper.constructType(SomeBean.class);\n\n    AnnotatedClass instance1 = AnnotatedClassResolver.resolve(context, beanType, context);\n    AnnotatedClass instance2 = AnnotatedClassResolver.resolve(context, beanType, context);\n\n    // Successful\n    assertEquals(instance1, instance2);\n    assertEquals(instance1.getDefaultConstructor().getAnnotated(), instance2.getDefaultConstructor().getAnnotated());\n    \n    // Fails\n    assertEquals(instance1.getDefaultConstructor(), instance2.getDefaultConstructor());\n}\n</code></pre></div>\n<p dir=\"auto\">Based on the first two successful <code class=\"notranslate\">assertEquals(...)</code> statements, I would have expected that the third <code class=\"notranslate\">assertEquals(...)</code> should be also successful. However, it currently fails.</p>\n<p dir=\"auto\">The reason for this behavior is that <code class=\"notranslate\">AnnotatedConstructor.equals()</code> is currently using <code class=\"notranslate\">==</code> for comparing the two constructors:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"public boolean equals(Object o) {\n    if (o == this) return true;\n    return ClassUtil.hasClass(o, getClass())\n            &amp;&amp; (((AnnotatedConstructor) o)._constructor == _constructor);\n}\"><pre class=\"notranslate\"><code>public boolean equals(Object o) {\n    if (o == this) return true;\n    return ClassUtil.hasClass(o, getClass())\n            &amp;&amp; (((AnnotatedConstructor) o)._constructor == _constructor);\n}\n</code></pre></div>\n<p dir=\"auto\">However, the implementation of the reflection API in <code class=\"notranslate\">java.lang.Class</code> is always copying / cloning the <code class=\"notranslate\">Field</code>, <code class=\"notranslate\">Method</code> and <code class=\"notranslate\">Constructor</code> instances prior to returning them to the caller (e.g. see <code class=\"notranslate\">Class.copyConstructors()</code>). Thus, each call of <code class=\"notranslate\">Class.getConstructors()</code> will always return new instances.</p>\n<p dir=\"auto\">If you agree that the above test case should be successful (i.e. also <code class=\"notranslate\">assertEquals(instance1.getDefaultConstructor(), instance2.getDefaultConstructor())</code> should be successful), I would prepare a corresponding pull request that slightly modifies the current implementation of the <code class=\"notranslate\">equals()</code> method for all subclasses of <code class=\"notranslate\">AnnotatedMember</code> that are affected by this problem (i.e. at least <code class=\"notranslate\">AnnotatedField</code>, <code class=\"notranslate\">AnnotatedConstructor</code> and <code class=\"notranslate\">AnnotatedMethod</code>).</p>","resourcePath":"/FasterXML/jackson-databind/issues/3187","createdAt":"2021-06-25T12:45:16Z","labels":{"edges":[{"node":{"name":"2.13"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Fix #3419 do not generate stack trace for UnresolvedForwardReference throw internally","url":"https://github.com/FasterXML/jackson-databind/pull/3422","resourcePath":"/FasterXML/jackson-databind/pull/3422","createdAt":"2022-03-20T01:34:24Z","number":3422,"mergeCommit":{"oid":"fec520d8dea8ca8c47ff9d388b08c343193a62d0","message":"Fix #3419 do not generate stack trace for UnresolvedForwardReference thrown internally. (#3422)","commitUrl":"https://github.com/FasterXML/jackson-databind/commit/fec520d8dea8ca8c47ff9d388b08c343193a62d0","parents":{"nodes":[{"oid":"8bf0c05907bab7eb46043e80e0cf5d69ba3d3d20","message":"Fix #3421 (add `JsonNodeFeature.READ_NULL_PROPERTIES`)"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/deser/DefaultDeserializationContext.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/deser/UnresolvedForwardReference.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAC5e2c40sfZc2gAoN2U4NDAwODk4M2MzNGRjMGZmMGI1Yzk5NjcxMzViY2ZhMWU2MjBhMA","url":"https://github.com/FasterXML/jackson-databind/pull/3422/commits/7e84008983c34dc0ff0b5c9967135bcfa1e620a0"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":3419,"url":"https://github.com/FasterXML/jackson-databind/issues/3419","title":"Improve performance of `UnresolvedForwardReference` for forward reference resolution","bodyHTML":"<p dir=\"auto\">JsonMappingException is a checked exception used to signal <strong>fatal</strong> problems with mapping of content.</p>\n<p dir=\"auto\">UnresolvedForwardReference, which extends JsonMappingException is thrown and caught internally for completely <strong>VALID</strong> json to resolve forward references.</p>\n<p dir=\"auto\">Throwable.fillInStackTrace() is an expensive operation, it's the main cost of throwing most Exceptions, and it's called for all UnresolvedForwardReference thrown and caught internally.  The stackTrace is irrelevant for these internal exceptions, it is wasted computation.</p>\n<p dir=\"auto\">The json documents we process are full of object references, so I took the liberty of locally redefining UnresolvedForwardReference to extend RuntimeException, and using the RuntimeException constructor to set writableStackTrace to false, bypassing the Throwable.fillInStackTrace() call.<br>\nI noticed speed improvements of 50%, deserialization takes half the time when Throwable.fillInStackTrace() is turned off for our typical json payloads.</p>\n<p dir=\"auto\">DeserializationContext does have a method checkUnresolvedObjectId(), which throws the genuine <strong>fatal</strong> unresolved forward references.</p>\n<p dir=\"auto\">All I'm asking is that UnresolvedForwardReference thrown and caught internally are created with writableStackTrace = false, whether that's achieved by supplying new parent constructors to pass the flag up the hierarchy, or creating a new exception type that's only used internally to report a forward reference to be resolved later, It need not be a breaking change, only an internal performance improvement.</p>","resourcePath":"/FasterXML/jackson-databind/issues/3419","createdAt":"2022-03-18T15:59:49Z","labels":{"edges":[{"node":{"name":"2.13"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Implement empty string coercion for StringCollectionDeserializer","url":"https://github.com/FasterXML/jackson-databind/pull/3418","resourcePath":"/FasterXML/jackson-databind/pull/3418","createdAt":"2022-03-17T14:28:57Z","number":3418,"mergeCommit":{"oid":"9f68b5101542c186c61debb7222646c29d6b3c04","message":"Implement empty string coercion for StringCollectionDeserializer (#3418)","commitUrl":"https://github.com/FasterXML/jackson-databind/commit/9f68b5101542c186c61debb7222646c29d6b3c04","parents":{"nodes":[{"oid":"851172ceb14a4c3843df0dabde8a404de4e4a67a","message":"Improve matching of failing tests to be more permissive"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/deser/std/CollectionDeserializer.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/deser/std/StringCollectionDeserializer.java"}},{"node":{"changeType":"ADDED","path":"src/test/java/com/fasterxml/jackson/databind/deser/std/EmptyStringAsSingleValueTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAC5e2c40mif72gAoNDNhMWI3ZGFiMGUwNjE5NzY0MjY2Mzg0YWYyMDk4NTFkZDVlNzgzNA","url":"https://github.com/FasterXML/jackson-databind/pull/3418/commits/43a1b7dab0e0619764266384af209851dd5e7834"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":513,"url":"https://github.com/FasterXML/jackson-dataformat-xml/issues/513","title":"Empty list incorrectly deserialized when `ACCEPT_SINGLE_VALUE_AS_ARRAY` is enabled","bodyHTML":"<p dir=\"auto\">When <code class=\"notranslate\">ACCEPT_SINGLE_VALUE_AS_ARRAY</code> is enabled, an empty <code class=\"notranslate\">List&lt;String&gt;</code> is incorrectly deserialized as a list containing a single empty string (<code class=\"notranslate\">List.of(\"\")</code>). Test case:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import com.fasterxml.jackson.core.JsonProcessingException;\nimport com.fasterxml.jackson.core.type.TypeReference;\nimport com.fasterxml.jackson.databind.DeserializationFeature;\nimport com.fasterxml.jackson.dataformat.xml.XmlMapper;\nimport org.junit.Assert;\nimport org.junit.Test;\n\nimport java.util.List;\n\npublic class EmptyElementTest {\n    @Test\n    public void test() throws JsonProcessingException {\n        XmlMapper mapper = new XmlMapper();\n        mapper.enable(DeserializationFeature.ACCEPT_SINGLE_VALUE_AS_ARRAY);\n        List&lt;String&gt; list = mapper.readValue(&quot;&lt;values/&gt;&quot;, new TypeReference&lt;List&lt;String&gt;&gt;() {});\n        Assert.assertTrue(list.isEmpty());\n    }\n}\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">JsonProcessingException</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">core</span>.<span class=\"pl-s1\">type</span>.<span class=\"pl-s1\">TypeReference</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">DeserializationFeature</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">dataformat</span>.<span class=\"pl-s1\">xml</span>.<span class=\"pl-s1\">XmlMapper</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Assert</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">List</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">EmptyElementTest</span> {\n    <span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">test</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">JsonProcessingException</span> {\n        <span class=\"pl-smi\">XmlMapper</span> <span class=\"pl-s1\">mapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">XmlMapper</span>();\n        <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">enable</span>(<span class=\"pl-smi\">DeserializationFeature</span>.<span class=\"pl-c1\">ACCEPT_SINGLE_VALUE_AS_ARRAY</span>);\n        <span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">list</span> = <span class=\"pl-s1\">mapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s\">\"&lt;values/&gt;\"</span>, <span class=\"pl-k\">new</span> <span class=\"pl-smi\">TypeReference</span>&lt;<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt;&gt;() {});\n        <span class=\"pl-s1\">Assert</span>.<span class=\"pl-en\">assertTrue</span>(<span class=\"pl-s1\">list</span>.<span class=\"pl-en\">isEmpty</span>());\n    }\n}</pre></div>\n<p dir=\"auto\">This is technically correct behavior, because <code class=\"notranslate\">&lt;values/&gt;</code> can be deserialized as an empty string, which can then be wrapped in a list. However imo this should still be fixed.</p>\n<p dir=\"auto\">Looking at the code, the issue is in databind <code class=\"notranslate\">StringCollectionDeserializer</code>. For the test case, <code class=\"notranslate\">isExpectedStartArrayToken</code> returns false, which triggers the <code class=\"notranslate\">handleNonArray</code> logic. This logic checks for the <code class=\"notranslate\">ACCEPT_SINGLE_VALUE_AS_ARRAY</code> <em>first</em>, before trying to coerce the empty string to a list, which would succeed here.</p>\n<p dir=\"auto\">I see two approaches to fix this. Either change <code class=\"notranslate\">FromXmlParser.isExpectedStartArrayToken</code> to return <code class=\"notranslate\">true</code> for an empty string token, or change <code class=\"notranslate\">StringCollectionDeserializer</code> to attempt a coercion from empty string <em>before</em> wrapping the value. imo the former should work fine.</p>\n<p dir=\"auto\">I can work on a fix for this once my corp CLA is cleared, which will be soon(tm).</p>","resourcePath":"/FasterXML/jackson-dataformat-xml/issues/513","createdAt":"2022-03-09T10:44:49Z","labels":{"edges":[]}}}]}}}},{"repository":{"pullRequest":{"title":"Return `new Object()` as default value for \"empty\" for `java.lang.Object`","url":"https://github.com/FasterXML/jackson-databind/pull/3490","resourcePath":"/FasterXML/jackson-databind/pull/3490","createdAt":"2022-05-18T15:50:09Z","number":3490,"mergeCommit":null,"potentialMergeCommit":{"oid":"d96f44a76372924adb8a8115725abd7e88508e9a","message":"Merge d6d421cb36e9130c5fe683b2b4672cd468bb6557 into 6e6da8603f84c0af090f09d1c54337a78ac4521a","commitUrl":"https://github.com/FasterXML/jackson-databind/commit/d96f44a76372924adb8a8115725abd7e88508e9a","parents":{"nodes":[{"oid":"6e6da8603f84c0af090f09d1c54337a78ac4521a","message":"Remove debug statement from test (accidentally left); add a comment"},{"oid":"d6d421cb36e9130c5fe683b2b4672cd468bb6557","message":"fix #3489\n\nI've added the empty value to the Object deserializer in maps as `new Object();`."}]}},"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/databind/deser/filter/NullConversionsForContentTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAC5e2c44CYLS2gAoZDZkNDIxY2IzNmU5MTMwYzVmZTY4M2IyYjQ2NzJjZDQ2OGJiNjU1Nw","url":"https://github.com/FasterXML/jackson-databind/pull/3490/commits/d6d421cb36e9130c5fe683b2b4672cd468bb6557"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":3489,"url":"https://github.com/FasterXML/jackson-databind/issues/3489","title":"`Nulls.AS_EMPTY` returns null in `java.lang.Object`","bodyHTML":"<p dir=\"auto\"><strong>Describe the bug</strong><br>\nWhen I'm using <code class=\"notranslate\">JsonSetter.Value.forValueNulls(Nulls.AS_EMPTY, Nulls.AS_EMPTY)</code> for nullable value with type <code class=\"notranslate\">java.lang.Object</code> in a Map, I still getting the null in the deserialized object. I think that problem is that <a href=\"https://github.com/FasterXML/jackson-databind/blob/3be614716f4736867379345c6febbc0c3898050f/src/main/java/com/fasterxml/jackson/databind/deser/std/UntypedObjectDeserializer.java#L659\"><code class=\"notranslate\">com.fasterxml.jackson.databind.deser.std.UntypedObjectDeserializer.Vanilla</code></a> doesn't override <a href=\"https://github.com/FasterXML/jackson-databind/blob/3be614716f4736867379345c6febbc0c3898050f/src/main/java/com/fasterxml/jackson/databind/JsonDeserializer.java#L375\"><code class=\"notranslate\">com.fasterxml.jackson.databind.JsonDeserializer#getEmptyValue(com.fasterxml.jackson.databind.DeserializationContext)</code></a>. I think that the deserializer for object should return empty object in the <code class=\"notranslate\">getEmptyValue</code> method.</p>\n<p dir=\"auto\"><strong>Version information</strong><br>\n2.13.2.2</p>\n<p dir=\"auto\"><strong>To Reproduce</strong><br>\nIf you have a way to reproduce this with:</p>\n<ol dir=\"auto\">\n<li>Create a JSON, like this:</li>\n</ol>\n<div class=\"highlight highlight-source-json notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"{\n  &quot;a&quot;: {\n    &quot;first&quot;: &quot;second&quot;,\n    &quot;third&quot;: null\n  }\n}\"><pre>{\n  <span class=\"pl-ent\">\"a\"</span>: {\n    <span class=\"pl-ent\">\"first\"</span>: <span class=\"pl-s\"><span class=\"pl-pds\">\"</span>second<span class=\"pl-pds\">\"</span></span>,\n    <span class=\"pl-ent\">\"third\"</span>: <span class=\"pl-c1\">null</span>\n  }\n}</pre></div>\n<ol start=\"2\" dir=\"auto\">\n<li>Create this class to deserialize with:</li>\n</ol>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import java.util.Map;\n\npublic class Scratch {\n    private Map&lt;String, Object&gt; a;\n\n    public Map&lt;String, Object&gt; getA() {\n        return a;\n    }\n\n    public void setA(Map&lt;String, Object&gt; a) {\n        this.a = a;\n    }\n}\n\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">Map</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">Scratch</span> {\n    <span class=\"pl-k\">private</span> <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">a</span>;\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-en\">getA</span>() {\n        <span class=\"pl-k\">return</span> <span class=\"pl-s1\">a</span>;\n    }\n\n    <span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">setA</span>(<span class=\"pl-smi\">Map</span>&lt;<span class=\"pl-smi\">String</span>, <span class=\"pl-smi\">Object</span>&gt; <span class=\"pl-s1\">a</span>) {\n        <span class=\"pl-smi\">this</span>.<span class=\"pl-s1\">a</span> = <span class=\"pl-s1\">a</span>;\n    }\n}</pre></div>\n<ol start=\"3\" dir=\"auto\">\n<li>Create the <code class=\"notranslate\">ObjectMapper</code> and override nullable behavior:</li>\n</ol>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        final ObjectMapper objectMapper = new ObjectMapper();\n        objectMapper.configOverride(Map.class).setSetterInfo(JsonSetter.Value.forValueNulls(Nulls.AS_EMPTY, Nulls.AS_EMPTY));\"><pre>        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">objectMapper</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n        <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">configOverride</span>(<span class=\"pl-smi\">Map</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">setSetterInfo</span>(<span class=\"pl-smi\">JsonSetter</span>.<span class=\"pl-s1\">Value</span>.<span class=\"pl-en\">forValueNulls</span>(<span class=\"pl-smi\">Nulls</span>.<span class=\"pl-c1\">AS_EMPTY</span>, <span class=\"pl-smi\">Nulls</span>.<span class=\"pl-c1\">AS_EMPTY</span>));</pre></div>\n<ol start=\"4\" dir=\"auto\">\n<li>Deserialize this JSON:</li>\n</ol>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        String json = &quot;...&quot;;\n        final Scratch scratch = objectMapper.readValue(json, Scratch.class);\"><pre>        <span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s\">\"...\"</span>;\n        <span class=\"pl-k\">final</span> <span class=\"pl-smi\">Scratch</span> <span class=\"pl-s1\">scratch</span> = <span class=\"pl-s1\">objectMapper</span>.<span class=\"pl-en\">readValue</span>(<span class=\"pl-s1\">json</span>, <span class=\"pl-smi\">Scratch</span>.<span class=\"pl-s1\">class</span>);</pre></div>\n<ol start=\"5\" dir=\"auto\">\n<li>Verify that in the <code class=\"notranslate\">a</code> object we got a <code class=\"notranslate\">null</code> in the <code class=\"notranslate\">third</code> key:</li>\n</ol>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"        final Object third = scratch.getA().get(&quot;third&quot;);\n        assert third != null; // fails\"><pre class=\"notranslate\"><code>        final Object third = scratch.getA().get(\"third\");\n        assert third != null; // fails\n</code></pre></div>\n<p dir=\"auto\"><strong>Expected behavior</strong><br>\nI'm expecting that the empty value of the <code class=\"notranslate\">java.lang.Object</code> is a new Object instance.</p>","resourcePath":"/FasterXML/jackson-databind/issues/3489","createdAt":"2022-05-18T14:28:38Z","labels":{"edges":[{"node":{"name":"to-evaluate"}}]}}}]}}}}]