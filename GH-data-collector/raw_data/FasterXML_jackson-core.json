[{"repository":{"pullRequest":{"title":"Implement #661: change `JacksonException` (and all its subtypes) to unchecked","url":"https://github.com/FasterXML/jackson-core/pull/666","resourcePath":"/FasterXML/jackson-core/pull/666","createdAt":"2021-01-20T04:33:48Z","number":666,"mergeCommit":{"oid":"491b6d94e5d0d6713d0f4e97cb17a70b6cefeb29","message":"Implement #661: change `JacksonException` (and all its subtypes) to unchecked (#666)\n\nChange `JacksonException` to extend `RuntimeException`; make necessary API changes wrt `IOException`.","commitUrl":"https://github.com/FasterXML/jackson-core/commit/491b6d94e5d0d6713d0f4e97cb17a70b6cefeb29","parents":{"nodes":[{"oid":"66bc016c322919952e8ddfa813a2b00a74011cd3","message":"Clean up last couple of javadoc warnings from 3.0 jackson-core as well"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/json/TestDecorators.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/json/UTF8DataInputJsonParserTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/read/NumberParsingTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/read/ParserScopeMatchingTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/read/UTF32ParseTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/util/TestDelegates.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/write/GeneratorBasicTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/write/ObjectWriteTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/write/PrettyPrinterTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/failing/filter/BasicParserFilteringTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NTU3OTQxMDM5OjlmMDY5ODE3NTZkOGE3ZTI4NDQ4NzZmYWJiNzRmOGYwZDY0MDQyNWQ=","url":"https://github.com/FasterXML/jackson-core/pull/666/commits/9f06981756d8a7e2844876fabb74f8f0d640425d"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":661,"url":"https://github.com/FasterXML/jackson-core/issues/661","title":"Replace checked `JsonProcessingException` with unchecked `JacksonException`","bodyHTML":"<p dir=\"auto\">As described in more detail under <a href=\"https://github.com/FasterXML/jackson-future-ideas/wiki/JSTEP-4\">JSTEP-4</a>, it'd be good to change existing Jackson exception hierarchy (now based on <code class=\"notranslate\">JacksonException</code>, added in 2.12) to extend unchecked <code class=\"notranslate\">RuntimeException</code> instead of checked <code class=\"notranslate\">IOException</code>. This is a major backwards-incompatible change and will need to go in Jackson 3.0.</p>","resourcePath":"/FasterXML/jackson-core/issues/661","createdAt":"2021-01-12T04:01:33Z","labels":{"edges":[{"node":{"name":"3.x"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Skip RS CTRL-CHAR to support JSON Text Sequences","url":"https://github.com/FasterXML/jackson-core/pull/634","resourcePath":"/FasterXML/jackson-core/pull/634","createdAt":"2020-07-28T09:37:01Z","number":634,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/core/base/ParserMinimalBase.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NDU3Njg5NjI4OjkwM2E3N2E2YTdhY2ZkNDNkZGFhOTgzY2UwOTg3OTBlNmRlYjVmZDY=","url":"https://github.com/FasterXML/jackson-core/pull/634/commits/903a77a6a7acfd43ddaa983ce098790e6deb5fd6"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":633,"url":"https://github.com/FasterXML/jackson-core/issues/633","title":"Skip RS CTRL-CHAR to support JSON Text Sequences","bodyHTML":"<p dir=\"auto\">Currently jackson supports reading newline-delimited json such as <a href=\"http://jsonlines.org/\" rel=\"nofollow\">JSON Lines</a> and <a href=\"https://github.com/ndjson/ndjson-spec\">NDJSON</a>, see <a class=\"issue-link js-issue-link\" data-error-text=\"Failed to load title\" data-id=\"166328792\" data-permission-text=\"Title is private\" data-url=\"https://github.com/FasterXML/jackson-databind/issues/1304\" data-hovercard-type=\"issue\" data-hovercard-url=\"/FasterXML/jackson-databind/issues/1304/hovercard\" href=\"https://github.com/FasterXML/jackson-databind/issues/1304\">FasterXML/jackson-databind#1304</a>.<br>\nThere is a proposed standard RFC7464 call <a href=\"https://tools.ietf.org/html/rfc7464\" rel=\"nofollow\">JSON Text Sequences</a>, it's similar to newline-delimited json by add a leading RS CTRL-CHAR which is not accepted by jackson.</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"com.fasterxml.jackson.core.JsonParseException: Illegal character ((CTRL-CHAR, code 30)): only regular white space (\\r, \\n, \\t) is allowed between tokens\n at [Source: (String)&quot;�{&quot;name&quot;:&quot;name1&quot;}\n�{&quot;name&quot;:&quot;name2&quot;}\n&quot;; line: 1, column: 2]\n\tat com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1851)\n\tat com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:707)\n\tat com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(ParserMinimalBase.java:685)\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipWSOrEnd(ReaderBasedJsonParser.java:2397)\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:672)\n\tat com.fasterxml.jackson.databind.ObjectReader.readValues(ObjectReader.java:1898)\"><pre class=\"notranslate\"><code>com.fasterxml.jackson.core.JsonParseException: Illegal character ((CTRL-CHAR, code 30)): only regular white space (\\r, \\n, \\t) is allowed between tokens\n at [Source: (String)\"�{\"name\":\"name1\"}\n�{\"name\":\"name2\"}\n\"; line: 1, column: 2]\n\tat com.fasterxml.jackson.core.JsonParser._constructError(JsonParser.java:1851)\n\tat com.fasterxml.jackson.core.base.ParserMinimalBase._reportError(ParserMinimalBase.java:707)\n\tat com.fasterxml.jackson.core.base.ParserMinimalBase._throwInvalidSpace(ParserMinimalBase.java:685)\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser._skipWSOrEnd(ReaderBasedJsonParser.java:2397)\n\tat com.fasterxml.jackson.core.json.ReaderBasedJsonParser.nextToken(ReaderBasedJsonParser.java:672)\n\tat com.fasterxml.jackson.databind.ObjectReader.readValues(ObjectReader.java:1898)\n</code></pre></div>\n<p dir=\"auto\">It would be nice if jackson simply treat RS as \"\\t\" be default or <code class=\"notranslate\">JsonReadFeature.ALLOW_UNESCAPED_CONTROL_CHARS</code> enabled.<br>\nhere is test case:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"import static org.junit.Assert.assertEquals;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.junit.Test;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.MappingIterator;\nimport com.fasterxml.jackson.databind.ObjectMapper;\n\npublic class JSONTextSequencesTest {\n\n\t@Test\n\tpublic void test() throws Exception {\n\t\tString json = &quot;\\u001E{\\&quot;name\\&quot;:\\&quot;name1\\&quot;}\\n\\u001E{\\&quot;name\\&quot;:\\&quot;name2\\&quot;}\\n&quot;;\n\t\tObjectMapper om = new ObjectMapper();\n\t\tMappingIterator&lt;JsonNode&gt; it = om.readerFor(JsonNode.class).readValues(json);\n\t\tList&lt;String&gt; names = new ArrayList&lt;&gt;();\n\t\twhile (it.hasNext())\n\t\t\tnames.add(it.next().get(&quot;name&quot;).asText());\n\t\tassertEquals(2, names.size());\n\t\tassertEquals(&quot;name1&quot;, names.get(0));\n\t\tassertEquals(&quot;name2&quot;, names.get(1));\n\t}\n\n}\n\"><pre><span class=\"pl-k\">import</span> <span class=\"pl-k\">static</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Assert</span>.<span class=\"pl-s1\">assertEquals</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">ArrayList</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">java</span>.<span class=\"pl-s1\">util</span>.<span class=\"pl-s1\">List</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">org</span>.<span class=\"pl-s1\">junit</span>.<span class=\"pl-s1\">Test</span>;\n\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">JsonNode</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">MappingIterator</span>;\n<span class=\"pl-k\">import</span> <span class=\"pl-s1\">com</span>.<span class=\"pl-s1\">fasterxml</span>.<span class=\"pl-s1\">jackson</span>.<span class=\"pl-s1\">databind</span>.<span class=\"pl-s1\">ObjectMapper</span>;\n\n<span class=\"pl-k\">public</span> <span class=\"pl-k\">class</span> <span class=\"pl-smi\">JSONTextSequencesTest</span> {\n\n\t<span class=\"pl-c1\">@</span><span class=\"pl-c1\">Test</span>\n\t<span class=\"pl-k\">public</span> <span class=\"pl-smi\">void</span> <span class=\"pl-en\">test</span>() <span class=\"pl-k\">throws</span> <span class=\"pl-smi\">Exception</span> {\n\t\t<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">json</span> = <span class=\"pl-s\">\"\\u001E{\\\"name\\\":\\\"name1\\\"}\\n\\u001E{\\\"name\\\":\\\"name2\\\"}\\n\"</span>;\n\t\t<span class=\"pl-smi\">ObjectMapper</span> <span class=\"pl-s1\">om</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ObjectMapper</span>();\n\t\t<span class=\"pl-smi\">MappingIterator</span>&lt;<span class=\"pl-smi\">JsonNode</span>&gt; <span class=\"pl-s1\">it</span> = <span class=\"pl-s1\">om</span>.<span class=\"pl-en\">readerFor</span>(<span class=\"pl-smi\">JsonNode</span>.<span class=\"pl-s1\">class</span>).<span class=\"pl-en\">readValues</span>(<span class=\"pl-s1\">json</span>);\n\t\t<span class=\"pl-smi\">List</span>&lt;<span class=\"pl-smi\">String</span>&gt; <span class=\"pl-s1\">names</span> = <span class=\"pl-k\">new</span> <span class=\"pl-smi\">ArrayList</span>&lt;&gt;();\n\t\t<span class=\"pl-k\">while</span> (<span class=\"pl-s1\">it</span>.<span class=\"pl-en\">hasNext</span>())\n\t\t\t<span class=\"pl-s1\">names</span>.<span class=\"pl-en\">add</span>(<span class=\"pl-s1\">it</span>.<span class=\"pl-en\">next</span>().<span class=\"pl-en\">get</span>(<span class=\"pl-s\">\"name\"</span>).<span class=\"pl-en\">asText</span>());\n\t\t<span class=\"pl-en\">assertEquals</span>(<span class=\"pl-c1\">2</span>, <span class=\"pl-s1\">names</span>.<span class=\"pl-en\">size</span>());\n\t\t<span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s\">\"name1\"</span>, <span class=\"pl-s1\">names</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-c1\">0</span>));\n\t\t<span class=\"pl-en\">assertEquals</span>(<span class=\"pl-s\">\"name2\"</span>, <span class=\"pl-s1\">names</span>.<span class=\"pl-en\">get</span>(<span class=\"pl-c1\">1</span>));\n\t}\n\n}</pre></div>","resourcePath":"/FasterXML/jackson-core/issues/633","createdAt":"2020-07-28T09:12:59Z","labels":{"edges":[{"node":{"name":"hacktoberfest"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Allow TokenFilter to preserve empty","url":"https://github.com/FasterXML/jackson-core/pull/729","resourcePath":"/FasterXML/jackson-core/pull/729","createdAt":"2021-12-16T14:54:26Z","number":729,"mergeCommit":{"oid":"8bed4d83620424264f3339d5d9c808f7279d97a5","message":"Allow TokenFilter to preserve empty (#729)\n\nThis creates two new method on `TokenFilter` which you can override to\r\ndecide if empty arrays and objects should be included or excluded. \r\n\r\nCloses #715","commitUrl":"https://github.com/FasterXML/jackson-core/commit/8bed4d83620424264f3339d5d9c808f7279d97a5","parents":{"nodes":[{"oid":"e302dd8afbf2cdc61d8c9d8db17ff70fd9922f82","message":"Merge branch '2.13' into 2.14"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/BaseTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAC5a084v9CPW2gAoODFlYzg3MTc2YmVmYTA0YjE5ZjMyNzE1ODZkYjYxMTk2NmU5OWNiNA","url":"https://github.com/FasterXML/jackson-core/pull/729/commits/81ec87176befa04b19f3271586db611966e99cb4"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":715,"url":"https://github.com/FasterXML/jackson-core/issues/715","title":"Allow `TokenFilter`s to keep empty arrays and objects","bodyHTML":"<p dir=\"auto\">Include version information for Jackson version you use: We use 2.10.4 but 2.13 doesn't support this either</p>\n<p dir=\"auto\">Maybe this is possible in a way I don't know about, but I was hoping I could write a <code class=\"notranslate\">TokenFilter</code> that could preserve empty arrays and objects. It looks like now if a <code class=\"notranslate\">TokenFilter#includeProperty</code> doesn't return <code class=\"notranslate\">INCLUDE_ALL</code> for an empty array then the array is removed. I'd love it if the <code class=\"notranslate\">TokenFilter</code> could make that choice- maybe something like adding this to <code class=\"notranslate\">TokenFilter</code>:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    public boolean includeEmptyArray(boolean contentsFiltered) throws IOException {\n        return false;\n    }\"><pre class=\"notranslate\"><code>    public boolean includeEmptyArray(boolean contentsFiltered) throws IOException {\n        return false;\n    }\n</code></pre></div>\n<p dir=\"auto\">There is already a <code class=\"notranslate\">filterFinishArray</code> but I don't think I can control the underlying filter with it. And I'm not sure if I can tell if the filter has filtered the contents of the array or not.</p>","resourcePath":"/FasterXML/jackson-core/issues/715","createdAt":"2021-09-10T21:22:50Z","labels":{"edges":[{"node":{"name":"2.14"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Allow TokenFilter to preserve empty","url":"https://github.com/FasterXML/jackson-core/pull/716","resourcePath":"/FasterXML/jackson-core/pull/716","createdAt":"2021-09-12T17:44:05Z","number":716,"mergeCommit":null,"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/core/filter/FilteringParserDelegate.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/core/filter/TokenFilter.java"}},{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/core/filter/TokenFilterContext.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/BaseTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/filter/BasicGeneratorFilteringTest.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/filter/BasicParserFilteringTest.java"}}]},"commits":{"edges":[{"node":{"id":"MDE3OlB1bGxSZXF1ZXN0Q29tbWl0NzMyMjAwMzgzOjVkYmZkNWUzODIwMDVlMjhjNzllYzhjMTU0MzRhNDk4NDFiODJmYzc=","url":"https://github.com/FasterXML/jackson-core/pull/716/commits/5dbfd5e382005e28c79ec8c15434a49841b82fc7"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":715,"url":"https://github.com/FasterXML/jackson-core/issues/715","title":"Allow `TokenFilter`s to keep empty arrays and objects","bodyHTML":"<p dir=\"auto\">Include version information for Jackson version you use: We use 2.10.4 but 2.13 doesn't support this either</p>\n<p dir=\"auto\">Maybe this is possible in a way I don't know about, but I was hoping I could write a <code class=\"notranslate\">TokenFilter</code> that could preserve empty arrays and objects. It looks like now if a <code class=\"notranslate\">TokenFilter#includeProperty</code> doesn't return <code class=\"notranslate\">INCLUDE_ALL</code> for an empty array then the array is removed. I'd love it if the <code class=\"notranslate\">TokenFilter</code> could make that choice- maybe something like adding this to <code class=\"notranslate\">TokenFilter</code>:</p>\n<div class=\"snippet-clipboard-content notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"    public boolean includeEmptyArray(boolean contentsFiltered) throws IOException {\n        return false;\n    }\"><pre class=\"notranslate\"><code>    public boolean includeEmptyArray(boolean contentsFiltered) throws IOException {\n        return false;\n    }\n</code></pre></div>\n<p dir=\"auto\">There is already a <code class=\"notranslate\">filterFinishArray</code> but I don't think I can control the underlying filter with it. And I'm not sure if I can tell if the filter has filtered the contents of the array or not.</p>","resourcePath":"/FasterXML/jackson-core/issues/715","createdAt":"2021-09-10T21:22:50Z","labels":{"edges":[{"node":{"name":"2.14"}}]}}}]}}}},{"repository":{"pullRequest":{"title":"Add appendIndex and appendProperty methods","url":"https://github.com/FasterXML/jackson-core/pull/722","resourcePath":"/FasterXML/jackson-core/pull/722","createdAt":"2021-10-17T17:10:49Z","number":722,"mergeCommit":{"oid":"f45d03502f4252378f33a388445f7307c3ddf539","message":"Add appendIndex and appendProperty methods (#722)","commitUrl":"https://github.com/FasterXML/jackson-core/commit/f45d03502f4252378f33a388445f7307c3ddf539","parents":{"nodes":[{"oid":"f9f568a7d845a0fa6b32f0c2c60d70bbe3e2b650","message":"Merge branch '2.13' into 2.14"}]}},"potentialMergeCommit":null,"files":{"edges":[{"node":{"changeType":"MODIFIED","path":"src/main/java/com/fasterxml/jackson/core/JsonPointer.java"}},{"node":{"changeType":"MODIFIED","path":"src/test/java/com/fasterxml/jackson/core/TestJsonPointer.java"}}]},"commits":{"edges":[{"node":{"id":"PURC_lADOAC5a084tSshi2gAoNzZmOTI4YWZjYWUwNzQ5OGMyNmNmMjQ1NGRiMjU0ZDk1MjJkYjJjYQ","url":"https://github.com/FasterXML/jackson-core/pull/722/commits/76f928afcae07498c26cf2454db254d9522db2ca"}}]},"closingIssuesReferences":{"edges":[{"node":{"number":684,"url":"https://github.com/FasterXML/jackson-core/issues/684","title":"Add \"JsonPointer#appendProperty\" and \"JsonPointer#appendIndex\"","bodyHTML":"<p dir=\"auto\">When working heavily with JsonPointers, the following patterns usually emerges:</p>\n<div class=\"highlight highlight-source-java notranslate position-relative overflow-auto\" data-snippet-clipboard-copy-content=\"JsonPointer root = JsonPointer.compile(&quot;/a/b&quot;);\n/// ... code\nString property = &quot;c&quot;\nroot.append(JsonPointer.compile(&quot;/&quot; + property));\n/// or\nJsonPointer.compile(root + &quot;/&quot; + property)\"><pre><span class=\"pl-smi\">JsonPointer</span> <span class=\"pl-s1\">root</span> = <span class=\"pl-s1\">JsonPointer</span>.<span class=\"pl-en\">compile</span>(<span class=\"pl-s\">\"/a/b\"</span>);\n<span class=\"pl-c\">/// ... code</span>\n<span class=\"pl-smi\">String</span> <span class=\"pl-s1\">property</span> = <span class=\"pl-s\">\"c\"</span>\n<span class=\"pl-s1\">root</span>.<span class=\"pl-en\">append</span>(<span class=\"pl-s1\">JsonPointer</span>.<span class=\"pl-en\">compile</span>(<span class=\"pl-s\">\"/\"</span> + <span class=\"pl-s1\">property</span>));\n<span class=\"pl-c\">/// or</span>\n<span class=\"pl-s1\">JsonPointer</span>.<span class=\"pl-en\">compile</span>(<span class=\"pl-s1\">root</span> + <span class=\"pl-s\">\"/\"</span> + <span class=\"pl-s1\">property</span>)</pre></div>\n<p dir=\"auto\">This is quite verbose, also a bit error prone, because it is easy to forget to add the <code class=\"notranslate\">/</code> before each append.</p>\n<p dir=\"auto\">Also, I found no easy way of appending slash characters without prior escaping.</p>\n<p dir=\"auto\">So the two methods proposed should help with both convenience and some edge cases. The only thing that worries me is overusing/misusing this methods. Jackson JsonPointer is <code class=\"notranslate\">head centric</code>, appending to the tail is expensive, so maybe documenting a warning should be good?</p>\n<p dir=\"auto\">I will open a PR when I get some free time. <a href=\"https://github.com/LouizFC/path-segment\">I did a similar thing in the past</a>, so I think I can probably reuse the tests from there.</p>","resourcePath":"/FasterXML/jackson-core/issues/684","createdAt":"2021-03-10T17:58:04Z","labels":{"edges":[{"node":{"name":"2.14"}}]}}}]}}}}]